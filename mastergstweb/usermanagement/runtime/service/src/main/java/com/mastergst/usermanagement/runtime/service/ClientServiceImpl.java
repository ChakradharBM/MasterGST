/*
 * Copyright (c) 2017, BVM Solutions  and/or its affiliates. All rights reserved.
 *
 */
package com.mastergst.usermanagement.runtime.service;

import static com.mastergst.core.common.MasterGSTConstants.ADVANCES;
import static com.mastergst.core.common.MasterGSTConstants.ANX1;
import static com.mastergst.core.common.MasterGSTConstants.ATA;
import static com.mastergst.core.common.MasterGSTConstants.ATPAID;
import static com.mastergst.core.common.MasterGSTConstants.B2B;
import static com.mastergst.core.common.MasterGSTConstants.B2BA;
import static com.mastergst.core.common.MasterGSTConstants.B2BUR;
import static com.mastergst.core.common.MasterGSTConstants.B2C;
import static com.mastergst.core.common.MasterGSTConstants.B2CL;
import static com.mastergst.core.common.MasterGSTConstants.B2CLA;
import static com.mastergst.core.common.MasterGSTConstants.B2CSA;
import static com.mastergst.core.common.MasterGSTConstants.BEGIN;
import static com.mastergst.core.common.MasterGSTConstants.CDNA;
import static com.mastergst.core.common.MasterGSTConstants.CDNUR;
import static com.mastergst.core.common.MasterGSTConstants.CDNURA;
import static com.mastergst.core.common.MasterGSTConstants.CREDIT_DEBIT_NOTES;
import static com.mastergst.core.common.MasterGSTConstants.END;
import static com.mastergst.core.common.MasterGSTConstants.EXPA;
import static com.mastergst.core.common.MasterGSTConstants.EXPORTS;
import static com.mastergst.core.common.MasterGSTConstants.GSTR1;
import static com.mastergst.core.common.MasterGSTConstants.GSTR1A;
import static com.mastergst.core.common.MasterGSTConstants.GSTR2;
import static com.mastergst.core.common.MasterGSTConstants.GSTR2A;
import static com.mastergst.core.common.MasterGSTConstants.GSTR2B;
import static com.mastergst.core.common.MasterGSTConstants.GSTR3B;
import static com.mastergst.core.common.MasterGSTConstants.GSTR4;
import static com.mastergst.core.common.MasterGSTConstants.GSTR5;
import static com.mastergst.core.common.MasterGSTConstants.GSTR6;
import static com.mastergst.core.common.MasterGSTConstants.IMP_GOODS;
import static com.mastergst.core.common.MasterGSTConstants.IMP_SERVICES;
import static com.mastergst.core.common.MasterGSTConstants.ITC_REVERSAL;
import static com.mastergst.core.common.MasterGSTConstants.NIL;
import static com.mastergst.core.common.MasterGSTConstants.PENDING;
import static com.mastergst.core.common.MasterGSTConstants.PURCHASE_REGISTER;
import static com.mastergst.core.common.MasterGSTConstants.TXPA;
import static com.mastergst.core.util.NullUtil.isEmpty;
import static com.mastergst.core.util.NullUtil.isNotEmpty;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.ss.usermodel.DateUtil;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.gridfs.GridFsOperations;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.mastergst.configuration.service.ConfigService;
import com.mastergst.configuration.service.CountryConfig;
import com.mastergst.configuration.service.HSNRepository;
import com.mastergst.configuration.service.ReconcileTemp;
import com.mastergst.configuration.service.ReconcileTempRepository;
import com.mastergst.configuration.service.StateConfig;
import com.mastergst.configuration.service.StateRepository;
import com.mastergst.configuration.service.UQCConfig;
import com.mastergst.configuration.service.UQCRepository;
import com.mastergst.core.common.AccountConstants;
import com.mastergst.core.common.MasterGSTConstants;
import com.mastergst.core.domain.Base;
import com.mastergst.core.exception.MasterGSTException;
import com.mastergst.core.util.NullUtil;
import com.mastergst.login.runtime.domain.HeaderKeys;
import com.mastergst.login.runtime.domain.User;
import com.mastergst.login.runtime.repository.HeaderKeysRepository;
import com.mastergst.login.runtime.repository.UserRepository;
import com.mastergst.login.runtime.service.UserService;
import com.mastergst.usermanagement.runtime.accounting.domain.ByEnterie;
import com.mastergst.usermanagement.runtime.accounting.domain.JournalEntrie;
import com.mastergst.usermanagement.runtime.accounting.domain.ToEnterie;
import com.mastergst.usermanagement.runtime.accounting.util.AccountingJournalsUtils;
import com.mastergst.usermanagement.runtime.dao.Anx2Dao;
import com.mastergst.usermanagement.runtime.dao.DeliveryChallanaDao;
import com.mastergst.usermanagement.runtime.dao.EinvoiceDao;
import com.mastergst.usermanagement.runtime.dao.EstimatesDao;
import com.mastergst.usermanagement.runtime.dao.EwayBillDao;
import com.mastergst.usermanagement.runtime.dao.ExpensesDao;
import com.mastergst.usermanagement.runtime.dao.GSTR2ADao;
import com.mastergst.usermanagement.runtime.dao.GSTR4ADao;
import com.mastergst.usermanagement.runtime.dao.GSTR6ADao;
import com.mastergst.usermanagement.runtime.dao.Gstr1Dao;
import com.mastergst.usermanagement.runtime.dao.Gstr1SortDao;
import com.mastergst.usermanagement.runtime.dao.Gstr2Dao;
import com.mastergst.usermanagement.runtime.dao.Gstr2bDao;
import com.mastergst.usermanagement.runtime.dao.Gstr4Dao;
import com.mastergst.usermanagement.runtime.dao.Gstr5Dao;
import com.mastergst.usermanagement.runtime.dao.Gstr6Dao;
import com.mastergst.usermanagement.runtime.dao.InvoiceDao;
import com.mastergst.usermanagement.runtime.dao.InvoiceDaoFactory;
import com.mastergst.usermanagement.runtime.dao.NewAnx1Dao;
import com.mastergst.usermanagement.runtime.dao.ProformaDao;
import com.mastergst.usermanagement.runtime.dao.PurchageRegisterDao;
import com.mastergst.usermanagement.runtime.dao.PurchageRegisterSortDao;
import com.mastergst.usermanagement.runtime.dao.PurchaseOrderDao;
import com.mastergst.usermanagement.runtime.domain.*;
import com.mastergst.usermanagement.runtime.domain.gstr6.GSTR6;
import com.mastergst.usermanagement.runtime.domain.gstr6.GSTR6DocDetails;
import com.mastergst.usermanagement.runtime.domain.gstr6.GSTR6EligibleDetails;
import com.mastergst.usermanagement.runtime.repository.AccountingJournalRepository;
import com.mastergst.usermanagement.runtime.repository.Anx2Repository;
import com.mastergst.usermanagement.runtime.repository.ClientAddlInfoRepository;
import com.mastergst.usermanagement.runtime.repository.ClientConfigRepository;
import com.mastergst.usermanagement.runtime.repository.ClientRepository;
import com.mastergst.usermanagement.runtime.repository.ClientStatusRepository;
import com.mastergst.usermanagement.runtime.repository.ClientUserMappingRepository;
import com.mastergst.usermanagement.runtime.repository.CompanyCustomersRepository;
import com.mastergst.usermanagement.runtime.repository.CompanySuppliersRepository;
import com.mastergst.usermanagement.runtime.repository.CompanyUserRepository;
import com.mastergst.usermanagement.runtime.repository.CustomFieldsRepository;
import com.mastergst.usermanagement.runtime.repository.DeliveryChallanRepository;
import com.mastergst.usermanagement.runtime.repository.EinvoiceRepository;
import com.mastergst.usermanagement.runtime.repository.EstimatesRepository;
import com.mastergst.usermanagement.runtime.repository.EwayBillConfigurationRepository;
import com.mastergst.usermanagement.runtime.repository.EwayBillRepository;
import com.mastergst.usermanagement.runtime.repository.GSTINPublicDataRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR1ARepository;
import com.mastergst.usermanagement.runtime.repository.GSTR1DeleteRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR1DocumentIssueRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR1Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR2BSupportRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR2Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR3BRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR4Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR5Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR6Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR8Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR9CRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR9Repository;
import com.mastergst.usermanagement.runtime.repository.GSTROffsetLiabilityRepository;
import com.mastergst.usermanagement.runtime.repository.HSNSummaryRepository;
import com.mastergst.usermanagement.runtime.repository.LedgerRepository;
import com.mastergst.usermanagement.runtime.repository.MessagesRepository;
import com.mastergst.usermanagement.runtime.repository.NewAnx1Repository;
import com.mastergst.usermanagement.runtime.repository.OtherConfigurationRepository;
import com.mastergst.usermanagement.runtime.repository.ProformaInvoicesRepository;
import com.mastergst.usermanagement.runtime.repository.PurchaseOrderRepository;
import com.mastergst.usermanagement.runtime.repository.PurchaseRegisterDeleteRepository;
import com.mastergst.usermanagement.runtime.repository.PurchaseRegisterRepository;
import com.mastergst.usermanagement.runtime.repository.RecordPaymentsRepository;
import com.mastergst.usermanagement.runtime.repository.RemindersRepository;
import com.mastergst.usermanagement.runtime.repository.SupplierCommentsRepository;
import com.mastergst.usermanagement.runtime.repository.SupplierStatusRepository;
import com.mastergst.usermanagement.runtime.response.EwayBillItems;
import com.mastergst.usermanagement.runtime.response.EwayBillResponseData;
import com.mastergst.usermanagement.runtime.response.GSTR1AutoLiabilityResponse;
import com.mastergst.usermanagement.runtime.response.LedgerResponse;
import com.mastergst.usermanagement.runtime.response.MisMatchVO;
import com.mastergst.usermanagement.runtime.response.Response;
import com.mastergst.usermanagement.runtime.response.ResponseData;
import com.mastergst.usermanagement.runtime.response.TrackResponse;
import com.mastergst.usermanagement.runtime.support.InvType;
import com.mastergst.usermanagement.runtime.support.Utility;

/**
 * Service interface for Client to perform CRUD operation.
 * 
 * @author BVM Consultancy Services(www.bvmcs.com).
 * @version 1.0
 */
@Service
@Transactional(readOnly = true)
public class ClientServiceImpl implements ClientService {

	private static final Logger logger = LogManager.getLogger(ClientServiceImpl.class.getName());
	private static final String CLASSNAME = "ClientServiceImpl::";
	private static SimpleDateFormat dateFormatOnlyDate = new SimpleDateFormat("dd/MM/yyyy");
	private static String DOUBLE_FORMAT  = "%.2f";
	private static DecimalFormat df2 = new DecimalFormat("#.##");
	
	@Value("${reminder.subscription.before.days}")
	private String subscriptionReminderBeforeDays;
	@Value("${ihub.email}")
	private String ihubemail;
	@Autowired
	private Anx2Repository anx2Repository;
	@Autowired
	private RemindersRepository remindersRepository;
	@Autowired
	private EwayBillRepository ewayBillRepository;
	@Autowired
	private EinvoiceRepository einvoiceRepository;
	@Autowired
	private SupplierCommentsRepository supplierCommentsRepository;
	@Autowired
	private UQCRepository uqcRepository;
	@Autowired
	private EwayBillConfigurationRepository ewayBillConfigurationRepository;
	@Autowired
	private HeaderKeysRepository headerKeysRepository;
	@Autowired
	RecordPaymentsRepository recordPaymentsRepository;
	@Autowired
	private GSTINPublicDataRepository gstinPublicDataRepository;
	@Autowired
	ClientRepository clientRepository;
	@Autowired
	private ClientStatusRepository clientStatusRepository;
	@Autowired
	private ClientConfigRepository clientConfigRepository;
	@Autowired
	ClientUserMappingRepository clientUserMappingRepository;
	@Autowired
	ClientAddlInfoRepository clientAddlInfoRepository;
	@Autowired
	CompanyUserRepository companyUserRepository;
	@Autowired
	CompanyCustomersRepository companyCustomersRepository;
	@Autowired
	GSTR1Repository gstr1Repository;
	@Autowired
	GSTR1ARepository gstr1ARepository;
	@Autowired
	StateRepository stateRepository;
	@Autowired
	GSTR2Repository gstr2Repository;
	@Autowired
	GSTR4Repository gstr4Repository;
	@Autowired
	GSTR5Repository gstr5Repository;
	@Autowired
	GSTR6Repository gstr6Repository;
	@Autowired
	PurchaseRegisterRepository purchaseRepository;
	@Autowired
	GSTR3BRepository gstr3BRepository;
	@Autowired
	GSTR9Repository gstr9Repository;
	@Autowired
	GSTR9CRepository gstr9cRepository;
	@Autowired
	NewAnx1Repository anx1Repository;
	@Autowired
	GSTR1DocumentIssueRepository gstr1DocumentIssueRepository;
	@Autowired
	DeliveryChallanRepository deliverychallanRepository;
	@Autowired
	ProformaInvoicesRepository proformainvoicesRepository;
	@Autowired
	EstimatesRepository estimatesRepository;
	@Autowired
	PurchaseOrderRepository purchaseOrderRepository;
	@Autowired
	GSTROffsetLiabilityRepository gstrOffsetLiabilityRepository;
	@Autowired
	UserService userService;
	@Autowired
	EinvoiceService einvoiceService;
	@Autowired
	ConfigService configService;
	@Autowired
	private ProfileService profileService;
	@Autowired
	IHubConsumerService iHubConsumerService;
	@Autowired
	private SubscriptionService subscriptionService;
	@Autowired
	MongoTemplate mongoTemplate;
	@Autowired
	private MessagesRepository messagesRepository;
	@Autowired
	AccountingJournalRepository accountingJournalRepository;
	@Autowired
	private SupplierStatusRepository supplierStatusRepository;
	@Autowired
	CompanySuppliersRepository companySuppliersRepository;
	@Autowired
	ClientUtils clientUtils;
	@Autowired
	OtherConfigurationRepository otherConfigurationRepository;
	@Autowired
	private GSTR1DowloadService gstr1DowloadService;
	@Autowired
	private GSTR2ADowloadService gstr2ADowloadService;
	@Autowired
	LedgerRepository ledgerRepository;
	@Autowired
	private UserRepository userRepository;
	@Value("${metadata.json.location}")
	private String metadatajsonlocation;
	@Autowired
	private EwayBillDao ewayBillDao;
	@Autowired
	private Gstr1Dao gstr1Dao;
	@Autowired
	private Gstr1SortDao gstr1SortDao;
	@Autowired
	private Gstr2Dao gstr2Dao;
	@Autowired
	private Gstr4Dao gstr4Dao;
	@Autowired
	private	HSNSummaryRepository hsnSummaryRepository;
	@Autowired
	private Gstr5Dao gstr5Dao;
	@Autowired
	private Gstr6Dao gstr6Dao;
	@Autowired
	private GSTR6ADao gstr6aDao;
	@Autowired
	private GSTR4ADao gstr4aDao;
	@Autowired
	private PurchageRegisterDao purchageRegisterDao;
	@Autowired
	private PurchageRegisterSortDao purchageRegisterSortDao;
	@Autowired
	private InvoiceDaoFactory invoiceDaoFactory;
	@Autowired
	private GSTR2ADao gstr2ADao;
	@Autowired
	private ProformaDao proformaDao;
	@Autowired
	private PurchaseOrderDao purchaseOrderDao;
	@Autowired
	private EstimatesDao estimatesDao;
	@Autowired
	private DeliveryChallanaDao deliveryChallanaDao;
	@Autowired
	private ExpensesDao expensesDao;
	@Autowired
	GridFsOperations gridOperations;
	@Autowired
	NewAnx1Dao newAnx1Dao;
	@Autowired
	private Anx2Dao anx2Dao;
	
	@Autowired
	private GSTR8Repository gstr8Repository;
	@Autowired
	private HSNRepository hsnRepository;
	@Autowired
	private ImportInvoiceService importInvoiceService;
	@Autowired
	private CustomFieldsRepository customFieldsRepository;
	@Autowired
	private OtpExpiryService otpExpiryService;
	@Autowired
	private InventoryService inventoryService;
	@Autowired private ReconcileTempRepository reconcileTempRepository;
	@Autowired private GSTR2BSupportRepository gstr2bSupportRepository;
	@Autowired private Gstr2bDao gstr2bDao;
	private DecimalFormat decimalFormat = new DecimalFormat("#0.00");
	@Autowired GSTR1DeleteRepository gstr1DeleteRepository;
	@Autowired PurchaseRegisterDeleteRepository purchaseRegisterDeleteRepository;
	@Autowired private AccountingJournalsUtils accountingJournalsUtils;
	String inputstring = "";
	List<String> pinvList = Lists.newArrayList();
	List<String> gstr2ainvList = Lists.newArrayList();

	@Override
	public HeaderKeys getHeaderkeysGstusername(String gstusername) {
		final String method = "findUseridAndGstusernameHeaderkeys::";
		logger.debug(CLASSNAME + method + BEGIN);
		return headerKeysRepository.findByGstusername(gstusername);
	}
	
	@Override
	public HeaderKeys getHeaderkeysGstusername(String gstusername,String email) {
		final String method = "findUseridAndGstusernameHeaderkeys::";
		logger.debug(CLASSNAME + method + BEGIN);
		return headerKeysRepository.findByGstusernameAndEmail(gstusername,ihubemail);
	}

	@Override
	@Transactional
	public Client saveClient(Client client) {
		final String method = "saveClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		return clientRepository.save(client);
	}

	@Override
	@Transactional
	public Client createClient(Client client, String userid) {
		final String method = "createClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		if (isNotEmpty(client.getGstnnumber())) {
			client.setGstnnumber(client.getGstnnumber().toUpperCase());
		}
		if (isNotEmpty(client.getPannumber())) {
			client.setPannumber(client.getPannumber().toUpperCase());
		}
		Client createdClient = clientRepository.save(client);
		ClientUserMapping clientUserMapping = clientUserMappingRepository.findByUseridAndClientid(userid,createdClient.getId().toString());
		if (isEmpty(clientUserMapping)) {
			clientUserMapping = new ClientUserMapping();
			clientUserMapping.setCreatedBy(userid);
			clientUserMapping.setUserid(userid);
			clientUserMapping.setClientid(createdClient.getId().toString());
			clientUserMappingRepository.save(clientUserMapping);
		}
		User usr = userRepository.findOne(userid);
		if(isNotEmpty(usr)) {
			CompanyUser  companyUser = companyUserRepository.findByEmailAndIsglobal(usr.getEmail(), "true");
			if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getUserid())) {
				ClientUserMapping clientCompanyUserMapping = clientUserMappingRepository.findByUseridAndClientid(companyUser.getUserid(), createdClient.getId().toString());
				if (isEmpty(clientCompanyUserMapping)) {
					clientCompanyUserMapping = new ClientUserMapping();
					clientCompanyUserMapping.setUserid(companyUser.getUserid());
					clientCompanyUserMapping.setClientid(createdClient.getId().toString());
					clientUserMappingRepository.save(clientCompanyUserMapping);
				}
				
			}
		}
		logger.debug(CLASSNAME + method + END);
		return createdClient;
	}

	@Override
	@Transactional
	public Client createClient(Client client, String userid, int month, int year) {
		final String method = "createClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		if (NullUtil.isEmpty(client.getReturnsSummary())) {
			List<String> returntypes = configService.getDealerACL(client.getDealertype());
			returntypes = returntypes.stream().filter(String -> String.startsWith("GSTR")).collect(Collectors.toList());
			logger.debug(CLASSNAME + " createClient:: returntypes\t" + returntypes.toString());
			Calendar cal = Calendar.getInstance();
			cal.set(year, month, 1);
			List<GSTReturnSummary> returnsSummuryList = getGSTReturnsSummary(returntypes, cal.getTime());
			client.setReturnsSummary(returnsSummuryList);
		}
		if (isNotEmpty(client.getGstnnumber())) {
			client.setGstnnumber(client.getGstnnumber().toUpperCase());
		}
		if (isNotEmpty(client.getSignatoryPAN())) {
			client.setSignatoryPAN(client.getSignatoryPAN().toUpperCase());
		}
		Client createdClient = clientRepository.save(client);
		ClientUserMapping clientUserMapping = clientUserMappingRepository.findByUseridAndClientid(userid,createdClient.getId().toString());
		if (isEmpty(clientUserMapping)) {
			clientUserMapping = new ClientUserMapping();
			clientUserMapping.setCreatedBy(userid);
			clientUserMapping.setUserid(userid);
			clientUserMapping.setClientid(createdClient.getId().toString());
			clientUserMappingRepository.save(clientUserMapping);
			User user = userService.getUser(userid);
			while (isNotEmpty(user) && isNotEmpty(user.getParentid())) {
				clientUserMapping = new ClientUserMapping();
				clientUserMapping.setCreatedBy(user.getParentid());
				clientUserMapping.setUserid(user.getParentid());
				clientUserMapping.setClientid(createdClient.getId().toString());
				clientUserMappingRepository.save(clientUserMapping);
				user = userService.getUser(user.getParentid());
			}
		}
		logger.debug(CLASSNAME + method + END);
		return createdClient;
	}

	@Override
	@Transactional
	public Client addBranchInfo(final String clientid, final String name, final String address, final String parentId) {
		final String method = "addBranchInfo::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = findById(clientid);
		if (isNotEmpty(parentId)) {
			if (isNotEmpty(client.getBranches())) {
				ObjectId objId = new ObjectId(parentId);
				logger.debug(CLASSNAME + method + "Adding Sub Branch");
				for (Branch branch : client.getBranches()) {
					if (branch.getId().equals(objId)) {
						Branch subbranch = new Branch();
						subbranch.setName(name);
						subbranch.setAddress(address);
						branch.getSubbranches().add(subbranch);
					}
				}
			}
		} else {
			logger.debug(CLASSNAME + method + "Adding Branch");
			Branch branch = new Branch();
			branch.setName(name);
			branch.setAddress(address);
			client.getBranches().add(branch);
		}
		logger.debug(CLASSNAME + method + END);
		return clientRepository.save(client);
	}

	@Override
	@Transactional
	public Client updateBranchInfo(final String clientid, final String id, final String name, final String address,
			final String parentId) {
		final String method = "updateBranchInfo::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = findById(clientid);
		ObjectId objId = new ObjectId(id);
		if (isNotEmpty(parentId)) {
			if (isNotEmpty(client.getBranches())) {
				ObjectId objParentId = new ObjectId(parentId);
				logger.debug(CLASSNAME + method + "Update Sub Branch");
				for (Branch branch : client.getBranches()) {
					if (branch.getId().equals(objParentId) && isNotEmpty(branch.getSubbranches())) {
						for (Branch subbranch : branch.getSubbranches()) {
							if (subbranch.getId().equals(objId)) {
								subbranch.setName(name);
								subbranch.setAddress(address);
							}
						}
					}
				}
			}
		} else if (isNotEmpty(client.getBranches())) {
			logger.debug(CLASSNAME + method + "Update Branch");
			for (Branch branch : client.getBranches()) {
				if (branch.getId().equals(objId)) {
					if ("Main Branch".equalsIgnoreCase(branch.getName())) {
						client.setAddress(address);
					}
					branch.setName(name);
					branch.setAddress(address);
				}
			}
		}
		logger.debug(CLASSNAME + method + END);
		return clientRepository.save(client);
	}
	
	@Override
	@Transactional
	public Client addCostCenterInfo(final String clientid, final String name, final String parentId) {
		final String method = "addCostcenterInfo::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = findById(clientid);
		if (isNotEmpty(parentId)) {
			if (isNotEmpty(client.getCostCenter())) {
				ObjectId objId = new ObjectId(parentId);
				logger.debug(CLASSNAME + method + "Adding Sub Branch");
				for (CostCenter costcenter : client.getCostCenter()) {
					if (costcenter.getId().equals(objId)) {
						CostCenter subcostcenter = new CostCenter();
						subcostcenter.setName(name);
						costcenter.getSubcostcenter().add(subcostcenter);
					}
				}
			}
		} else {
			logger.debug(CLASSNAME + method + "Adding Branch");
			CostCenter costcenter = new CostCenter();
			costcenter.setName(name);
			client.getCostCenter().add(costcenter);
		}
		logger.debug(CLASSNAME + method + END);
		return clientRepository.save(client);
	}

	@Override
	@Transactional
	public Client updateCostCenterInfo(final String clientid, final String id, final String name, final String parentId) {
		final String method = "updateCostCenterInfo::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = findById(clientid);
		ObjectId objId = new ObjectId(id);
		if (isNotEmpty(parentId)) {
			if (isNotEmpty(client.getCostCenter())) {
				ObjectId objParentId = new ObjectId(parentId);
				logger.debug(CLASSNAME + method + "Update Sub Cost Center");
				for (CostCenter costcenter : client.getCostCenter()) {
					if (costcenter.getId().equals(objParentId) && isNotEmpty(costcenter.getSubcostcenter())) {
						for (CostCenter subcostcenter : costcenter.getSubcostcenter()) {
							if (subcostcenter.getId().equals(objId)) {
								subcostcenter.setName(name);
							}
						}
					}
				}
			}
		} else if (isNotEmpty(client.getCostCenter())) {
			logger.debug(CLASSNAME + method + "Update Cost Center");
			for (CostCenter costcenter : client.getCostCenter()) {
				if (costcenter.getId().equals(objId)) {
					costcenter.setName(name);
				}
			}
		}
		logger.debug(CLASSNAME + method + END);
		return clientRepository.save(client);
	}
	

	@Override
	@Transactional
	public Client addVerticalInfo(final String clientid, final String name, final String address, final String parentId) {
		final String method = "addVerticalInfo::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = findById(clientid);
		if (isNotEmpty(parentId)) {
			if (isNotEmpty(client.getBranches())) {
				ObjectId objId = new ObjectId(parentId);
				logger.debug(CLASSNAME + method + "Adding Sub Vertical");
				for (Vertical vertical : client.getVerticals()) {
					if (vertical.getId().equals(objId)) {
						Vertical subvertical = new Vertical();
						subvertical.setName(name);
						subvertical.setAddress(address);
						vertical.getSubverticals().add(subvertical);
					}
				}
			}
		} else {
			logger.debug(CLASSNAME + method + "Adding Vertical");
			Vertical vertical = new Vertical();
			vertical.setName(name);
			vertical.setAddress(address);
			client.getVerticals().add(vertical);
		}
		logger.debug(CLASSNAME + method + END);
		return clientRepository.save(client);
	}

	@Override
	@Transactional
	public Client updateVerticalInfo(final String clientid, final String id, final String name, final String address,
			final String parentId) {
		final String method = "updateVerticalInfo::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = findById(clientid);
		ObjectId objId = new ObjectId(id);
		if (isNotEmpty(parentId)) {
			if (isNotEmpty(client.getVerticals())) {
				ObjectId objParentId = new ObjectId(parentId);
				logger.debug(CLASSNAME + method + "Update Sub Vertical");
				for (Vertical vertical : client.getVerticals()) {
					if (vertical.getId().equals(objParentId) && isNotEmpty(vertical.getSubverticals())) {
						for (Vertical subvertical : vertical.getSubverticals()) {
							if (subvertical.getId().equals(objId)) {
								subvertical.setName(name);
								subvertical.setAddress(address);
							}
						}
					}
				}
			}
		} else if (isNotEmpty(client.getVerticals())) {
			logger.debug(CLASSNAME + method + "Update Vertical");
			for (Vertical vertical : client.getVerticals()) {
				if (vertical.getId().equals(objId)) {
					vertical.setName(name);
					vertical.setAddress(address);
				}
			}
		}
		logger.debug(CLASSNAME + method + END);
		return clientRepository.save(client);
	}

	@Override
	@Transactional
	public boolean collectionExists(final String collectionName) {
		return mongoTemplate.collectionExists(collectionName);
	}

	@Override
	@Transactional(readOnly = true)
	public List<String> fetchClientIds(final String userid) {
		logger.debug(CLASSNAME + "fetchClientIds : " + BEGIN);
		List<String> clientIds = Lists.newArrayList();
		List<String> userIdList = Lists.newArrayList();
		userIdList.add(userid);
		List<ClientUserMapping> clientPUserMappings = clientUserMappingRepository.findByUseridIn(userIdList);
		if (isNotEmpty(clientPUserMappings)) {
			for (ClientUserMapping clientUserMapping : clientPUserMappings) {
				if (!clientIds.contains(clientUserMapping.getClientid())) {
					if (isNotEmpty(clientRepository.findByIdAndConfigurefirmNull(clientUserMapping.getClientid()))) {
						clientIds.add(clientUserMapping.getClientid());
					}
				}
			}
		}
		return clientIds;
	}

	@Override
	@Transactional(readOnly = true)
	public List<Client> findByUserid(final String userid) {
		logger.debug(CLASSNAME + "findByUserid : " + BEGIN);
		logger.debug(CLASSNAME + "findByUserid : userid\t" + userid);
		List<String> clientIds = fetchClientIds(userid);
		if (isNotEmpty(clientIds)) {
			return Lists.newArrayList(clientRepository.findAll(clientIds));
		} else {
			return Lists.newArrayList();
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<Client> findByUserCreatedClients(final String userid) {
		logger.debug(CLASSNAME + "findByUserid : " + BEGIN);
		logger.debug(CLASSNAME + "findByUserid : userid\t" + userid);
		List<ClientUserMapping> clientUserMapping = clientUserMappingRepository.findByCreatedBy(userid);
		List<String> clientIds = Lists.newArrayList();
		if (isNotEmpty(clientUserMapping)) {
			for (ClientUserMapping clnusrmapping : clientUserMapping) {
				clientIds.add(clnusrmapping.getClientid());
			}
		}
		if (isNotEmpty(clientIds)) {
			return Lists.newArrayList(clientRepository.findAll(clientIds));
		} else {
			return Lists.newArrayList();
		}
	}

	@Override
	@Transactional(readOnly = true)
	public Client findByEmailandfirm(final String email, final String firm) {
		logger.debug(CLASSNAME + "findByEmailandfirm : " + BEGIN);
		logger.debug(CLASSNAME + "findByEmailandfirm : email\t" + email);
		return clientRepository.findByEmailAndConfigurefirm(email, firm);
	}

	@Override
	@Transactional(readOnly = true)
	public List<Client> findByGSTNames(final List<String> gstnames) {
		logger.debug(CLASSNAME + "findByGSTName : " + BEGIN);
		logger.debug(CLASSNAME + "findByGSTName : gstnames\t" + gstnames);
		return clientRepository.findByGstnameIn(gstnames);
	}

	public List<Client> findClients(final List<String> clientIds) {
		logger.debug(CLASSNAME + "findClients : " + BEGIN);
		return Lists.newArrayList(clientRepository.findAll(clientIds));
	}

	@Override
	@Transactional(readOnly = true)
	public List<String> getClientList(final String userid, List<String> clientIds) {
		logger.debug(CLASSNAME + "getClientList : " + BEGIN);
		logger.debug(CLASSNAME + "getClientList : userid\t" + userid);
		User user = userService.findById(userid);
		if (isNotEmpty(user)) {
			List<ClientUserMapping> clientUserMappings = clientUserMappingRepository.findByUserid(userid);
			if (isNotEmpty(clientUserMappings)) {
				for (ClientUserMapping clientUserMapping : clientUserMappings) {
					if (!clientIds.contains(clientUserMapping.getClientid())) {
						clientIds.add(clientUserMapping.getClientid());
					}
				}
			}
		}
		logger.debug(CLASSNAME + "getClientList : " + END);
		return clientIds;
	}

	@Override
	@Transactional(readOnly = true)
	public boolean checkAddClientEligibility(final String userid) {
		logger.debug(CLASSNAME + "checkAddClientEligibility : " + BEGIN);
		logger.debug(CLASSNAME + "checkAddClientEligibility : userid\t" + userid);
		List<String> clientIds = Lists.newArrayList();
		User user = userService.findById(userid);
		if (isNotEmpty(user) && isNotEmpty(user.getNumberofclients()) && isNotEmpty(user.getParentid())) {
			List<ClientUserMapping> clientUserMappings = clientUserMappingRepository.findByUserid(userid);
			if (isNotEmpty(clientUserMappings)) {
				for (ClientUserMapping clientUserMapping : clientUserMappings) {
					clientIds.add(clientUserMapping.getClientid());
				}
			} else if (isNotEmpty(user) && isNotEmpty(user.getIsglobal()) && user.getIsglobal().equals("true")
					&& isNotEmpty(user.getParentid())) {
				clientUserMappings = clientUserMappingRepository.findByUserid(user.getParentid());
				if (isNotEmpty(clientUserMappings)) {
					for (ClientUserMapping clientUserMapping : clientUserMappings) {
						clientIds.add(clientUserMapping.getClientid());
					}
				}
			}
			try {
				int clientMaxCount = Integer.parseInt(user.getNumberofclients());
				return clientMaxCount > clientIds.size();
			} catch (NumberFormatException exception) {
				logger.debug(CLASSNAME + "checkAddClientEligibility : ERROR ", exception);
			}
		}
		return true;
	}

	@Transactional(readOnly = true)
	public Client findById(final String id) {
		logger.debug(CLASSNAME + "findById : " + BEGIN);
		logger.debug(CLASSNAME + "findById : id\t" + id);
		ObjectId objId = new ObjectId(id);
		Client client = mongoTemplate.findById(objId, Client.class);
		logger.debug(CLASSNAME + "findById : Begin");
		return client;
	}

	@Override
	@Transactional(readOnly = true)
	public ClientStatus getClientStatus(final String clientId, final String returnType, final String returnPeriod) {
		logger.debug(CLASSNAME + "getClientStatus : " + BEGIN);
		return clientStatusRepository.findByClientIdAndReturnTypeAndReturnPeriod(clientId, returnType, returnPeriod);
	}

	@Override
	@Transactional(readOnly = true)
	public List<ClientStatus> getClientReturnStatus(final String clientId, final String returnType,
			final String returnPeriod) {
		logger.debug(CLASSNAME + "getClientReturnStatus : " + BEGIN);
		return clientStatusRepository.findByClientIdAndReturnPeriodAndReturnType(clientId, returnPeriod, returnType);
	}

	@Override
	@Transactional(readOnly = true)
	public Map<String, Integer> getReportStatus(final List<String> clientList, final String returnType,
			final String returnPeriod) {
		List<String> cllist = Lists.newArrayList();
		List<Client> lClient = (List<Client>) clientRepository.findAll(clientList);
		for (Client client : lClient) {
			List<GSTReturnSummary> returnSummary = client.getReturnsSummary();
			for (GSTReturnSummary rtSummary : returnSummary) {
				if (returnType.equals(rtSummary.getReturntype()) && "true".equals(rtSummary.getActive())) {
					cllist.add(client.getId().toString());
				}
			}
		}
		Map<String, Integer> map = Maps.newHashMap();
		List<ClientStatus> clientStatusList = clientStatusRepository
				.findByReturnTypeAndReturnPeriodAndClientIdIn(returnType, returnPeriod, clientList);
		List<String> updatedClients = Lists.newArrayList();
		if (isNotEmpty(clientStatusList)) {
			for (ClientStatus clientStatus : clientStatusList) {
				if (isNotEmpty(clientStatus.getStatus()) && !updatedClients.contains(clientStatus.getClientId())) {
					if (map.containsKey(clientStatus.getStatus())) {
						map.put(clientStatus.getStatus(), map.get(clientStatus.getStatus()) + 1);
					} else {
						map.put(clientStatus.getStatus(), 1);
					}
					updatedClients.add(clientStatus.getClientId());
				}
			}
		}
		if (map.containsKey(MasterGSTConstants.PENDING)) {
			map.put(MasterGSTConstants.PENDING, cllist.size());
		} else if (map.containsKey(MasterGSTConstants.STATUS_FILED)) {
			map.put(MasterGSTConstants.STATUS_FILED, map.get(MasterGSTConstants.STATUS_FILED));
			if (isNotEmpty(map.get(MasterGSTConstants.STATUS_SUBMITTED))) {
				map.put(MasterGSTConstants.PENDING, (cllist.size()
						- (map.get(MasterGSTConstants.STATUS_FILED) + map.get(MasterGSTConstants.STATUS_SUBMITTED))));
				map.put(MasterGSTConstants.STATUS_SUBMITTED, map.get(MasterGSTConstants.STATUS_SUBMITTED));
			} else {
				map.put(MasterGSTConstants.PENDING, (cllist.size() - updatedClients.size()));
			}

		} else if (map.containsKey(MasterGSTConstants.STATUS_SUBMITTED)) {
			if (isNotEmpty(map.get(MasterGSTConstants.STATUS_FILED))) {
				map.put(MasterGSTConstants.STATUS_FILED, map.get(MasterGSTConstants.STATUS_FILED));
				map.put(MasterGSTConstants.PENDING, (cllist.size()
						- (map.get(MasterGSTConstants.STATUS_FILED) + map.get(MasterGSTConstants.STATUS_SUBMITTED))));
			} else {
				map.put(MasterGSTConstants.PENDING, (cllist.size() - updatedClients.size()));
			}
			map.put(MasterGSTConstants.STATUS_SUBMITTED, map.get(MasterGSTConstants.STATUS_SUBMITTED));
		} else {
			map.put(MasterGSTConstants.PENDING, (cllist.size() - updatedClients.size()));
		}
		logger.debug(CLASSNAME + "getReportStatus : " + END);
		return map;
	}

	@Override
	@Transactional(readOnly = true)
	public Map<String, List<Client>> getReportStatuss(final List<String> clientList, final String returnType,
			final String returnPeriod) {
		logger.debug(CLASSNAME + "getReportStatus : " + BEGIN);
		List<String> cllist = Lists.newArrayList();
		List<Client> pendingList = Lists.newArrayList();
		List<Client> lClient = (List<Client>) clientRepository.findAll(clientList);
		for (Client client : lClient) {
			client.setGroupName(client.getId().toString());
			List<GSTReturnSummary> returnSummary = client.getReturnsSummary();
			for (GSTReturnSummary rtSummary : returnSummary) {
				if (returnType.equals(rtSummary.getReturntype()) && "true".equals(rtSummary.getActive())) {
					cllist.add(client.getId().toString());
					pendingList.add(client);
				}
			}
		}
		Map<String, List<Client>> map1 = Maps.newHashMap();
		List<Client> filedList = Lists.newArrayList();
		List<Client> submittedList = Lists.newArrayList();
		List<ClientStatus> clientStatusList = clientStatusRepository
				.findByReturnTypeAndReturnPeriodAndClientIdIn(returnType, returnPeriod, clientList);
		if (isNotEmpty(clientStatusList)) {
			for (ClientStatus clientStatus : clientStatusList) {
				Client clnt = clientRepository.findOne(clientStatus.getClientId());
				clnt.setGroupName(clnt.getId().toString());
				if (isNotEmpty(clientStatus.getStatus())) {
					if ("Filed".equalsIgnoreCase(clientStatus.getStatus())) {
						filedList.add(clnt);
					} else if ("Submitted".equalsIgnoreCase(clientStatus.getStatus())) {
						submittedList.add(clnt);
					}
				}
			}
		}
		if (filedList.size() > 0) {
			map1.put(MasterGSTConstants.STATUS_FILED, filedList);
			for (Client clientname : filedList) {
				if (isNotEmpty(clientname)) {
					if (pendingList.contains(clientname)) {
						pendingList.remove(clientname);
					}
				}
			}
			map1.put(MasterGSTConstants.STATUS_SUBMITTED, submittedList);
			for (Client clientname : submittedList) {
				if (isNotEmpty(clientname)) {
					if (pendingList.contains(clientname)) {
						pendingList.remove(clientname);
					}
				}
			}
			map1.put(MasterGSTConstants.PENDING, pendingList);
		} else if (submittedList.size() > 0) {
			map1.put(MasterGSTConstants.STATUS_SUBMITTED, submittedList);
			for (Client clientname : submittedList) {
				if (isNotEmpty(clientname)) {
					if (pendingList.contains(clientname)) {
						pendingList.remove(clientname);
					}
				}
			}
			map1.put(MasterGSTConstants.STATUS_FILED, filedList);
			for (Client clientname : filedList) {
				if (isNotEmpty(clientname)) {
					if (pendingList.contains(clientname)) {
						pendingList.remove(clientname);
					}
				}
			}
			map1.put(MasterGSTConstants.PENDING, pendingList);
		} else {
			map1.put(MasterGSTConstants.PENDING, pendingList);
			map1.put(MasterGSTConstants.STATUS_FILED, filedList);
			map1.put(MasterGSTConstants.STATUS_SUBMITTED, submittedList);
		}
		logger.debug(CLASSNAME + "getReportStatus : " + END);
		return map1;
	}

	@Override
	@Transactional(readOnly = true)
	public Map<String, String> getClientStatus(final List<String> clientList, final String returnPeriod) {
		logger.debug(CLASSNAME + "getClientStatus : " + BEGIN);
		Map<String, String> map = Maps.newHashMap();
		List<ClientStatus> clientStatusList = clientStatusRepository.findByReturnPeriodAndClientIdIn(returnPeriod,
				clientList);
		if (isNotEmpty(clientStatusList)) {
			for (ClientStatus clientStatus : clientStatusList) {
				if (isNotEmpty(clientStatus.getStatus())) {
					if (map.containsKey(clientStatus.getClientId())) {
						if (map.get(clientStatus.getClientId()).compareTo(clientStatus.getReturnType()) < 0) {
							map.put(clientStatus.getClientId(), clientStatus.getReturnType());
						}
					} else {
						map.put(clientStatus.getClientId(), clientStatus.getReturnType());
					}
				}
			}
		}
		for (String clientId : clientList) {
			if (!map.containsKey(clientId)) {
				Client client = findById(clientId);
				if (isEmpty(client.getDealertype())
						|| client.getDealertype().equals(MasterGSTConstants.DEALER_NON_COMPOUND)) {
					map.put(clientId, GSTR1);
				} else if (client.getDealertype().equals(MasterGSTConstants.DEALER_CASUAL)) {
					map.put(clientId, GSTR5);
				} else if (client.getDealertype().equals(MasterGSTConstants.DEALER_INPUT_SERVICE_DISTRIBUTOR)) {
					map.put(clientId, GSTR6);
				} else {
					map.put(clientId, GSTR4);
				}
			}
		}
		logger.debug(CLASSNAME + "getClientStatus : " + END);
		return map;
	}

	@Override
	@Transactional
	public ClientStatus saveClientStatus(final ClientStatus clientStatus) {
		logger.debug(CLASSNAME + "saveClientStatus : " + BEGIN);
		if (isEmpty(clientStatus.getDof())) {
			clientStatus.setDof(new Date());
		}
		ClientStatus dbStatus = clientStatusRepository.findByClientIdAndReturnTypeAndReturnPeriod(
				clientStatus.getClientId(), clientStatus.getReturnType(), clientStatus.getReturnPeriod());
		if(dbStatus == null) {
			return clientStatusRepository.save(clientStatus);
		} else {
			dbStatus.setStatus(clientStatus.getStatus());
			dbStatus.setDof(clientStatus.getDof());
			dbStatus.setArn(clientStatus.getArn());
			return clientStatusRepository.save(dbStatus);
		}
	}

	@Override
	@Transactional(readOnly = true)
	public Map<String, Map<String, String>> getFilingStatusReport(final String clientId, final int year) {
		logger.debug(CLASSNAME + "getFilingStatusReport : " + BEGIN);
		Map<String, Map<String, String>> statusMap = Maps.newHashMap();
		Client client = findById(clientId);
		List<GSTReturnSummary> returnsSummuryList = client.getReturnsSummary();
		if (isNotEmpty(returnsSummuryList)) {
			String rtStart = "04" + year;
			String rtEnd = "03" + (year + 1);
			String[] rtArray = { rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year, "10" + year,
					"11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd };
			List<ClientStatus> statusList = clientStatusRepository.findByClientIdAndReturnPeriodIn(clientId,
					Arrays.asList(rtArray));
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				if (isNotEmpty(summaryItem.getActive()) && summaryItem.getActive().equals("true")) {
					String returnType = summaryItem.getReturntype();
					Map<String, String> rtMap = Maps.newHashMap();
					if (isNotEmpty(statusList)) {
						for (ClientStatus clientStatus : statusList) {
							if (clientStatus.getReturnType().equals(returnType)) {
								rtMap.put(clientStatus.getReturnPeriod(), clientStatus.getStatus());
								if (clientStatus.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
									for (String rt : rtArray) {
										if (!rt.equals(clientStatus.getReturnPeriod())) {
											if (!rtMap.containsKey(rt)) {
												rtMap.put(rt, clientStatus.getStatus());
											}
										} else {
											break;
										}
									}
								}
							}
						}
					}
					for (String rt : rtArray) {
						if (!rtMap.containsKey(rt)) {
							rtMap.put(rt, MasterGSTConstants.PENDING);
						}
					}
					statusMap.put(returnType, rtMap);
				}
			}
		}
		return statusMap;
	}

	@Override
	@Transactional(readOnly = true)
	public Map<String, Map<String, List<String>>> getFilingStatusReports(final String clientId, final int year) {
		logger.debug(CLASSNAME + "getFilingStatusReport : " + BEGIN);
		Map<String, Map<String, List<String>>> statusMap = Maps.newHashMap();
		Client client = findById(clientId);
		List<GSTReturnSummary> returnsSummuryList = client.getReturnsSummary();
		// System.out.println(returnsSummuryList);
		if (isNotEmpty(returnsSummuryList)) {
			String rtStart = "04" + year;
			String rtEnd = "03" + (year + 1);
			String[] rtArray = { rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year, "10" + year,
					"11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd };
			List<ClientStatus> statusList = clientStatusRepository.findByClientIdAndReturnPeriodIn(clientId,
					Arrays.asList(rtArray));
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				if (isNotEmpty(summaryItem.getActive()) && summaryItem.getActive().equals("true")) {
					SimpleDateFormat df2 = new SimpleDateFormat("dd-MM-yyyy");
					String returnType = summaryItem.getReturntype();
					Map<String, List<String>> rtMap = Maps.newHashMap();
					if (isNotEmpty(statusList)) {
						for (ClientStatus clientStatus : statusList) {
							if (clientStatus.getReturnType().equals(returnType)) {
								List<String> list1 = Lists.newArrayList();
								list1.add(clientStatus.getStatus());
								list1.add(df2.format(clientStatus.getDof()));
								if (isNotEmpty(clientStatus.getArn())) {
									list1.add(clientStatus.getArn());
								}
								rtMap.put(clientStatus.getReturnPeriod(), list1);
							}
						}
					}
					for (String rt : rtArray) {
						if (!rtMap.containsKey(rt)) {
							List<String> list2 = Lists.newArrayList();
							list2.add(MasterGSTConstants.PENDING);
							rtMap.put(rt, list2);
						}
					}
					statusMap.put(returnType, rtMap);
				}
			}
		}

		return statusMap;
	}

	@Override
	@Transactional(readOnly = true)
	public Map<String, Map<String, List<String>>> getReportFilingStatusReports(final String clientId, final int year) {
		logger.debug(CLASSNAME + "getReportFilingStatusReports : " + BEGIN);
		Map<String, Map<String, List<String>>> statusMap = Maps.newHashMap();
		Client client = findById(clientId);
		List<GSTReturnSummary> returnsSummuryList = client.getReturnsSummary();
		if (isNotEmpty(returnsSummuryList)) {
			String rtStart = "04" + year;
			String rtEnd = "03" + (year + 1);
			String[] rtArray = { rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year, "10" + year,
					"11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd };
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				List<ClientStatus> statussList = clientStatusRepository.findByClientIdAndReturnTypeAndReturnPeriodIn(clientId, summaryItem.getReturntype(), Arrays.asList(rtArray));
				int nxtYear = year + 1;
				String fy = year + "-" + String.valueOf(nxtYear).substring(2);
				if (statussList.size() < 12) {
					clientUtils.publicRettrack(clientId, fy);
					break;
				}
			}
			List<ClientStatus> statusList = clientStatusRepository.findByClientIdAndReturnPeriodIn(clientId,Arrays.asList(rtArray));
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				if (isNotEmpty(summaryItem.getActive()) && summaryItem.getActive().equals("true")) {
					SimpleDateFormat df2 = new SimpleDateFormat("dd-MM-yyyy");
					String returnType = summaryItem.getReturntype();
					Map<String, List<String>> rtMap = Maps.newHashMap();
					if (isNotEmpty(statusList)) {
						for (ClientStatus clientStatus : statusList) {
							if (clientStatus.getReturnType().equals(returnType)) {
								List<String> list1 = Lists.newArrayList();
								list1.add(clientStatus.getStatus());
								list1.add(df2.format(clientStatus.getDof()));
								if (isNotEmpty(clientStatus.getArn())) {
									list1.add(clientStatus.getArn());
								}
								rtMap.put(clientStatus.getReturnPeriod(), list1);
							}
						}
					}
					for (String rt : rtArray) {
						if (!rtMap.containsKey(rt)) {
							List<String> list2 = Lists.newArrayList();
							list2.add(MasterGSTConstants.PENDING);
							rtMap.put(rt, list2);
						}
					}
					statusMap.put(returnType, rtMap);
				}
			}
		}
		return statusMap;
	}

	@Override
	@Transactional
	public GSTR3B saveSuppliesInvoice(GSTR3B gstr3b, final String returnType) {
		logger.debug(CLASSNAME + "saveSuppliesInvoice : Begin");
		if (isEmpty(gstr3b.getRetPeriod())) {
			Calendar cal = Calendar.getInstance();
			String strMonth = (cal.get(Calendar.MONTH) + 1) < 10 ? "0" + (cal.get(Calendar.MONTH) + 1)
					: (cal.get(Calendar.MONTH) + 1) + "";
			String retPeriod = strMonth + cal.get(Calendar.YEAR);
			gstr3b.setRetPeriod(retPeriod);
		}
		if (isNotEmpty(gstr3b.getInterSup())) {
			if (isNotEmpty(gstr3b.getInterSup().getCompDetails())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getInterSup().getCompDetails()) {
					if (isNotEmpty(gstr3bDetails.getPos())) {
						String pos = getStateCode(gstr3bDetails.getPos());
						if (isNotEmpty(pos) && isNotEmpty(gstr3bDetails.getTxval())) {
							list.add(gstr3bDetails);
						}
					}
				}
				gstr3b.getInterSup().setCompDetails(list);
			}
			if (isNotEmpty(gstr3b.getInterSup().getUinDetails())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getInterSup().getUinDetails()) {
					if (isNotEmpty(gstr3bDetails.getPos())) {
						String pos = getStateCode(gstr3bDetails.getPos());
						if (isNotEmpty(pos) && isNotEmpty(gstr3bDetails.getTxval())) {
							list.add(gstr3bDetails);
						}
					}
				}
				gstr3b.getInterSup().setUinDetails(list);
			}
			if (isNotEmpty(gstr3b.getInterSup().getUnregDetails())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getInterSup().getUnregDetails()) {
					if (isNotEmpty(gstr3bDetails.getPos())) {
						String pos = getStateCode(gstr3bDetails.getPos());
						if (isNotEmpty(pos) && isNotEmpty(gstr3bDetails.getTxval())) {
							list.add(gstr3bDetails);
						}
					}
				}
				gstr3b.getInterSup().setUnregDetails(list);
			}
		}
		if (isNotEmpty(gstr3b.getInwardSup())) {
			if (isNotEmpty(gstr3b.getInwardSup().getIsupDetails())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getInwardSup().getIsupDetails()) {
					if (isNotEmpty(gstr3bDetails.getInter()) || isNotEmpty(gstr3bDetails.getIntra())) {
						list.add(gstr3bDetails);
					}
				}
				gstr3b.getInwardSup().setIsupDetails(list);
			}
		}
		if (isNotEmpty(gstr3b.getItcElg())) {
			if (isNotEmpty(gstr3b.getItcElg().getItcNet())) {
				if (isEmpty(gstr3b.getItcElg().getItcNet().getIamt())
						&& isEmpty(gstr3b.getItcElg().getItcNet().getCamt())) {
					gstr3b.getItcElg().setItcNet(new GSTR3BDetails());
				}
			}
			if (isNotEmpty(gstr3b.getItcElg().getItcAvl())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getItcElg().getItcAvl()) {
					if (isNotEmpty(gstr3bDetails.getIamt()) || isNotEmpty(gstr3bDetails.getCamt())) {
						list.add(gstr3bDetails);
					}
				}
				gstr3b.getItcElg().setItcAvl(list);
			}
			if (isNotEmpty(gstr3b.getItcElg().getItcInelg())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getItcElg().getItcInelg()) {
					if (isNotEmpty(gstr3bDetails.getIamt()) || isNotEmpty(gstr3bDetails.getCamt())) {
						list.add(gstr3bDetails);
					}
				}
				gstr3b.getItcElg().setItcInelg(list);
			}
			if (isNotEmpty(gstr3b.getItcElg().getItcRev())) {
				List<GSTR3BDetails> list = Lists.newArrayList();
				for (GSTR3BDetails gstr3bDetails : gstr3b.getItcElg().getItcRev()) {
					if (isNotEmpty(gstr3bDetails.getIamt()) || isNotEmpty(gstr3bDetails.getCamt())) {
						list.add(gstr3bDetails);
					}
				}
				gstr3b.getItcElg().setItcRev(list);
			}
		}
		if (isNotEmpty(gstr3b.getSupDetails())) {
			GSTR3BDetails isupRev = null;
			if (isNotEmpty(gstr3b.getSupDetails().getIsupRev())) {
				if (isNotEmpty(gstr3b.getSupDetails().getIsupRev().getTxval())) {
					isupRev = gstr3b.getSupDetails().getIsupRev();
				}
			}
			GSTR3BDetails osupDet = null;
			if (isNotEmpty(gstr3b.getSupDetails().getOsupDet())) {
				if (isNotEmpty(gstr3b.getSupDetails().getOsupDet().getTxval())) {
					osupDet = gstr3b.getSupDetails().getOsupDet();
				}
			}
			GSTR3BDetails osupNilExmp = null;
			if (isNotEmpty(gstr3b.getSupDetails().getOsupNilExmp())) {
				if (isNotEmpty(gstr3b.getSupDetails().getOsupNilExmp().getTxval())) {
					osupNilExmp = gstr3b.getSupDetails().getOsupNilExmp();
				}
			}
			GSTR3BDetails osupNongst = null;
			if (isNotEmpty(gstr3b.getSupDetails().getOsupNongst())) {
				if (isNotEmpty(gstr3b.getSupDetails().getOsupNongst().getTxval())) {
					osupNongst = gstr3b.getSupDetails().getOsupNongst();
				}
			}
			GSTR3BDetails osupZero = null;
			if (isNotEmpty(gstr3b.getSupDetails().getOsupZero())) {
				if (isNotEmpty(gstr3b.getSupDetails().getOsupZero().getTxval())) {
					osupZero = gstr3b.getSupDetails().getOsupZero();
				}
			}
			GSTR3BSupplyDetails gstr3bSupplyDetails = new GSTR3BSupplyDetails();
			if (isNotEmpty(isupRev)) {
				gstr3bSupplyDetails.setIsupRev(isupRev);
			}
			if (isNotEmpty(osupDet)) {
				gstr3bSupplyDetails.setOsupDet(osupDet);
			}
			if (isNotEmpty(osupNilExmp)) {
				gstr3bSupplyDetails.setOsupNilExmp(osupNilExmp);
			}
			if (isNotEmpty(osupNongst)) {
				gstr3bSupplyDetails.setOsupNongst(osupNongst);
			}
			if (isNotEmpty(osupZero)) {
				gstr3bSupplyDetails.setOsupZero(osupZero);
			}
			gstr3b.setSupDetails(gstr3bSupplyDetails);
		}

		return gstr3BRepository.save(gstr3b);
	}

	@Override
	@Transactional
	public GSTR9 saveAnnualInvoice(GSTR9 gstr9) {
		logger.debug(CLASSNAME + "saveSuppliesInvoice : Begin");
		return gstr9Repository.save(gstr9);
	}

	@Override
	@Transactional
	public GSTR9C saveAnnual9CInvoice(GSTR9C gstr9c) {
		logger.debug(CLASSNAME + "saveSuppliesInvoice : Begin");
		return gstr9cRepository.save(gstr9c);
	}
	
	@Override
	@Transactional(readOnly = true)
	public GSTR3B getSuppliesInvoice(final String clientId, final String returnPeriod) {
		logger.debug(CLASSNAME + "getSuppliesInvoice : Begin");
		return gstr3BRepository.findByClientidAndRetPeriod(clientId, returnPeriod);
	}
	
	@Override
	@Transactional(readOnly = true)
	public List<GSTR3B> getSuppliesInvoice(List<String> clientId, final String returnPeriod) {
		logger.debug(CLASSNAME + "getSuppliesInvoice : Begin");
		return gstr3BRepository.findByClientidInAndRetPeriod(clientId, returnPeriod);
	}

	@Override
	@Transactional(readOnly = true)
	public List<GSTR3B> getComaprisionReqportQuarterlySuppliesInvoice(final String clientId,
			final List<String> returnPeriod) {
		logger.debug(CLASSNAME + "getComaprisionReqportQuarterlySuppliesInvoice : Begin");

		return gstr3BRepository.findByClientidAndRetPeriodIn(clientId, returnPeriod);
	}
	
	@Override
	@Transactional(readOnly = true)
	public GSTR9C getAnnual9CInvoice(final String clientId, final String fp) {
		logger.debug(CLASSNAME + "getSuppliesInvoice : Begin");
		GSTR9C gstr9c = gstr9cRepository.findByClientidAndReturnPeriod(clientId, fp);
		return gstr9c;
	}
	@Override
	@Transactional(readOnly = true)
	public GSTR9 getAnnualInvoice(final String clientId, final String fp) {
		logger.debug(CLASSNAME + "getSuppliesInvoice : Begin");
		GSTR9 gstr9 = gstr9Repository.findByClientidAndFp(clientId, fp);
		return gstr9;
	}

	@Override
	@Transactional(readOnly = true)
	public GSTR3B getSuppliesInvoice(final String id) {
		logger.debug(CLASSNAME + "getSuppliesInvoice : Begin");
		return gstr3BRepository.findOne(id);
	}

	@Override
	@Transactional
	public InvoiceParent saveSalesInvoice(InvoiceParent invoice, InvoiceParent oldinvoice, final boolean isIntraState)
			throws IllegalAccessException, InvocationTargetException {
		logger.debug(CLASSNAME + "saveSalesInvoice : Begin");
		invoice = populateInvoiceInfo(invoice, oldinvoice, GSTR1, isIntraState);
		if(isNotEmpty(invoice.getIrnStatus())) {
			if("Cancelled".equalsIgnoreCase(invoice.getIrnStatus())) {
				invoice.setGstStatus("CANCELLED");
			}
		}
		if(isNotEmpty(invoice) && isEmpty(invoice.getDueDate()) && isNotEmpty(invoice.getDateofinvoice())) {
			invoice.setDueDate(invoice.getDateofinvoice());
			invoice.setTermDays("0");
		}
		if(isNotEmpty(invoice) && isEmpty(invoice.getPendingAmount()) && isNotEmpty(invoice.getTotalamount())) {
			invoice.setPendingAmount(invoice.getTotalamount());
			invoice.setReceivedAmount(0d);
		}
		
		gstr1Repository.save((GSTR1) invoice);
		if(invoice.getInvtype().equals(ADVANCES) || invoice.getInvtype().equals(MasterGSTConstants.ATA)) {
			saveAdvancePayments(invoice,GSTR1);
		}
		inventoryService.updateStockAdjustments(invoice,GSTR1);
		return invoice;
	}
	
	@Override
	@Transactional
	public InvoiceParent saveAnx1Invoice(InvoiceParent invoice, final boolean isIntraState)
			throws IllegalAccessException, InvocationTargetException {
		logger.debug(CLASSNAME + "saveSalesInvoice : Begin");
		invoice = populateInvoiceInfo(invoice, null, GSTR1, isIntraState);
		return invoice;
	}

	@Override
	@Transactional
	public InvoiceParent saveGSTRInvoice(InvoiceParent invoice, final String retType, final boolean isIntraState)
			throws IllegalAccessException, InvocationTargetException {
		logger.debug(CLASSNAME + "saveGSTRInvoice : Begin");
		invoice = populateInvoiceInfo(invoice, null, retType, isIntraState);
		logger.debug(CLASSNAME + "saveGSTRInvoice : End");
		if (isNotEmpty(retType)) {
			if (retType.equals(GSTR4)) {
				return gstr4Repository.save((GSTR4) invoice);
			} else if (retType.equals(GSTR6)) {
				return gstr6Repository.save((GSTR6) invoice);
			} else if (retType.equals(GSTR5)) {
				return gstr5Repository.save((GSTR5) invoice);
			} else if (retType.equals(ANX1)) {
				//return anx1Repository.save((Anx1) invoice);
			} else if (retType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
				return deliverychallanRepository.save((DeliveryChallan) invoice);
			} else if (retType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
				return proformainvoicesRepository.save((ProformaInvoices) invoice);
			} else if (retType.equals(MasterGSTConstants.ESTIMATES)) {
				return estimatesRepository.save((Estimates) invoice);
			} else if (retType.equals(MasterGSTConstants.PURCHASEORDER)) {
				return purchaseOrderRepository.save((PurchaseOrder) invoice);
			} else if (retType.equals(MasterGSTConstants.EWAYBILL)) {
				return ewayBillRepository.save((EWAYBILL) invoice);
			}else if (retType.equals(MasterGSTConstants.EINVOICE)) {
				return einvoiceRepository.save((EINVOICE) invoice);
			}
		}
		return null;
	}

	@Override
	@Transactional
	public InvoiceParent saveGSTRInvoice(InvoiceParent invoice, final String retType) {
		logger.debug(CLASSNAME + "saveGSTRInvoice : Begin");
		if (isEmpty(retType) || retType.equals(GSTR4)) {
			return gstr4Repository.save((GSTR4) invoice);
		} else if (retType.equals(GSTR6)) {
			return gstr6Repository.save((GSTR6) invoice);
		} else if (retType.equals(GSTR5)) {
			return gstr5Repository.save((GSTR5) invoice);
		} else if (retType.equals(GSTR1)) {
			return gstr1Repository.save((GSTR1) invoice);
		} else if (retType.equals(ANX1)) {
			//return anx1Repository.save((Anx1) invoice);
		} else if (retType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			return deliverychallanRepository.save((DeliveryChallan) invoice);
		} else if (retType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			return proformainvoicesRepository.save((ProformaInvoices) invoice);
		} else if (retType.equals(MasterGSTConstants.ESTIMATES)) {
			return estimatesRepository.save((Estimates) invoice);
		} else if (retType.equals(MasterGSTConstants.PURCHASEORDER)) {
			return purchaseOrderRepository.save((PurchaseOrder) invoice);
		} else if (retType.equals(MasterGSTConstants.EWAYBILL)) {
			return ewayBillRepository.save((EWAYBILL) invoice);
		}
		return null;
	}

	@Override
	@Transactional
	public GSTROffsetLiability saveGSTROffsetLiability(GSTROffsetLiability offLiability) {
		logger.debug(CLASSNAME + "saveGSTROffsetLiability : Begin");
		return gstrOffsetLiabilityRepository.save(offLiability);
	}

	@Override
	@Transactional(readOnly = true)
	public GSTROffsetLiability getGSTROffsetLiability(final String gstn, final String retPeriod, final String retType) {
		logger.debug(CLASSNAME + "getGSTROffsetLiability : Begin");
		return gstrOffsetLiabilityRepository.findByGstinAndRetPeriodAndRetType(gstn, retPeriod, retType);
	}

	@Override
	@Transactional(readOnly = true)
	public GSTROffsetLiability getGSTROffsetLiability(final String id) {
		logger.debug(CLASSNAME + "getGSTROffsetLiability : Begin");
		return gstrOffsetLiabilityRepository.findOne(id);
	}

	@Override
	@Transactional
	public InvoiceParent savePurchaseRegister(InvoiceParent invoice, final boolean isIntraState)
			throws IllegalAccessException, InvocationTargetException {
		logger.debug(CLASSNAME + "savePurchaseRegister : Begin");
		if (isNotEmpty(invoice.getNotes())) {
			String notes = invoice.getNotes();
			notes = notes.substring(1);
			invoice.setNotes(notes);
		}
		invoice = populateInvoiceInfo(invoice, null, PURCHASE_REGISTER, isIntraState);
		if(isNotEmpty(invoice) && isEmpty(invoice.getDueDate()) && isNotEmpty(invoice.getDateofinvoice())) {
			invoice.setDueDate(invoice.getDateofinvoice());
			invoice.setTermDays("0");
		}
		if(isNotEmpty(invoice) && isEmpty(invoice.getPendingAmount()) && isNotEmpty(invoice.getTotalamount())) {
			invoice.setPendingAmount(invoice.getTotalamount());
			invoice.setReceivedAmount(0d);
		}
		PurchaseRegister purchaseRegister = purchaseRepository.save((PurchaseRegister) invoice);
		inventoryService.updateStockAdjustments(invoice,PURCHASE_REGISTER);
		/*if (isNotEmpty(purchaseRegister.getMatchingId()) && isNotEmpty(purchaseRegister.getMatchingStatus())
				&& purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MATCHED)) {
			GSTR2 gstr2 = gstr2Repository.findOne(purchaseRegister.getMatchingId());
			if(isNotEmpty(gstr2)) {
				ObjectId gstr2Id = gstr2.getId();
				BeanUtils.copyProperties(gstr2, purchaseRegister);
				gstr2.setId(gstr2Id);
				gstr2Repository.save(gstr2);
			}
		}*/
		return purchaseRegister;
	}

	private String getStateCode(String strState) {
		List<StateConfig> states = configService.getStates();
		if (isNotEmpty(strState)) {
			for (StateConfig state : states) {
				if (state.getName().equals(strState)) {
					Integer tin = state.getTin();
					return (tin < 10) ? ("0" + tin) : (tin + "");
				} else if (state.getCode().equals(strState)) {
					Integer tin = state.getTin();
					return (tin < 10) ? ("0" + tin) : (tin + "");
				} else if (state.getTin().toString().equals(strState)) {
					Integer tin = state.getTin();
					return (tin < 10) ? ("0" + tin) : (tin + "");
				} else if (state.getName().equals(state.getTin() + "-" + strState)) {
					Integer tin = state.getTin();
					return (tin < 10) ? ("0" + tin) : (tin + "");
				}
			}
			if (strState.contains("-")) {
				strState = strState.substring(0, strState.indexOf("-")).trim();
				return (strState.length() < 2) ? ("0" + strState) : strState;
			}
			if (strState.equals(",")) {
				return "";
			}
		}
		return strState;
	}

	private List<GSTRItems> populateItemData(InvoiceParent invoice, boolean isIntraState, String returntype) {
		Double totalAmount = 0d;
		Double totalamountforbillofsupplycdn = 0d;
		Double totalTax = 0d;
		Double totalTaxableAmt = 0d;
		Double totalITC = 0d;
		Double totalCurrencyAmount = 0d;
		String invType = invoice.getInvtype();
		List<GSTRItems> gstrItems = Lists.newArrayList();
		Map<String, String> hsnMap = configService.getHSNMap();
		Map<String, String> sacMap = configService.getSACMap();
		for (Item item : invoice.getItems()) {
			Double txvalue = 0d;
			if (invType.equals(MasterGSTConstants.ATPAID)) {
				if (isNotEmpty(item.getAdvadjustedAmount())) {
					txvalue = item.getAdvadjustedAmount();
				}
				GSTR1 inv = gstr1Repository.findByClientidAndInvtypeAndInvoiceno(invoice.getClientid(),MasterGSTConstants.ADVANCES, item.getAdvReceiptNo());
				Double advRemainingAmount = item.getAdvAdjustableAmount() - item.getAdvadjustedAmount();
				inv.setAdvRemainingAmount(advRemainingAmount);
				gstr1Repository.save((GSTR1) inv);
			} else {
				if (isNotEmpty(item.getTaxablevalue())) {
					txvalue = item.getTaxablevalue();
				}
			}
			if (isNotEmpty(txvalue)) {
				GSTRItems gstrItem = new GSTRItems();
				GSTRItemDetails gstrItemDetail = new GSTRItemDetails();
				GSTRITCDetails gstrITCDetail = new GSTRITCDetails();
				if (isNotEmpty(item.getHsn())) {
					String code = null;
					String description = null;
					if (item.getHsn().contains(" : ")) {
						String hsncode[] = item.getHsn().split(" : ");
						code = hsncode[0];
						description = hsncode[1];
					} else {
						code = item.getHsn();
					}
					if (hsnMap.containsKey(code)) {
						item.setCategory(MasterGSTConstants.GOODS);
					} else if (hsnMap.containsValue(code)) {
						item.setCategory(MasterGSTConstants.GOODS);
					}
					if (isEmpty(description)) {
						for (String key : hsnMap.keySet()) {
							if (hsnMap.get(key).endsWith(" : " + code)) {
								item.setCategory(MasterGSTConstants.GOODS);
								break;
							}
						}
					}
					if (isEmpty(item.getUqc())) {
						item.setUqc("");
					}
					if (isEmpty(item.getRateperitem())) {
						item.setRateperitem(0d);
					}
					if (isEmpty(item.getDiscount())) {
						item.setDiscount(0d);
					}
					if (isEmpty(item.getQuantity())) {
						item.setQuantity(0d);
					}
					if (MasterGSTConstants.ADVANCES.equals(invoice.getInvtype())) {
						if (isNotEmpty(item.getTotal())) {
							item.setAdvreceived(item.getTotal());
						}
					}
					if (sacMap.containsKey(code)) {
						item.setCategory(MasterGSTConstants.SERVICES);
					} else if (sacMap.containsValue(code)) {
						item.setCategory(MasterGSTConstants.SERVICES);
					}
					if (isEmpty(description)) {
						for (String key : sacMap.keySet()) {
							if (sacMap.get(key).endsWith(" : " + code)) {
								item.setCategory(MasterGSTConstants.SERVICES);
								break;
							}
						}
					}
				}
				if (isIntraState) {
					if (isNotEmpty(item.getCgstrate()) && item.getCgstrate() > 0 && isNotEmpty(item.getSgstrate()) && item.getSgstrate() > 0) {
						gstrItemDetail.setRt(item.getCgstrate() + item.getSgstrate());
						item.setRate(item.getCgstrate() + item.getSgstrate());
					} else if (isNotEmpty(item.getIgstrate()) && item.getIgstrate() > 0) {
						gstrItemDetail.setRt(item.getIgstrate());
						item.setRate(item.getIgstrate());
					} else if (isEmpty(gstrItemDetail.getRt()) && isNotEmpty(item.getRate()) && item.getRate() > 0) {
						gstrItemDetail.setRt(item.getRate());
						if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
							item.setIgstrate(item.getRate());
						}else {
							if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0) {
								item.setIgstrate(item.getRate());
							} else {
								item.setCgstrate(item.getRate() / 2);
								item.setSgstrate(item.getRate() / 2);
							}
						}
						
					} else {
						gstrItemDetail.setRt(0d);
						if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
							item.setIgstrate(0d);
						}else {
							if(isIntraState) {
								item.setCgstrate(0d);
								item.setSgstrate(0d);
							}else {
								item.setIgstrate(0d);
							}
						}
					}
		
					if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())	&& !"R".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						if ("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
							gstrItemDetail.setCamt(item.getIgstamount() / 2);
							gstrItemDetail.setSamt(item.getIgstamount() / 2);
						} else if ("CWB".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
							gstrItemDetail.setIamt(item.getIgstamount());
						} else {
							gstrItemDetail.setCamt(item.getCgstamount());
							gstrItemDetail.setSamt(item.getSgstamount());
						}
					} else {
						if (!invoice.getInvtype().equals(MasterGSTConstants.ADVANCES)) {
							if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() >= 0 && isNotEmpty(item.getSgstamount()) && item.getSgstamount() >= 0) {
								logger.debug(invoice.getInvtype());
								if (invoice.getInvtype().equals(EXPORTS)) {
									gstrItemDetail.setIamt(0d);
								} else {
									gstrItemDetail.setCamt(item.getCgstamount());
									gstrItemDetail.setSamt(item.getSgstamount());
								}
							} else if (isNotEmpty(item.getIgstamount())) {
								gstrItemDetail.setIamt(item.getIgstamount());
							}
						}else {
							if (isNotEmpty(item.getCgstamount())  && isNotEmpty(item.getSgstamount())) {
								logger.debug(invoice.getInvtype());
								gstrItemDetail.setCamt(item.getCgstamount());
								gstrItemDetail.setSamt(item.getSgstamount());
							} else if (isNotEmpty(item.getIgstamount())) {
								gstrItemDetail.setIamt(item.getIgstamount());
							}
						}
					}
					if (isNotEmpty(item.getCgstavltax())) {
						gstrITCDetail.setcTax(item.getCgstavltax());
					}
					if (isNotEmpty(item.getSgstavltax())) {
						gstrITCDetail.setsTax(item.getSgstavltax());
					}
				} else {
					if (isNotEmpty(item.getIgstrate()) && item.getIgstrate() > 0) {
						gstrItemDetail.setRt(item.getIgstrate());
						item.setRate(item.getIgstrate());
					} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())	&& item.getCgstrate() > 0) {
						gstrItemDetail.setRt(item.getCgstrate() + item.getSgstrate());
						item.setRate(item.getCgstrate() + item.getSgstrate());
					} else if (isEmpty(gstrItemDetail.getRt()) && isNotEmpty(item.getRate()) && item.getRate() > 0) {
						gstrItemDetail.setRt(item.getRate());
						if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
							item.setIgstrate(item.getRate());
						}else {
							if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0) {
								item.setIgstrate(item.getRate());
							} else {
								item.setCgstrate(item.getRate() / 2);
								item.setSgstrate(item.getRate() / 2);
							}
						}
					} else {
						gstrItemDetail.setRt(0d);
						if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
							item.setIgstrate(0d);
						}else {
							if(isIntraState) {
								item.setCgstrate(0d);
								item.setSgstrate(0d);
							}else {
								item.setIgstrate(0d);
							}
						}
					}
					if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())	&& !"R".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						if ("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
							gstrItemDetail.setIamt(item.getIgstamount());
						} else if ("CWB".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
							gstrItemDetail.setIamt(item.getIgstamount());
						} else {
							gstrItemDetail.setIamt(item.getIgstamount());
						}
					} else {
						if (!invoice.getInvtype().equals(MasterGSTConstants.ADVANCES)) {
							if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() >= 0) {
								gstrItemDetail.setIamt(item.getIgstamount());
							} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
								if (invoice.getInvtype().equals(EXPORTS)) {
									gstrItemDetail.setIamt(0d);
								} else {
									gstrItemDetail.setCamt(item.getCgstamount());
									gstrItemDetail.setSamt(item.getSgstamount());
								}
							}
						}else {
							if (isNotEmpty(item.getIgstamount())) {
								gstrItemDetail.setIamt(item.getIgstamount());
							} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
								gstrItemDetail.setCamt(item.getCgstamount());
								gstrItemDetail.setSamt(item.getSgstamount());
							}
						}
					}
					if (isNotEmpty(item.getIgstavltax())) {
						gstrITCDetail.setiTax(item.getIgstavltax());
					}
				}
				if (isNotEmpty(item.getCessamount())) {
					gstrItemDetail.setCsamt(item.getCessamount());
				}
				if (isNotEmpty(item.getCessavltax())) {
					gstrITCDetail.setCsTax(item.getCessavltax());
				}
				if (isNotEmpty(item.getElg())) {
					if (item.getElg().startsWith("Input")) {
						item.setElg("ip");
					} else if (item.getElg().startsWith("Capital")) {
						item.setElg("cp");
					} else if (item.getElg().startsWith("In")) {
						item.setElg("is");
					} else if (item.getElg().startsWith("Not")) {
						item.setElg("no");
					}
					gstrITCDetail.setElg(item.getElg());
				}
				if (isNotEmpty(item.getTaxablevalue())) {
					gstrItemDetail.setTxval(item.getTaxablevalue());
				}
				if (isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(ATPAID) || invoice.getInvtype().equals(ADVANCES) || invoice.getInvtype().equals(MasterGSTConstants.ATA) || invoice.getInvtype().equals(MasterGSTConstants.TXPA))) {
					if (isNotEmpty(item.getTaxablevalue())) {
						gstrItemDetail.setAdvAmt(item.getTaxablevalue());
					}
				}
				gstrItem.setItem(gstrItemDetail);
				if (returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
					if (isNotEmpty(gstrITCDetail.getElg())) {
						gstrItem.setItc(gstrITCDetail);
					}
				}
				gstrItem.setNum(gstrItems.size() + 1);
				if (isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR))) {
					if(isNotEmpty(item) && isNotEmpty(item.getRate()) && item.getRate()<0) {
						String niltype = "";
						if(item.getRate().equals(-1.0)) {
							niltype = "Nil Rated";
						}else if(item.getRate().equals(-2.0)) {
							niltype = "Exempted";
						}else if(item.getRate().equals(-3.0)) {
							niltype = "Non-GST";
						}
						item.setType(niltype);
						String supplyType = null;
						if (isIntraState) {
							if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
								supplyType = MasterGSTConstants.SUPPLY_TYPE_INTRA + B2B;
							} else {
								supplyType = MasterGSTConstants.SUPPLY_TYPE_INTRA + B2C;
							}
						} else {
							if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
								supplyType = "INTR" + B2B;
							} else {
								supplyType = "INTR" + B2C;
							}
						}
						String docType = "";
						if(invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNA)) {
							if ((isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty()))) {
								docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
							}
						}else {
							if ((isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty()))) {
								docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
							}else {
								docType = invoice.getCdnur().get(0).getNtty();
							}
						}
						int sftr = 1;
						if(isNotEmpty(docType) && "C".equalsIgnoreCase(docType)) {
							sftr = -1;
						}
						if(!(MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL).equals(invoice.getGenerateMode())) {
								
							if (isNotEmpty(item.getType()) && isNotEmpty(supplyType)) {
								if (isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getInv())) {
									boolean present = false;
									for (GSTRNilItems eItem : invoice.getNil().getInv()) {
										if (isNotEmpty(eItem.getSplyType()) && eItem.getSplyType().equals(supplyType)) {
											present = true;
											populateNilItems(item, eItem,sftr);
											break;
										}
									}
									if (!present) {
										GSTRNilItems eItem = new GSTRNilItems();
										eItem.setSplyType(supplyType);
										populateNilItems(item, eItem,sftr);
										invoice.getNil().getInv().add(eItem);
										// tally nill supplies facing problem (tally import)
									}
								} else {
									GSTRNilInvoices nil = new GSTRNilInvoices();
									List<GSTRNilItems> nilItems = Lists.newArrayList();
									GSTRNilItems eItem = new GSTRNilItems();
									eItem.setSplyType(supplyType);
									populateNilItems(item, eItem,sftr);
									nilItems.add(eItem);
									nil.setInv(nilItems);
									invoice.setNil(nil);
								}
							}
						}else {
							if(isNotEmpty(invoice.getGenerateMode())){
								if((MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL).equals(invoice.getGenerateMode())) {
									if (isNotEmpty(invoice.getNil().getInv().get(0).getSplyType())) {
										invoice.setGenerateMode(MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL);
										String type = invoice.getNil().getInv().get(0).getSplyType();
										GSTRNilItems eItem = new GSTRNilItems();
										eItem.setSplyType("");
										populateNilItems(item, eItem,sftr);
									}
								}
							}
						}
					}else {
						gstrItems.add(gstrItem);
					}
				}else {
					gstrItems.add(gstrItem);
				}
				if (isNotEmpty(item.getCgstamount())) {
					totalTax += item.getCgstamount();
				}
				if (isNotEmpty(item.getIgstamount())) {
					totalTax += item.getIgstamount();
				}
				if (isNotEmpty(item.getSgstamount())) {
					totalTax += item.getSgstamount();
				}
				if (isNotEmpty(item.getCessamount())) {
					totalTax += item.getCessamount();
				}
				if (isNotEmpty(item.getIsdcessamount())) {
					totalTax += item.getIsdcessamount();
				}
				if (isNotEmpty(gstrITCDetail.getiTax())) {
					totalITC += gstrITCDetail.getiTax();
				}
				if (isNotEmpty(gstrITCDetail.getcTax())) {
					totalITC += gstrITCDetail.getcTax();
				}
				if (isNotEmpty(gstrITCDetail.getsTax())) {
					totalITC += gstrITCDetail.getsTax();
				}
				if (isNotEmpty(gstrITCDetail.getCsTax())) {
					totalITC += gstrITCDetail.getCsTax();
				}
				if (isNotEmpty(item.getTotal())) {
					if (isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR))) {
						if(isNotEmpty(item) && isNotEmpty(item.getRate()) && item.getRate()<0) {
							totalamountforbillofsupplycdn += item.getTotal();
							totalAmount += item.getTotal();
						}else {
							totalAmount += item.getTotal();
						}
					}else {
						totalAmount += item.getTotal();
					}
				}
				if (isNotEmpty(item.getCurrencytotalAmount())) {
					totalCurrencyAmount += item.getCurrencytotalAmount();
				}
				if (isNotEmpty(item.getTaxablevalue())) {
					totalTaxableAmt += item.getTaxablevalue();
				}
				if (isNotEmpty(item.getAdditionalchargevalue())) {
					totalTaxableAmt += item.getAdditionalchargevalue();
				}
			}
		}
		if (isNotEmpty(invoice.getRoundOffAmount())) {
			invoice.setTotalamount(totalAmount + invoice.getRoundOffAmount());
		} else {
			invoice.setRoundOffAmount(0.0);
			invoice.setTotalamount(totalAmount);
		}
		if (isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)  || invoice.getInvtype().equals(MasterGSTConstants.CDNUR))) {
			if(isNotEmpty(totalamountforbillofsupplycdn)) {
				invoice.setTotalamountforbillofsupplycdn(totalamountforbillofsupplycdn);
			}
			if(isNotEmpty(invoice) && isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getInv()) && invoice.getNil().getInv().size()>0) {
				invoice.setCdnnilsupplies("yes");
			}else {
				invoice.setCdnnilsupplies("no");
			}
		}
		if(isNotEmpty(totalCurrencyAmount)) {
			invoice.setTotalCurrencyAmount(totalCurrencyAmount);
		}
		invoice.setTotaltax(totalTax);
		invoice.setTotaltaxableamount(totalTaxableAmt);
		invoice.setTotalitc(totalITC);
		return gstrItems;
	}

	private List<GSTRItems> populateAdvanceItemData(InvoiceParent invoice, Item item, boolean isIntraState,
			String returntype) {
		String invType = invoice.getInvtype();
		List<GSTRItems> gstrItems = Lists.newArrayList();
		Double txvalue = 0d;
		if (invType.equals(MasterGSTConstants.ATPAID)) {
			if (isNotEmpty(item.getAdvadjustedAmount())) {
				txvalue = item.getAdvadjustedAmount();
			}

			if (returntype.equals(MasterGSTConstants.GSTR1)) {
				GSTR1 inv = gstr1Repository.findByClientidAndInvtypeAndInvoiceno(invoice.getClientid(),	MasterGSTConstants.ADVANCES, item.getAdvReceiptNo());
				Double advRemainingAmount = item.getAdvAdjustableAmount() - item.getTotal();
				if (isNotEmpty(inv)) {
					inv.setAdvRemainingAmount(advRemainingAmount);
					gstr1Repository.save((GSTR1) inv);
				} else {
					try {
						DateConverter converter = new DateConverter();
						String[] patterns = { "dd-MM-yyyy", "dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd" };
						converter.setPatterns(patterns);
						ConvertUtils.register(converter, Date.class);
						GSTR1 advReceiptinv = new GSTR1();
						advReceiptinv.setInvtype(MasterGSTConstants.ADVANCES);
						advReceiptinv.setClientid(invoice.getClientid());
						advReceiptinv.setUserid(invoice.getUserid());
						if (isNotEmpty(item.getAdvReceiptNo())) {
							advReceiptinv.getB2b().get(0).getInv().get(0).setInum(item.getAdvReceiptNo());
						}
						if (isNotEmpty(item.getAdvStateName())) {
							advReceiptinv.setStatename(item.getAdvStateName());
						}
						if (isNotEmpty(item.getAdvReceiptDate())) {
							try {
								Date invDate = DateUtils.parseDate(item.getAdvReceiptDate(), patterns);
								advReceiptinv.setDateofinvoice(invDate);
							} catch (java.text.ParseException e) {
								try {
									double dblDate = Double.parseDouble(item.getAdvReceiptDate());
									Date invDate = DateUtil.getJavaDate(dblDate);
									advReceiptinv.setDateofinvoice(invDate);
								} catch (NumberFormatException exp) {
								}
							}
						}
						if (isNotEmpty(advReceiptinv.getDateofinvoice())) {
							Calendar cal = Calendar.getInstance();
							cal.setTime(invoice.getDateofinvoice());
							int month = cal.get(Calendar.MONTH) + 1;
							int year = cal.get(Calendar.YEAR);
							String strMonth = month < 10 ? "0" + month : month + "";
							advReceiptinv.setFp(strMonth + year);
						}
						List<Item> items = Lists.newArrayList();
						Item advReceiptItem = new Item();
						if (isNotEmpty(item.getAdvReceivedAmount())) {
							advReceiptItem.setTotal(item.getAdvReceivedAmount());
						}
						if (isNotEmpty(item.getRate())) {
							advReceiptItem.setRate(item.getRate());
						}
						if (isNotEmpty(item.getCessrate())) {
							advReceiptItem.setCessrate(item.getCessrate());
						}
						Double advtaxableamt = 0d;
						if (isNotEmpty(item.getAdvReceivedAmount()) && isNotEmpty(item.getCessrate())) {
							advReceiptItem.setCessamount(item.getAdvReceivedAmount() * item.getCessrate() / 100);
							advtaxableamt += item.getAdvReceivedAmount() * item.getCessrate() / 100;
						}
						if (isIntraState) {
							if (isNotEmpty(item.getAdvReceivedAmount()) && isNotEmpty(item.getRate())) {
								advReceiptItem.setCgstamount(item.getAdvReceivedAmount() * item.getRate() / 200);
								advReceiptItem.setSgstamount(item.getAdvReceivedAmount() * item.getRate() / 200);
								advtaxableamt += item.getAdvReceivedAmount() * item.getRate() / 100;
							}
						} else {
							if (isNotEmpty(item.getAdvReceivedAmount()) && isNotEmpty(item.getRate())) {
								advReceiptItem.setIgstamount(item.getAdvReceivedAmount() * item.getRate() / 100);
								advtaxableamt += item.getAdvReceivedAmount() * item.getRate() / 100;
							}
						}
						if (isNotEmpty(item.getAdvReceivedAmount())) {
							advReceiptItem.setTaxablevalue(item.getAdvReceivedAmount() - advtaxableamt);
						} else {
							advReceiptItem.setTaxablevalue(0d);
						}
						items.add(advReceiptItem);
						advReceiptinv.setItems(items);
						InvoiceParent invoiceForJournal = saveSalesInvoice(advReceiptinv, null, isIntraState);
						//saveJournalInvoice(invoiceForJournal,invoiceForJournal.getClientid(),returntype,isIntraState);
						accountingJournalsUtils.createJournalsEntries(invoiceForJournal.getUserid(),invoiceForJournal.getClientid(),returntype,invoiceForJournal,isIntraState);
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					}
				}
			} else if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)	|| returntype.equals(MasterGSTConstants.GSTR2)) {
				PurchaseRegister inv = purchaseRepository.findByClientidAndInvtypeAndInvoiceno(invoice.getClientid(), MasterGSTConstants.ADVANCES, item.getAdvReceiptNo());
				Double advRemainingAmount = item.getAdvAdjustableAmount() - item.getTotal();
				if (isNotEmpty(inv)) {
					inv.setAdvRemainingAmount(advRemainingAmount);
					purchaseRepository.save((PurchaseRegister) inv);
				} else {
					try {

						DateConverter converter = new DateConverter();
						String[] patterns = { "dd-MM-yyyy", "dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd" };
						converter.setPatterns(patterns);
						ConvertUtils.register(converter, Date.class);
						PurchaseRegister advReceiptinv = new PurchaseRegister();
						advReceiptinv.setInvtype(MasterGSTConstants.ADVANCES);
						advReceiptinv.setClientid(invoice.getClientid());
						advReceiptinv.setUserid(invoice.getUserid());
						if (isNotEmpty(item.getAdvReceiptNo())) {
							advReceiptinv.getB2b().get(0).getInv().get(0).setInum(item.getAdvReceiptNo());
						}
						if (isNotEmpty(item.getAdvStateName())) {
							advReceiptinv.setStatename(item.getAdvStateName());
						}
						if (isNotEmpty(item.getAdvReceiptDate())) {
							try {
								Date invDate = DateUtils.parseDate(item.getAdvReceiptDate(), patterns);
								advReceiptinv.setDateofinvoice(invDate);
								advReceiptinv.setBillDate(invDate);
							} catch (java.text.ParseException e) {
								try {
									double dblDate = Double.parseDouble(item.getAdvReceiptDate());
									Date invDate = DateUtil.getJavaDate(dblDate);
									advReceiptinv.setDateofinvoice(invDate);
									advReceiptinv.setBillDate(invDate);
								} catch (NumberFormatException exp) {
								}
							}
						}
						List<Item> items = Lists.newArrayList();
						Item advReceiptItem = new Item();
						if (isNotEmpty(item.getAdvReceivedAmount())) {
							advReceiptItem.setTotal(item.getAdvReceivedAmount());
						}
						if (isNotEmpty(item.getRate())) {
							advReceiptItem.setRate(item.getRate());
						}
						if (isNotEmpty(item.getCessrate())) {
							advReceiptItem.setCessrate(item.getCessrate());
						}
						Double advtaxableamt = 0d;
						if (isNotEmpty(item.getAdvReceivedAmount()) && isNotEmpty(item.getCessrate())) {
							advReceiptItem.setCessamount(item.getAdvReceivedAmount() * item.getCessrate() / 100);
							advtaxableamt += item.getAdvReceivedAmount() * item.getCessrate() / 100;
						}
						if (isIntraState) {
							if (isNotEmpty(item.getAdvReceivedAmount()) && isNotEmpty(item.getRate())) {
								advReceiptItem.setCgstamount(item.getAdvReceivedAmount() * item.getRate() / 200);
								advReceiptItem.setSgstamount(item.getAdvReceivedAmount() * item.getRate() / 200);
								advtaxableamt += item.getAdvReceivedAmount() * item.getRate() / 100;
							}
						} else {
							if (isNotEmpty(item.getAdvReceivedAmount()) && isNotEmpty(item.getRate())) {
								advReceiptItem.setIgstamount(item.getAdvReceivedAmount() * item.getRate() / 100);
								advtaxableamt += item.getAdvReceivedAmount() * item.getRate() / 100;
							}
						}
						if (isNotEmpty(item.getAdvReceivedAmount())) {
							advReceiptItem.setTaxablevalue(item.getAdvReceivedAmount() - advtaxableamt);
						} else {
							advReceiptItem.setTaxablevalue(0d);
						}
						items.add(advReceiptItem);
						advReceiptinv.setItems(items);
						InvoiceParent invoiceForJournal = savePurchaseRegister(advReceiptinv, isIntraState);
						accountingJournalsUtils.createJournalsEntries(invoiceForJournal.getUserid(),invoiceForJournal.getClientid(),returntype,invoiceForJournal,isIntraState);
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					}
				}
			}
		} else {
			if (isNotEmpty(item.getTaxablevalue())) {
				txvalue = item.getTaxablevalue();
			}
		}
		if (isNotEmpty(txvalue)) {
			GSTRItems gstrItem = new GSTRItems();
			GSTRItemDetails gstrItemDetail = new GSTRItemDetails();
			GSTRITCDetails gstrITCDetail = new GSTRITCDetails();
			Map<String, String> hsnMap = configService.getHSNMap();
			Map<String, String> sacMap = configService.getSACMap();
			if (isNotEmpty(item.getHsn())) {
				String code = null;
				String description = null;
				if (item.getHsn().contains(" : ")) {
					String hsncode[] = item.getHsn().split(" : ");
					code = hsncode[0];
					description = hsncode[1];
				} else {
					code = item.getHsn();
				}

				if (hsnMap.containsKey(code)) {
					item.setCategory(MasterGSTConstants.GOODS);
				} else if (hsnMap.containsValue(code)) {
					item.setCategory(MasterGSTConstants.GOODS);
				}
				if (isEmpty(description)) {
					for (String key : hsnMap.keySet()) {
						if (hsnMap.get(key).endsWith(" : " + code)) {
							item.setCategory(MasterGSTConstants.GOODS);
							break;
						}
					}
				}
				if (isEmpty(item.getUqc())) {
					item.setUqc("");
				}
				if (isEmpty(item.getRateperitem())) {
					item.setRateperitem(0d);
				}
				if (isEmpty(item.getDiscount())) {
					item.setDiscount(0d);
				}
				if (isEmpty(item.getQuantity())) {
					item.setQuantity(0d);
				}
				if (MasterGSTConstants.ADVANCES.equals(invoice.getInvtype())) {
					if (isNotEmpty(item.getTotal())) {
						item.setAdvreceived(item.getTotal());
					}
				}
				if (sacMap.containsKey(code)) {
					item.setCategory(MasterGSTConstants.SERVICES);
				} else if (sacMap.containsValue(code)) {
					item.setCategory(MasterGSTConstants.SERVICES);
				}
				if (isEmpty(description)) {
					for (String key : sacMap.keySet()) {
						if (sacMap.get(key).endsWith(" : " + code)) {
							item.setCategory(MasterGSTConstants.SERVICES);
							break;
						}
					}
				}
			}
			if (isIntraState) {
				if (isNotEmpty(item.getCgstrate()) && item.getCgstrate() > 0 && isNotEmpty(item.getSgstrate())	&& item.getSgstrate() > 0) {
					gstrItemDetail.setRt(item.getCgstrate() + item.getSgstrate());
					item.setRate(item.getCgstrate() + item.getSgstrate());
				} else if (isNotEmpty(item.getIgstrate()) && item.getIgstrate() > 0) {
					gstrItemDetail.setRt(item.getIgstrate());
					item.setRate(item.getIgstrate());
				} else if (isEmpty(gstrItemDetail.getRt()) && isNotEmpty(item.getRate()) && item.getRate() > 0) {
					gstrItemDetail.setRt(item.getRate());
					if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
						item.setIgstrate(item.getRate());
					}else {
						if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0) {
							item.setIgstrate(item.getRate());
						} else {
							item.setCgstrate(item.getRate() / 2);
							item.setSgstrate(item.getRate() / 2);
						}
					}
				} else {
					gstrItemDetail.setRt(0d);
					if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
						item.setIgstrate(0d);
					}else {
						if(isIntraState) {
							item.setCgstrate(0d);
							item.setSgstrate(0d);
						}else {
							item.setIgstrate(0d);
						}
					}
				}

				if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())	&& !"R".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
					if ("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						gstrItemDetail.setCamt(item.getIgstamount() / 2);
						gstrItemDetail.setSamt(item.getIgstamount() / 2);
					} else if ("CWB".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						gstrItemDetail.setIamt(item.getIgstamount());
					} else {
						gstrItemDetail.setCamt(item.getCgstamount());
						gstrItemDetail.setSamt(item.getSgstamount());
					}
				} else {
					if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() > 0 && isNotEmpty(item.getSgstamount()) && item.getSgstamount() > 0) {
						if (invoice.getInvtype().equals(EXPORTS)) {
							gstrItemDetail.setIamt(0d);
						} else {
							gstrItemDetail.setCamt(item.getCgstamount());
							gstrItemDetail.setSamt(item.getSgstamount());
						}
					} else if (isNotEmpty(item.getIgstamount())) {
						gstrItemDetail.setIamt(item.getIgstamount());
					}
				}

				if (isNotEmpty(item.getCgstavltax())) {
					gstrITCDetail.setcTax(item.getCgstavltax());
				}
				if (isNotEmpty(item.getSgstavltax())) {
					gstrITCDetail.setsTax(item.getSgstavltax());
				}
			} else {
				if (isNotEmpty(item.getIgstrate()) && item.getIgstrate() > 0) {
					gstrItemDetail.setRt(item.getIgstrate());
					item.setRate(item.getIgstrate());
				} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate()) && item.getCgstrate() > 0) {
					gstrItemDetail.setRt(item.getCgstrate() + item.getSgstrate());
					item.setRate(item.getCgstrate() + item.getSgstrate());
				} else if (isEmpty(gstrItemDetail.getRt()) && isNotEmpty(item.getRate()) && item.getRate() > 0) {
					gstrItemDetail.setRt(item.getRate());
					if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
						item.setIgstrate(item.getRate());
					}else {
						if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0) {
							item.setIgstrate(item.getRate());
						} else {
							item.setCgstrate(item.getRate() / 2);
							item.setSgstrate(item.getRate() / 2);
						}
					}
				} else {
					gstrItemDetail.setRt(0d);
					if ((invType.equals(MasterGSTConstants.EXPORTS) || invType.equals(MasterGSTConstants.EXPA)) || (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) &&("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWOP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())))) {
						item.setIgstrate(0d);
					}else {
						if(isIntraState) {
							item.setCgstrate(0d);
							item.setSgstrate(0d);
						}else {
							item.setIgstrate(0d);
						}
					}
				}
				if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())	&& !"R".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
					if ("SEWP".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						gstrItemDetail.setIamt(item.getIgstamount());
					} else if ("CWB".equals(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						gstrItemDetail.setIamt(item.getIgstamount());
					} else {
						gstrItemDetail.setIamt(item.getIgstamount());
					}
				} else {
					if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0) {
						gstrItemDetail.setIamt(item.getIgstamount());
					} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
						if (invoice.getInvtype().equals(EXPORTS)) {
							gstrItemDetail.setIamt(0d);
						} else {
							gstrItemDetail.setCamt(item.getCgstamount());
							gstrItemDetail.setSamt(item.getSgstamount());
						}
					}
				}
				if (isNotEmpty(item.getIgstavltax())) {
					gstrITCDetail.setiTax(item.getIgstavltax());
				}
			}
			if (isNotEmpty(item.getCessamount())) {
				gstrItemDetail.setCsamt(item.getCessamount());
			}
			if (isNotEmpty(item.getCessavltax())) {
				gstrITCDetail.setCsTax(item.getCessavltax());
			}
			if (isNotEmpty(item.getElg())) {
				if (item.getElg().startsWith("Input")) {
					item.setElg("ip");
				} else if (item.getElg().startsWith("Capital")) {
					item.setElg("cp");
				} else if (item.getElg().startsWith("In")) {
					item.setElg("is");
				} else if (item.getElg().startsWith("Not")) {
					item.setElg("no");
				}
				gstrITCDetail.setElg(item.getElg());
			}
			if (isNotEmpty(item.getTaxablevalue())) {
				gstrItemDetail.setTxval(item.getTaxablevalue());
			}
			if (isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(ADVANCES) || invoice.getInvtype().equals(MasterGSTConstants.ATA))) {
				if (isNotEmpty(item.getTotal())) {
					gstrItemDetail.setAdvAmt(item.getTotal());
				}
			}else if(isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(ATPAID)|| invoice.getInvtype().equals(MasterGSTConstants.TXPA))){
				if (isNotEmpty(item.getAdvadjustedAmount())) {
					gstrItemDetail.setAdvAmt(item.getAdvadjustedAmount());
				}else {
					if (isNotEmpty(item.getTotal())) {
						gstrItemDetail.setAdvAmt(item.getTotal());
					}
				}
			}
			gstrItem.setItem(gstrItemDetail);
			if (isNotEmpty(gstrITCDetail.getElg())) {
				gstrItem.setItc(gstrITCDetail);
			}
			gstrItem.setNum(gstrItems.size() + 1);
			gstrItems.add(gstrItem);

		}
		return gstrItems;
	}

	private List<GSTRDocListDetails> getIsdItem(PurchaseRegister invoice) {
		String isddocType = invoice.getIsd().get(0).getDoclist().get(0).getIsdDocty();
		String isddocno = invoice.getB2b().get(0).getInv().get(0).getInum();
		List<GSTRDocListDetails> doclist = Lists.newArrayList();
		for (Item item : invoice.getItems()) {
			GSTRDocListDetails isditems = new GSTRDocListDetails();
			isditems.setDocnum(isddocno);
			isditems.setDocdt(invoice.getDateofinvoice());
			isditems.setIsdDocty(isddocType);
			if (isNotEmpty(item.getIgstamount())) {
				isditems.setIamt(item.getIgstamount());
			}
			if (isNotEmpty(item.getCgstamount())) {
				isditems.setCamt(item.getCgstamount());
			}
			if (isNotEmpty(item.getSgstamount())) {
				isditems.setSamt(item.getSgstamount());
			}
			if (isNotEmpty(item.getCessamount())) {
				isditems.setCess(item.getIsdcessamount());
			}
			if (isNotEmpty(item.getIsdType())) {
				String isdtype = "Y";
				if (item.getIsdType().equalsIgnoreCase("Eligible - Credit distributed")
						|| item.getIsdType().equalsIgnoreCase("Eligible - Credit distributed as")) {
					isdtype = "Y";
				} else if (item.getIsdType().equalsIgnoreCase("Ineligible - Credit distributed")
						|| item.getIsdType().equalsIgnoreCase("Ineligible - Credit distributed as")) {
					isdtype = "N";
				}
				isditems.setItcElg(isdtype);
			}
			doclist.add(isditems);
		}
		return doclist;
	}

	private GSTRItemDetails getReversalItemByType(PurchaseRegister invoice, String itemType) {
		if (isEmpty(invoice.getItcRvsl())) {
			invoice.setItcRvsl(new GSTRITCReversals());
		}
		if (itemType.equals("rule2_2")) {
			if (isEmpty(invoice.getItcRvsl().getRule22())) {
				invoice.getItcRvsl().setRule22(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getRule22();
		} else if (itemType.equals("rule7_1_m")) {
			if (isEmpty(invoice.getItcRvsl().getRule71m())) {
				invoice.getItcRvsl().setRule71m(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getRule71m();
		} else if (itemType.equals("rule8_1_h")) {
			if (isEmpty(invoice.getItcRvsl().getRule81h())) {
				invoice.getItcRvsl().setRule81h(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getRule81h();
		} else if (itemType.equals("rule7_2_a")) {
			if (isEmpty(invoice.getItcRvsl().getRule72a())) {
				invoice.getItcRvsl().setRule72a(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getRule72a();
		} else if (itemType.equals("rule7_2_b")) {
			if (isEmpty(invoice.getItcRvsl().getRule72b())) {
				invoice.getItcRvsl().setRule72b(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getRule72b();
		} else if (itemType.equals("revitc")) {
			if (isEmpty(invoice.getItcRvsl().getRevitc())) {
				invoice.getItcRvsl().setRevitc(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getRevitc();
		} else if (itemType.equals("other")) {
			if (isEmpty(invoice.getItcRvsl().getOther())) {
				invoice.getItcRvsl().setOther(new GSTRItemDetails());
			}
			return invoice.getItcRvsl().getOther();
		}
		return null;
	}

	private void populateNilItems(Item nItem, GSTRNilItems eItem) {
		nItem.setElg("");
		if (nItem.getType().equals("Nil Rated")) {
			if (isEmpty(eItem.getNilAmt())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNilAmt(nItem.getTaxablevalue());
				} else {
					eItem.setNilAmt(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNilAmt(eItem.getNilAmt() + nItem.getTaxablevalue());
				} else {
					eItem.setNilAmt(eItem.getNilAmt() + 0d);
				}
			}
			if (isEmpty(eItem.getExptAmt())) {
				eItem.setExptAmt(0d);
			} else {
				eItem.setExptAmt(eItem.getExptAmt() + 0d);
			}
			if (isEmpty(eItem.getNgsupAmt())) {
				eItem.setNgsupAmt(0d);
			} else {
				eItem.setNgsupAmt(eItem.getNgsupAmt() + 0d);
			}
		} else if (nItem.getType().equals("Exempted")) {
			if (isEmpty(eItem.getExptAmt())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setExptAmt(nItem.getTaxablevalue());
				} else {
					eItem.setExptAmt(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setExptAmt(eItem.getExptAmt() + nItem.getTaxablevalue());
				} else {
					eItem.setExptAmt(eItem.getExptAmt() + 0d);
				}
			}
			if (isEmpty(eItem.getNilAmt())) {
				eItem.setNilAmt(0d);
			} else {
				eItem.setNilAmt(eItem.getNilAmt() + 0d);
			}
			if (isEmpty(eItem.getNgsupAmt())) {
				eItem.setNgsupAmt(0d);
			} else {
				eItem.setNgsupAmt(eItem.getNgsupAmt() + 0d);
			}
		} else if (nItem.getType().equals("Non-GST")) {
			if (isEmpty(eItem.getNgsupAmt())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNgsupAmt(nItem.getTaxablevalue());
				} else {
					eItem.setNgsupAmt(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNgsupAmt(eItem.getNgsupAmt() + nItem.getTaxablevalue());
				} else {
					eItem.setNgsupAmt(eItem.getNgsupAmt() + 0d);
				}
			}
			if (isEmpty(eItem.getNilAmt())) {
				eItem.setNilAmt(0d);
			} else {
				eItem.setNilAmt(eItem.getNilAmt() + 0d);
			}
			if (isEmpty(eItem.getExptAmt())) {
				eItem.setExptAmt(0d);
			} else {
				eItem.setExptAmt(eItem.getExptAmt() + 0d);
			}
		}
	}
	
	private void populateNilItems(Item nItem, GSTRNilItems eItem,int sftr) {
		nItem.setElg("");
		if (nItem.getType().equals("Nil Rated")) {
			if (isEmpty(eItem.getNilAmt())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNilAmt(nItem.getTaxablevalue()*sftr);
				} else {
					eItem.setNilAmt(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNilAmt(eItem.getNilAmt() + (nItem.getTaxablevalue()*sftr));
				} else {
					eItem.setNilAmt(eItem.getNilAmt() + 0d);
				}
			}
			if (isEmpty(eItem.getExptAmt())) {
				eItem.setExptAmt(0d);
			} else {
				eItem.setExptAmt(eItem.getExptAmt() + 0d);
			}
			if (isEmpty(eItem.getNgsupAmt())) {
				eItem.setNgsupAmt(0d);
			} else {
				eItem.setNgsupAmt(eItem.getNgsupAmt() + 0d);
			}
		} else if (nItem.getType().equals("Exempted")) {
			if (isEmpty(eItem.getExptAmt())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setExptAmt(nItem.getTaxablevalue()*sftr);
				} else {
					eItem.setExptAmt(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setExptAmt(eItem.getExptAmt() + (nItem.getTaxablevalue()*sftr));
				} else {
					eItem.setExptAmt(eItem.getExptAmt() + 0d);
				}
			}
			if (isEmpty(eItem.getNilAmt())) {
				eItem.setNilAmt(0d);
			} else {
				eItem.setNilAmt(eItem.getNilAmt() + 0d);
			}
			if (isEmpty(eItem.getNgsupAmt())) {
				eItem.setNgsupAmt(0d);
			} else {
				eItem.setNgsupAmt(eItem.getNgsupAmt() + 0d);
			}
		} else if (nItem.getType().equals("Non-GST")) {
			if (isEmpty(eItem.getNgsupAmt())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNgsupAmt(nItem.getTaxablevalue()*sftr);
				} else {
					eItem.setNgsupAmt(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNgsupAmt(eItem.getNgsupAmt() + (nItem.getTaxablevalue()*sftr));
				} else {
					eItem.setNgsupAmt(eItem.getNgsupAmt() + 0d);
				}
			}
			if (isEmpty(eItem.getNilAmt())) {
				eItem.setNilAmt(0d);
			} else {
				eItem.setNilAmt(eItem.getNilAmt() + 0d);
			}
			if (isEmpty(eItem.getExptAmt())) {
				eItem.setExptAmt(0d);
			} else {
				eItem.setExptAmt(eItem.getExptAmt() + 0d);
			}
		}
	}

	private void populateNilItems(Item nItem, GSTRNilSupItems eItem) {
		nItem.setElg("");
		if (nItem.getType().equals("Nil Rated")) {
			if (isEmpty(eItem.getNilsply())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNilsply(nItem.getTaxablevalue());
				} else {
					eItem.setNilsply(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNilsply(eItem.getNilsply() + nItem.getTaxablevalue());
				} else {
					eItem.setNilsply(eItem.getNilsply() + 0d);
				}
			}
			if (isEmpty(eItem.getExptdsply())) {
				eItem.setExptdsply(0d);
			} else {
				eItem.setExptdsply(eItem.getExptdsply() + 0d);
			}
			if (isEmpty(eItem.getNgsply())) {
				eItem.setNgsply(0d);
			} else {
				eItem.setNgsply(eItem.getNgsply() + 0d);
			}
			if (isEmpty(eItem.getCpddr())) {
				eItem.setCpddr(0d);
			} else {
				eItem.setCpddr(eItem.getCpddr() + 0d);
			}
		} else if (nItem.getType().equals("Exempted")) {
			if (isEmpty(eItem.getExptdsply())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setExptdsply(nItem.getTaxablevalue());
				} else {
					eItem.setNilsply(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setExptdsply(eItem.getExptdsply() + nItem.getTaxablevalue());
				} else {
					eItem.setExptdsply(eItem.getExptdsply() + 0d);
				}
			}
			if (isEmpty(eItem.getNilsply())) {
				eItem.setNilsply(0d);
			} else {
				eItem.setNilsply(eItem.getNilsply() + 0d);
			}
			if (isEmpty(eItem.getNgsply())) {
				eItem.setNgsply(0d);
			} else {
				eItem.setNgsply(eItem.getNgsply() + 0d);
			}
			if (isEmpty(eItem.getCpddr())) {
				eItem.setCpddr(0d);
			} else {
				eItem.setCpddr(eItem.getCpddr() + 0d);
			}
		} else if (nItem.getType().equals("Non-GST")) {
			if (isEmpty(eItem.getNgsply())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNgsply(nItem.getTaxablevalue());
				} else {
					eItem.setNgsply(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setNgsply(eItem.getNgsply() + nItem.getTaxablevalue());
				} else {
					eItem.setNgsply(eItem.getNgsply() + 0d);
				}
			}
			if (isEmpty(eItem.getNilsply())) {
				eItem.setNilsply(0d);
			} else {
				eItem.setNilsply(eItem.getNilsply() + 0d);
			}
			if (isEmpty(eItem.getExptdsply())) {
				eItem.setExptdsply(0d);
			} else {
				eItem.setExptdsply(eItem.getExptdsply() + 0d);
			}
			if (isEmpty(eItem.getCpddr())) {
				eItem.setCpddr(0d);
			} else {
				eItem.setCpddr(eItem.getCpddr() + 0d);
			}
		} else if (nItem.getType().equals("From Compounding Dealer")) {
			if (isEmpty(eItem.getCpddr())) {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setCpddr(nItem.getTaxablevalue());
				} else {
					eItem.setCpddr(0d);
				}
			} else {
				if (isNotEmpty(nItem.getTaxablevalue())) {
					eItem.setCpddr(eItem.getCpddr() + nItem.getTaxablevalue());
				} else {
					eItem.setCpddr(eItem.getCpddr() + 0d);
				}
			}
			if (isEmpty(eItem.getNilsply())) {
				eItem.setNilsply(0d);
			} else {
				eItem.setNilsply(eItem.getNilsply() + 0d);
			}
			if (isEmpty(eItem.getExptdsply())) {
				eItem.setExptdsply(0d);
			} else {
				eItem.setExptdsply(eItem.getExptdsply() + 0d);
			}
			if (isEmpty(eItem.getNgsply())) {
				eItem.setNgsply(0d);
			} else {
				eItem.setNgsply(eItem.getNgsply() + 0d);
			}
		}
	}

	public Map<String, Object> getDefaultInvoiceNo(String clientId, String userId, String returntype, String invoiceType, String financialYear, int month) {
		Map<String, Object> invoiceno = Maps.newHashMap();
		if (invoiceType.equals(MasterGSTConstants.B2B) || invoiceType.equals(MasterGSTConstants.B2C)
				|| invoiceType.equals(MasterGSTConstants.B2CL)) {
			invoiceType = MasterGSTConstants.B2B;
		}
		ClientAddlInfo clientInfo = clientAddlInfoRepository.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(clientId, returntype, invoiceType,financialYear, month);
		if (isEmpty(clientInfo)) {
			clientInfo = clientAddlInfoRepository.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(clientId, returntype, "ALL", financialYear, month);
		}
		CompanyInvoices invoiceConfig1 = profileService.getInvoiceConfigDetails(clientId, financialYear, invoiceType,returntype);
		int len = 0;
		String invoiceNumberformats = null;
		if (isNotEmpty(invoiceConfig1)) {
			len = invoiceConfig1.getSampleInvNo().length() - String.valueOf(invoiceConfig1.getStartInvoiceNo()).length();
			invoiceNumberformats = invoiceNumberformat(invoiceConfig1, financialYear, month);
		}
		if (isNotEmpty(clientInfo) && isNotEmpty(invoiceNumberformats)	&& invoiceNumberformats.startsWith(clientInfo.getInvoiceNo().substring(0, len))) {
			if (NullUtil.isNotEmpty(invoiceConfig1.getInvoicenumbercutoff()) && "Monthly".equals(invoiceConfig1.getInvoicenumbercutoff())) {
				CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(clientId, financialYear,	invoiceType, returntype);
				int length = invoiceConfig.getSampleInvNo().length() - String.valueOf(invoiceConfig.getStartInvoiceNo()).length();
				String inv = clientInfo.getInvoiceNo().substring(length);
				String previnv = clientInfo.getInvoiceNo().substring(0, length).concat(Integer.toString((Integer.parseInt(inv) - 1)));
				String invoiceNumberformat = invoiceNumberformat(invoiceConfig, financialYear, month);
				if (invoiceNumberformat.startsWith(clientInfo.getInvoiceNo().substring(0, length))) {
					if (invoiceConfig.getStartInvoiceNo() >= Integer.parseInt(inv)) {
						invoiceNumberformat += invoiceConfig.getStartInvoiceNo();
						invoiceno.put("InvoiceNumber", invoiceNumberformat);
						invoiceno.put("PreviousInvoiceNumber", previnv);
					} else {
						invoiceno.put("InvoiceNumber", clientInfo.getInvoiceNo());
						invoiceno.put("PreviousInvoiceNumber", previnv);
					}
				} else {
					invoiceno.put("InvoiceNumber", clientInfo.getInvoiceNo());
					invoiceno.put("PreviousInvoiceNumber", previnv);
				}
			} else {
				CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(clientId, financialYear,	invoiceType, returntype);
				String startInvNo = invoiceNumberformat(invoiceConfig, financialYear, month);
				String sInvNo = "";
				sInvNo = startInvNo;
				String prevno = "";
				String[] years = financialYear.split("-");
				int year;
				if (month > 3) {
					year = Integer.parseInt(years[0]);
				} else {
					year = Integer.parseInt(years[1]);
				}
				Client client = findById(clientId);
				String invoiceConfigType = invoiceConfig.getInvoiceType();
				String invnumbercutoff = "Yearly";
				String invtype = invoiceType;
				if(invoiceType.equals(MasterGSTConstants.CREDIT_NOTES) || invoiceType.equals(MasterGSTConstants.DEBIT_NOTES)) {
					invtype = MasterGSTConstants.CREDIT_DEBIT_NOTES;
				}
				List<? extends InvoiceParent> invoices = getInvoicesByType(client, userId, returntype, invtype,	invoiceConfigType, month, year, invnumbercutoff);
				List<? extends InvoiceParent> yearlyinvoices = null;
				List<Payments> payments = recordPaymentsRepository.findByClientidAndReturntypeAndYrCd(client.getId().toString(), returntype, financialYear);
				List<GSTR1> gstr1 = Lists.newArrayList();
				if(invoiceType.equals(MasterGSTConstants.CREDIT_NOTES) || invoiceType.equals(MasterGSTConstants.DEBIT_NOTES)) {
					for (InvoiceParent invoice : invoices) {
						String doctype = ((GSTR1)invoice).getCdnr().get(0).getNt().get(0).getNtty();
						if(invoiceType.equals(MasterGSTConstants.CREDIT_NOTES) && doctype.equalsIgnoreCase("C")) {
							gstr1.add((GSTR1)invoice);
						}else if(invoiceType.equals(MasterGSTConstants.DEBIT_NOTES) && doctype.equalsIgnoreCase("D")) {
							gstr1.add((GSTR1)invoice);
						}		
					}
					yearlyinvoices = gstr1;
				}else {
					yearlyinvoices = invoices;
				}
				if (isNotEmpty(yearlyinvoices)) {
					int stInvNo = invoiceConfig.getStartInvoiceNo();
					int stInv = 0;
					for (int i = 1; i <= 12; i++) {
						String stInvn = invNumberformat(invoiceConfig, i, financialYear);
						for (InvoiceParent invoice : yearlyinvoices) {
							if(returntype.equals("Purchase Register"))	{
								if (isNotEmpty(invoice.getRevchargeNo())) {
									if (invoice.getRevchargeNo().startsWith(stInvn)) {
										String invno = invoice.getRevchargeNo().substring(sInvNo.length());
										int inv = Integer.parseInt(invno);
										if (stInvNo <= inv) {
											stInvNo = inv;
											stInv++;
										}
									}
								}
							}else {
								if (isNotEmpty(invoice.getInvoiceno())) {
									if (invoice.getInvoiceno().startsWith(stInvn)) {
										String invno = invoice.getInvoiceno().substring(sInvNo.length());
										int inv = Integer.parseInt(invno);
										if (stInvNo <= inv) {
											stInvNo = inv;
											stInv++;
										}
									}
								}
							}
						}
					}
					if (stInvNo != invoiceConfig.getStartInvoiceNo() || stInv != 0) {
						prevno = startInvNo;
						prevno += stInvNo;
						stInvNo++;
					}
					startInvNo += stInvNo;
					invoiceno.put("InvoiceNumber", startInvNo);
					invoiceno.put("PreviousInvoiceNumber", prevno);
				} else {
					if (isNotEmpty(payments)) {
						int stInvNo = invoiceConfig.getStartInvoiceNo();
						int stInv = 0;
						for (int i = 1; i <= 12; i++) {
							String stInvn = invNumberformat(invoiceConfig, i, financialYear);
							for (Payments payment : payments) {
								if (isNotEmpty(payment.getVoucherNumber())) {
									if(payment.getVoucherNumber().startsWith(stInvn)) {
										String invno = payment.getVoucherNumber().substring(sInvNo.length());
										int inv = Integer.parseInt(invno);
										if (stInvNo <= inv) {
											stInvNo = inv;
											stInv++;
										}
									}
								}
							}
						}
						if (stInvNo != invoiceConfig.getStartInvoiceNo() || stInv != 0) {
							prevno = startInvNo;
							prevno += stInvNo;
							stInvNo++;
						}
						startInvNo += stInvNo;
						invoiceno.put("InvoiceNumber", startInvNo);
						invoiceno.put("PreviousInvoiceNumber", prevno);
					}else {
						if (isNotEmpty(invoiceConfig.getStartInvoiceNo())) {
							startInvNo += invoiceConfig.getStartInvoiceNo();
							invoiceno.put("InvoiceNumber", startInvNo);
							invoiceno.put("PreviousInvoiceNumber", prevno);
						}
					}
				}
			}
			return invoiceno;
		} else {
			CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(clientId, financialYear, invoiceType,returntype);
			if (isNotEmpty(invoiceConfig)) {
				String startInvNo = invNumberformat(invoiceConfig, month, financialYear);
				String sInvNo = "";
				sInvNo = startInvNo;
				String[] years = financialYear.split("-");
				int year;
				if (month > 3) {
					year = Integer.parseInt(years[0]);
				} else {
					year = Integer.parseInt(years[1]);
				}
				Client client = findById(clientId);
				String invoiceConfigType = invoiceConfig.getInvoiceType();
				String invnumbercutoff = "Yearly";
				if (NullUtil.isNotEmpty(invoiceConfig.getInvoicenumbercutoff())) {
					invnumbercutoff = invoiceConfig.getInvoicenumbercutoff();
				}
				String invtype = invoiceType;
				if(invoiceType.equals(MasterGSTConstants.CREDIT_NOTES) || invoiceType.equals(MasterGSTConstants.DEBIT_NOTES)) {
					invtype = MasterGSTConstants.CREDIT_DEBIT_NOTES;
				}
				List<Payments> payments = recordPaymentsRepository.findByClientidAndReturntypeAndYrCd(client.getId().toString(), returntype, financialYear);
				List<? extends InvoiceParent> invoices = getInvoicesByType(client, userId, returntype, invtype,	invoiceConfigType, month, year, invnumbercutoff);
				List<? extends InvoiceParent> yearlyinvoices = null;
				List<GSTR1> gstr1 = Lists.newArrayList();
				if(invoiceType.equals(MasterGSTConstants.CREDIT_NOTES) || invoiceType.equals(MasterGSTConstants.DEBIT_NOTES)) {
					for (InvoiceParent invoice : invoices) {
						String doctype = ((GSTR1)invoice).getCdnr().get(0).getNt().get(0).getNtty();
						if(invoiceType.equals(MasterGSTConstants.CREDIT_NOTES) && doctype.equalsIgnoreCase("C")) {
							gstr1.add((GSTR1)invoice);
						}else if(invoiceType.equals(MasterGSTConstants.DEBIT_NOTES) && doctype.equalsIgnoreCase("D")) {
							gstr1.add((GSTR1)invoice);
						}		
					}
					yearlyinvoices = gstr1;
				}else {
					yearlyinvoices = invoices;
				}
				String previnv = "";
				if (NullUtil.isNotEmpty(invnumbercutoff) && invnumbercutoff.equals("Monthly")) {
					if (isNotEmpty(yearlyinvoices)) {
						int stInvNo = invoiceConfig.getStartInvoiceNo();
						int stInv = 0;
						for (InvoiceParent invoice : yearlyinvoices) {
							if (isNotEmpty(invoice.getInvoiceno())) {
								if (invoice.getInvoiceno().startsWith(sInvNo)) {
									String invno = invoice.getInvoiceno().substring(sInvNo.length());
									int inv = Integer.parseInt(invno);
									if (stInvNo <= inv) {
										stInvNo = inv;
										stInv++;
									}
								}
							}
						}
						if (stInvNo != invoiceConfig.getStartInvoiceNo() || stInv != 0) {
							previnv = startInvNo;
							previnv += stInvNo;
							stInvNo++;
						}
						startInvNo += stInvNo;
					} else {
						if (isNotEmpty(invoiceConfig.getStartInvoiceNo())) {
							startInvNo += invoiceConfig.getStartInvoiceNo();
						}
					}
				} else {
					if (isNotEmpty(yearlyinvoices)) {
						int stInvNo = invoiceConfig.getStartInvoiceNo();
						int stInv = 0;
						for (int i = 1; i <= 12; i++) {
							String stInvn = invNumberformat(invoiceConfig, i, financialYear);
							for (InvoiceParent invoice : yearlyinvoices) {
								if (isNotEmpty(invoice.getInvoiceno())) {
									if (invoice.getInvoiceno().startsWith(stInvn)) {
										String invno = invoice.getInvoiceno().substring(sInvNo.length());
										int inv = Integer.parseInt(invno);
										if (stInvNo <= inv) {
											stInvNo = inv;
											stInv++;
										}
									}
								}
							}
						}
						if (stInvNo != invoiceConfig.getStartInvoiceNo() || stInv != 0) {
							previnv = startInvNo;
							previnv += stInvNo;
							stInvNo++;
						}
						startInvNo += stInvNo;
					} else {
						if(isNotEmpty(payments)) {
							int stInvNo = invoiceConfig.getStartInvoiceNo();
							int stInv = 0;
							for (int i = 1; i <= 12; i++) {
								String stInvn = invNumberformat(invoiceConfig, i, financialYear);
								for(Payments payment : payments) {
									if (isNotEmpty(payment.getVoucherNumber())) {
										if(payment.getVoucherNumber().startsWith(stInvn)) {
											String invno = payment.getVoucherNumber().substring(sInvNo.length());
											int inv = Integer.parseInt(invno);
											if (stInvNo <= inv) {
												stInvNo = inv;
												stInv++;
											}
										}
									}
								}
							}
							if (stInvNo != invoiceConfig.getStartInvoiceNo() || stInv != 0) {
								previnv = startInvNo;
								previnv += stInvNo;
								stInvNo++;
							}
							startInvNo += stInvNo;
						}else {
							if (isNotEmpty(invoiceConfig.getStartInvoiceNo())) {
								startInvNo += invoiceConfig.getStartInvoiceNo();
							}
						}
					}
				}
				invoiceno.put("InvoiceNumber", startInvNo);
				invoiceno.put("PreviousInvoiceNumber", previnv);
				return invoiceno;
			}
		}
		return invoiceno;
	}
	
	@Override
	public Map<String, Object> getDefaultAccountingInvoiceNo(String clientId, String userId, String returntype,	String invoiceType, String financialYear, int month) {
		Map<String, Object> invoiceno = Maps.newHashMap();
		if (invoiceType.equals(MasterGSTConstants.B2B) || invoiceType.equals(MasterGSTConstants.B2C)
				|| invoiceType.equals(MasterGSTConstants.B2CL)) {
			invoiceType = MasterGSTConstants.B2B;
		}
		ClientAddlInfo clientInfo = clientAddlInfoRepository.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(clientId, returntype, invoiceType,	financialYear, month);
		if (isEmpty(clientInfo)) {
			clientInfo = clientAddlInfoRepository.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(clientId, returntype, "ALL", financialYear, month);
		}
		CompanyInvoices invoiceConfig1= profileService.getInvoiceConfigDetails(clientId, financialYear, invoiceType, returntype);	
		int len = 0;
		String invoiceNumberformats = null;
		if (isNotEmpty(invoiceConfig1)) {
			len = invoiceConfig1.getSampleInvNo().length() - String.valueOf(invoiceConfig1.getStartInvoiceNo()).length();
			invoiceNumberformats = invoiceNumberformat(invoiceConfig1, financialYear, month);
		}
		if (isNotEmpty(clientInfo) && isNotEmpty(invoiceNumberformats) && invoiceNumberformats.startsWith(clientInfo.getInvoiceNo().substring(0, len))) {
			if (NullUtil.isNotEmpty(invoiceConfig1.getInvoicenumbercutoff()) && "Monthly".equals(invoiceConfig1.getInvoicenumbercutoff())) {
				CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(clientId, financialYear,	invoiceType, returntype);
				int length = invoiceConfig.getSampleInvNo().length() - String.valueOf(invoiceConfig.getStartInvoiceNo()).length();
				String inv = clientInfo.getInvoiceNo().substring(length);
				String previnv = clientInfo.getInvoiceNo().substring(0, length).concat(Integer.toString((Integer.parseInt(inv) - 1)));
				String invoiceNumberformat = invoiceNumberformat(invoiceConfig, financialYear, month);
				if (invoiceNumberformat.startsWith(clientInfo.getInvoiceNo().substring(0, length))) {
					if (invoiceConfig.getStartInvoiceNo() >= Integer.parseInt(inv)) {
						invoiceNumberformat += invoiceConfig.getStartInvoiceNo();
						invoiceno.put("InvoiceNumber", invoiceNumberformat);
						invoiceno.put("PreviousInvoiceNumber", previnv);
					} else {
						invoiceno.put("InvoiceNumber", clientInfo.getInvoiceNo());
						invoiceno.put("PreviousInvoiceNumber", previnv);
					}
				} else {
					invoiceno.put("InvoiceNumber", clientInfo.getInvoiceNo());
					invoiceno.put("PreviousInvoiceNumber", previnv);
				}
			} else {
				CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(clientId, financialYear,	invoiceType, returntype);
				String startInvNo = invoiceNumberformat(invoiceConfig, financialYear, month);
				String sInvNo = "";
				sInvNo = startInvNo;
				String prevno = "";
				String[] years = financialYear.split("-");
				int year;
				if (month > 3) {
					year = Integer.parseInt(years[0]);
				} else {
					year = Integer.parseInt(years[1]);
				}
				int stInvNo = invoiceConfig.getStartInvoiceNo()+1;
				if (stInvNo != invoiceConfig.getStartInvoiceNo()) {
					prevno = startInvNo;
					prevno += stInvNo;
					stInvNo++;
				}
				startInvNo += stInvNo;
				invoiceno.put("InvoiceNumber", startInvNo);
				invoiceno.put("PreviousInvoiceNumber", prevno);
			}
			return invoiceno;
		}
		return invoiceno;
	}

	public String getMonthName(int month) {
		String monthString;
		switch (month) {
		case 1:
			monthString = "JAN";
			break;
		case 2:
			monthString = "FEB";
			break;
		case 3:
			monthString = "MAR";
			break;
		case 4:
			monthString = "APR";
			break;
		case 5:
			monthString = "MAY";
			break;
		case 6:
			monthString = "JUN";
			break;
		case 7:
			monthString = "JUL";
			break;
		case 8:
			monthString = "AUG";
			break;
		case 9:
			monthString = "SEP";
			break;
		case 10:
			monthString = "OCT";
			break;
		case 11:
			monthString = "NOV";
			break;
		case 12:
			monthString = "DEC";
			break;
		default:
			monthString = "Invalid month";
			break;
		}
		return monthString;

	}

	public String invNumberformat(CompanyInvoices invoiceConfig, int month, String financialYear) {
		String startInvNo = "";
		if (isNotEmpty(invoiceConfig.getPrefix())) {
			startInvNo += invoiceConfig.getPrefix().toUpperCase();
		}
		if (isNotEmpty(invoiceConfig.getAllowMonth()) && invoiceConfig.getAllowMonth().equals("true")) {
			if (isNotEmpty(invoiceConfig.getFormatMonth())) {
				if (invoiceConfig.getFormatMonth().equals("02")) {
					startInvNo += (month < 10 ? "0" + month : month);
				} else if (invoiceConfig.getFormatMonth().equals("02/")) {
					startInvNo += (month < 10 ? "0" + month + "/" : month + "/");
				} else if (invoiceConfig.getFormatMonth().equals("02-")) {
					startInvNo += (month < 10 ? "0" + month + "-" : month + "-");
				} else if (invoiceConfig.getFormatMonth().equals("FEB")) {
					String monthString = getMonthName(month);
					startInvNo += monthString;
				} else if (invoiceConfig.getFormatMonth().equals("FEB/")) {
					String monthString = getMonthName(month) + "/";
					startInvNo += monthString;
				} else if (invoiceConfig.getFormatMonth().equals("FEB-")) {
					String monthString = getMonthName(month) + "-";
					startInvNo += monthString;
				}
			} else {
				startInvNo += (month < 10 ? "0" + month : month);
			}
		}
		if (isNotEmpty(invoiceConfig.getAllowYear()) && invoiceConfig.getAllowYear().equals("true")) {
			String[] years = financialYear.split("-");
			int year;
			if (month > 3) {
				year = Integer.parseInt(years[0]);
			} else {
				year = Integer.parseInt(years[1]);
			}
			if (isNotEmpty(invoiceConfig.getFormatYear())) {
				if (invoiceConfig.getFormatYear().equals("19")) {
					startInvNo += (Integer.valueOf(year).toString().substring(2));
				} else if (invoiceConfig.getFormatYear().equals("19/")) {
					startInvNo += (Integer.valueOf(year).toString().substring(2)) + "/";
				} else if (invoiceConfig.getFormatYear().equals("19-")) {
					startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-";
				} else if (invoiceConfig.getFormatYear().equals("2019")) {
					startInvNo += (Integer.valueOf(year).toString());
				} else if (invoiceConfig.getFormatYear().equals("2019/")) {
					startInvNo += (Integer.valueOf(year).toString()) + "/";
				} else if (invoiceConfig.getFormatYear().equals("2019-")) {
					startInvNo += (Integer.valueOf(year).toString()) + "-";
				} else if (invoiceConfig.getFormatYear().equals("19-20")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2));
					} else {
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2));
					}
				} else if (invoiceConfig.getFormatYear().equals("19-20-")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "-";
					} else {
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				} else if (invoiceConfig.getFormatYear().equals("19-20/")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "/";
					} else {
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				} else if (invoiceConfig.getFormatYear().equals("1920")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2));
					} else {
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2));
					}
				} else if (invoiceConfig.getFormatYear().equals("1920-")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "-";
					} else {
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				} else if (invoiceConfig.getFormatYear().equals("1920/")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "/";
					} else {
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				} else if (invoiceConfig.getFormatYear().equals("2019-20")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString()) + "-"	+ (Integer.valueOf(year).toString().substring(2));
					} else {
						startInvNo += (Integer.valueOf(year).toString()) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2));
					}
				} else if (invoiceConfig.getFormatYear().equals("2019-20-")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString()) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "-";
					} else {
						startInvNo += (Integer.valueOf(year).toString()) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				} else if (invoiceConfig.getFormatYear().equals("2019-20/")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString()) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "/";
					} else {
						startInvNo += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				} else if (invoiceConfig.getFormatYear().equals("201920")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2));
					} else {
						startInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2));
					}
				} else if (invoiceConfig.getFormatYear().equals("201920-")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "-";
					} else {
						startInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				} else if (invoiceConfig.getFormatYear().equals("201920/")) {
					if (month <= 3) {
						startInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "/";
					} else {
						startInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				}
			} else {
				startInvNo += (Integer.valueOf(year).toString());
			}
		}
		return startInvNo;
	}
	public void saveCustomerOrSupplier(InvoiceParent invoice,String returntype,List<StateConfig> states) {
		invoice.setVendorName(invoice.getBilledtoname());
		ProfileLedger ldgr = ledgerRepository.findByClientidAndLedgerNameIgnoreCase(invoice.getClientid(),invoice.getBilledtoname());
		if (returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
			CompanySuppliers companysupplier = companySuppliersRepository.findByNameAndClientid(invoice.getBilledtoname(), invoice.getClientid());
			if (isEmpty(companysupplier)) {
				invoice.setVendorName(invoice.getBilledtoname());
				companysupplier = new CompanySuppliers();
				companysupplier.setName(invoice.getBilledtoname());
				companysupplier.setSupplierLedgerName(invoice.getBilledtoname());
				companysupplier.setClientid(invoice.getClientid());
				companysupplier.setUserid(invoice.getUserid());
				if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0))) {
					if (isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0))) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
							String address = invoice.getB2b().get(0).getInv().get(0).getAddress();
							if (address.length() == 1 && address.equals(",")) {
							} else {
								companysupplier.setAddress(address);
							}
						}
					}
					if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						companysupplier.setGstnnumber(invoice.getB2b().get(0).getCtin().toUpperCase().trim());
						String statename = invoice.getB2b().get(0).getCtin().toUpperCase().trim().substring(0, 2);
						
						for (StateConfig state : states) {
							String name = state.getName();
							String[] nm = state.getName().split("-");
							if (nm[0].equalsIgnoreCase(statename)) {
								statename = name;
								break;
							}
						}
						companysupplier.setState(statename);
					}
				}
				profileService.saveSupplier(companysupplier);
			}
			if (isEmpty(ldgr)) {
				ProfileLedger lgrdr = new ProfileLedger();
				lgrdr.setClientid(invoice.getClientid());
				if (isNotEmpty(invoice.getBilledtoname())) {
					lgrdr.setLedgerName(invoice.getBilledtoname());
				}
				lgrdr.setGrpsubgrpName("Sundry Creditors");
				lgrdr.setLedgerpath("Liabilities/Current liabilities/Sundry Creditors");
				ledgerRepository.save(lgrdr);
			}
		} else {
			CompanyCustomers companycustomer = companyCustomersRepository.findByNameAndClientid(invoice.getBilledtoname(), invoice.getClientid());
			if (isEmpty(companycustomer)) {
				invoice.setVendorName(invoice.getBilledtoname());
				companycustomer = new CompanyCustomers();
				companycustomer.setName(invoice.getBilledtoname());
				companycustomer.setCustomerLedgerName(invoice.getBilledtoname());
				companycustomer.setClientid(invoice.getClientid());
				companycustomer.setUserid(invoice.getUserid());
				if(isNotEmpty(invoice.getBuyerPincode())) {
					companycustomer.setPincode(invoice.getBuyerPincode().toString());	
				}
				if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0))) {
					if (isNotEmpty(invoice.getB2b().get(0).getInv())
							&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0))) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
							String address = invoice.getB2b().get(0).getInv().get(0).getAddress();
							if (address.length() == 1 && address.equals(",")) {
							} else {
								companycustomer.setAddress(address);
							}
						}
					}
					if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						companycustomer.setGstnnumber(invoice.getB2b().get(0).getCtin().toUpperCase().trim());
						String statename = invoice.getB2b().get(0).getCtin().toUpperCase().trim().substring(0, 2);
						for (StateConfig state : states) {
							String name = state.getName();
							String[] nm = state.getName().split("-");
							if (nm[0].equalsIgnoreCase(statename)) {
								statename = name;
								break;
							}
						}
						companycustomer.setState(statename);
					}
				}
				profileService.saveCustomer(companycustomer);
			}else {
				if(isNotEmpty(invoice.getInvoiceCustomerId())) {
					CompanyCustomers companycustomerId = companyCustomersRepository.findByClientidAndCustomerId(invoice.getClientid(),invoice.getInvoiceCustomerId());
					if(isNotEmpty(companycustomerId)) {
						if(isEmpty(invoice.getBuyerDtls())) {
							BuyerDetails buydetails = new BuyerDetails();
							if(isNotEmpty(companycustomerId.getGstnnumber())) {
								buydetails.setGstin(companycustomerId.getGstnnumber());
							}
							if(isNotEmpty(companycustomerId.getName())) {
								buydetails.setLglNm(companycustomerId.getName());
							}
							if(isNotEmpty(companycustomerId.getAddress())) {
								buydetails.setAddr1(companycustomerId.getAddress());
							}
							if(isNotEmpty(companycustomerId.getCity())) {
								buydetails.setLoc(companycustomerId.getCity());
							}
							if(isNotEmpty(companycustomer.getPincode()) && isNotEmpty(companycustomerId.getPincode().trim())) {
								buydetails.setPin(Integer.parseInt(companycustomerId.getPincode().trim()));
							}
							if(isNotEmpty(companycustomerId.getState())) {
								buydetails.setPos(companycustomerId.getState());
								buydetails.setState(companycustomerId.getState());
							}
							invoice.setBuyerDtls(buydetails);
						}else {
							if(isNotEmpty(companycustomerId.getGstnnumber())) {
								invoice.getBuyerDtls().setGstin(companycustomerId.getGstnnumber());
							}
							if(isNotEmpty(companycustomerId.getName())) {
								invoice.getBuyerDtls().setLglNm(companycustomerId.getName());
							}
							if(isNotEmpty(companycustomerId.getAddress())) {
								invoice.getBuyerDtls().setAddr1(companycustomerId.getAddress());
							}
							if(isNotEmpty(companycustomerId.getCity())) {
								invoice.getBuyerDtls().setLoc(companycustomerId.getCity());
							}
							if(isNotEmpty(companycustomer.getPincode()) && isNotEmpty(companycustomerId.getPincode().trim())) {
								invoice.getBuyerDtls().setPin(Integer.parseInt(companycustomerId.getPincode().trim()));
							}
							if(isNotEmpty(companycustomerId.getState())) {
								invoice.getBuyerDtls().setPos(companycustomerId.getState());
								invoice.getBuyerDtls().setState(companycustomerId.getState());
							}
						}
					}
				}else {
					
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						CompanyCustomers companycustomerBygstin = companyCustomersRepository.findByGstnnumberAndClientidAndName(invoice.getB2b().get(0).getCtin(),invoice.getClientid(),invoice.getBilledtoname());
						if(isNotEmpty(companycustomerBygstin)) {
							if(isEmpty(invoice.getBuyerDtls())) {
								BuyerDetails buydetails = new BuyerDetails();
								if(isNotEmpty(companycustomerBygstin.getGstnnumber())) {
									buydetails.setGstin(companycustomerBygstin.getGstnnumber());
								}
								if(isNotEmpty(companycustomerBygstin.getName())) {
									buydetails.setLglNm(companycustomerBygstin.getName());
								}
								if(isNotEmpty(companycustomerBygstin.getAddress())) {
									buydetails.setAddr1(companycustomerBygstin.getAddress());
								}
								if(isNotEmpty(companycustomerBygstin.getCity())) {
									buydetails.setLoc(companycustomerBygstin.getCity());
								}
								if(isNotEmpty(companycustomerBygstin.getPincode()) && isNotEmpty(companycustomerBygstin.getPincode().trim())) {
									buydetails.setPin(Integer.parseInt(companycustomerBygstin.getPincode().trim()));
								}
								if(isNotEmpty(companycustomerBygstin.getState())) {
									buydetails.setPos(companycustomerBygstin.getState());
									buydetails.setState(companycustomerBygstin.getState());
								}
								invoice.setBuyerDtls(buydetails);
							}else {
								if(isNotEmpty(companycustomerBygstin.getGstnnumber())) {
									invoice.getBuyerDtls().setGstin(companycustomerBygstin.getGstnnumber());
								}
								if(isNotEmpty(companycustomerBygstin.getName())) {
									invoice.getBuyerDtls().setLglNm(companycustomerBygstin.getName());
								}
								if(isNotEmpty(companycustomerBygstin.getAddress())) {
									invoice.getBuyerDtls().setAddr1(companycustomerBygstin.getAddress());
								}
								if(isNotEmpty(companycustomerBygstin.getCity())) {
									invoice.getBuyerDtls().setLoc(companycustomerBygstin.getCity());
								}
								if(isNotEmpty(companycustomerBygstin.getPincode()) && isNotEmpty(companycustomerBygstin.getPincode().trim())) {
									invoice.getBuyerDtls().setPin(Integer.parseInt(companycustomerBygstin.getPincode().trim()));
								}
								if(isNotEmpty(companycustomerBygstin.getState())) {
									invoice.getBuyerDtls().setPos(companycustomerBygstin.getState());
									invoice.getBuyerDtls().setState(companycustomerBygstin.getState());
								}
							}
						}else {
							invoice.setVendorName(invoice.getBilledtoname());
							companycustomer = new CompanyCustomers();
							companycustomer.setName(invoice.getBilledtoname());
							companycustomer.setCustomerLedgerName(invoice.getBilledtoname());
							companycustomer.setClientid(invoice.getClientid());
							companycustomer.setUserid(invoice.getUserid());
							if(isNotEmpty(invoice.getBuyerPincode())) {
								companycustomer.setPincode(invoice.getBuyerPincode().toString());	
							}
							if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0))) {
								if (isNotEmpty(invoice.getB2b().get(0).getInv())
										&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0))) {
									if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
										String address = invoice.getB2b().get(0).getInv().get(0).getAddress();
										if (address.length() == 1 && address.equals(",")) {
										} else {
											companycustomer.setAddress(address);
										}
									}
								}
								if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
									companycustomer.setGstnnumber(invoice.getB2b().get(0).getCtin().toUpperCase().trim());
									String statename = invoice.getB2b().get(0).getCtin().toUpperCase().trim().substring(0, 2);
									for (StateConfig state : states) {
										String name = state.getName();
										String[] nm = state.getName().split("-");
										if (nm[0].equalsIgnoreCase(statename)) {
											statename = name;
											break;
										}
									}
									companycustomer.setState(statename);
								}
							}
							profileService.saveCustomer(companycustomer);
						}
					}else {
						if(isNotEmpty(companycustomer)) {
							if(isEmpty(invoice.getBuyerDtls())) {
								BuyerDetails buydetails = new BuyerDetails();
								if(isNotEmpty(companycustomer.getGstnnumber())) {
									buydetails.setGstin(companycustomer.getGstnnumber());
								}
								if(isNotEmpty(companycustomer.getName())) {
									buydetails.setLglNm(companycustomer.getName());
								}
								if(isNotEmpty(companycustomer.getAddress())) {
									buydetails.setAddr1(companycustomer.getAddress());
								}
								if(isNotEmpty(companycustomer.getCity())) {
									buydetails.setLoc(companycustomer.getCity());
								}
								if(isNotEmpty(companycustomer.getPincode()) && isNotEmpty(companycustomer.getPincode().trim())) {
									buydetails.setPin(Integer.parseInt(companycustomer.getPincode().trim()));
								}
								if(isNotEmpty(companycustomer.getState())) {
									buydetails.setPos(companycustomer.getState());
									buydetails.setState(companycustomer.getState());
								}
								invoice.setBuyerDtls(buydetails);
							}else {
								if(isNotEmpty(companycustomer.getGstnnumber())) {
									invoice.getBuyerDtls().setGstin(companycustomer.getGstnnumber());
								}
								if(isNotEmpty(companycustomer.getName())) {
									invoice.getBuyerDtls().setLglNm(companycustomer.getName());
								}
								if(isNotEmpty(companycustomer.getAddress())) {
									invoice.getBuyerDtls().setAddr1(companycustomer.getAddress());
								}
								if(isNotEmpty(companycustomer.getCity())) {
									invoice.getBuyerDtls().setLoc(companycustomer.getCity());
								}
								if(isNotEmpty(companycustomer.getPincode()) && isNotEmpty(companycustomer.getPincode().trim())) {
									invoice.getBuyerDtls().setPin(Integer.parseInt(companycustomer.getPincode().trim()));
								}
								if(isNotEmpty(companycustomer.getState())) {
									invoice.getBuyerDtls().setPos(companycustomer.getState());
									invoice.getBuyerDtls().setState(companycustomer.getState());
								}
							}
						}
					}
				}
				
			}
			if (isEmpty(ldgr)) {
				ProfileLedger lgrdr = new ProfileLedger();
				lgrdr.setClientid(invoice.getClientid());
				if (isNotEmpty(invoice.getBilledtoname())) {
					lgrdr.setLedgerName(invoice.getBilledtoname());
				}
				lgrdr.setGrpsubgrpName(AccountConstants.SUNDRY_DEBTORS);
				lgrdr.setLedgerpath("Assets/Current Assets/Sundry Debtors");
				lgrdr.setLedgerOpeningBalance(0);
				ledgerRepository.save(lgrdr);
			}
		}
	}
	@Override
	public InvoiceParent populateInvoiceInfo(InvoiceParent invoice, InvoiceParent oldinvoice, final String returntype, final boolean isIntraState) {
		List<StateConfig> states = configService.getStates();
		if (isNotEmpty(invoice.getBilledtoname())) {
			saveCustomerOrSupplier(invoice,returntype,states);
		}else {
			if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
				GSTINPublicData gstndata = gstinPublicDataRepository.findByGstin(invoice.getB2b().get(0).getCtin().toUpperCase().trim());
				  if(isNotEmpty(gstndata)) { 
					  if(isNotEmpty(gstndata.getTradeNam())) {
						  invoice.setBilledtoname(gstndata.getTradeNam());
					  }else if(isNotEmpty(gstndata.getLgnm())) {
						  invoice.setBilledtoname(gstndata.getLgnm());
					  }
				  }else { 
					  Response response = iHubConsumerService.publicSearch(invoice.getB2b().get(0).getCtin().toUpperCase().trim()); 
					  if (isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
						  ResponseData data = response.getData();
						  if(isNotEmpty(data)) {
							  if(isNotEmpty(data.getTradeNam())) {
								  invoice.setBilledtoname(data.getTradeNam());
							  }else if(isNotEmpty(data.getLgnm())) {
								  invoice.setBilledtoname(data.getLgnm());
							  }
						  }
					  }
				  }
			}
			if(isNotEmpty(invoice.getBilledtoname())) {
				saveCustomerOrSupplier(invoice,returntype,states);
			}else {
				invoice.setVendorName("");
			}
		}
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		Double totalIGST = 0d;
		Double totalCGST = 0d;
		Double totalSGST = 0d;
		Double totalExempted = 0d;
		Double totalAssAmt = 0d;
		Double totalStateCessAmt = 0d;
		Double totalCessNonAdVal = 0d;
		Double totalCessAmount = 0d;
		Double toralDiscAmount = 0d;
		Double totalOthrChrgAmount  = 0d;
		if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
			invoice.getB2b().get(0).setCtin(invoice.getB2b().get(0).getCtin().toUpperCase().trim());
			String gstin = invoice.getB2b().get(0).getCtin().toUpperCase().trim();
			if(!gstin.equalsIgnoreCase("URP")) {
			  if (isNotEmpty(invoice.getDealerType())) { 
				  GSTINPublicData gstndata = gstinPublicDataRepository.findByGstin(invoice.getB2b().get(0).getCtin().toUpperCase().trim());
				  if(isNotEmpty(gstndata)) { 
					  if(isNotEmpty(gstndata.getDty())) {
						  invoice.setDealerType(gstndata.getDty()); 
					  }
				  }else { 
					  Response response = iHubConsumerService.publicSearch(invoice.getB2b().get(0).getCtin().toUpperCase().trim()); 
					  if (isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
						  ResponseData data = response.getData(); 
						  if (isNotEmpty(data.getDty())) {
							  invoice.setDealerType(data.getDty()); 
						  } 
					  }
				  } 
			  }
			}
		}
		String ecomtin = "";
		if (isNotEmpty(invoice.getB2cs()) && isNotEmpty(invoice.getB2cs().get(0))
				&& isNotEmpty(invoice.getB2cs().get(0).getEtin())) {
			ecomtin = invoice.getB2cs().get(0).getEtin();
			invoice.setInvoiceEcomGSTIN(ecomtin.trim());
		}
		if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0))
				&& isNotEmpty(invoice.getB2b().get(0).getInv())
				&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
			String address = invoice.getB2b().get(0).getInv().get(0).getAddress();
			if (address.length() == 1 && address.equals(",")) {
				invoice.getB2b().get(0).getInv().get(0).setAddress("");
			}
		}
		//if (!returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
			if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0))	&& isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum()) && isNotEmpty(invoice.getDateofinvoice())) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(invoice.getDateofinvoice());
				int month = cal.get(Calendar.MONTH) + 1;
				int year = cal.get(Calendar.YEAR);
				String submissionYear = (year - 1) + "-" + (year);
				if (month > 3) {
					submissionYear = year + "-" + (year + 1);
				}
				String invType = "";
				if (invoice.getInvtype().equals(MasterGSTConstants.B2B)	|| invoice.getInvtype().equals(MasterGSTConstants.B2C) || invoice.getInvtype().equals(MasterGSTConstants.B2CL)) {
					invType = MasterGSTConstants.B2B;
					if(returntype.equals("Purchase Register")){
						invType = "PurchaseReverseChargeNo";
					}
				} else if(invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
					if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())){
						if(invoice.getCdn().get(0).getNt().get(0).getNtty().equalsIgnoreCase("D")){
							invType = "Debit Note";
						}else if(invoice.getCdn().get(0).getNt().get(0).getNtty().equalsIgnoreCase("C")){
							invType = "Credit Note";
						}
					}
				} else if(returntype.equals("Purchase Register")){
					invType = "PurchaseReverseChargeNo";
				}else {
					invType = invoice.getInvtype();
				}
				CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(invoice.getClientid(),submissionYear, invType, returntype);
				String revNo="";
				if(returntype.equals("Purchase Register")) {
					if(isNotEmpty(invoice) && isNotEmpty(invoice.getRevchargeNo())) {
						revNo = invoice.getRevchargeNo();
					}
				}else {
					revNo = invoice.getB2b().get(0).getInv().get(0).getInum();
				}
				if (isNotEmpty(invoiceConfig) && (isEmpty(invoiceConfig.getPrefix()) || (isNotEmpty(invoiceConfig.getPrefix()) && revNo.startsWith(invoiceConfig.getPrefix())))) {
					String startInvNo = "";
					String endInvNo = "";
					String invPrefix = "";
					String actualNo = "";
					if(returntype.equals("Purchase Register")) {
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getRevchargeNo())) {
							actualNo = invoice.getRevchargeNo();
						}
					}else {
						actualNo = invoice.getB2b().get(0).getInv().get(0).getInum();
					}
					if (isNotEmpty(invoiceConfig.getPrefix())) {
						startInvNo += invoiceConfig.getPrefix().toUpperCase();
						endInvNo += invoiceConfig.getPrefix().toUpperCase();
						invPrefix += invoiceConfig.getPrefix().toUpperCase();
						actualNo = actualNo.replaceFirst(invoiceConfig.getPrefix(), "");
					}
					if (isNotEmpty(invoiceConfig.getAllowMonth()) && invoiceConfig.getAllowMonth().equals("true")) {
						if (isNotEmpty(invoiceConfig.getFormatMonth())) {
							if (invoiceConfig.getFormatMonth().equals("02")) {
								invPrefix += (month < 10 ? "0" + month : month);
								startInvNo += (month < 10 ? "0" + month : month);
								endInvNo += (month < 10 ? "0" + month : month);
								actualNo = actualNo.replaceFirst((month < 10 ? "0" + month : Integer.valueOf(month).toString()), "");
							} else if (invoiceConfig.getFormatMonth().equals("02/")) {
								invPrefix += (month < 10 ? "0" + month + "/" : month + "/");
								startInvNo += (month < 10 ? "0" + month + "/" : month + "/");
								endInvNo += (month < 10 ? "0" + month + "/" : month + "/");
								actualNo = actualNo.replaceFirst((month < 10 ? "0" + month : Integer.valueOf(month).toString()) + "/", "");
							} else if (invoiceConfig.getFormatMonth().equals("02-")) {
								invPrefix += (month < 10 ? "0" + month + "-" : month + "-");
								startInvNo += (month < 10 ? "0" + month + "-" : month + "-");
								endInvNo += (month < 10 ? "0" + month + "-" : month + "-");
								actualNo = actualNo.replaceFirst((month < 10 ? "0" + month : Integer.valueOf(month).toString()) + "-", "");
							} else if (invoiceConfig.getFormatMonth().equals("FEB")) {
								String monthString = getMonthName(month);
								invPrefix += monthString;
								startInvNo += monthString;
								endInvNo += monthString;
								actualNo = actualNo.replaceFirst(monthString, "");
							} else if (invoiceConfig.getFormatMonth().equals("FEB/")) {
								String monthString = getMonthName(month) + "/";
								invPrefix += monthString;
								startInvNo += monthString;
								endInvNo += monthString;
								actualNo = actualNo.replaceFirst(monthString, "");
							} else if (invoiceConfig.getFormatMonth().equals("FEB-")) {
								String monthString = getMonthName(month) + "-";
								invPrefix += monthString;
								startInvNo += monthString;
								endInvNo += monthString;
								actualNo = actualNo.replaceFirst(monthString, "");
							}
						} else {
							invPrefix += (month < 10 ? "0" + month : month);
							startInvNo += (month < 10 ? "0" + month : month);
							endInvNo += (month < 10 ? "0" + month : month);
							actualNo = actualNo.replaceFirst((month < 10 ? "0" + month : Integer.valueOf(month).toString()), "");
						}
					}
					if (isNotEmpty(invoiceConfig.getAllowYear()) && invoiceConfig.getAllowYear().equals("true")) {
						if (isNotEmpty(invoiceConfig.getFormatYear())) {
							if (invoiceConfig.getFormatYear().equals("19")) {
								invPrefix += (Integer.valueOf(year).toString().substring(2));
								startInvNo += (Integer.valueOf(year).toString().substring(2));
								endInvNo += (Integer.valueOf(year).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)), "");
							} else if (invoiceConfig.getFormatYear().equals("19/")) {
								invPrefix += (Integer.valueOf(year).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "/","");
							} else if (invoiceConfig.getFormatYear().equals("19-")) {
								invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "-","");
							} else if (invoiceConfig.getFormatYear().equals("2019")) {
								invPrefix += (Integer.valueOf(year).toString());
								startInvNo += (Integer.valueOf(year).toString());
								endInvNo += (Integer.valueOf(year).toString());
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()), "");
							} else if (invoiceConfig.getFormatYear().equals("2019/")) {
								invPrefix += (Integer.valueOf(year).toString()) + "/";
								startInvNo += (Integer.valueOf(year).toString()) + "/";
								endInvNo += (Integer.valueOf(year).toString()) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "/", "");
							} else if (invoiceConfig.getFormatYear().equals("2019-")) {
								invPrefix += (Integer.valueOf(year).toString()) + "-";
								startInvNo += (Integer.valueOf(year).toString()) + "-";
								endInvNo += (Integer.valueOf(year).toString()) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-", "");
							} else if (invoiceConfig.getFormatYear().equals("19-20")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2));
									startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2));
									endInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2)), "");
								} else {
									invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2));
									startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2));
									endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)), "");
								}
							} else if (invoiceConfig.getFormatYear().equals("19-20-")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"	+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("19-20/")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"	+ (Integer.valueOf(year).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2)) + "-" + (Integer.valueOf(year).toString().substring(2)) + "/", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("1920")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2));
									startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2));
									endInvNo += (Integer.valueOf(year - 1).toString().substring(2))	+ (Integer.valueOf(year).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)), "");
								} else {
									invPrefix += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2));
									startInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2));
									endInvNo += (Integer.valueOf(year).toString().substring(2))	+ (Integer.valueOf(year + 1).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)), "");
								}
							} else if (invoiceConfig.getFormatYear().equals("1920-")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year - 1).toString().substring(2))	+ (Integer.valueOf(year).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "-", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year).toString().substring(2))	+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("1920/")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year - 1).toString().substring(2))	+ (Integer.valueOf(year).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2)) + (Integer.valueOf(year).toString().substring(2)) + "/", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("2019-20")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2));
									startInvNo += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2));
									endInvNo += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)), "");
								} else {
									invPrefix += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2));
									startInvNo += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2));
									endInvNo += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)), "");
								}
							} else if (invoiceConfig.getFormatYear().equals("2019-20-")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "-", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("2019-20/")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + "-" + (Integer.valueOf(year).toString().substring(2)) + "/", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year).toString()) + "-"+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year).toString()) + "-"+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("201920")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2));
									startInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2));
									endInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)), "");
								} else {
									invPrefix += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2));
									startInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2));
									endInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2));
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)), "");
								}
							} else if (invoiceConfig.getFormatYear().equals("201920-")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "-", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									startInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									endInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "-";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
								}
							} else if (invoiceConfig.getFormatYear().equals("201920/")) {
								if (month <= 3) {
									invPrefix += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + (Integer.valueOf(year).toString().substring(2)) + "/", "");
								} else {
									invPrefix += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									startInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									endInvNo += (Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "/";
									actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
								}
							}
						} else {
							invPrefix += (Integer.valueOf(year).toString());
							startInvNo += (Integer.valueOf(year).toString());
							endInvNo += (Integer.valueOf(year).toString());
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()), "");
						}
					}
					String ssinvno = startInvNo;
					if (isNotEmpty(invoiceConfig.getStartInvoiceNo())) {
						startInvNo += invoiceConfig.getStartInvoiceNo();
					}
					if (isNotEmpty(invoiceConfig.getEndInvoiceNo())) {
						endInvNo += invoiceConfig.getEndInvoiceNo();
					}
					String invOrRevNo = "";
					if(returntype.equals("Purchase Register")) {
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getRevchargeNo())) {
							invOrRevNo = invoice.getRevchargeNo();
						}
					}else {
						invOrRevNo = invoice.getB2b().get(0).getInv().get(0).getInum();
					}
					if (invOrRevNo.startsWith(ssinvno)) {
						ClientAddlInfo clientInfo = clientAddlInfoRepository.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(invoice.getClientid(), returntype, invType, submissionYear, month);
						if (isEmpty(clientInfo)) {
							clientInfo = clientAddlInfoRepository.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(invoice.getClientid(), returntype, "ALL", submissionYear, month);
						}
						if (isEmpty(clientInfo)) {
							clientInfo = new ClientAddlInfo();
							clientInfo.setClientId(invoice.getClientid());
							clientInfo.setReturnType(returntype);
							clientInfo.setFinancialYear(submissionYear);
							clientInfo.setMonth(month);
							try {
								Integer invNo = Integer.parseInt(actualNo);
								invNo++;
								clientInfo.setInvoiceNo(invPrefix + invNo);
								if (isNotEmpty(invoiceConfig.getInvoiceType()) && !invoiceConfig.equals("ALL")) {
									clientInfo.setInvoiceType(invoiceConfig.getInvoiceType());
								}
								clientAddlInfoRepository.save(clientInfo);
							} catch (Exception e) {
							}
						} else {
							String invnum = invoice.getB2b().get(0).getInv().get(0).getInum();
							if("PurchaseReverseChargeNo".equals(invType)) {
								if(isNotEmpty(invoice.getRevchargeNo())) {
									invnum = invoice.getRevchargeNo();
								}
							}
							if (clientInfo.getInvoiceNo().compareTo(invnum) <= 0) {
								try {
									Integer invNo = Integer.parseInt(actualNo);
									invNo++;
									clientInfo.setInvoiceNo(invPrefix + invNo);
									if (isNotEmpty(invoiceConfig.getInvoiceType()) && !invoiceConfig.equals("ALL")) {
										clientInfo.setInvoiceType(invoiceConfig.getInvoiceType());
									}
									clientAddlInfoRepository.save(clientInfo);
								} catch (Exception e) {
								}
							}
						}
					}
				}
			}
		//}
		List<GSTRItems> gstrItems = Lists.newArrayList();
		String stateTin = getStateCode(invoice.getStatename());
		if (isNotEmpty(invoice.getItems())) {
			if(isNotEmpty(invoice.getInvtype())) {
				for (Item nItem : invoice.getItems()) {
					if(isEmpty(nItem.getLedgerName())) {
						if(invoice.getInvtype().equals(MasterGSTConstants.ADVANCES)) {
							nItem.setLedgerName(AccountConstants.CASH);
						}else {
							if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
								nItem.setLedgerName(AccountConstants.PURCHASES);
							}else {
								nItem.setLedgerName(AccountConstants.SALES);
							}
						}
					}
				}
			}
			if (isNotEmpty(invoice.getItems()) && isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.NIL)) {
				for (Item nItem : invoice.getItems()) {
					if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
						if (isNotEmpty(nItem.getType())) {
							PurchaseRegister pinvoice = (PurchaseRegister) (invoice);
							if (isEmpty(pinvoice.getNilSupplies())) {
								pinvoice.setNilSupplies(new GSTRNilSupplies());
							}
							if (isIntraState) {
								if (isEmpty(pinvoice.getNilSupplies().getIntra())) {
									pinvoice.getNilSupplies().setIntra(new GSTRNilSupItems());
								}
								populateNilItems(nItem, pinvoice.getNilSupplies().getIntra());
							} else {
								if (isEmpty(pinvoice.getNilSupplies().getInter())) {
									pinvoice.getNilSupplies().setInter(new GSTRNilSupItems());
								}
								populateNilItems(nItem, pinvoice.getNilSupplies().getInter());
							}
						}
					} else {
						String supplyType = null;
						if (isIntraState) {
							if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
								supplyType = MasterGSTConstants.SUPPLY_TYPE_INTRA + B2B;
							} else {
								supplyType = MasterGSTConstants.SUPPLY_TYPE_INTRA + B2C;
							}
						} else {
							if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
								supplyType = "INTR" + B2B;
							} else {
								supplyType = "INTR" + B2C;
							}
						}
						
						if(!(MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL).equals(invoice.getGenerateMode())) {
								
							if (isNotEmpty(nItem.getType()) && isNotEmpty(supplyType)) {
								if (isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getInv())) {
									boolean present = false;
									for (GSTRNilItems eItem : invoice.getNil().getInv()) {
										if (isNotEmpty(eItem.getSplyType()) && eItem.getSplyType().equals(supplyType)) {
											present = true;
											populateNilItems(nItem, eItem);
											break;
										}
									}
									if (!present) {
										GSTRNilItems eItem = new GSTRNilItems();
										eItem.setSplyType(supplyType);
										populateNilItems(nItem, eItem);
										invoice.getNil().getInv().add(eItem);
										// tally nill supplies facing problem (tally import)
									}
								} else {
									GSTRNilInvoices nil = new GSTRNilInvoices();
									List<GSTRNilItems> nilItems = Lists.newArrayList();
									GSTRNilItems eItem = new GSTRNilItems();
									eItem.setSplyType(supplyType);
									populateNilItems(nItem, eItem);
									nilItems.add(eItem);
									nil.setInv(nilItems);
									invoice.setNil(nil);
								}
							}
						}else {
							if(isNotEmpty(invoice.getGenerateMode())){
								if((MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL).equals(invoice.getGenerateMode())) {
									if (isNotEmpty(invoice.getNil().getInv().get(0).getSplyType())) {
										invoice.setGenerateMode(MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL);
										String type = invoice.getNil().getInv().get(0).getSplyType();
										GSTRNilItems eItem = new GSTRNilItems();
										eItem.setSplyType("");
										populateNilItems(nItem, eItem);
									}
								}
							}
						}
					}
				}
			}
			if(isNotEmpty(invoice.getGenerateMode())){
				if((MasterGSTConstants.TALLY_TEMPLATE+"-"+MasterGSTConstants.NIL).equals(invoice.getGenerateMode())) {
					invoice.setGenerateMode(null);
				}
			}
			if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
				PurchaseRegister pinvoice = (PurchaseRegister) (invoice);
				if (isNotEmpty(pinvoice) && isNotEmpty(pinvoice.getItems()) && isNotEmpty(pinvoice.getInvtype()) && pinvoice.getInvtype().equals(MasterGSTConstants.ISD)) {
					pinvoice.getIsd().get(0).setCtin(pinvoice.getB2b().get(0).getCtin());
					List<GSTRDocListDetails> doclist = getIsdItem(pinvoice);
					pinvoice.getIsd().get(0).setDoclist(doclist);
				}
				invoice = pinvoice;
			}
			if (returntype.equals(MasterGSTConstants.GSTR6) || returntype.equals(MasterGSTConstants.ISD)) {
				GSTR6 g6invoice = (GSTR6) (invoice);
				GSTR6EligibleDetails eligDetails = new GSTR6EligibleDetails();
				GSTR6EligibleDetails ineligDetails = new GSTR6EligibleDetails();
				if (isNotEmpty(g6invoice) && isNotEmpty(g6invoice.getItems()) && isNotEmpty(g6invoice.getInvtype()) && (g6invoice.getInvtype().equals(MasterGSTConstants.ISD) ||
						g6invoice.getInvtype().equals(MasterGSTConstants.ISDCN) || g6invoice.getInvtype().equals(MasterGSTConstants.ISDDN))) {
					if(isNotEmpty(g6invoice.getB2b().get(0).getCtin())) {
						eligDetails.setCpty(g6invoice.getB2b().get(0).getCtin());
						ineligDetails.setCpty(g6invoice.getB2b().get(0).getCtin());
						eligDetails.setTyp("R");
						ineligDetails.setTyp("R");
					}else {
						eligDetails.setTyp("UR");
						ineligDetails.setTyp("UR");
					}
					if(isNotEmpty(invoice.getStatename())) {
						String[] stname = invoice.getStatename().split("-");
						if(isNotEmpty(stname)) {
							eligDetails.setStatecd(stname[0]);
							ineligDetails.setStatecd(stname[0]);
						}
					}
					List<GSTR6DocDetails> elgdoclist = getGstr6EligibleISDItems(g6invoice);
					List<GSTR6DocDetails> inelgdoclist = getGstr6InEligibleISDItems(g6invoice);
					eligDetails.setDoclst(elgdoclist);
					ineligDetails.setDoclst(inelgdoclist);
					g6invoice.getIsd().get(0).setElglst(eligDetails);
					g6invoice.getIsd().get(0).setInelglst(ineligDetails);
				} 
				invoice = g6invoice;
				
			}
			if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
				PurchaseRegister pinvoice = (PurchaseRegister) (invoice);
				if (isNotEmpty(pinvoice.getItems()) && isNotEmpty(pinvoice.getInvtype()) && pinvoice.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)) {
					for (Item pitem : pinvoice.getItems()) {
						GSTRItemDetails item = getReversalItemByType(pinvoice, pitem.getItcRevtype());
						if (item != null) {
							if (isNotEmpty(item.getIamt())) {
								Double iamt = item.getIamt() + pitem.getIgstamount();
								item.setIamt(iamt);
							} else {
								item.setIamt(pitem.getIgstamount());
							}
							if (isNotEmpty(item.getCamt())) {
								Double camt = item.getCamt() + pitem.getCgstamount();
								item.setCamt(camt);
							} else {
								item.setCamt(pitem.getCgstamount());
							}
							if (isNotEmpty(item.getSamt())) {
								Double samt = item.getSamt() + pitem.getSgstamount();
								item.setSamt(samt);
							} else {
								item.setSamt(pitem.getSgstamount());
							}
							if (isNotEmpty(item.getCsamt())) {
								Double cessamt = item.getCsamt() + pitem.getIsdcessamount();
								item.setCsamt(cessamt);
							} else {
								item.setCsamt(pitem.getIsdcessamount());
							}
						}
					}
				}
				invoice = pinvoice;
			}
			if (isEmpty(invoice.getInvtype())) {
				List<Item> fItems = Lists.newArrayList();
				for (Item item : invoice.getItems()) {
					if (isEmpty(item.getQuantity())) {
						item.setQuantity(1d);
					}
					if (isEmpty(item.getRateperitem())) {
						if (isNotEmpty(item.getTaxablevalue())) {
							item.setRateperitem(item.getTaxablevalue());
						}
					}
					if(isNotEmpty(invoice.getGstr1orEinvoice()) && "Einvoice".equalsIgnoreCase(invoice.getGstr1orEinvoice())) {
						if(isNotEmpty(item.getTaxablevalue())) {
							item.setAssAmt(item.getTaxablevalue());
						}
					}
					if (isEmpty(item.getCategory())) {
						if (isNotEmpty(item.getHsn()) && item.getHsn().contains(" : ")) {
							item.setCategory(MasterGSTConstants.GOODS);
						} else {
							item.setCategory(MasterGSTConstants.SERVICES);
						}
					}
					if ((isNotEmpty(item.getIgstrate()) || isNotEmpty(item.getCgstrate())) || (isNotEmpty(item.getHsn()) || isNotEmpty(item.getSac()) || isNotEmpty(item.getRate()))) {
						if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.EXPORTS)) {
							if (isNotEmpty(item.getRate()) && item.getRate() > 0) {
								item.setIgstrate(item.getRate());
							}else {
								item.setIgstrate(0d);
							}
						}else {
							if (isNotEmpty(item.getRate()) && item.getRate() > 0) {
								if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0 && isEmpty(item.getIgstrate())) {
									item.setIgstrate(item.getRate());
								} else if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() > 0
										&& isNotEmpty(item.getSgstamount()) && isEmpty(item.getCgstrate())
										&& isEmpty(item.getSgstrate())) {
									item.setCgstrate(item.getRate() / 2);
									item.setSgstrate(item.getRate() / 2);
								}
							}else {
								if(isIntraState) {
									item.setCgstrate(item.getRate() / 2);
									item.setSgstrate(item.getRate() / 2);
								}else {
									item.setIgstrate(item.getRate());
								}
							}
						}
						fItems.add(item);
					}
				}
				invoice.setItems(fItems);
			}
			if (!invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
				if (invoice.getInvtype().equals(MasterGSTConstants.IMP_GOODS) || invoice.getInvtype().equals(MasterGSTConstants.IMP_SERVICES)) {
					gstrItems = populateItemData(invoice, false, returntype);
				}else {
					gstrItems = populateItemData(invoice, isIntraState, returntype);
				}
			}
		}
		if (isNotEmpty(invoice.getRevchargetype()) && !invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_TCS)) {
			if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
				invoice.getB2b().get(0).getInv().get(0).setEtin("");
				invoice.setEcomoperatorid("");
			}
		}
		if (isEmpty(invoice.getInvoiceno()) && isNotEmpty(invoice.getB2b())
				&& isNotEmpty(invoice.getB2b().get(0).getInv())
				&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
			invoice.setInvoiceno(invoice.getB2b().get(0).getInv().get(0).getInum());
		}
		if (isEmpty(invoice.getInvtype())) {
			invoice.setExp(Lists.newArrayList());
			invoice.setTxpd(Lists.newArrayList());
			invoice.setCdn(Lists.newArrayList());
			invoice.setCdnur(Lists.newArrayList());
			if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())) {
				if (invoice.getTotalamount() > 250000 && !isIntraState) {
					invoice.setInvtype(B2CL);
					if (isEmpty(invoice.getB2cl())) {
						List<GSTRB2CL> b2cl = Lists.newArrayList();
						GSTRB2CL gstrb2clInvoice = new GSTRB2CL();
						List<GSTRInvoiceDetails> inv = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						List<GSTRItems> itms = Lists.newArrayList();
						GSTRItems gstrItem = new GSTRItems();
						gstrItem.setNum(1);
						itms.add(gstrItem);
						gstrInvoiceDetail.setItms(itms);
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							gstrInvoiceDetail.setDiffPercent(0.65);
						}
						inv.add(gstrInvoiceDetail);
						gstrb2clInvoice.setInv(inv);
						b2cl.add(gstrb2clInvoice);
						invoice.setB2cl(b2cl);
					} else if (isEmpty(invoice.getB2cl().get(0).getInv())) {
						List<GSTRInvoiceDetails> inv = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							gstrInvoiceDetail.setDiffPercent(0.65);
						}
						List<GSTRItems> itms = Lists.newArrayList();
						GSTRItems gstrItem = new GSTRItems();
						gstrItem.setNum(1);
						itms.add(gstrItem);
						gstrInvoiceDetail.setItms(itms);
						inv.add(gstrInvoiceDetail);
						invoice.getB2cl().get(0).setInv(inv);
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						invoice.getB2cl().get(0).getInv().get(0)
								.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
							invoice.getB2cl().get(0).getInv().get(0)
									.setInum(invoice.getB2b().get(0).getInv().get(0).getInum().toUpperCase());
						}
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
							invoice.getB2cl().get(0).getInv().get(0)
									.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
						}
					}
					if (isNotEmpty(ecomtin)) {
						invoice.getB2cl().get(0).getInv().get(0).setEtin(ecomtin);
					}
					invoice.getB2cl().get(0).getInv().get(0).setVal(invoice.getTotalamount());
					if (isNotEmpty(invoice.getStatename())) {
						invoice.getB2cl().get(0).setPos(stateTin);
					}
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						invoice.getB2cl().get(0).getInv().get(0).setDiffPercent(0.65);
					}
					if (isNotEmpty(gstrItems)) {
						for (GSTRItems gstrItem : gstrItems) {
							if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItem().getAdvAmt())) {
								gstrItem.getItem().setAdvAmt(null);
							}
						}
					}
					invoice.getB2cl().get(0).getInv().get(0).setItms(gstrItems);
				} else {
					invoice.setInvtype(B2C);
					if (isEmpty(invoice.getB2cs())) {
						List<GSTRB2CS> b2cs = Lists.newArrayList();
						invoice.setB2cs(b2cs);
					}
//					List<GSTRB2CS> b2cs = Lists.newArrayList();
					String b2cskey="";
					List<GSTRB2CS> newInvs = Lists.newArrayList();
					List<String> b2cskeys = Lists.newArrayList();
					Map<String,GSTRB2CS> newb2csmap = Maps.newHashMap();
					for (Item item : invoice.getItems()) {
						GSTRB2CS gstrb2csDetail = new GSTRB2CS();
						if (isNotEmpty(item.getIgstrate())) {
							gstrb2csDetail.setRt(item.getIgstrate());
						} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())) {
							gstrb2csDetail.setRt(item.getCgstrate() + item.getSgstrate());
						}
						if (!isIntraState && isNotEmpty(item.getIgstamount())) {
							gstrb2csDetail.setIamt(item.getIgstamount());
							// gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
						} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
							gstrb2csDetail.setCamt(item.getCgstamount());
							gstrb2csDetail.setSamt(item.getSgstamount());
						}
						if (isIntraState) {
							gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
						} else {
							gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
						}

						gstrb2csDetail.setCsamt(item.getCessamount());
						gstrb2csDetail.setTxval(item.getTaxablevalue());
						if (isNotEmpty(invoice.getStatename())) {
							gstrb2csDetail.setPos(stateTin);
						}
						gstrb2csDetail.setTyp("OE");
						if (isNotEmpty(ecomtin)) {
							gstrb2csDetail.setTyp("E");
							gstrb2csDetail.setEtin(ecomtin.toUpperCase());
						} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
							gstrb2csDetail.setTyp("E");
							gstrb2csDetail.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
						}
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							gstrb2csDetail.setDiffPercent(0.65);
						}
//						b2cs.add(gstrb2csDetail);
						
						
						b2cskey = gstrb2csDetail.getPos()+"-"+gstrb2csDetail.getRt();
						if(!newb2csmap.containsKey(b2cskey)) {
							newb2csmap.put(b2cskey, gstrb2csDetail);
							b2cskeys.add(b2cskey);
						}else {
							GSTRB2CS b2c = newb2csmap.get(b2cskey);
							if (isNotEmpty(gstrb2csDetail.getTxval())) {
								if (isNotEmpty(b2c.getTxval())) {
									b2c.setTxval(b2c.getTxval() + gstrb2csDetail.getTxval());
								} else {
									b2c.setTxval(gstrb2csDetail.getTxval());
								}
							}
							if (isNotEmpty(gstrb2csDetail.getIamt())) {
								if (isNotEmpty(b2c.getIamt())) {
									b2c.setIamt(b2c.getIamt() + gstrb2csDetail.getIamt());
								} else {
									b2c.setIamt(gstrb2csDetail.getIamt());
								}
							}
							if (isNotEmpty(gstrb2csDetail.getCamt())) {
								if (isNotEmpty(b2c.getCamt())) {
									b2c.setCamt(b2c.getCamt() + gstrb2csDetail.getCamt());
								} else {
									b2c.setCamt(gstrb2csDetail.getCamt());
								}
							}
							if (isNotEmpty(gstrb2csDetail.getSamt())) {
								if (isNotEmpty(b2c.getSamt())) {
									b2c.setSamt(b2c.getSamt() + gstrb2csDetail.getSamt());
								} else {
									b2c.setSamt(gstrb2csDetail.getSamt());
								}
							}
							if (isNotEmpty(gstrb2csDetail.getCsamt())) {
								if (isNotEmpty(b2c.getCsamt())) {
									b2c.setCsamt(b2c.getCsamt() + gstrb2csDetail.getCsamt());
								} else {
									b2c.setCsamt(gstrb2csDetail.getCsamt());
								}
							}
							newb2csmap.put(b2cskey, b2c);
						}
					}
					
					for(String key : b2cskeys) {
						GSTRB2CS b2c = newb2csmap.get(key);
						newInvs.add(b2c);
					}
					invoice.setB2cs(newInvs);
					//invoice.setB2cs(b2cs);
				}
			} else {
				invoice.setInvtype(B2B);
				if (isEmpty(invoice.getB2b().get(0).getInv())) {
					List<GSTRInvoiceDetails> inv = Lists.newArrayList();
					GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
					List<GSTRItems> itms = Lists.newArrayList();
					GSTRItems gstrItem = new GSTRItems();
					gstrItem.setNum(1);
					itms.add(gstrItem);
					gstrInvoiceDetail.setItms(itms);
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						gstrInvoiceDetail.setDiffPercent(0.65);
					}
					inv.add(gstrInvoiceDetail);
					invoice.getB2b().get(0).setInv(inv);
				} else if (isEmpty(invoice.getB2b().get(0).getInv().get(0).getItms())) {
					List<GSTRItems> itms = Lists.newArrayList();
					GSTRItems gstrItem = new GSTRItems();
					gstrItem.setNum(1);
					itms.add(gstrItem);
					invoice.getB2b().get(0).getInv().get(0).setItms(itms);
				}
				if (isNotEmpty(ecomtin)) {
					invoice.getB2b().get(0).getInv().get(0).setEtin(ecomtin);
				}
				String diffper = invoice.getDiffPercent();
				if ("Yes".equals(diffper)) {
					invoice.getB2b().get(0).getInv().get(0).setDiffPercent(0.65);
				}
				if (isNotEmpty(invoice.getDateofinvoice())) {
					invoice.getB2b().get(0).getInv().get(0).setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
				}
				if (isEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
					invoice.getB2b().get(0).getInv().get(0).setInvTyp("R");
				} else {
					String invTyp = invoice.getB2b().get(0).getInv().get(0).getInvTyp();
					if ("Regular".equals(invTyp)) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("R");
					} else if ("Deemed Exports".equals(invTyp)) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("DE");
					} else if ("Supplies to SEZ with payment".equals(invTyp)) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("SEWP");
					} else if ("Supplies to SEZ without payment".equals(invTyp)) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("SEWOP");
					} else if ("Sale from Bonded Warehouse".equals(invTyp)) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("CBW");
					} else {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp(invTyp);
					}
				}
				invoice.getB2b().get(0).getInv().get(0).setVal(invoice.getTotalamount());
				if (isNotEmpty(invoice.getStatename())) {
					invoice.getB2b().get(0).getInv().get(0).setPos(stateTin);
				}
				if ((isNotEmpty(invoice.getRevchargetype())
						&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE))
						|| (isNotEmpty(invoice.getRevchargetype()) && invoice.getRevchargetype().equals("YES"))) {
					invoice.setRevchargetype(MasterGSTConstants.TYPE_REVERSE);
					invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
				} else {
					invoice.setRevchargetype("Regular");
					invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
				}
				if (isNotEmpty(gstrItems)) {
					for (GSTRItems gstrItem : gstrItems) {
						if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItem().getAdvAmt())) {
							gstrItem.getItem().setAdvAmt(null);
						}
					}
				}
				invoice.getB2b().get(0).getInv().get(0).setItms(gstrItems);
			}
		} else {
			if (invoice.getInvtype().equals(B2C) || invoice.getInvtype().equals(MasterGSTConstants.B2CSA)) {
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());

				if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					invoice.setB2cs(Lists.newArrayList());
					invoice.setB2cl(Lists.newArrayList());
					invoice.setInvtype(B2B);
					if (isEmpty(invoice.getB2b().get(0).getInv())) {
						List<GSTRInvoiceDetails> inv = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						List<GSTRItems> itms = Lists.newArrayList();
						GSTRItems gstrItem = new GSTRItems();
						gstrItem.setNum(1);
						itms.add(gstrItem);
						gstrInvoiceDetail.setItms(itms);
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							gstrInvoiceDetail.setDiffPercent(0.65);
						}
						inv.add(gstrInvoiceDetail);
						invoice.getB2b().get(0).setInv(inv);
					} else if (isEmpty(invoice.getB2b().get(0).getInv().get(0).getItms())) {
						List<GSTRItems> itms = Lists.newArrayList();
						GSTRItems gstrItem = new GSTRItems();
						gstrItem.setNum(1);
						itms.add(gstrItem);
						invoice.getB2b().get(0).getInv().get(0).setItms(itms);
					}
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						invoice.getB2b().get(0).getInv().get(0).setDiffPercent(0.65);
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						invoice.getB2b().get(0).getInv().get(0)
								.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
					}
					if (isEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("R");
					} else {
						invoice.getB2b().get(0).getInv().get(0)
								.setInvTyp(invoice.getB2b().get(0).getInv().get(0).getInvTyp());
					}
					invoice.getB2b().get(0).getInv().get(0).setVal(invoice.getTotalamount());
					if (isNotEmpty(invoice.getStatename())) {
						invoice.getB2b().get(0).getInv().get(0).setPos(stateTin);
					}
					if (isNotEmpty(invoice.getRevchargetype())
							&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
						invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					if (isNotEmpty(gstrItems)) {
						for (GSTRItems gstrItem : gstrItems) {
							if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItem().getAdvAmt())) {
								gstrItem.getItem().setAdvAmt(null);
							}
						}
					}
					invoice.getB2b().get(0).getInv().get(0).setItms(gstrItems);
					if (isNotEmpty(ecomtin)) {
						invoice.getB2b().get(0).getInv().get(0).setEtin(ecomtin);
					}
				} else {
					if (invoice.getTotalamount() > 250000 && !isIntraState) {
						invoice.setInvtype(B2CL);
						if (isEmpty(invoice.getB2cl())) {
							List<GSTRB2CL> b2cl = Lists.newArrayList();
							GSTRB2CL gstrb2clInvoice = new GSTRB2CL();
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							List<GSTRItems> itms = Lists.newArrayList();
							GSTRItems gstrItem = new GSTRItems();
							gstrItem.setNum(1);
							itms.add(gstrItem);
							gstrInvoiceDetail.setItms(itms);
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrInvoiceDetail.setDiffPercent(0.65);
							}
							inv.add(gstrInvoiceDetail);
							gstrb2clInvoice.setInv(inv);
							b2cl.add(gstrb2clInvoice);
							invoice.setB2cl(b2cl);
						} else if (isEmpty(invoice.getB2cl().get(0).getInv())) {
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrInvoiceDetail.setDiffPercent(0.65);
							}
							List<GSTRItems> itms = Lists.newArrayList();
							GSTRItems gstrItem = new GSTRItems();
							gstrItem.setNum(1);
							itms.add(gstrItem);
							gstrInvoiceDetail.setItms(itms);
							inv.add(gstrInvoiceDetail);
							invoice.getB2cl().get(0).setInv(inv);
						}
						if (isNotEmpty(invoice.getDateofinvoice())) {
							invoice.getB2cl().get(0).getInv().get(0)
									.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
						}
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
								invoice.getB2cl().get(0).getInv().get(0)
										.setInum(invoice.getB2b().get(0).getInv().get(0).getInum().toUpperCase());
							}
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								invoice.getB2cl().get(0).getInv().get(0)
										.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
							}
						}
						if (isNotEmpty(ecomtin)) {
							invoice.getB2cl().get(0).getInv().get(0).setEtin(ecomtin);
						}
						invoice.getB2cl().get(0).getInv().get(0).setVal(invoice.getTotalamount());
						if (isNotEmpty(invoice.getStatename())) {
							invoice.getB2cl().get(0).setPos(stateTin);
						}
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							invoice.getB2cl().get(0).getInv().get(0).setDiffPercent(0.65);
						}
						if (isNotEmpty(gstrItems)) {
							for (GSTRItems gstrItem : gstrItems) {
								if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItem().getAdvAmt())) {
									gstrItem.getItem().setAdvAmt(null);
								}
							}
						}
						invoice.getB2cl().get(0).getInv().get(0).setItms(gstrItems);
					}else {
						
						if(invoice.getInvtype().equals(MasterGSTConstants.B2CSA)) {
							
							Map<String,GSTRItemDetails> itemsmap = Maps.newHashMap();
							List<GSTRB2CSA> gstrb2csaDetaillst = Lists.newArrayList();
							GSTRB2CSA gstrb2csaDetail = new GSTRB2CSA();
							if (isIntraState) {
								gstrb2csaDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
							} else {
								gstrb2csaDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							}
							if (isNotEmpty(invoice.getStatename())) {
								gstrb2csaDetail.setPos(stateTin);
							}
							gstrb2csaDetail.setTyp("OE");
							if (isNotEmpty(ecomtin)) {
								gstrb2csaDetail.setTyp("E");
							} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								gstrb2csaDetail.setTyp("E");
							}
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrb2csaDetail.setDiffPercent(0.65);
							}
							List<GSTRItemDetails> itms = Lists.newArrayList();
							for (Item item : invoice.getItems()) {
								GSTRItemDetails itm = new GSTRItemDetails();
								
								if (isNotEmpty(item.getIgstrate())) {
									itm.setRt(item.getIgstrate());
								} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())) {
									itm.setRt(item.getCgstrate() + item.getSgstrate());
								}
								if (!isIntraState && isNotEmpty(item.getIgstamount())) {
									itm.setIamt(item.getIgstamount());
								} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
									itm.setCamt(item.getCgstamount());
									itm.setSamt(item.getSgstamount());
								}
								
								if (isNotEmpty(item.getCessamount())) {
									itm.setCsamt(item.getCessamount());
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									itm.setTxval(item.getTaxablevalue());
								}
								String b2cskey = gstrb2csaDetail.getPos()+"-"+itm.getRt();
								if(!itemsmap.containsKey(b2cskey)) {
									itemsmap.put(b2cskey, itm);
								}else {
									GSTRItemDetails itmm = itemsmap.get(b2cskey);
									if (isNotEmpty(item.getTaxablevalue())) {
										if (isNotEmpty(itmm.getTxval())) {
											itmm.setTxval(itmm.getTxval() + item.getTaxablevalue());
										} else {
											itmm.setTxval(item.getTaxablevalue());
										}
									}
									if (isNotEmpty(item.getIgstamount())) {
										if (isNotEmpty(itmm.getIamt())) {
											itmm.setIamt(itmm.getIamt() + item.getIgstamount());
										} else {
											itmm.setIamt(item.getIgstamount());
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										if (isNotEmpty(itmm.getCamt())) {
											itmm.setCamt(itmm.getCamt() + item.getCgstamount());
										} else {
											itmm.setCamt(item.getCgstamount());
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										if (isNotEmpty(itmm.getSamt())) {
											itmm.setSamt(itmm.getSamt() + item.getSgstamount());
										} else {
											itmm.setSamt(item.getSgstamount());
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										if (isNotEmpty(itmm.getCsamt())) {
											itmm.setCsamt(itmm.getCsamt() + item.getCessamount());
										} else {
											itmm.setCsamt(item.getCessamount());
										}
									}
									itemsmap.put(b2cskey, itmm);
								}
							}
							List<GSTRItemDetails> items = itemsmap.values().stream().collect(Collectors.toList());
							gstrb2csaDetail.setItms(items);
							gstrb2csaDetaillst.add(gstrb2csaDetail);
							((GSTR1)invoice).setB2csa(gstrb2csaDetaillst);
							clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						}
						
						//String ecomGSTIN = invoice.getB2cs().get(0).getEtin();
						String b2cskey="";
						List<GSTRB2CS> newInvs = Lists.newArrayList();
						List<String> b2cskeys = Lists.newArrayList();
						Map<String,GSTRB2CS> newb2csmap = Maps.newHashMap();
						for (Item item : invoice.getItems()) {
							GSTRB2CS gstrb2csDetail = new GSTRB2CS();
							if (isNotEmpty(item.getIgstrate())) {
								gstrb2csDetail.setRt(item.getIgstrate());
							} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())) {
								gstrb2csDetail.setRt(item.getCgstrate() + item.getSgstrate());
							}
							if (!isIntraState && isNotEmpty(item.getIgstamount())) {
								gstrb2csDetail.setIamt(item.getIgstamount());
								// gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
								gstrb2csDetail.setCamt(item.getCgstamount());
								gstrb2csDetail.setSamt(item.getSgstamount());
							}
							if (isIntraState) {
								gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
							} else {
								gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							}
	
							gstrb2csDetail.setCsamt(item.getCessamount());
							gstrb2csDetail.setTxval(item.getTaxablevalue());
							if (isNotEmpty(invoice.getStatename())) {
								gstrb2csDetail.setPos(stateTin);
							}
							gstrb2csDetail.setTyp("OE");
							if (isNotEmpty(ecomtin)) {
								gstrb2csDetail.setTyp("E");
								gstrb2csDetail.setEtin(ecomtin.toUpperCase());
							} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								gstrb2csDetail.setTyp("E");
								gstrb2csDetail.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
							}
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrb2csDetail.setDiffPercent(0.65);
							}
	//						b2cs.add(gstrb2csDetail);
							
							
							b2cskey = gstrb2csDetail.getPos()+"-"+gstrb2csDetail.getRt();
							if(!newb2csmap.containsKey(b2cskey)) {
								newb2csmap.put(b2cskey, gstrb2csDetail);
								b2cskeys.add(b2cskey);
							}else {
								GSTRB2CS b2c = newb2csmap.get(b2cskey);
								if (isNotEmpty(gstrb2csDetail.getTxval())) {
									if (isNotEmpty(b2c.getTxval())) {
										b2c.setTxval(b2c.getTxval() + gstrb2csDetail.getTxval());
									} else {
										b2c.setTxval(gstrb2csDetail.getTxval());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getIamt())) {
									if (isNotEmpty(b2c.getIamt())) {
										b2c.setIamt(b2c.getIamt() + gstrb2csDetail.getIamt());
									} else {
										b2c.setIamt(gstrb2csDetail.getIamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getCamt())) {
									if (isNotEmpty(b2c.getCamt())) {
										b2c.setCamt(b2c.getCamt() + gstrb2csDetail.getCamt());
									} else {
										b2c.setCamt(gstrb2csDetail.getCamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getSamt())) {
									if (isNotEmpty(b2c.getSamt())) {
										b2c.setSamt(b2c.getSamt() + gstrb2csDetail.getSamt());
									} else {
										b2c.setSamt(gstrb2csDetail.getSamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getCsamt())) {
									if (isNotEmpty(b2c.getCsamt())) {
										b2c.setCsamt(b2c.getCsamt() + gstrb2csDetail.getCsamt());
									} else {
										b2c.setCsamt(gstrb2csDetail.getCsamt());
									}
								}
								newb2csmap.put(b2cskey, b2c);
							}
						}
						
						for(String key : b2cskeys) {
							GSTRB2CS b2c = newb2csmap.get(key);
							newInvs.add(b2c);
						}
						
						//b2csmap.put(b2cskey, newInvs);
						invoice.setB2cs(newInvs);
					}

				}
			} else if (invoice.getInvtype().equals(ADVANCES) || invoice.getInvtype().equals(MasterGSTConstants.ATA)) {
				List<GSTRAdvanceTax> at = null;
				if (returntype.equals(GSTR1)) {
					at = ((GSTR1) invoice).getAt();
				} else if (returntype.equals(GSTR2)) {
					at = ((GSTR2) invoice).getTxi();
				} else if (returntype.equals(PURCHASE_REGISTER)) {
					at = ((PurchaseRegister) invoice).getTxi();
				} else if (returntype.equals(GSTR4)) {
					at = ((GSTR4) invoice).getAt();
				}
				if (at == null) {
					at = Lists.newArrayList();
					GSTRAdvanceTax gstratDetails = new GSTRAdvanceTax();
					at.add(gstratDetails);
					if (returntype.equals(GSTR1)) {
						((GSTR1) invoice).setAt(at);
					} else if (returntype.equals(GSTR2)) {
						((GSTR2) invoice).setTxi(at);
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						((GSTR2) invoice).setTxi(at);
					} else if (returntype.equals(GSTR4)) {
						((GSTR4) invoice).setAt(at);
					}
				}
				String splyType = "";
				if (isIntraState) {
					splyType = MasterGSTConstants.SUPPLY_TYPE_INTRA;
				} else {
					splyType = MasterGSTConstants.SUPPLY_TYPE_INTER;
				}
				if (at.size() == 0) {
					GSTRAdvanceTax gstratDetails = new GSTRAdvanceTax();
					gstratDetails.setSplyTy(splyType);
					at.get(0).setSplyTy(splyType);
				} else if (isEmpty(at.get(0).getSplyTy())) {
					at.get(0).setSplyTy(splyType);
				}
				if(isNotEmpty(invoice.isAdvTaxableType()) && !invoice.isAdvTaxableType()) {
					invoice.setGstStatus("Ineligible");
				}
				invoice.setPaymentStatus("Paid");
				invoice.setB2cs(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());

				if (isNotEmpty(invoice.getStatename())) {
					at.get(0).setPos(stateTin);
				}
				String diffper = invoice.getDiffPercent();
				if ("Yes".equals(diffper)) {
					at.get(0).setDiffPercent(0.65);
				}
				List<GSTRItemDetails> gstrItemDetails = Lists.newArrayList();
				for (GSTRItems gstrItem : gstrItems) {
					gstrItem.getItem().setTxval(null);
					gstrItemDetails.add(gstrItem.getItem());
				}
				at.get(0).setItms(gstrItemDetails);
				if(returntype.equals(GSTR1)) {
					if(invoice.getInvtype().equals(MasterGSTConstants.ATA)) {
						clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						//Amenment-((GSTR1) invoice).setAt(Lists.newArrayList());
					}
				}
			} else if (invoice.getInvtype().equals(ATPAID) || invoice.getInvtype().equals(MasterGSTConstants.TXPA)) {
				Double totalAmount = 0d;
				Double totalTax = 0d;
				Double totalTaxableAmt = 0d;
				Double totalITC = 0d;
				Client client = findById(invoice.getClientid());
				List<GSTRAdvanceTax> txpd = Lists.newArrayList();
				for (Item item : invoice.getItems()) {
					GSTRAdvanceTax gstrtxpdDetails = new GSTRAdvanceTax();
					List<GSTRItems> gstradvItems = Lists.newArrayList();
					String advStateTin = getStateCode(item.getAdvStateName());
					boolean isadvIntraState = true;
					if (isNotEmpty(item.getAdvStateName())) {
						if (!item.getAdvStateName().equals(client.getStatename())) {
							isadvIntraState = false;
						}
					}
					if (isadvIntraState) {
						gstrtxpdDetails.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
					} else {
						gstrtxpdDetails.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
					}
					if (isNotEmpty(item.getAdvStateName())) {
						gstrtxpdDetails.setPos(advStateTin);
					}
					gstradvItems = populateAdvanceItemData(invoice, item, isadvIntraState, returntype);
					List<GSTRItemDetails> gstrItemDetails = Lists.newArrayList();
					for (GSTRItems gstrItem : gstradvItems) {
						gstrItem.getItem().setTxval(null);
						gstrItemDetails.add(gstrItem.getItem());
					}
					gstrtxpdDetails.setItms(gstrItemDetails);
					txpd.add(gstrtxpdDetails);
					if (isNotEmpty(item.getCgstamount())) {
						totalTax += item.getCgstamount();
					}
					if (isNotEmpty(item.getIgstamount())) {
						totalTax += item.getIgstamount();
					}
					if (isNotEmpty(item.getSgstamount())) {
						totalTax += item.getSgstamount();
					}
					if (isNotEmpty(item.getCessamount())) {
						totalTax += item.getCessamount();
					}
					if (isNotEmpty(item.getTotal())) {
						totalAmount += item.getTotal();
					}
					
					if (isNotEmpty(item.getAdvadjustedAmount())) {
						totalTaxableAmt += item.getAdvadjustedAmount();
					}
					if (isNotEmpty(item.getAdditionalchargevalue())) {
						totalTaxableAmt += item.getAdditionalchargevalue();
					}
					if (isNotEmpty(invoice.getRoundOffAmount())) {
						invoice.setTotalamount(totalAmount + invoice.getRoundOffAmount());
					} else {
						invoice.setRoundOffAmount(0.0);
						invoice.setTotalamount(totalAmount);
					}
					invoice.setTotaltax(totalTax);
					invoice.setTotaltaxableamount(totalTaxableAmt);
					invoice.setTotalitc(totalITC);
				}
				invoice.setTxpd(txpd);
				invoice.setPaymentStatus("Paid");
				invoice.setB2cs(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				String diffper = invoice.getDiffPercent();
				if ("Yes".equals(diffper)) {
					invoice.getTxpd().get(0).setDiffPercent(0.65);
				}
				if(invoice.getInvtype().equals(MasterGSTConstants.TXPA)) {
					clientUtils.populateAmendmentDetails(invoice, oldinvoice);
					//Amenment-invoice.setTxpd(Lists.newArrayList());
				}
			} else if (invoice.getInvtype().equals(NIL)) {
				
			} else if (invoice.getInvtype().equals(EXPORTS) || invoice.getInvtype().equals(MasterGSTConstants.EXPA)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				if (invoice.getExp() == null) {
					List<GSTRExports> expList = Lists.newArrayList();
					GSTRExports gstrExport = new GSTRExports();
					List<GSTRExportDetails> inv = Lists.newArrayList();
					GSTRExportDetails gstrExportDetail = new GSTRExportDetails();
					inv.add(gstrExportDetail);
					gstrExport.setInv(inv);
					expList.add(gstrExport);
					invoice.setExp(expList);
				} else if (isEmpty(invoice.getExp().get(0).getInv())) {
					List<GSTRExportDetails> inv = Lists.newArrayList();
					GSTRExportDetails gstrExportDetail = new GSTRExportDetails();
					inv.add(gstrExportDetail);
					invoice.getExp().get(0).setInv(inv);
				}
				if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
					if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
						invoice.getExp().get(0).getInv().get(0)
								.setInum(invoice.getB2b().get(0).getInv().get(0).getInum());
					}
				}
				String diffper = invoice.getDiffPercent();
				if ("Yes".equals(diffper)) {
					invoice.getExp().get(0).getInv().get(0).setDiffPercent(0.65);
				}
				if (isNotEmpty(invoice.getDateofinvoice())) {
					String ntdt = simpleDateFormat.format(invoice.getDateofinvoice());
					ntdt = ntdt+"T18:30:000Z";
					SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
					try {
						invoice.getExp().get(0).getInv().get(0).setIdt(simpleDateFormat1.parse(ntdt));
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				invoice.getExp().get(0).getInv().get(0).setVal(invoice.getTotalamount());
				List<GSTRItemDetails> gstrItemDetails = Lists.newArrayList();
				for (GSTRItems gstrItem : gstrItems) {
					gstrItemDetails.add(gstrItem.getItem());
				}
				invoice.getExp().get(0).getInv().get(0).setItms(gstrItemDetails);
				if(invoice.getInvtype().equals(MasterGSTConstants.EXPA)){
					clientUtils.populateAmendmentDetails(invoice, oldinvoice);
					//Amenment-invoice.setExp(Lists.newArrayList());
				}
			} else if (invoice.getInvtype().equals(CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNA)) {
				if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())) {
					invoice.setInvtype(CDNUR);
					if (invoice.getCdnur() == null) {
						List<GSTRInvoiceDetails> cdnrList = Lists.newArrayList();
						GSTRInvoiceDetails gstrCreditDebitNote = new GSTRInvoiceDetails();
						cdnrList.add(gstrCreditDebitNote);
						invoice.setCdnur(cdnrList);
					}
					String type = invoice.getCdnur().get(0).getTyp();
					String invType = invoice.getCdnur().get(0).getInvTyp();
					if ((isEmpty(invoice.getCdnur().get(0).getNtNum()) && isEmpty(invoice.getCdnur().get(0).getNtDt()))
							&& (isNotEmpty(invoice.getCdn().get(0).getNt())
									&& isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum()))) {
						invoice.setCdnur(invoice.getCdn().get(0).getNt());
						if (returntype.equals(PURCHASE_REGISTER)) {
							invoice.getCdnur().get(0).setInvTyp(invType);
						} else {
							invoice.getCdnur().get(0).setTyp(type);
							if(type.equalsIgnoreCase("B2CL")) {
								invoice.getCdnur().get(0).setPos(stateTin);
							}
						}
					}
					if ((isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty()))) {
						invoice.getCdnur().get(0).setNtty(invoice.getCdn().get(0).getNt().get(0).getNtty());
					}
					invoice.setB2cs(Lists.newArrayList());
					invoice.setExp(Lists.newArrayList());
					invoice.setTxpd(Lists.newArrayList());
					invoice.setCdn(Lists.newArrayList());
					if (isNotEmpty(invoice.getCdnur().get(0).getNtNum())) {
						invoice.getCdnur().get(0).setInum(invoice.getCdnur().get(0).getNtNum());
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
							invoice.getCdnur().get(0).setNtNum(invoice.getB2b().get(0).getInv().get(0).getInum());
						}
					}
					if (isNotEmpty(invoice.getCdnur().get(0).getNtDt())) {
						invoice.getCdnur().get(0).setIdt(simpleDateFormat.format(invoice.getCdnur().get(0).getNtDt()));
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						String ntdt = simpleDateFormat.format(invoice.getDateofinvoice());
						ntdt = ntdt+"T18:30:000Z";
						SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
						try {
							invoice.getCdnur().get(0).setNtDt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						invoice.getCdnur().get(0).setRtin(invoice.getB2b().get(0).getCtin().toUpperCase());
					}
					if (returntype.equals(GSTR4)) {
						if (isIntraState) {
							invoice.getCdnur().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
						} else {
							invoice.getCdnur().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
						}
					}
					if (isNotEmpty(invoice.getRevchargetype())
							&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
						invoice.getCdnur().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						invoice.getCdnur().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						invoice.getCdnur().get(0).setDiffPercent(0.65);
					}
					invoice.getCdnur().get(0).setVal(invoice.getTotalamount()-invoice.getTotalamountforbillofsupplycdn());
					invoice.getCdnur().get(0).setItms(gstrItems);
				} else {
					invoice.setB2cs(Lists.newArrayList());
					invoice.setExp(Lists.newArrayList());
					invoice.setTxpd(Lists.newArrayList());
					invoice.setCdnur(Lists.newArrayList());
					List<GSTRCreditDebitNotes> notes = null;
					if (returntype.equals(GSTR1)) {
						notes = ((GSTR1) invoice).getCdnr();
					} else if (returntype.equals(GSTR2)) {
						notes = ((GSTR2) invoice).getCdn();
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						notes = ((PurchaseRegister) invoice).getCdn();
					} else if (returntype.equals(GSTR4)) {
						notes = ((GSTR4) invoice).getCdnr();
					} else if (returntype.equals(GSTR6)) {
						notes = ((GSTR6) invoice).getCdn();
					} else if (returntype.equals(GSTR5)) {
						notes = ((GSTR5) invoice).getCdn();
					}
					if ((returntype.equals(GSTR1) || returntype.equals(GSTR4) || returntype.equals(GSTR5))
							&& isNotEmpty(notes)) {
						if ((isEmpty(notes.get(0).getNt()) || (isEmpty(notes.get(0).getNt().get(0).getNtNum())
								&& isEmpty(notes.get(0).getNt().get(0).getNtDt())))
								&& (isNotEmpty(invoice.getCdn().get(0).getNt())
										&& isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum()))) {
							notes.get(0).setNt(invoice.getCdn().get(0).getNt());
						}
					} else if ((returntype.equals(GSTR1) || returntype.equals(GSTR4) || returntype.equals(GSTR5))
							&& isEmpty(notes)) {
						notes = Lists.newArrayList();
						notes.add(invoice.getCdn().get(0));
					}
					invoice.setCdn(Lists.newArrayList());
					if (notes == null) {
						List<GSTRCreditDebitNotes> cdnrList = Lists.newArrayList();
						GSTRCreditDebitNotes gstrCreditDebitNote = new GSTRCreditDebitNotes();
						List<GSTRInvoiceDetails> nt = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						nt.add(gstrInvoiceDetail);
						gstrCreditDebitNote.setNt(nt);
						cdnrList.add(gstrCreditDebitNote);
						if (returntype.equals(GSTR1)) {
							((GSTR1) invoice).setCdnr(cdnrList);
						} else if (returntype.equals(GSTR2)) {
							((GSTR2) invoice).setCdn(cdnrList);
						} else if (returntype.equals(PURCHASE_REGISTER)) {
							((PurchaseRegister) invoice).setCdn(cdnrList);
						} else if (returntype.equals(GSTR4)) {
							((GSTR4) invoice).setCdnr(cdnrList);
						} else if (returntype.equals(GSTR6)) {
							((GSTR6) invoice).setCdn(cdnrList);
						} else if (returntype.equals(GSTR5)) {
							((GSTR5) invoice).setCdn(cdnrList);
						}
					} else if (isEmpty(notes.get(0).getNt())) {
						List<GSTRInvoiceDetails> nt = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						nt.add(gstrInvoiceDetail);
						notes.get(0).setNt(nt);
					}
					if (isNotEmpty(notes.get(0).getNt().get(0).getNtNum())) {
						notes.get(0).getNt().get(0).setInum(notes.get(0).getNt().get(0).getNtNum());
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
							notes.get(0).getNt().get(0).setNtNum(invoice.getB2b().get(0).getInv().get(0).getInum());
						}
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						notes.get(0).setCtin(invoice.getB2b().get(0).getCtin().toUpperCase());
					}
					if (isNotEmpty(notes.get(0).getNt().get(0).getNtDt())) {
						notes.get(0).getNt().get(0).setIdt(simpleDateFormat.format(notes.get(0).getNt().get(0).getNtDt()));
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						String ntdt = simpleDateFormat.format(invoice.getDateofinvoice());
						ntdt = ntdt+"T18:30:000Z";
						SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
						try {
							notes.get(0).getNt().get(0).setNtDt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
					if (isNotEmpty(invoice.getRevchargetype()) && invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
						notes.get(0).getNt().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						notes.get(0).getNt().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					if(isNotEmpty(invoice.getStatename())) {
						notes.get(0).getNt().get(0).setPos(stateTin);
					}
					if(isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						notes.get(0).getNt().get(0).setInvTyp(invoice.getB2b().get(0).getInv().get(0).getInvTyp());
					}
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						notes.get(0).getNt().get(0).setDiffPercent(0.65);
					}
					if (returntype.equals(GSTR4)) {
						if (isIntraState) {
							notes.get(0).getNt().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
						} else {
							notes.get(0).getNt().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
						}
					}
					notes.get(0).getNt().get(0).setVal(invoice.getTotalamount()-invoice.getTotalamountforbillofsupplycdn());
					notes.get(0).getNt().get(0).setItms(gstrItems);
					if (returntype.equals(GSTR1)) {
						((GSTR1) invoice).setCdnr(notes);
					} else if (returntype.equals(GSTR2)) {
						((GSTR2) invoice).setCdn(notes);
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						((PurchaseRegister) invoice).setCdn(notes);
					} else if (returntype.equals(GSTR4)) {
						((GSTR4) invoice).setCdnr(notes);
					} else if (returntype.equals(GSTR6)) {
						//((GSTR6) invoice).setCdn(notes);
						if(MasterGSTConstants.CDNA.equals(invoice.getInvtype())) {
							((GSTR6) invoice).setCdna(notes);
							 ((GSTR6) invoice).setCdn(Lists.newArrayList());
						}else {
							((GSTR6) invoice).setCdn(notes);
						}
					} else if (returntype.equals(GSTR5)) {
						((GSTR5) invoice).setCdn(notes);
					}
				}
				if(returntype.equals(GSTR1)) {
					if(invoice.getInvtype().equals(CDNA)) {
						clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						//Amenment-((GSTR1) invoice).setCdnr(Lists.newArrayList());
					}
				}
			} else if (invoice.getInvtype().equals(CDNUR) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA)) {
				
				if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())) {
					invoice.setInvtype(CDNUR);
					if (invoice.getCdnur() == null) {
						List<GSTRInvoiceDetails> cdnrList = Lists.newArrayList();
						GSTRInvoiceDetails gstrCreditDebitNote = new GSTRInvoiceDetails();
						cdnrList.add(gstrCreditDebitNote);
						invoice.setCdnur(cdnrList);
					}
					String type = invoice.getCdnur().get(0).getTyp();
					String invType = invoice.getCdnur().get(0).getInvTyp();
					if ((isEmpty(invoice.getCdnur().get(0).getNtNum()) && isEmpty(invoice.getCdnur().get(0).getNtDt()))
							&& (isNotEmpty(invoice.getCdn().get(0).getNt())
									&& isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum()))) {
						invoice.setCdnur(invoice.getCdn().get(0).getNt());
						if (returntype.equals(PURCHASE_REGISTER)) {
							invoice.getCdnur().get(0).setInvTyp(invType);
						} else {
							invoice.getCdnur().get(0).setTyp(type);
							if(type.equalsIgnoreCase("B2CL")) {
								invoice.getCdnur().get(0).setPos(stateTin);
							}
						}
					}
					if ((isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty()))) {
						invoice.getCdnur().get(0).setNtty(invoice.getCdn().get(0).getNt().get(0).getNtty());
					}
					invoice.setB2cs(Lists.newArrayList());
					invoice.setExp(Lists.newArrayList());
					invoice.setTxpd(Lists.newArrayList());
					invoice.setCdn(Lists.newArrayList());
					if (isNotEmpty(invoice.getCdnur().get(0).getNtNum())) {
						invoice.getCdnur().get(0).setInum(invoice.getCdnur().get(0).getNtNum());
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
							invoice.getCdnur().get(0).setNtNum(invoice.getB2b().get(0).getInv().get(0).getInum());
						}
					}
					if (isNotEmpty(invoice.getCdnur().get(0).getNtDt())) {
						invoice.getCdnur().get(0).setIdt(simpleDateFormat.format(invoice.getCdnur().get(0).getNtDt()));
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						String ntdt = simpleDateFormat.format(invoice.getDateofinvoice());
						ntdt = ntdt+"T18:30:000Z";
						SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
						try {
							invoice.getCdnur().get(0).setNtDt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						invoice.getCdnur().get(0).setRtin(invoice.getB2b().get(0).getCtin().toUpperCase());
					}
					if (returntype.equals(GSTR4)) {
						if (isIntraState) {
							invoice.getCdnur().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
						} else {
							invoice.getCdnur().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
						}
					}
					if (isNotEmpty(invoice.getRevchargetype())
							&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
						invoice.getCdnur().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						invoice.getCdnur().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						invoice.getCdnur().get(0).setDiffPercent(0.65);
					}
					invoice.getCdnur().get(0).setVal(invoice.getTotalamount()-invoice.getTotalamountforbillofsupplycdn());
					invoice.getCdnur().get(0).setItms(gstrItems);
					if(returntype.equals(GSTR1)) {
						if(invoice.getInvtype().equals(CDNURA)) {
							clientUtils.populateAmendmentDetails(invoice, oldinvoice);
							//Amenment-invoice.setCdnur(Lists.newArrayList());
						}
					}
				} else {
					invoice.setInvtype(CREDIT_DEBIT_NOTES);
					invoice.setB2cs(Lists.newArrayList());
					invoice.setExp(Lists.newArrayList());
					invoice.setTxpd(Lists.newArrayList());
					invoice.setCdnur(Lists.newArrayList());
					List<GSTRCreditDebitNotes> notes = null;
					if (returntype.equals(GSTR1)) {
						notes = ((GSTR1) invoice).getCdnr();
					} else if (returntype.equals(GSTR2)) {
						notes = ((GSTR2) invoice).getCdn();
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						notes = ((PurchaseRegister) invoice).getCdn();
					} else if (returntype.equals(GSTR4)) {
						notes = ((GSTR4) invoice).getCdnr();
					} else if (returntype.equals(GSTR6)) {
						notes = ((GSTR6) invoice).getCdn();
					} else if (returntype.equals(GSTR5)) {
						notes = ((GSTR5) invoice).getCdn();
					}
					if ((returntype.equals(GSTR1) || returntype.equals(GSTR4) || returntype.equals(GSTR5))
							&& isNotEmpty(notes)) {
						if ((isEmpty(notes.get(0).getNt()) || (isEmpty(notes.get(0).getNt().get(0).getNtNum())
								&& isEmpty(notes.get(0).getNt().get(0).getNtDt())))
								&& (isNotEmpty(invoice.getCdn().get(0).getNt())
										&& isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum()))) {
							notes.get(0).setNt(invoice.getCdn().get(0).getNt());
						}
					} else if ((returntype.equals(GSTR1) || returntype.equals(GSTR4) || returntype.equals(GSTR5))
							&& isEmpty(notes)) {
						notes = Lists.newArrayList();
						notes.add(invoice.getCdn().get(0));
					}
					invoice.setCdn(Lists.newArrayList());
					if (notes == null) {
						List<GSTRCreditDebitNotes> cdnrList = Lists.newArrayList();
						GSTRCreditDebitNotes gstrCreditDebitNote = new GSTRCreditDebitNotes();
						List<GSTRInvoiceDetails> nt = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						nt.add(gstrInvoiceDetail);
						gstrCreditDebitNote.setNt(nt);
						cdnrList.add(gstrCreditDebitNote);
						if (returntype.equals(GSTR1)) {
							((GSTR1) invoice).setCdnr(cdnrList);
						} else if (returntype.equals(GSTR2)) {
							((GSTR2) invoice).setCdn(cdnrList);
						} else if (returntype.equals(PURCHASE_REGISTER)) {
							((PurchaseRegister) invoice).setCdn(cdnrList);
						} else if (returntype.equals(GSTR4)) {
							((GSTR4) invoice).setCdnr(cdnrList);
						} else if (returntype.equals(GSTR6)) {
							((GSTR6) invoice).setCdn(cdnrList);
						} else if (returntype.equals(GSTR5)) {
							((GSTR5) invoice).setCdn(cdnrList);
						}
					} else if (isEmpty(notes.get(0).getNt())) {
						List<GSTRInvoiceDetails> nt = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						nt.add(gstrInvoiceDetail);
						notes.get(0).setNt(nt);
					}
					if (isNotEmpty(notes.get(0).getNt().get(0).getNtNum())) {
						notes.get(0).getNt().get(0).setInum(notes.get(0).getNt().get(0).getNtNum());
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
							notes.get(0).getNt().get(0).setNtNum(invoice.getB2b().get(0).getInv().get(0).getInum());
						}
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
						notes.get(0).setCtin(invoice.getB2b().get(0).getCtin().toUpperCase());
					}
					if (isNotEmpty(notes.get(0).getNt().get(0).getNtDt())) {
						notes.get(0).getNt().get(0).setIdt(simpleDateFormat.format(notes.get(0).getNt().get(0).getNtDt()));
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						String ntdt = simpleDateFormat.format(invoice.getDateofinvoice());
						ntdt = ntdt+"T18:30:000Z";
						SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
						try {
							notes.get(0).getNt().get(0).setNtDt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
					if (isNotEmpty(invoice.getRevchargetype()) && invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
						notes.get(0).getNt().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						notes.get(0).getNt().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					if(isNotEmpty(invoice.getStatename())) {
						notes.get(0).getNt().get(0).setPos(stateTin);
					}
					if(isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						notes.get(0).getNt().get(0).setInvTyp(invoice.getB2b().get(0).getInv().get(0).getInvTyp());
					}
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						notes.get(0).getNt().get(0).setDiffPercent(0.65);
					}
					if (returntype.equals(GSTR4)) {
						if (isIntraState) {
							notes.get(0).getNt().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
						} else {
							notes.get(0).getNt().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
						}
					}
					notes.get(0).getNt().get(0).setVal(invoice.getTotalamount()-invoice.getTotalamountforbillofsupplycdn());
					notes.get(0).getNt().get(0).setItms(gstrItems);
					if (returntype.equals(GSTR1)) {
						((GSTR1) invoice).setCdnr(notes);
					} else if (returntype.equals(GSTR2)) {
						((GSTR2) invoice).setCdn(notes);
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						((PurchaseRegister) invoice).setCdn(notes);
					} else if (returntype.equals(GSTR4)) {
						((GSTR4) invoice).setCdnr(notes);
					} else if (returntype.equals(GSTR6)) {
						//((GSTR6) invoice).setCdn(notes);
						if(MasterGSTConstants.CDNA.equals(invoice.getInvtype())) {
							((GSTR6) invoice).setCdna(notes);
							 ((GSTR6) invoice).setCdn(Lists.newArrayList());
						}else {
							((GSTR6) invoice).setCdn(notes);
						}
					} else if (returntype.equals(GSTR5)) {
						((GSTR5) invoice).setCdn(notes);
					}
				}
				if(returntype.equals(GSTR1)) {
					if(invoice.getInvtype().equals(CDNA)) {
						clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						//Amenment-((GSTR1) invoice).setCdnr(Lists.newArrayList());
					}
				}
				
				
				
				

				/*if (invoice.getCdnur() == null) {
					List<GSTRInvoiceDetails> cdnrList = Lists.newArrayList();
					GSTRInvoiceDetails gstrCreditDebitNote = new GSTRInvoiceDetails();
					cdnrList.add(gstrCreditDebitNote);
					invoice.setCdnur(cdnrList);
				}
				String type = invoice.getCdnur().get(0).getTyp();
				String invType = invoice.getCdnur().get(0).getInvTyp();
				if ((isEmpty(invoice.getCdnur().get(0).getNtNum()) && isEmpty(invoice.getCdnur().get(0).getNtDt()))
						&& (isNotEmpty(invoice.getCdn().get(0).getNt())
								&& isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum()))) {
					invoice.setCdnur(invoice.getCdn().get(0).getNt());
					if (returntype.equals(PURCHASE_REGISTER)) {
						invoice.getCdnur().get(0).setInvTyp(invType);
					} else {
						invoice.getCdnur().get(0).setTyp(type);
					}
				}
				if ((isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty()))) {
					invoice.getCdnur().get(0).setNtty(invoice.getCdn().get(0).getNt().get(0).getNtty());
				}
				invoice.setB2cs(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				
				if (isNotEmpty(invoice.getCdnur().get(0).getNtNum())) {
					invoice.getCdnur().get(0).setInum(invoice.getCdnur().get(0).getNtNum());
				}
				if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
					if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
						invoice.getCdnur().get(0).setNtNum(invoice.getB2b().get(0).getInv().get(0).getInum());
					}
				}
				if (isNotEmpty(invoice.getCdnur().get(0).getNtDt())) {
					invoice.getCdnur().get(0).setIdt(simpleDateFormat.format(invoice.getCdnur().get(0).getNtDt()));
				}
				if (isNotEmpty(invoice.getDateofinvoice())) {
					String ntdt = simpleDateFormat.format(invoice.getDateofinvoice());
					ntdt = ntdt+"T18:30:000Z";
					SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
					try {
						invoice.getCdnur().get(0).setNtDt(simpleDateFormat1.parse(ntdt));
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					invoice.getCdnur().get(0).setRtin(invoice.getB2b().get(0).getCtin().toUpperCase());
				}
				if (returntype.equals(GSTR4)) {
					if (isIntraState) {
						invoice.getCdnur().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
					} else {
						invoice.getCdnur().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
					}
				}
				if (isNotEmpty(invoice.getRevchargetype())
						&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
					invoice.getCdnur().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
				} else {
					invoice.getCdnur().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
				}
				String diffper = invoice.getDiffPercent();
				if ("Yes".equals(diffper)) {
					invoice.getCdnur().get(0).setDiffPercent(0.65);
				}
				invoice.getCdnur().get(0).setVal(invoice.getTotalamount()-invoice.getTotalamountforbillofsupplycdn());
				invoice.getCdnur().get(0).setItms(gstrItems);
				if(returntype.equals(GSTR1)) {
					if(invoice.getInvtype().equals(CDNURA)) {
						clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						//Amenment-invoice.setCdnur(Lists.newArrayList());
					}
				}*/
			} else if (invoice.getInvtype().equals(IMP_GOODS)) {
				List<GSTRImportDetails> impGoods = null;
				if (returntype.equals(GSTR2)) {
					impGoods = ((GSTR2) invoice).getImpGoods();
				} else if (returntype.equals(PURCHASE_REGISTER)) {
					impGoods = ((PurchaseRegister) invoice).getImpGoods();
				} else if (returntype.equals(GSTR5)) {
					impGoods = ((GSTR5) invoice).getImpGoods();
				}
				if (impGoods == null) {
					impGoods = Lists.newArrayList();
					GSTRImportDetails gstrImportDetails = new GSTRImportDetails();
					List<GSTRImportItems> itms = Lists.newArrayList();
					GSTRImportItems importItem = new GSTRImportItems();
					itms.add(importItem);
					gstrImportDetails.setItms(itms);
					impGoods.add(gstrImportDetails);
				} else if (isEmpty(impGoods.get(0).getItms())) {
					List<GSTRImportItems> itms = Lists.newArrayList();
					GSTRImportItems importItem = new GSTRImportItems();
					itms.add(importItem);
					impGoods.get(0).setItms(itms);
				}
				impGoods.get(0).setBoeDt(invoice.getDateofinvoice());
				impGoods.get(0).setBoeNum(Integer.parseInt(invoice.getInvoiceno()));
				impGoods.get(0).setBoeVal(invoice.getTotalamount());
				List<GSTRImportItems> items = Lists.newArrayList();
				for (GSTRItems gstrItem : gstrItems) {
					if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItc())) {
						GSTRImportItems importItem = new GSTRImportItems();
						importItem.setNum(gstrItem.getNum());
						importItem.setRt(gstrItem.getItem().getRt());
						importItem.setTxval(gstrItem.getItem().getTxval());
						importItem.setIamt(gstrItem.getItem().getIamt());
						importItem.setCsamt(gstrItem.getItem().getCsamt());
						importItem.setElg(gstrItem.getItc().getElg());
						importItem.setiTax(gstrItem.getItc().getiTax());
						importItem.setCsTax(gstrItem.getItc().getCsTax());
						items.add(importItem);
					}
				}
				impGoods.get(0).setItms(items);
				if (returntype.equals(GSTR2)) {
					((GSTR2) invoice).setImpGoods(impGoods);
				} else if (returntype.equals(PURCHASE_REGISTER)) {
					((PurchaseRegister) invoice).setImpGoods(impGoods);
				} else if (returntype.equals(GSTR5)) {
					((GSTR5) invoice).setImpGoods(impGoods);
				}
			} else if (invoice.getInvtype().equals(IMP_SERVICES)) {
				invoice.setRevchargetype("Reverse");
				List<GSTRImportDetails> impServices = null;
				if (returntype.equals(GSTR2)) {
					impServices = ((GSTR2) invoice).getImpServices();
				} else if (returntype.equals(PURCHASE_REGISTER)) {
					impServices = ((PurchaseRegister) invoice).getImpServices();
				} else if (returntype.equals(GSTR4)) {
					impServices = ((GSTR4) invoice).getImpServices();
				}
				if (impServices == null) {
					impServices = Lists.newArrayList();
					GSTRImportDetails gstrImportDetails = new GSTRImportDetails();
					List<GSTRImportItems> itms = Lists.newArrayList();
					GSTRImportItems importItem = new GSTRImportItems();
					itms.add(importItem);
					gstrImportDetails.setItms(itms);
					impServices.add(gstrImportDetails);
				} else if (isEmpty(impServices.get(0).getItms())) {
					List<GSTRImportItems> itms = Lists.newArrayList();
					GSTRImportItems importItem = new GSTRImportItems();
					itms.add(importItem);
					impServices.get(0).setItms(itms);
				}
				if (isNotEmpty(invoice.getDateofinvoice())) {
					impServices.get(0).setIdt(invoice.getDateofinvoice());
				}
				if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
					if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
						impServices.get(0).setInum(invoice.getB2b().get(0).getInv().get(0).getInum());
					}
				}
				if (returntype.equals(GSTR4)) {
					if (isIntraState) {
						impServices.get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
					} else {
						impServices.get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
					}
					impServices.get(0).setVal(invoice.getTotalamount());
				} else {
					impServices.get(0).setIval(invoice.getTotalamount());
				}
				List<GSTRImportItems> items = Lists.newArrayList();
				for (GSTRItems gstrItem : gstrItems) {
					if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItc())) {
						GSTRImportItems importItem = new GSTRImportItems();
						importItem.setNum(gstrItem.getNum());
						importItem.setRt(gstrItem.getItem().getRt());
						importItem.setTxval(gstrItem.getItem().getTxval());
						importItem.setIamt(gstrItem.getItem().getIamt());
						importItem.setCsamt(gstrItem.getItem().getCsamt());
						importItem.setElg(gstrItem.getItc().getElg());
						importItem.setiTax(gstrItem.getItc().getiTax());
						importItem.setCsTax(gstrItem.getItc().getCsTax());
						items.add(importItem);
					}
				}
				impServices.get(0).setItms(items);
				if (returntype.equals(GSTR2)) {
					((GSTR2) invoice).setImpServices(impServices);
				} else if (returntype.equals(PURCHASE_REGISTER)) {
					((PurchaseRegister) invoice).setImpServices(impServices);
				} else if (returntype.equals(GSTR4)) {
					((GSTR4) invoice).setImpServices(impServices);
				}
			} else if (invoice.getInvtype().equals(B2BUR)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());

				if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					if (returntype.equals(GSTR2)) {
						((GSTR2) invoice).setB2bur(Lists.newArrayList());
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						((PurchaseRegister) invoice).setB2bur(Lists.newArrayList());
					} else if (returntype.equals(GSTR4)) {
						((GSTR4) invoice).setB2bur(Lists.newArrayList());
					}
					invoice.setInvtype(B2B);
					if (isNotEmpty(invoice.getDateofinvoice())) {
						invoice.getB2b().get(0).getInv().get(0)
								.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
					}
					invoice.getB2b().get(0).getInv().get(0)
							.setInvTyp(invoice.getB2b().get(0).getInv().get(0).getInvTyp());
					invoice.getB2b().get(0).getInv().get(0).setVal(invoice.getTotalamount());
					if (isNotEmpty(invoice.getStatename())) {
						invoice.getB2b().get(0).getInv().get(0).setPos(stateTin);
					}
					if (isNotEmpty(invoice.getRevchargetype())
							&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
						invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						invoice.getB2b().get(0).getInv().get(0).setDiffPercent(0.65);
					}
					invoice.getB2b().get(0).getInv().get(0).setItms(gstrItems);
					if (isNotEmpty(ecomtin)) {
						invoice.getB2b().get(0).getInv().get(0).setEtin(ecomtin);
					}
				} else {
					List<GSTRB2B> b2bur = null;
					if (returntype.equals(GSTR2)) {
						b2bur = ((GSTR2) invoice).getB2bur();
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						b2bur = ((PurchaseRegister) invoice).getB2bur();
					} else if (returntype.equals(GSTR4)) {
						b2bur = ((GSTR4) invoice).getB2bur();
					}
					if (b2bur == null) {
						b2bur = Lists.newArrayList();
						GSTRB2B gstrb2b = new GSTRB2B();
						List<GSTRInvoiceDetails> inv = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						inv.add(gstrInvoiceDetail);
						gstrb2b.setInv(inv);
						b2bur.add(gstrb2b);
					} else if (isEmpty(b2bur.get(0).getInv())) {
						List<GSTRInvoiceDetails> inv = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						inv.add(gstrInvoiceDetail);
						b2bur.get(0).setInv(inv);
					}
					if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
						if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
							b2bur.get(0).getInv().get(0).setInum(invoice.getB2b().get(0).getInv().get(0).getInum());
						}
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						b2bur.get(0).getInv().get(0).setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
					}
					if (returntype.equals(GSTR4)) {
						if (isIntraState) {
							b2bur.get(0).getInv().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
						} else {
							b2bur.get(0).getInv().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
						}
					}
					b2bur.get(0).getInv().get(0).setVal(invoice.getTotalamount());
					if (isNotEmpty(invoice.getStatename())) {
						b2bur.get(0).getInv().get(0).setPos(stateTin);
					}
					if (isNotEmpty(ecomtin)) {
						b2bur.get(0).getInv().get(0).setEtin(ecomtin);
					}
					b2bur.get(0).getInv().get(0).setItms(gstrItems);
					if (returntype.equals(GSTR2)) {
						((GSTR2) invoice).setB2bur(b2bur);
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						((PurchaseRegister) invoice).setB2bur(b2bur);
					} else if (returntype.equals(GSTR4)) {
						((GSTR4) invoice).setB2bur(b2bur);
					}
				}

			} else if (invoice.getInvtype().equals(B2CL) || invoice.getInvtype().equals(MasterGSTConstants.B2CLA)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());

				if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())) {
					if (invoice.getTotalamount() > 250000 && !isIntraState) {
						invoice.setInvtype(B2CL);
						if (isEmpty(invoice.getB2cl())) {
							List<GSTRB2CL> b2cl = Lists.newArrayList();
							GSTRB2CL gstrb2clInvoice = new GSTRB2CL();
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							List<GSTRItems> itms = Lists.newArrayList();
							GSTRItems gstrItem = new GSTRItems();
							gstrItem.setNum(1);
							itms.add(gstrItem);
							gstrInvoiceDetail.setItms(itms);
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrInvoiceDetail.setDiffPercent(0.65);
							}
							inv.add(gstrInvoiceDetail);
							gstrb2clInvoice.setInv(inv);
							b2cl.add(gstrb2clInvoice);
							invoice.setB2cl(b2cl);
						} else if (isEmpty(invoice.getB2cl().get(0).getInv())) {
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrInvoiceDetail.setDiffPercent(0.65);
							}
							List<GSTRItems> itms = Lists.newArrayList();
							GSTRItems gstrItem = new GSTRItems();
							gstrItem.setNum(1);
							itms.add(gstrItem);
							gstrInvoiceDetail.setItms(itms);
							inv.add(gstrInvoiceDetail);
							invoice.getB2cl().get(0).setInv(inv);
						}
						if (isNotEmpty(invoice.getDateofinvoice())) {
							invoice.getB2cl().get(0).getInv().get(0)
									.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
						}
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
								invoice.getB2cl().get(0).getInv().get(0)
										.setInum(invoice.getB2b().get(0).getInv().get(0).getInum().toUpperCase());
							}
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								invoice.getB2cl().get(0).getInv().get(0)
										.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
							}
						}
						if (isNotEmpty(ecomtin)) {
							invoice.getB2cl().get(0).getInv().get(0).setEtin(ecomtin);
						}
						invoice.getB2cl().get(0).getInv().get(0).setVal(invoice.getTotalamount());
						if (isNotEmpty(invoice.getStatename())) {
							invoice.getB2cl().get(0).setPos(stateTin);
						}
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							invoice.getB2cl().get(0).getInv().get(0).setDiffPercent(0.65);
						}
						if (isNotEmpty(gstrItems)) {
							for (GSTRItems gstrItem : gstrItems) {
								if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItem().getAdvAmt())) {
									gstrItem.getItem().setAdvAmt(null);
								}
							}
						}
						invoice.getB2cl().get(0).getInv().get(0).setItms(gstrItems);
					} else {
						invoice.setInvtype(B2C);
						if (isEmpty(invoice.getB2cs())) {
							List<GSTRB2CS> b2cs = Lists.newArrayList();
							invoice.setB2cs(b2cs);
						}
//						List<GSTRB2CS> b2cs = Lists.newArrayList();
						String b2cskey="";
						List<GSTRB2CS> newInvs = Lists.newArrayList();
						List<String> b2cskeys = Lists.newArrayList();
						Map<String,GSTRB2CS> newb2csmap = Maps.newHashMap();
						for (Item item : invoice.getItems()) {
							GSTRB2CS gstrb2csDetail = new GSTRB2CS();
							if (isNotEmpty(item.getIgstrate())) {
								gstrb2csDetail.setRt(item.getIgstrate());
							} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())) {
								gstrb2csDetail.setRt(item.getCgstrate() + item.getSgstrate());
							}
							if (!isIntraState && isNotEmpty(item.getIgstamount())) {
								gstrb2csDetail.setIamt(item.getIgstamount());
								// gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
								gstrb2csDetail.setCamt(item.getCgstamount());
								gstrb2csDetail.setSamt(item.getSgstamount());
							}
							if (isIntraState) {
								gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
							} else {
								gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							}

							gstrb2csDetail.setCsamt(item.getCessamount());
							gstrb2csDetail.setTxval(item.getTaxablevalue());
							if (isNotEmpty(invoice.getStatename())) {
								gstrb2csDetail.setPos(stateTin);
							}
							gstrb2csDetail.setTyp("OE");
							if (isNotEmpty(ecomtin)) {
								gstrb2csDetail.setTyp("E");
								gstrb2csDetail.setEtin(ecomtin.toUpperCase());
							} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								gstrb2csDetail.setTyp("E");
								gstrb2csDetail.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
							}
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrb2csDetail.setDiffPercent(0.65);
							}
//							b2cs.add(gstrb2csDetail);
							
							
							b2cskey = gstrb2csDetail.getPos()+"-"+gstrb2csDetail.getRt();
							if(!newb2csmap.containsKey(b2cskey)) {
								newb2csmap.put(b2cskey, gstrb2csDetail);
								b2cskeys.add(b2cskey);
							}else {
								GSTRB2CS b2c = newb2csmap.get(b2cskey);
								if (isNotEmpty(gstrb2csDetail.getTxval())) {
									if (isNotEmpty(b2c.getTxval())) {
										b2c.setTxval(b2c.getTxval() + gstrb2csDetail.getTxval());
									} else {
										b2c.setTxval(gstrb2csDetail.getTxval());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getIamt())) {
									if (isNotEmpty(b2c.getIamt())) {
										b2c.setIamt(b2c.getIamt() + gstrb2csDetail.getIamt());
									} else {
										b2c.setIamt(gstrb2csDetail.getIamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getCamt())) {
									if (isNotEmpty(b2c.getCamt())) {
										b2c.setCamt(b2c.getCamt() + gstrb2csDetail.getCamt());
									} else {
										b2c.setCamt(gstrb2csDetail.getCamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getSamt())) {
									if (isNotEmpty(b2c.getSamt())) {
										b2c.setSamt(b2c.getSamt() + gstrb2csDetail.getSamt());
									} else {
										b2c.setSamt(gstrb2csDetail.getSamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getCsamt())) {
									if (isNotEmpty(b2c.getCsamt())) {
										b2c.setCsamt(b2c.getCsamt() + gstrb2csDetail.getCsamt());
									} else {
										b2c.setCsamt(gstrb2csDetail.getCsamt());
									}
								}
								newb2csmap.put(b2cskey, b2c);
							}
						}
						
						for(String key : b2cskeys) {
							GSTRB2CS b2c = newb2csmap.get(key);
							newInvs.add(b2c);
						}
						invoice.setB2cs(newInvs);
						//invoice.setB2cs(b2cs);
					}
				} else {
					invoice.setInvtype(B2B);
					if (isEmpty(invoice.getB2b().get(0).getInv())) {
						List<GSTRInvoiceDetails> inv = Lists.newArrayList();
						GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
						List<GSTRItems> itms = Lists.newArrayList();
						GSTRItems gstrItem = new GSTRItems();
						gstrItem.setNum(1);
						itms.add(gstrItem);
						gstrInvoiceDetail.setItms(itms);
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							gstrInvoiceDetail.setDiffPercent(0.65);
						}
						inv.add(gstrInvoiceDetail);
						invoice.getB2b().get(0).setInv(inv);
					} else if (isEmpty(invoice.getB2b().get(0).getInv().get(0).getItms())) {
						List<GSTRItems> itms = Lists.newArrayList();
						GSTRItems gstrItem = new GSTRItems();
						gstrItem.setNum(1);
						itms.add(gstrItem);
						invoice.getB2b().get(0).getInv().get(0).setItms(itms);
					}
					if (isNotEmpty(ecomtin)) {
						invoice.getB2b().get(0).getInv().get(0).setEtin(ecomtin);
					}
					String diffper = invoice.getDiffPercent();
					if ("Yes".equals(diffper)) {
						invoice.getB2b().get(0).getInv().get(0).setDiffPercent(0.65);
					}
					if (isNotEmpty(invoice.getDateofinvoice())) {
						invoice.getB2b().get(0).getInv().get(0).setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
					}
					if (isEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
						invoice.getB2b().get(0).getInv().get(0).setInvTyp("R");
					} else {
						String invTyp = invoice.getB2b().get(0).getInv().get(0).getInvTyp();
						if ("Regular".equals(invTyp)) {
							invoice.getB2b().get(0).getInv().get(0).setInvTyp("R");
						} else if ("Deemed Exports".equals(invTyp)) {
							invoice.getB2b().get(0).getInv().get(0).setInvTyp("DE");
						} else if ("Supplies to SEZ with payment".equals(invTyp)) {
							invoice.getB2b().get(0).getInv().get(0).setInvTyp("SEWP");
						} else if ("Supplies to SEZ without payment".equals(invTyp)) {
							invoice.getB2b().get(0).getInv().get(0).setInvTyp("SEWOP");
						} else if ("Sale from Bonded Warehouse".equals(invTyp)) {
							invoice.getB2b().get(0).getInv().get(0).setInvTyp("CBW");
						} else {
							invoice.getB2b().get(0).getInv().get(0).setInvTyp(invTyp);
						}
					}
					invoice.getB2b().get(0).getInv().get(0).setVal(invoice.getTotalamount());
					if (isNotEmpty(invoice.getStatename())) {
						invoice.getB2b().get(0).getInv().get(0).setPos(stateTin);
					}
					if ((isNotEmpty(invoice.getRevchargetype())
							&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE))
							|| (isNotEmpty(invoice.getRevchargetype()) && invoice.getRevchargetype().equals("YES"))) {
						invoice.setRevchargetype(MasterGSTConstants.TYPE_REVERSE);
						invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
					} else {
						invoice.setRevchargetype("Regular");
						invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
					}
					if (isNotEmpty(gstrItems)) {
						for (GSTRItems gstrItem : gstrItems) {
							if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItem().getAdvAmt())) {
								gstrItem.getItem().setAdvAmt(null);
							}
						}
					}
					invoice.getB2b().get(0).getInv().get(0).setItms(gstrItems);
				}
				if(isNotEmpty(invoice.getStrAmendment()) && invoice.getStrAmendment().equals("true")) {
					if(invoice.getInvtype().equals(B2CL)) {
						invoice.setInvtype(B2CLA);
						clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						//Amenment-invoice.setB2cl(Lists.newArrayList());
						//Amenment-invoice.getB2cl().get(0).setInv(Lists.newArrayList());
					}
				}
				
			} else if (invoice.getInvtype().equals(B2B) || invoice.getInvtype().equals(MasterGSTConstants.B2BA)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());

				if ("GSTR1".equals(returntype)
						&& (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin()))) {
					if (invoice.getTotalamount() > 250000 && !isIntraState) {
						invoice.setInvtype(B2CL);
						if (isEmpty(invoice.getB2cl())) {
							List<GSTRB2CL> b2cl = Lists.newArrayList();
							GSTRB2CL gstrb2clInvoice = new GSTRB2CL();
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrInvoiceDetail.setDiffPercent(0.65);
							}
							List<GSTRItems> itms = Lists.newArrayList();
							GSTRItems gstrItem = new GSTRItems();
							gstrItem.setNum(1);
							itms.add(gstrItem);
							gstrInvoiceDetail.setItms(itms);
							inv.add(gstrInvoiceDetail);
							gstrb2clInvoice.setInv(inv);
							b2cl.add(gstrb2clInvoice);
							invoice.setB2cl(b2cl);
							if (isNotEmpty(ecomtin)) {
								invoice.getB2cl().get(0).getInv().get(0).setEtin(ecomtin);
							}
						} else if (isEmpty(invoice.getB2cl().get(0).getInv())) {
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrInvoiceDetail.setDiffPercent(0.65);
							}
							List<GSTRItems> itms = Lists.newArrayList();
							GSTRItems gstrItem = new GSTRItems();
							gstrItem.setNum(1);
							itms.add(gstrItem);
							gstrInvoiceDetail.setItms(itms);
							inv.add(gstrInvoiceDetail);
							invoice.getB2cl().get(0).setInv(inv);
						}
						if (isNotEmpty(invoice.getDateofinvoice())) {
							invoice.getB2cl().get(0).getInv().get(0)
									.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
						}
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
								invoice.getB2cl().get(0).getInv().get(0)
										.setInum(invoice.getB2b().get(0).getInv().get(0).getInum());
							}
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								invoice.getB2cl().get(0).getInv().get(0)
										.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin());
							}
						}
						invoice.getB2cl().get(0).getInv().get(0).setVal(invoice.getTotalamount());
						if (isNotEmpty(invoice.getStatename())) {
							invoice.getB2cl().get(0).setPos(stateTin);
						}
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							invoice.getB2cl().get(0).getInv().get(0).setDiffPercent(0.65);
						}
						if (isNotEmpty(ecomtin)) {
							invoice.getB2cl().get(0).getInv().get(0).setEtin(ecomtin);
						}
						invoice.getB2cl().get(0).getInv().get(0).setItms(gstrItems);
					} else {
						invoice.setInvtype(B2C);
						if (isEmpty(invoice.getB2cs())) {
							List<GSTRB2CS> b2cs = Lists.newArrayList();
							invoice.setB2cs(b2cs);
						}
						String b2cskey="";
						List<GSTRB2CS> newInvs = Lists.newArrayList();
						List<String> b2cskeys = Lists.newArrayList();
						Map<String,GSTRB2CS> newb2csmap = Maps.newHashMap();
						for (Item item : invoice.getItems()) {
							GSTRB2CS gstrb2csDetail = new GSTRB2CS();
							if (isNotEmpty(item.getIgstrate())) {
								gstrb2csDetail.setRt(item.getIgstrate());
							} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())) {
								gstrb2csDetail.setRt(item.getCgstrate() + item.getSgstrate());
							}
							if (!isIntraState && isNotEmpty(item.getIgstamount())) {
								gstrb2csDetail.setIamt(item.getIgstamount());
								// gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
								gstrb2csDetail.setCamt(item.getCgstamount());
								gstrb2csDetail.setSamt(item.getSgstamount());
							}
							if (isIntraState) {
								gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
							} else {
								gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
							}

							gstrb2csDetail.setCsamt(item.getCessamount());
							gstrb2csDetail.setTxval(item.getTaxablevalue());
							if (isNotEmpty(invoice.getStatename())) {
								gstrb2csDetail.setPos(stateTin);
							}
							gstrb2csDetail.setTyp("OE");
							if (isNotEmpty(ecomtin)) {
								gstrb2csDetail.setTyp("E");
								gstrb2csDetail.setEtin(ecomtin.toUpperCase());
							} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
								gstrb2csDetail.setTyp("E");
								gstrb2csDetail.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
							}
							String diffper = invoice.getDiffPercent();
							if ("Yes".equals(diffper)) {
								gstrb2csDetail.setDiffPercent(0.65);
							}
//							b2cs.add(gstrb2csDetail);
							
							
							b2cskey = gstrb2csDetail.getPos()+"-"+gstrb2csDetail.getRt();
							if(!newb2csmap.containsKey(b2cskey)) {
								newb2csmap.put(b2cskey, gstrb2csDetail);
								b2cskeys.add(b2cskey);
							}else {
								GSTRB2CS b2c = newb2csmap.get(b2cskey);
								if (isNotEmpty(gstrb2csDetail.getTxval())) {
									if (isNotEmpty(b2c.getTxval())) {
										b2c.setTxval(b2c.getTxval() + gstrb2csDetail.getTxval());
									} else {
										b2c.setTxval(gstrb2csDetail.getTxval());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getIamt())) {
									if (isNotEmpty(b2c.getIamt())) {
										b2c.setIamt(b2c.getIamt() + gstrb2csDetail.getIamt());
									} else {
										b2c.setIamt(gstrb2csDetail.getIamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getCamt())) {
									if (isNotEmpty(b2c.getCamt())) {
										b2c.setCamt(b2c.getCamt() + gstrb2csDetail.getCamt());
									} else {
										b2c.setCamt(gstrb2csDetail.getCamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getSamt())) {
									if (isNotEmpty(b2c.getSamt())) {
										b2c.setSamt(b2c.getSamt() + gstrb2csDetail.getSamt());
									} else {
										b2c.setSamt(gstrb2csDetail.getSamt());
									}
								}
								if (isNotEmpty(gstrb2csDetail.getCsamt())) {
									if (isNotEmpty(b2c.getCsamt())) {
										b2c.setCsamt(b2c.getCsamt() + gstrb2csDetail.getCsamt());
									} else {
										b2c.setCsamt(gstrb2csDetail.getCsamt());
									}
								}
								newb2csmap.put(b2cskey, b2c);
							}
						}
						
						for(String key : b2cskeys) {
							GSTRB2CS b2c = newb2csmap.get(key);
							newInvs.add(b2c);
						}
						
						//b2csmap.put(b2cskey, newInvs);
						invoice.setB2cs(newInvs);

					}
				} else if (!returntype.equals(ANX1)) {

					if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())) {
						invoice.setB2cs(Lists.newArrayList());
						invoice.setExp(Lists.newArrayList());
						invoice.setTxpd(Lists.newArrayList());
						invoice.setCdn(Lists.newArrayList());
						invoice.setCdnur(Lists.newArrayList());
						invoice.setInvtype(MasterGSTConstants.B2BUR);
						List<GSTRB2B> b2bur = null;
						if (returntype.equals(GSTR2)) {
							b2bur = ((GSTR2) invoice).getB2bur();
						} else if (returntype.equals(PURCHASE_REGISTER)) {
							b2bur = ((PurchaseRegister) invoice).getB2bur();
						} else if (returntype.equals(GSTR4)) {
							b2bur = ((GSTR4) invoice).getB2bur();
						}
						if (b2bur == null) {
							b2bur = Lists.newArrayList();
							GSTRB2B gstrb2b = new GSTRB2B();
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							inv.add(gstrInvoiceDetail);
							gstrb2b.setInv(inv);
							b2bur.add(gstrb2b);
						} else if (isEmpty(b2bur.get(0).getInv())) {
							List<GSTRInvoiceDetails> inv = Lists.newArrayList();
							GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
							inv.add(gstrInvoiceDetail);
							b2bur.get(0).setInv(inv);
						}
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
							if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
								b2bur.get(0).getInv().get(0).setInum(invoice.getB2b().get(0).getInv().get(0).getInum());
							}
						}
						if (isNotEmpty(invoice.getDateofinvoice())) {
							b2bur.get(0).getInv().get(0).setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
						}
						if (returntype.equals(GSTR4)) {
							if (isIntraState) {
								b2bur.get(0).getInv().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTRA);
							} else {
								b2bur.get(0).getInv().get(0).setSplyType(MasterGSTConstants.SUPPLY_TYPE_INTER);
							}
						}
						b2bur.get(0).getInv().get(0).setVal(invoice.getTotalamount());
						if (isNotEmpty(invoice.getStatename())) {
							b2bur.get(0).getInv().get(0).setPos(stateTin);
						}
						b2bur.get(0).getInv().get(0).setItms(gstrItems);
						if (returntype.equals(GSTR2)) {
							((GSTR2) invoice).setB2bur(b2bur);
						} else if (returntype.equals(PURCHASE_REGISTER)) {
							((PurchaseRegister) invoice).setB2bur(b2bur);
						} else if (returntype.equals(GSTR4)) {
							((GSTR4) invoice).setB2bur(b2bur);
						}

					} else {

						if (isNotEmpty(invoice.getDateofinvoice())) {
							invoice.getB2b().get(0).getInv().get(0)
									.setIdt(simpleDateFormat.format(invoice.getDateofinvoice()));
						}
						invoice.getB2b().get(0).getInv().get(0)
								.setInvTyp(invoice.getB2b().get(0).getInv().get(0).getInvTyp());
						invoice.getB2b().get(0).getInv().get(0).setVal(invoice.getTotalamount());
						if (isNotEmpty(invoice.getStatename())) {
							invoice.getB2b().get(0).getInv().get(0).setPos(stateTin);
						}
						if (isNotEmpty(invoice.getRevchargetype())
								&& invoice.getRevchargetype().equals(MasterGSTConstants.TYPE_REVERSE)) {
							invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_YES);
						} else {
							invoice.getB2b().get(0).getInv().get(0).setRchrg(MasterGSTConstants.REVERSE_CHARGE_NO);
						}
						String diffper = invoice.getDiffPercent();
						if ("Yes".equals(diffper)) {
							invoice.getB2b().get(0).getInv().get(0).setDiffPercent(0.65);
						}
						invoice.getB2b().get(0).getInv().get(0).setItms(gstrItems);
						if (isNotEmpty(ecomtin)) {
							invoice.getB2b().get(0).getInv().get(0).setEtin(ecomtin);
						}
					}
					if(invoice.getInvtype().equals(B2BA)) {
						clientUtils.populateAmendmentDetails(invoice, oldinvoice);
						//Amenment-invoice.getB2b().get(0).setInv(Lists.newArrayList());
					}
				}
			} else if (invoice.getInvtype().equals(B2C) || invoice.getInvtype().equals(MasterGSTConstants.B2CSA)) {
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				if(invoice.getInvtype().equals(MasterGSTConstants.B2CSA)) {
					clientUtils.populateAmendmentDetails(invoice, oldinvoice);
					//populateAmndDetails(invoice, ecomtin, stateTin, gstrItems);
				}
				if (isIntraState && isNotEmpty(invoice.getItems().get(0).getCgstrate())
						&& isNotEmpty(invoice.getItems().get(0).getSgstrate())) {
					invoice.getB2cs().get(0)
							.setRt(invoice.getItems().get(0).getCgstrate() + invoice.getItems().get(0).getSgstrate());
					invoice.getB2cs().get(0).setCamt(invoice.getItems().get(0).getCgstamount());
					invoice.getB2cs().get(0).setSamt(invoice.getItems().get(0).getSgstamount());
				} else if (isNotEmpty(invoice.getItems().get(0).getIgstrate())) {
					invoice.getB2cs().get(0).setRt(invoice.getItems().get(0).getIgstrate());
					invoice.getB2cs().get(0).setIamt(invoice.getItems().get(0).getIgstamount());
				}
				if (isNotEmpty(invoice.getItems().get(0).getCessamount())) {
					invoice.getB2cs().get(0).setCsamt(invoice.getItems().get(0).getCessamount());
				}
				if (isNotEmpty(invoice.getItems().get(0).getTaxablevalue())) {
					invoice.getB2cs().get(0).setTxval(invoice.getItems().get(0).getTaxablevalue());
				}
				invoice.getB2cs().get(0).setTyp("OE");
				if (isNotEmpty(ecomtin)) {
					invoice.getB2cs().get(0).setTyp("E");
					invoice.getB2cs().get(0).setEtin(ecomtin.toUpperCase());
				} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
					invoice.getB2cs().get(0).setTyp("E");
					invoice.getB2cs().get(0).setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
				}
				String diffper = invoice.getDiffPercent();
				if ("Yes".equals(diffper)) {
					invoice.getB2cs().get(0).setDiffPercent(0.65);
				}
				if (isNotEmpty(invoice.getStatename())) {
					invoice.getB2cs().get(0).setPos(stateTin);
				}
			}
			if (returntype.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setB2cl(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				invoice.setInvtype(MasterGSTConstants.DELIVERYCHALLANS);
				List<DeliveryChallana> deliveryChallan = null;
				deliveryChallan = ((DeliveryChallan) invoice).getDc();
				if (deliveryChallan == null) {
					deliveryChallan = Lists.newArrayList();
					DeliveryChallana challan = new DeliveryChallana();
					deliveryChallan.add(challan);
					((DeliveryChallan) invoice).setDc(deliveryChallan);

				}
			}
			if (returntype.equals(MasterGSTConstants.PROFORMAINVOICES)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setB2cl(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				invoice.setInvtype(MasterGSTConstants.PROFORMAINVOICES);
				List<PreformaInvoice> preformaInvoice = null;
				preformaInvoice = ((ProformaInvoices) invoice).getPi();
				if (preformaInvoice == null) {
					preformaInvoice = Lists.newArrayList();
					PreformaInvoice challan = new PreformaInvoice();
					challan.setExpirydate(simpleDateFormat.format(invoice.getExpiryDate()));
					preformaInvoice.add(challan);
					((ProformaInvoices) invoice).setPi(preformaInvoice);
				} else {
					preformaInvoice.get(0).setExpirydate(simpleDateFormat.format(invoice.getExpiryDate()));
				}
			}
			if (returntype.equals(MasterGSTConstants.ESTIMATES)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setB2cl(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				invoice.setInvtype(MasterGSTConstants.ESTIMATES);
				List<Estimate> estimate = null;
				estimate = ((Estimates) invoice).getEst();
				if (estimate == null) {
					estimate = Lists.newArrayList();
					Estimate estimates = new Estimate();
					estimates.setExpirydate(simpleDateFormat.format(invoice.getExpiryDate()));
					estimate.add(estimates);
					((Estimates) invoice).setEst(estimate);
				} else {
					estimate.get(0).setExpirydate(simpleDateFormat.format(invoice.getExpiryDate()));
				}
			}
			if (returntype.equals(MasterGSTConstants.PURCHASEORDER)) {
				invoice.setB2cs(Lists.newArrayList());
				invoice.setB2cl(Lists.newArrayList());
				invoice.setExp(Lists.newArrayList());
				invoice.setTxpd(Lists.newArrayList());
				invoice.setCdn(Lists.newArrayList());
				invoice.setCdnur(Lists.newArrayList());
				invoice.setInvtype(MasterGSTConstants.PURCHASEORDER);
				List<PurchaseOrders> purchaseOrder = null;
				purchaseOrder = ((PurchaseOrder) invoice).getPo();
				if (purchaseOrder == null) {
					purchaseOrder = Lists.newArrayList();
					PurchaseOrders purchaseOrders = new PurchaseOrders();
					purchaseOrders.setDeliverydate(simpleDateFormat.format(invoice.getDeliveryDate()));
					purchaseOrder.add(purchaseOrders);
					((PurchaseOrder) invoice).setPo(purchaseOrder);
				} else {
					purchaseOrder.get(0).setDeliverydate(simpleDateFormat.format(invoice.getDeliveryDate()));
				}
			}
			if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
				Client client = findById(invoice.getClientid());
				CompanyCustomers customer = companyCustomersRepository.findOne(invoice.getClientid());
				invoice.seteBillDate(invoice.geteBillDate());
				invoice.setGenerateMode("EwayBill");
				invoice.setFromGstin(client.getGstnnumber());
				invoice.setFromTrdName(client.getBusinessname());
				
				String stateCode = client.getGstnnumber();
				if(isEmpty(invoice.getDispatcherDtls())) {
					if(isNotEmpty(client.getAddress())) {
						String address =  client.getAddress();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setFromAddr1(address);
						invoice.setFromAddr2("");
					}else {
						invoice.setFromAddr1("");
						invoice.setFromAddr2("");
					}
					invoice.setActFromStateCode(Integer.parseInt(stateCode.substring(0, 2)));
				}else {
					if(isNotEmpty(invoice.getDispatcherDtls().getAddr1())) {
						String address =  invoice.getDispatcherDtls().getAddr1();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setFromAddr1(address);
					}else {
						if(isNotEmpty(client.getAddress())) {
							String address =  client.getAddress();
							if(address.length() > 120) {
								address = address.substring(0, 119);
							}
							invoice.setFromAddr1(address);
							invoice.setFromAddr2("");
						}else {
							invoice.setFromAddr1("");
							invoice.setFromAddr2("");
						}
					}
					if(isNotEmpty(invoice.getDispatcherDtls().getAddr2())) {
						String address =  invoice.getDispatcherDtls().getAddr2();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setFromAddr2(address);
					}
					if(isNotEmpty(invoice.getDispatcherDtls().getStcd())) {
						String statename = invoice.getDispatcherDtls().getStcd();
						if(isNotEmpty(statename) && statename.contains("&")) {
							statename = invStatename(statename);
						}
						if(statename.contains("-")) {
							String[] nm = statename.split("-");
							statename = nm[1].replaceAll("\\s", "");
						}
						Integer pos = null;
						for (StateConfig state : states) {
							String name = state.getName();
							String[] nm = state.getName().split("-");
							if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(statename.replaceAll("\\s", ""))) {
								statename = name;
								pos = state.getTin();
								break;
							}
						}
						invoice.setActFromStateCode(pos);
					}else {
						invoice.setActFromStateCode(Integer.parseInt(stateCode.substring(0, 2)));
					}
					
				}
				invoice.setFromStateCode(Integer.parseInt(stateCode.substring(0, 2)));
				invoice.setToGstin(invoice.getB2b().get(0).getCtin());
				String invstatename = invoice.getStatename();
				if(isNotEmpty(invstatename) && invstatename.contains("&")) {
					invstatename = invStatename(invstatename);
				}
				if(invstatename.contains("-")) {
					String[] nm = invstatename.split("-");
					invstatename = nm[1].replaceAll("\\s", "");
				}
				Integer topos = null;
				for (StateConfig state : states) {
					String name = state.getName();
					String[] nm = state.getName().split("-");
					if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(invstatename.replaceAll("\\s", ""))) {
						invstatename = name;
						topos = state.getTin();
						break;
					}
				}
				invoice.setToStateCode(topos);
				if(isEmpty(invoice.getShipmentDtls())) {
					if(isNotEmpty(invoice) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
						String address =  invoice.getB2b().get(0).getInv().get(0).getAddress();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setToAddr1(address);
						invoice.setToAddr2("");
					}else {
						invoice.setToAddr1("");
						invoice.setToAddr2("");
					}
					invoice.setActToStateCode(topos);
				}else {
					if(isNotEmpty(invoice.getShipmentDtls().getAddr1())) {
						String address =  invoice.getShipmentDtls().getAddr1();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setToAddr1(address);
					}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getAddr1())){
						String address =  invoice.getBuyerDtls().getAddr1();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setToAddr1(address);
					}else {
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
							String address =  invoice.getB2b().get(0).getInv().get(0).getAddress();
							if(address.length() > 120) {
								address = address.substring(0, 119);
							}
							invoice.setToAddr1(address);
							invoice.setToAddr2("");
						}else {
							invoice.setToAddr1("");
							invoice.setToAddr2("");
						}
					}
					if(isNotEmpty(invoice.getShipmentDtls().getAddr2())) {
						String address =  invoice.getShipmentDtls().getAddr2();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setToAddr2(address);
					}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getAddr2())){
						String address =  invoice.getBuyerDtls().getAddr2();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setToAddr2(address);
					}
					if(isNotEmpty(invoice.getShipmentDtls().getStcd())) {
						String statename = invoice.getShipmentDtls().getStcd();
						if(isNotEmpty(statename) && statename.contains("&")) {
							statename = invStatename(statename);
						}
						if(statename.contains("-")) {
							String[] nm = statename.split("-");
							statename = nm[1].replaceAll("\\s", "");
						}
						Integer pos = null;
						for (StateConfig state : states) {
							String name = state.getName();
							String[] nm = state.getName().split("-");
							if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(statename.replaceAll("\\s", ""))) {
								statename = name;
								pos = state.getTin();
								break;
							}
						}
						invoice.setActToStateCode(pos);
					}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getState())){
						String statename = invoice.getBuyerDtls().getState();
						if(isNotEmpty(statename) && statename.contains("&")) {
							statename = invStatename(statename);
						}
						if(statename.contains("-")) {
							String[] nm = statename.split("-");
							statename = nm[1].replaceAll("\\s", "");
						}
						Integer pos = null;
						for (StateConfig state : states) {
							String name = state.getName();
							String[] nm = state.getName().split("-");
							if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(statename.replaceAll("\\s", ""))) {
								statename = name;
								pos = state.getTin();
								break;
							}
						}
						invoice.setActToStateCode(pos);
					}else {
						invoice.setActToStateCode(topos);
					}
				}
			}
		}
		if (isEmpty(invoice.getDateofinvoice())) {
			invoice.setDateofinvoice(new Date());
		}

		int mnths = -1,yrs=-1;
		if("Advances".equals(invoice.getInvtype()) || MasterGSTConstants.ATA.equals(invoice.getInvtype()) || "Nil Supplies".equals(invoice.getInvtype()) || "Advance Adjusted Detail".equals(invoice.getInvtype()) || MasterGSTConstants.TXPA.equals(invoice.getInvtype())){
			String fp = invoice.getFp();
			int sumFactor = 1;
			if(fp != null){
				try {
					mnths = Integer.parseInt(fp.substring(0,2));
					mnths--;
					yrs = Integer.parseInt(fp.substring(2));
				} catch (NumberFormatException e) {
					
				}
			}
			int quarter = mnths/3;
			quarter = quarter == 0 ? 4 : quarter;
			String yearCode = quarter == 4 ? (yrs-1)+"-"+yrs : (yrs)+"-"+(yrs+1);
			mnths++;
			
			invoice.setMthCd(""+mnths);
			invoice.setYrCd(""+yearCode);
			invoice.setQrtCd(""+quarter);
			if("Advance Adjusted Detail".equalsIgnoreCase(invoice.getInvtype()) || MasterGSTConstants.TXPA.equalsIgnoreCase(invoice.getInvtype())) {
				invoice.setSftr(-1);
			}else {
				invoice.setSftr(sumFactor);
			}
		}else {
			
		String invType = invoice.getInvtype();
		boolean isDebitCreditNotes = "Credit/Debit Notes".equals(invType);
		boolean isCDNA = "CDNA".equals(invType);
		boolean isCDNUR = "Credit/Debit Note for Unregistered Taxpayers".equals(invType);
		boolean isCDNURA = "CDNURA".equals(invType);
		boolean isCreditNote = "Credit Note".equals(invType);
		boolean isDebitNote = "Debit Note".equals(invType);
		boolean isCreditNoteUr = "Credit Note(UR)".equals(invType);
		boolean isDebitNoteUr = "Debit Note(UR)".equals(invType);
		boolean isCdnNtNttyExists = invoice.getCdn() != null && invoice.getCdn().size() > 0 && invoice.getCdn().get(0).getNt() != null && invoice.getCdn().get(0).getNt().size() > 0;
		String cdnNtNtty = null;
		if(isCdnNtNttyExists){
			cdnNtNtty = invoice.getCdn().get(0).getNt().get(0).getNtty();
		}
		boolean isCdnurNttyExists = invoice.getCdnur() != null && invoice.getCdnur().size() > 0;
		if(isCDNURA){
			isCdnurNttyExists = invoice.getCdnur() != null && invoice.getCdnur().size() > 0;
		}
		String cdnurNtty = null;
		if(isCdnurNttyExists){
			cdnurNtty = invoice.getCdnur().get(0).getNtty();
		}
		int sumFactor = 1;
		if(!"CANCELLED".equals(invoice.getGstStatus())){
			if(returntype.equals("GSTR1")) {
				boolean isCdnrNtNttyExists = ((GSTR1)invoice).getCdnr() != null && ((GSTR1)invoice).getCdnr().size() > 0 && ((GSTR1)invoice).getCdnr().get(0).getNt() != null && ((GSTR1)invoice).getCdnr().get(0).getNt().size() > 0;
				String cdnrNtNtty = null;
				if(isCdnrNtNttyExists){
					cdnrNtNtty = ((GSTR1)invoice).getCdnr().get(0).getNt().get(0).getNtty();
				}
				if(isCDNA){
					isCdnrNtNttyExists = ((GSTR1)invoice).getCdnra() != null && ((GSTR1)invoice).getCdnra().size() > 0 && ((GSTR1)invoice).getCdnra().get(0).getNt() != null && ((GSTR1)invoice).getCdnra().get(0).getNt().size() > 0;
					
					if(isCdnrNtNttyExists){
						cdnrNtNtty = ((GSTR1)invoice).getCdnra().get(0).getNt().get(0).getNtty();
					}
				}
				if((isDebitCreditNotes || isCDNA )){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
							sumFactor = -1;
						}
					}else if(isCdnrNtNttyExists){
						if("C".equals(cdnrNtNtty)){
							sumFactor = -1;
						}
					}
				}else if((isCDNUR || isCDNURA) && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
						sumFactor = -1;
					}
				}
		
				if(isCreditNote || isDebitNote || isCDNA){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
							sumFactor = -1;
						}
					}else if(isCdnrNtNttyExists){
						if("C".equals(cdnrNtNtty)){
							sumFactor = -1;
						}
					}
				}else if((isCreditNoteUr || isDebitNoteUr || isCDNUR || isCDNURA) && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
						sumFactor = -1;
					}
				}
			}else {
				if((isDebitCreditNotes || isCDNA )){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
							sumFactor = -1;
						}
					}/*else if(isCdnrNtNttyExists){
		if("C".equals(cdnrNtNtty)){
		sumFactor = -1;
		}
		}*/
				}else if((isCDNUR || isCDNURA) && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
						sumFactor = -1;
					}
				}
				
				if(isCreditNote || isDebitNote || isCDNA){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
							sumFactor = -1;
						}
					}/*else if(isCdnrNtNttyExists){
		if("C".equals(cdnrNtNtty)){
		sumFactor = -1;
		}
		}*/
				}else if((isCreditNoteUr || isDebitNoteUr || isCDNUR || isCDNURA) && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
						sumFactor = -1;
					}
				}
			}
			
		}else{
			sumFactor = 0;
		}
		invoice.setSftr(sumFactor);
		Date dt = null;
		if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
			if(isNotEmpty(invoice.geteBillDate())) {
				dt = (Date)invoice.geteBillDate();
			}else {
				dt = (Date)invoice.getDateofinvoice();
			}
		}else {
			dt = (Date)invoice.getDateofinvoice();
		}
		if(isNotEmpty(dt)) {
			int month = dt.getMonth();
			int year = dt.getYear()+1900;
			int quarter = month/3;
			quarter = quarter == 0 ? 4 : quarter;
			String yearCode = quarter == 4 ? (year-1)+"-"+year : (year)+"-"+(year+1);
			month++;
			
			invoice.setMthCd(""+month);
			invoice.setYrCd(""+yearCode);
			invoice.setQrtCd(""+quarter);
		}
		}
		if(NullUtil.isNotEmpty(invoice.getBillDate())) {
			Date billdt = (Date)invoice.getBillDate();
			int billmonth = billdt.getMonth();
			int billyear = billdt.getYear()+1900;
			int billquarter = billmonth/3;
			billquarter = billquarter == 0 ? 4 : billquarter;
			String billyearCode = billquarter == 4 ? (billyear-1)+"-"+billyear : (billyear)+"-"+(billyear+1);
			billmonth++;
			invoice.setTrDatemthCd(""+billmonth);
			invoice.setTrDateqrtCd(""+billquarter);
			invoice.setTrDateyrCd(""+billyearCode);
		}
		Date ewayBillDate = null;
		Double totalTaxableAmt = invoice.getTotaltaxableamount();
		Double totalTax = invoice.getTotaltax();
		Double totalAmt = invoice.getTotalamount();
		if(isNotEmpty(invoice.getOtherValue())) {
			totalAmt += invoice.getOtherValue();
		}
		invoice.setTotalamount(totalAmt);
		Date dateOfInvoice = invoice.getDateofinvoice();
		if(isNotEmpty(invoice.geteBillDate())) {
			ewayBillDate = invoice.geteBillDate();
		}
		String totalTaxableAmtStr = String.format(DOUBLE_FORMAT,totalTaxableAmt);
		String totalTaxStr = String.format(DOUBLE_FORMAT,totalTax);
		String totalAmtStr = String.format(DOUBLE_FORMAT,totalAmt);
		String dateOfInvoiceStr = dateFormatOnlyDate.format(dateOfInvoice);
		String ewayBillDateStr = "";
		if(isNotEmpty(ewayBillDate)) {
			ewayBillDateStr = dateFormatOnlyDate.format(ewayBillDate);
		}
		invoice.setTotaltaxableamount_str(totalTaxableAmtStr);
		invoice.setTotaltax_str(totalTaxStr);
		invoice.setTotalamount_str(totalAmtStr);
		invoice.setDateofinvoice_str(dateOfInvoiceStr);
		if(isNotEmpty(ewayBillDateStr)) {
			invoice.setEwayBillDate_str(ewayBillDateStr);
		}
		for (Item item : invoice.getItems()) {
			if (isNotEmpty(item.getIgstamount())) {
				totalIGST += item.getIgstamount();
			}
			if (isNotEmpty(item.getCgstamount())) {
				totalCGST += item.getCgstamount();
			}
			if (isNotEmpty(item.getSgstamount())) {
				totalSGST += item.getSgstamount();
			}
			if (isNotEmpty(item.getExmepted())) {
				totalExempted += item.getExmepted();
			}
			if(isNotEmpty(item.getStateCess())) {
				totalStateCessAmt += item.getStateCess();
			}
			if(isNotEmpty(item.getAssAmt())) {
				totalAssAmt += item.getAssAmt();
			}
			if(isNotEmpty(item.getCessNonAdvol())) {
				totalCessNonAdVal += item.getCessNonAdvol();
			}
			if(isNotEmpty(item.getCessamount())) {
				totalCessAmount+=item.getCessamount();
			}
			if(isNotEmpty(item.getDiscount())) {
				toralDiscAmount+=item.getDiscount();
			}
			if(isNotEmpty(item.getOthrCharges())) {
				totalOthrChrgAmount+=item.getOthrCharges();
			}
		}
		invoice.setTotalIgstAmount(totalIGST);
		invoice.setTotalCgstAmount(totalCGST);
		invoice.setTotalSgstAmount(totalSGST);
		invoice.setTotalExemptedAmount(totalExempted);
		invoice.setTotalCessAmount(totalCessAmount);
		if(isNotEmpty(totalAssAmt)) {
			invoice.setTotalAssAmount(totalAssAmt);
		}
		if(isNotEmpty(totalCessNonAdVal)) {
			invoice.setTotalCessNonAdVal(totalCessNonAdVal);
		}
		if(isNotEmpty(totalStateCessAmt)) {
			invoice.setTotalStateCessAmount(totalStateCessAmt);
		}
		if(isNotEmpty(toralDiscAmount)) {
			invoice.setTotalDiscountAmount(toralDiscAmount);
		}
		if(isNotEmpty(totalOthrChrgAmount)) {
			invoice.setTotalOthrChrgeAmount(totalOthrChrgAmount);
		}
		GSTR1 einv;
		if(returntype.equals(MasterGSTConstants.GSTR1) && isNotEmpty(invoice.getId())) {
			einv = gstr1Repository.findOne(invoice.getId().toString());
			if(isNotEmpty(einv) && isNotEmpty(einv.getGstr1orEinvoice()) && "Einvoice".equalsIgnoreCase(einv.getGstr1orEinvoice())) {
				if(isNotEmpty(einv.getBuyerDtls())) {
					invoice.setBuyerDtls(einv.getBuyerDtls());
				}
				if(isNotEmpty(einv.getDispatcherDtls())) {
					invoice.setDispatcherDtls(einv.getDispatcherDtls());
				}
				if(isNotEmpty(einv.getShipmentDtls())) {
					invoice.setShipmentDtls(einv.getShipmentDtls());
				}
				
				
				if(isNotEmpty(einv.getIgstOnIntra())) {
					invoice.setIgstOnIntra(einv.getIgstOnIntra());
				}

				if(isNotEmpty(einv.getEinvCategory())) {
					invoice.setEinvCategory(einv.getEinvCategory());
				}
				if(isNotEmpty(einv.getRevchargetype())) {
					invoice.setRevchargetype(einv.getRevchargetype());
				}
				
				if(isNotEmpty(einv.getTyp())) {
					invoice.setTyp(einv.getTyp());
				}
				if(isNotEmpty(einv.getCountryCode())) {
					invoice.setCountryCode(einv.getCountryCode());
				}
				if(isNotEmpty(einv.getAddcurrencyCode())) {
					invoice.setAddcurrencyCode(einv.getAddcurrencyCode());
				}
				if(isNotEmpty(einv.getExchangeRate())) {
					invoice.setExchangeRate(einv.getExchangeRate());
				}
				if(isNotEmpty(einv.getIrnNo())) {
					invoice.setIrnNo(einv.getIrnNo());
				}
				if(isNotEmpty(einv.getIrnStatus())) {
					invoice.setIrnStatus(einv.getIrnStatus());
				}
				if(isNotEmpty(einv.getSignedQrCode())) {
					invoice.setSignedQrCode(einv.getSignedQrCode());
				}
				if(isNotEmpty(einv.getSignedInvoice())) {
					invoice.setSignedInvoice(einv.getSignedInvoice());
				}
				if(isNotEmpty(einv.getAckNo())) {
					invoice.setAckNo(einv.getAckNo());
				}
				if(isNotEmpty(einv.getEinvStatus())) {
					invoice.setEinvStatus(einv.getEinvStatus());
				}
				if(isNotEmpty(einv.getAckDt())) {
					invoice.setAckDt(einv.getAckDt());
				}
				invoice.setGstr1orEinvoice(einv.getGstr1orEinvoice());
			}

		}
		if (returntype.equals(MasterGSTConstants.GSTR1) && isNotEmpty(invoice.getGstr1orEinvoice()) && invoice.getGstr1orEinvoice().equalsIgnoreCase("Einvoice")) {
			Client client = findById(invoice.getClientid());
			invoice = einvoiceService.populateEinvoiceDetails(invoice, client);
		}
		OtherConfigurations configdetails = otherConfigurationRepository.findByClientid(invoice.getClientid());
		boolean tcstds = false;
		if(isNotEmpty(configdetails)) {
			if(isNotEmpty(configdetails.isEnableTCS()) && configdetails.isEnableTCS()) {
				tcstds = true;
			}
		}
		Double tcstdsamnt = 0d;
		Double tdsamnt = 0d;
		if(isNotEmpty(invoice.getTcstdsAmount())) {
			tcstdsamnt = invoice.getTcstdsAmount();
		}
		if(isNotEmpty(invoice.getTdsAmount())) {
			tdsamnt = invoice.getTdsAmount();
		}
		if (returntype.equals(MasterGSTConstants.GSTR1) || returntype.equals("SalesRegister")) {
			if (invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
				if (isNotEmpty(tcstdsamnt) && isNotEmpty(invoice.getTotalamount())  && isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTcstdspercentage())) {
					invoice.setTcstdsAmount(tcstdsamnt);
					invoice.setNetAmount(invoice.getTotalamount() + tcstdsamnt);
				}
			} else {
				if (isNotEmpty(invoice.getTotalamount()) && isNotEmpty(invoice.getTcstdspercentage())) {
					invoice.setTcstdsAmount(tcstdsamnt);
					invoice.setNetAmount(invoice.getTotalamount() + tcstdsamnt);
				}
			}
		} else if (returntype.equals(MasterGSTConstants.GSTR2) || returntype.equals(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
			if (invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
				if (isNotEmpty(tcstdsamnt) && isNotEmpty(invoice.getTotalamount()) && isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTcstdspercentage())) {
					
					if (isNotEmpty(invoice.getTotalamount())) {
						invoice.setTcstdsAmount(tcstdsamnt);
						invoice.setTdsAmount(tdsamnt);
						invoice.setNetAmount(invoice.getTotalamount() + tcstdsamnt - tdsamnt);
					}
				}
			} else if (!invoice.getInvtype().equals(MasterGSTConstants.ISD)	&& !invoice.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)) {
				if (isNotEmpty(invoice.getTotalamount())) {
					invoice.setTcstdsAmount(tcstdsamnt);
					invoice.setTdsAmount(tdsamnt);
					invoice.setNetAmount(invoice.getTotalamount() + tcstdsamnt - tdsamnt);
				}
			}
		}
		invoice.setCsftr(1);
		invoice.setTotalamount(totalAmt);
		return invoice;
	}
	private void populateAmndDetails(InvoiceParent invoice,String ecomtin, String stateTin, List<GSTRItems> gstrItems) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		//System.out.println(invoice.getId().toString());
		String oldNum="", oldDate="";
		for(GSTRB2B b2bdet : invoice.getB2b()) {
			for(GSTRInvoiceDetails b2bdetails : b2bdet.getInv()) {
				if(isNotEmpty(b2bdetails.getOinum())) {
					oldNum = b2bdetails.getOinum();
				}
				if(isNotEmpty(b2bdetails.getOidt())) {
					oldDate = b2bdetails.getOidt();
				}
			}
		}
			
		if(invoice.getInvtype().equalsIgnoreCase(B2BA)) {
			if(isNotEmpty(invoice.getB2b())) {
				if(isNotEmpty(invoice.getInvoiceno())) {
					((GSTR1) invoice).getB2ba().get(0).getInv().get(0).setOinum(invoice.getB2b().get(0).getInv().get(0).getInum());
				}
				if(isNotEmpty(invoice.getDateofinvoice())) {
					((GSTR1) invoice).getB2ba().get(0).getInv().get(0).setOidt(simpleDateFormat.format(invoice.getDateofinvoice()));
				}
				((GSTR1) invoice).setB2ba(invoice.getB2b());
				for(GSTRB2B b2b : invoice.getB2b()) {
					for(GSTRInvoiceDetails b2bdetails : b2b.getInv()) {
						b2bdetails.setOinum("");
						b2bdetails.setOidt("");
					}
				}
				//invoice.setB2b(Lists.newArrayList());
			}
		}else if(invoice.getInvtype().equalsIgnoreCase(B2CLA)) {
			if(isNotEmpty(invoice.getB2cl())) {
				invoice.getB2cl().get(0).getInv().get(0).setOinum(oldNum);
				invoice.getB2cl().get(0).getInv().get(0).setOidt(oldDate);
				((GSTR1) invoice).setB2cla(invoice.getB2cl());
				invoice.getB2cl().get(0).getInv().get(0).setOinum("");
				invoice.getB2cl().get(0).getInv().get(0).setOidt("");
				/*for(GSTRB2CL b2cl : invoice.getB2cl()) {
					for(GSTRInvoiceDetails b2cdetails : b2cl.getInv()) {
						b2cdetails.setOinum("");
						b2cdetails.setOidt("");
					}
				}*/
			}
		}else if(invoice.getInvtype().equalsIgnoreCase(TXPA)) {
			if(isNotEmpty(((GSTR1) invoice).getAt())) {
				//((GSTR1) invoice).setTxpda(((GSTR1) invoice).getAt());
				for(GSTRAdvanceTax advTax : ((GSTR1) invoice).getAt()) {
					advTax.setOmon("");
				}
				//invoice.setB2b(Lists.newArrayList());
			}
		}

	}

	private List<GSTR6DocDetails> getGstr6EligibleISDItems(GSTR6 invoice) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String isddocno = invoice.getB2b().get(0).getInv().get(0).getInum();
		List<GSTR6DocDetails> doclist = Lists.newArrayList();
		//for (Item item : invoice.getItems()) {
			GSTR6DocDetails isditems = new GSTR6DocDetails();
			isditems.setDocnum(isddocno);
			isditems.setDocdt(dateFormat.format(invoice.getDateofinvoice()));
			if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISDCN) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISDDN)) {
				if(isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					isditems.setIsdDocty("ISDCN");
				}else {
					isditems.setIsdDocty("ISDCNUR");
				}
			}else {
				if(isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					isditems.setIsdDocty("ISD");
				}else {
					isditems.setIsdDocty("ISDUR");
				}
			}
			if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum())) {
				isditems.setCrdnum(invoice.getCdn().get(0).getNt().get(0).getNtNum());
			}else {
				isditems.setCrdnum("");
			}
			if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtDt())) {
				isditems.setCrddt(dateFormat.format(invoice.getCdn().get(0).getNt().get(0).getNtDt()));
			}else {
				isditems.setCrddt("");
			}
			if (isNotEmpty(invoice.getItems().get(0).getSgstamount())) {
				isditems.setIamti(invoice.getItems().get(0).getSgstamount());
			}
			if(isNotEmpty(invoice.getItems().get(1).getSgstamount())) {
				isditems.setIamts(invoice.getItems().get(1).getSgstamount());
			}else {
				isditems.setIamts(0d);
			}
			if(isNotEmpty(invoice.getItems().get(1).getCgstamount())) {
				isditems.setIamtc(invoice.getItems().get(1).getCgstamount());
			}else {
				isditems.setIamtc(0d);
			}
			
			if (isNotEmpty(invoice.getItems().get(0).getCgstamount())) {
				isditems.setCamtc(invoice.getItems().get(0).getCgstamount());
			}
			if(isNotEmpty(invoice.getItems().get(1).getIgstamount())) {
				isditems.setCamti(invoice.getItems().get(1).getIgstamount());
				isditems.setSamti(invoice.getItems().get(1).getIgstamount());
			}else {
				isditems.setCamti(0d);
				isditems.setSamti(0d);
			}
			
			if (isNotEmpty(invoice.getItems().get(0).getSgstamount())) {
				isditems.setSamts(invoice.getItems().get(0).getSgstamount());
			}
		
			if (isNotEmpty(invoice.getItems().get(0).getCessamount())) {
				isditems.setCsamt(invoice.getItems().get(0).getIsdcessamount());
			}
			
			doclist.add(isditems);
		//}
		return doclist;
	}
	private List<GSTR6DocDetails> getGstr6InEligibleISDItems(GSTR6 invoice) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String isddocno = invoice.getB2b().get(0).getInv().get(0).getInum();
		List<GSTR6DocDetails> doclist = Lists.newArrayList();
		//for (Item item : invoice.getItems()) {
			GSTR6DocDetails isditems = new GSTR6DocDetails();
			isditems.setDocnum(isddocno);
			isditems.setDocdt(dateFormat.format(invoice.getDateofinvoice()));
			if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISDCN) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISDDN)) {
				if(isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					isditems.setIsdDocty("ISDCN");
				}else {
					isditems.setIsdDocty("ISDCNUR");
				}
			}else {
				if(isNotEmpty(invoice.getB2b().get(0).getCtin())) {
					isditems.setIsdDocty("ISD");
				}else {
					isditems.setIsdDocty("ISDUR");
				}
			}
			if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtNum())) {
				isditems.setCrdnum(invoice.getCdn().get(0).getNt().get(0).getNtNum());
			}else {
				isditems.setCrdnum("");
			}
			if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtDt())) {
				isditems.setCrddt(dateFormat.format(invoice.getCdn().get(0).getNt().get(0).getNtDt()));
			}else {
				isditems.setCrddt("");
			}
			if (isNotEmpty(invoice.getItems().get(2).getIgstamount())) {
				isditems.setIamti(invoice.getItems().get(2).getIgstamount());
			}
			if(isNotEmpty(invoice.getItems().get(3).getSgstamount())) {
				isditems.setIamts(invoice.getItems().get(3).getSgstamount());
			}else {
				isditems.setIamts(0d);
			}
			if(isNotEmpty(invoice.getItems().get(1).getCgstamount())) {
				isditems.setIamtc(invoice.getItems().get(1).getCgstamount());
			}else {
				isditems.setIamtc(0d);
			}
			
			if (isNotEmpty(invoice.getItems().get(2).getCgstamount())) {
				isditems.setCamtc(invoice.getItems().get(2).getCgstamount());
			}
			if(isNotEmpty(invoice.getItems().get(3).getIgstamount())) {
				isditems.setCamti(invoice.getItems().get(3).getIgstamount());
				isditems.setSamti(invoice.getItems().get(3).getIgstamount());
			}else {
				isditems.setCamti(0d);
				isditems.setSamti(0d);
			}
			
			if (isNotEmpty(invoice.getItems().get(2).getSgstamount())) {
				isditems.setSamts(invoice.getItems().get(2).getSgstamount());
			}
		
			if (isNotEmpty(invoice.getItems().get(2).getCessamount())) {
				isditems.setCsamt(invoice.getItems().get(2).getIsdcessamount());
			}
			
			doclist.add(isditems);
		//}
		return doclist;
	}
	@Async
	private void saveAdvancePayments(InvoiceParent invoice, String returntype) {
		SimpleDateFormat pmntDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		Payments payments = new Payments();
		payments.setClientid(invoice.getClientid());
		payments.setUserid(invoice.getUserid());
		if(isNotEmpty(invoice.getId())) {
			payments.setInvoiceid(invoice.getId().toString());
		}
		if(isNotEmpty(invoice.getBilledtoname())) {
			payments.setCustomerName(invoice.getBilledtoname());
		}else {
			payments.setCustomerName("");
		}
		if(isNotEmpty(invoice.getB2b().get(0).getCtin())) {
			payments.setGstNumber(invoice.getB2b().get(0).getCtin());
		}
		payments.setInvoiceNumber(invoice.getInvoiceno());
		payments.setVoucherNumber(UUID.randomUUID().toString().replace("-", "").toUpperCase().substring(0,6)+"/"+invoice.getInvoiceno());
		payments.setInvtype("Advances");
		
		payments.setPaymentDate(pmntDateFormat.format(invoice.getDateofinvoice()));
		if(isNotEmpty(invoice.getDateofinvoice())) {
			Date invdt = (Date)invoice.getDateofinvoice();
			if(isNotEmpty(invdt)) {
				int vcmonth = invdt.getMonth();
				int vcyear = invdt.getYear()+1900;
				int vcquarter = vcmonth/3;
				vcquarter = vcquarter == 0 ? 4 : vcquarter;
				String vcyearCode = vcquarter == 4 ? (vcyear-1)+"-"+vcyear : (vcyear)+"-"+(vcyear+1);
				vcmonth++;
				
				payments.setMthCd(""+vcmonth);
				payments.setYrCd(""+vcyearCode);
				payments.setQrtCd(""+vcquarter);
			}
		}
		payments.setReturntype(returntype);
		payments.setReceivedAmount(invoice.getTotalamount().toString());
		payments.setPreviousPendingBalance(invoice.getTotalamount());
		payments.setPendingBalance(0d);
		
		payments.setCashAmount(invoice.getTotalamount());
		payments.setPaidAmount(invoice.getTotalamount());
		payments.setBankAmount(0d);
		payments.setTdsItAmount(0d);
		payments.setTdsGstAmount(0d);
		payments.setDiscountAmount(0d);
		payments.setOthersAmount(0d);
		
		PaymentItems advpmntitms = new PaymentItems();
		List<PaymentItems> pmntitems = Lists.newArrayList();
		advpmntitms.setId(new ObjectId());
		advpmntitms.setModeOfPayment("Cash");
		advpmntitms.setAmount(invoice.getTotalamount());
		advpmntitms.setReferenceNumber("");
		advpmntitms.setPendingBalance(invoice.getTotalamount());
		advpmntitms.setLedger("Cash");
		pmntitems.add(advpmntitms);
		payments.setPaymentitems(pmntitems);
		
		Payments payment = saveRecordPayments(payments);
		/*
		 * AccountingJournal journal=new AccountingJournal();
		 * 
		 * journal.setClientId(invoice.getClientid());
		 * journal.setUserId(invoice.getUserid());
		 * journal.setInvoiceNumber(payment.getVoucherNumber());
		 * journal.setInvoiceId(payment.getId().toString());
		 * if(isNotEmpty(invoice.getVendorName())) {
		 * journal.setVendorName(invoice.getVendorName()); }else {
		 * if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
		 * journal.setVendorName(AccountConstants.OTHER_DEBTORS); }else if(returntype.equals(GSTR2)
		 * || returntype.equals(PURCHASE_REGISTER) ||
		 * returntype.equals("PurchaseRegister")) {
		 * journal.setVendorName("Other Creditors"); } }
		 * 
		 * SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy"); String
		 * ptDate[] = payment.getPaymentDate().split("-"); String strmonth =
		 * ptDate[1]+ptDate[2]; journal.setInvoiceMonth(strmonth); try {
		 * journal.setDateofinvoice(dateFormat.parse(payment.getPaymentDate())); Date dt
		 * = (Date)journal.getDateofinvoice(); if(isNotEmpty(dt)) { int vcmonth =
		 * dt.getMonth(); int vcyear = dt.getYear()+1900; int vcquarter = vcmonth/3;
		 * vcquarter = vcquarter == 0 ? 4 : vcquarter; String vcyearCode = vcquarter ==
		 * 4 ? (vcyear-1)+"-"+vcyear : (vcyear)+"-"+(vcyear+1); vcmonth++;
		 * 
		 * journal.setMthCd(""+vcmonth); journal.setYrCd(""+vcyearCode);
		 * journal.setQrtCd(""+vcquarter); } } catch (ParseException e) { } Double
		 * amountReceived = 0d; if(isNotEmpty(payment.getPreviousPendingBalance()) &&
		 * isNotEmpty(payment.getPendingBalance())) { amountReceived =
		 * payment.getPreviousPendingBalance() - payment.getPendingBalance(); }
		 * journal.setPaymentReceivedAmount(amountReceived); List<PaymentItems>
		 * paymentItems = payment.getPaymentitems(); List<AccountingJournalPaymentItems>
		 * journalItems = Lists.newArrayList(); Map<String,
		 * AccountingJournalPaymentItems> acpaymentjournal = Maps.newHashMap();
		 * if(isNotEmpty(paymentItems)) { for(PaymentItems payItem : paymentItems) {
		 * if(acpaymentjournal.size() == 0) { AccountingJournalPaymentItems
		 * acpaymentitem = new AccountingJournalPaymentItems();
		 * acpaymentitem.setLedgerName(payItem.getLedger());
		 * acpaymentitem.setAmount(payItem.getAmount());
		 * acpaymentjournal.put(payItem.getLedger(), acpaymentitem); }else {
		 * if(isNotEmpty(acpaymentjournal.get(payItem.getLedger()))) {
		 * AccountingJournalPaymentItems acpaymentitem =
		 * acpaymentjournal.get(payItem.getLedger());
		 * acpaymentitem.setAmount(acpaymentitem.getAmount() + payItem.getAmount());
		 * acpaymentjournal.put(payItem.getLedger(), acpaymentitem); }else {
		 * AccountingJournalPaymentItems acpaymentitem = new
		 * AccountingJournalPaymentItems();
		 * acpaymentitem.setLedgerName(payItem.getLedger());
		 * acpaymentitem.setAmount(payItem.getAmount());
		 * acpaymentjournal.put(payItem.getLedger(), acpaymentitem); } } } } for
		 * (Map.Entry<String,AccountingJournalPaymentItems> entry :
		 * acpaymentjournal.entrySet()) { journalItems.add(entry.getValue()); }
		 * journal.setNoofpayments(journalItems.size());
		 * journal.setPaymentitems(journalItems); Double creditDebitTotal = 0d;
		 * for(AccountingJournalPaymentItems items : journalItems) { creditDebitTotal +=
		 * items.getAmount() == null ? 0.0 : items.getAmount(); }
		 * if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
		 * journal.setReturnType("Payment Receipt");
		 * journal.setDebitTotal(creditDebitTotal);
		 * journal.setCreditTotal(amountReceived); }else if(returntype.equals(GSTR2) ||
		 * returntype.equals(PURCHASE_REGISTER) ||
		 * returntype.equals("PurchaseRegister")) { journal.setReturnType("Payment");
		 * journal.setCreditTotal(creditDebitTotal);
		 * journal.setDebitTotal(amountReceived); }
		 * accountingJournalRepository.save(journal);
		 */	
		
	}
	public String invStatename(String statename) {
		String stname = "";
		if(isNotEmpty(statename) && statename.contains("&")) {
			stname = statename;
			stname = stname.replace("&", "and");
		}
		return stname;
	}
	@Override
	public EwayBillResponseData genEwayBillResponseData(InvoiceParent invoice, Client clnt) {
		Client client = findById(invoice.getClientid());
		List<StateConfig> states = configService.getStates();
		CompanyCustomers customer = companyCustomersRepository.findOne(invoice.getClientid());
		EwayBillResponseData ebillresData = new EwayBillResponseData();
		try {
			BeanUtils.copyProperties(ebillresData, invoice);
			ebillresData.setDocNo(invoice.getB2b().get(0).getInv().get(0).getInum());
			Date date = invoice.getDateofinvoice();
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String strDate = dateFormat.format(date);
			ebillresData.setDocDate(strDate);
			ebillresData.setDocType(invoice.getDocType());

			if (isNotEmpty(invoice.getDocType())) {
				ebillresData.setDocType(invoice.getDocType());
			} else {
				ebillresData.setDocType("INV");
			}
			
			if (isNotEmpty(invoice.getSubSupplyType()) && "8".equalsIgnoreCase(invoice.getSubSupplyType())) {
				ebillresData.setSubSupplyDesc("Others");
			}
			
			ebillresData.setFromGstin(client.getGstnnumber());
			ebillresData.setFromTrdName(client.getBusinessname());
			String stateCode = client.getGstnnumber();
			if(isEmpty(invoice.getDispatcherDtls())) {
				if(isNotEmpty(client.getAddress())) {
					String address =  client.getAddress();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					invoice.setFromAddr1(address);
					invoice.setFromAddr2("");
					ebillresData.setFromAddr1(address);
				}else {
					invoice.setFromAddr1("");
					invoice.setFromAddr2("");
				}
				ebillresData.setFromPlace(client.getStatename());
				ebillresData.setFromPincode(invoice.getFromPincode());
				ebillresData.setActFromStateCode(Integer.parseInt(stateCode.substring(0, 2)));
			}else {
				if(isNotEmpty(invoice.getDispatcherDtls().getAddr1())) {
					String address =  invoice.getDispatcherDtls().getAddr1();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					invoice.setFromAddr1(address);
					ebillresData.setFromAddr1(address);
				}else {
					if(isNotEmpty(client.getAddress())) {
						String address =  client.getAddress();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						invoice.setFromAddr1(address);
						invoice.setFromAddr2("");
						ebillresData.setFromAddr1(address);
					}else {
						invoice.setFromAddr1("");
						invoice.setFromAddr2("");
					}
				}
				if(isNotEmpty(invoice.getDispatcherDtls().getAddr2())) {
					String address =  invoice.getDispatcherDtls().getAddr2();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					invoice.setFromAddr2(address);
					ebillresData.setFromAddr2(address);
				}
				if(isNotEmpty(invoice.getDispatcherDtls().getLoc())) {
					ebillresData.setFromPlace(invoice.getDispatcherDtls().getLoc());
				}else {
					ebillresData.setFromPlace(client.getStatename());
				}
				if(isNotEmpty(invoice.getDispatcherDtls().getPin()) && invoice.getDispatcherDtls().getPin().intValue() > 0) {
					ebillresData.setFromPincode(invoice.getDispatcherDtls().getPin());
				}else {
					ebillresData.setFromPincode(invoice.getFromPincode());
				}
				if(isNotEmpty(invoice.getDispatcherDtls().getStcd())) {
					String statename = invoice.getDispatcherDtls().getStcd();
					if(isNotEmpty(statename) && statename.contains("&")) {
						statename = invStatename(statename);
					}
					if(statename.contains("-")) {
						String[] nm = statename.split("-");
						statename = nm[1].replaceAll("\\s", "");
					}
					Integer pos = null;
					for (StateConfig state : states) {
						String name = state.getName();
						String[] nm = state.getName().split("-");
						if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(statename.replaceAll("\\s", ""))) {
							statename = name;
							pos = state.getTin();
							break;
						}
					}
					ebillresData.setActFromStateCode(pos);
				}else {
					ebillresData.setActFromStateCode(Integer.parseInt(stateCode.substring(0, 2)));
				}
				
			}
			ebillresData.setFromStateCode(Integer.parseInt(stateCode.substring(0, 2)));
			ebillresData.setToGstin(invoice.getB2b().get(0).getCtin().toUpperCase());
			String invstatename = invoice.getStatename();
			if(isNotEmpty(invstatename) && invstatename.contains("&")) {
				invstatename = invStatename(invstatename);
			}
			if(invstatename.contains("-")) {
				String[] nm = invstatename.split("-");
				invstatename = nm[1].replaceAll("\\s", "");
			}
			Integer topos = null;
			for (StateConfig state : states) {
				String name = state.getName();
				String[] nm = state.getName().split("-");
				if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(invstatename.replaceAll("\\s", ""))) {
					invstatename = name;
					topos = state.getTin();
					break;
				}
			}
			ebillresData.setToStateCode(topos);
			if(isEmpty(invoice.getShipmentDtls())) {
				if(isNotEmpty(invoice) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
					String address =  invoice.getB2b().get(0).getInv().get(0).getAddress();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					ebillresData.setToAddr1(address);
					ebillresData.setToAddr2("");
				}else {
					ebillresData.setToAddr1("");
					ebillresData.setToAddr2("");
				}
				ebillresData.setToPincode(invoice.getToPincode());
				ebillresData.setToPlace(invoice.getStatename());
				ebillresData.setActToStateCode(topos);
				if (isNotEmpty(customer) && isNotEmpty(customer.getName())) {
					ebillresData.setToTrdName(customer.getName());
				}
			}else {
				if(isNotEmpty(invoice.getBuyerDtls().getLglNm())) {
					ebillresData.setToTrdName(invoice.getBuyerDtls().getLglNm());
				}else if (isNotEmpty(customer) && isNotEmpty(customer.getName())) {
					ebillresData.setToTrdName(customer.getName());
				}
				if(isNotEmpty(invoice.getShipmentDtls().getAddr1())) {
					String address =  invoice.getShipmentDtls().getAddr1();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					ebillresData.setToAddr1(address);
				}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getAddr1())){
					String address =  invoice.getBuyerDtls().getAddr1();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					ebillresData.setToAddr1(address);
				}else {
					if(isNotEmpty(invoice) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getAddress())) {
						String address =  invoice.getB2b().get(0).getInv().get(0).getAddress();
						if(address.length() > 120) {
							address = address.substring(0, 119);
						}
						ebillresData.setToAddr1(address);
						ebillresData.setToAddr2("");
					}else {
						ebillresData.setToAddr1("");
						ebillresData.setToAddr2("");
					}
				}
				if(isNotEmpty(invoice.getShipmentDtls().getAddr2())) {
					String address =  invoice.getShipmentDtls().getAddr2();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					ebillresData.setToAddr2(address);
				}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getAddr2())){
					String address =  invoice.getBuyerDtls().getAddr2();
					if(address.length() > 120) {
						address = address.substring(0, 119);
					}
					ebillresData.setToAddr2(address);
				}
				if(isNotEmpty(invoice.getShipmentDtls().getPin()) && invoice.getShipmentDtls().getPin().intValue() > 0) {
					ebillresData.setToPincode(invoice.getShipmentDtls().getPin());
				}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getPin())  && invoice.getBuyerDtls().getPin() > 0){
					ebillresData.setToPincode(invoice.getBuyerDtls().getPin());
				}else {
					ebillresData.setToPincode(invoice.getToPincode());
				}
				if(isNotEmpty(invoice.getShipmentDtls().getLoc())) {
					ebillresData.setToPlace(invoice.getShipmentDtls().getLoc());
				}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getLoc())){
					ebillresData.setToPlace(invoice.getBuyerDtls().getLoc());
				}else {
					ebillresData.setToPlace(invoice.getStatename());
				}
				if(isNotEmpty(invoice.getShipmentDtls().getStcd())) {
					String statename = invoice.getShipmentDtls().getStcd();
					if(isNotEmpty(statename) && statename.contains("&")) {
						statename = invStatename(statename);
					}
					if(statename.contains("-")) {
						String[] nm = statename.split("-");
						statename = nm[1].replaceAll("\\s", "");
					}
					Integer pos = null;
					for (StateConfig state : states) {
						String name = state.getName();
						String[] nm = state.getName().split("-");
						if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(statename.replaceAll("\\s", ""))) {
							statename = name;
							pos = state.getTin();
							break;
						}
					}
					ebillresData.setActToStateCode(pos);
				}else if(isNotEmpty(invoice.getBuyerDtls()) && isNotEmpty(invoice.getBuyerDtls().getState())){
					String statename = invoice.getBuyerDtls().getState();
					if(isNotEmpty(statename) && statename.contains("&")) {
						statename = invStatename(statename);
					}
					if(statename.contains("-")) {
						String[] nm = statename.split("-");
						statename = nm[1].replaceAll("\\s", "");
					}
					Integer pos = null;
					for (StateConfig state : states) {
						String name = state.getName();
						String[] nm = state.getName().split("-");
						if ((nm[1].replaceAll("\\s", "")).equalsIgnoreCase(statename.replaceAll("\\s", ""))) {
							statename = name;
							pos = state.getTin();
							break;
						}
					}
					ebillresData.setActToStateCode(pos);
				}else {
					ebillresData.setActToStateCode(topos);
				}
			}
			
			ebillresData.setTransporterId(invoice.getTransporterId());
			ebillresData.setTransporterName(invoice.getTransporterName());
			ebillresData.setOtherValue(invoice.getOtherValue());
			ebillresData.setTransDistance(invoice.getTransDistance());
			boolean isIntraState = true;
			if (isNotEmpty(invoice.getStatename())) {
				if (!invoice.getStatename().equals(client.getStatename())) {
					isIntraState = false;
				}
			}
			Double totaligst = 0d, totalcgst = 0d, totalsgst = 0d, totalTaxAmt = 0d, totalcess = 0d;

			List<EwayBillItems> itemList = Lists.newArrayList();
			for (Item evlist : invoice.getItems()) {
				EwayBillItems vdetails = new EwayBillItems();
				String code = null;
				String description = null;
				if (isNotEmpty(evlist.getHsn())) {
					if (evlist.getHsn().contains(" : ")) {
						String hsncode[] = evlist.getHsn().split(" : ");
						code = hsncode[0];
						description = hsncode[1];
					} else {
						code = evlist.getHsn();
					}
				}
				if (isNotEmpty(description)) {
					if(description.length() > 99) {
						description = description.substring(0, 98);
					}
					vdetails.setProductName(description);
					vdetails.setProductDesc(description);
				}
				// vdetails.setProductName(evlist.getHsn());
				// vdetails.setProductDesc(evlist.getHsn());
				if (isNotEmpty(code)) {
					vdetails.setHsnCode(Integer.parseInt(code));
				}
				vdetails.setQuantity(evlist.getQuantity());

				UQCConfig uqc = uqcRepository.findByName(evlist.getUqc());
				if (isNotEmpty(uqc)) {
					vdetails.setQtyUnit(uqc.getCode());
				}
				if(isNotEmpty(evlist.getRate())) {
					if(isIntraState) {
						vdetails.setCgstRate(evlist.getRate()/2);
						vdetails.setSgstRate(evlist.getRate()/2);
					}else {
						vdetails.setIgstRate(evlist.getRate());
					}
				}
				vdetails.setCessRate(evlist.getCessrate());
				vdetails.setCessNonAdvol(evlist.getCessamount());
				vdetails.setTaxableAmount(evlist.getTaxablevalue());
				totalTaxAmt += evlist.getTaxablevalue();
				if (isNotEmpty(evlist.getIgstamount())) {
					totaligst += evlist.getIgstamount();
				}
				if (isNotEmpty(evlist.getCgstamount())) {
					totalcgst += evlist.getCgstamount();
				}
				if (isNotEmpty(evlist.getSgstamount())) {
					totalsgst += evlist.getSgstamount();
				}
				if (isNotEmpty(evlist.getCessamount())) {
					totalcess += evlist.getCessamount();
				}

				itemList.add(vdetails);
			}
			ebillresData.setItemList(itemList);
			ebillresData.setIgstValue(Double.parseDouble(df2.format(totaligst)));
			ebillresData.setCgstValue(Double.parseDouble(df2.format(totalcgst)));
			ebillresData.setSgstValue(Double.parseDouble(df2.format(totalsgst)));
			ebillresData.setCessNonAdvolValue(Double.parseDouble(df2.format(totalcess)));
			if (isNotEmpty(totalTaxAmt)) {
				ebillresData.setTotalValue(Double.parseDouble(df2.format(totalTaxAmt)));
			}
			Double totalval = 0d;
			if (isNotEmpty(totalTaxAmt) && isNotEmpty(totaligst) && isNotEmpty(totalcgst) && isNotEmpty(totalsgst)) {
				totalval = totalTaxAmt + totaligst + totalcgst + totalsgst;
				
			} else {
				if (isNotEmpty(totalTaxAmt)) {
					totalval = totalTaxAmt;
				}
			}
			if (isNotEmpty(invoice.getOtherValue())) {
				totalval += invoice.getOtherValue();
			}
			if (isNotEmpty(totalcess)) {
				totalval += totalcess;
			}
			ebillresData.setTotInvValue(Double.parseDouble(df2.format(totalval)));
			if (isNotEmpty(invoice.getVehiclListDetails())) {
				List<EBillVehicleListDetails> vehicleList = Lists.newArrayList();
				for (EBillVehicleListDetails evlist : invoice.getVehiclListDetails()) {
					EBillVehicleListDetails vdetails = new EBillVehicleListDetails();
					vdetails.setId(new ObjectId());
					// vdetails.setId(evlist.getId());
					vdetails.setVehicleNo(evlist.getVehicleNo());

					vdetails.setTransMode(evlist.getTransMode());
					vdetails.setTransDocNo(evlist.getTransDocNo());
					if (isNotEmpty(evlist.getTransDocDate())) {
						vdetails.setTransDocDate(evlist.getTransDocDate());
					} else {
						vdetails.setTransDocDate("");
					}
					// vdetails.setGroupNo(evlist.getGroupNo());

					vehicleList.add(vdetails);
				}

				ebillresData.setVehiclListDetails(vehicleList);
			}
		} catch (IllegalAccessException | InvocationTargetException e) {
			logger.error(CLASSNAME + "ERROR in BeanUtils copy", e);
		}
		/*
		 * GenerateEwayBillResponse gresponse = null; try { gresponse =
		 * iHubConsumerService.generateEwayBill(client.getGstnnumber(),
		 * InetAddress.getLocalHost().getHostAddress(), ebillresData); } catch
		 * (UnknownHostException e) { e.printStackTrace(); }
		 */
		return ebillresData;

	}

	@Override
	@Transactional(readOnly = true)
	public InvoiceParent getInvoice(final String invoiceId, final String returnType) {
		logger.debug(CLASSNAME + "getInvoice : Begin");
		if (returnType.equals(GSTR1)) {
			return gstr1Repository.findOne(invoiceId);
		} else if (returnType.equals(GSTR2) || returnType.equals(MasterGSTConstants.GSTR2A)) {
			return gstr2Repository.findOne(invoiceId);
		} else if (returnType.equals(PURCHASE_REGISTER)) {
			return purchaseRepository.findOne(invoiceId);
		} else if (returnType.equals(GSTR4)) {
			return gstr4Repository.findOne(invoiceId);
		} else if (returnType.equals(GSTR5)) {
			return gstr5Repository.findOne(invoiceId);
		} else if (returnType.equals(GSTR6)) {
			return gstr6Repository.findOne(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			return deliverychallanRepository.findOne(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			return proformainvoicesRepository.findOne(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.ESTIMATES)) {
			return estimatesRepository.findOne(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
			return purchaseOrderRepository.findOne(invoiceId);
		} else if (returnType.equals(ANX1)) {
			//return anx1Repository.findOne(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.ANX2)) {
			//return anx2Repository.findOne(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
			return ewayBillRepository.findOne(invoiceId);
		}else if (returnType.equals(MasterGSTConstants.EINVOICE)) {
			return einvoiceRepository.findOne(invoiceId);
		}
		return null;
	}

	@Override
	@Transactional
	public void deleteInvoices(final String clientid, final String returnType, final int month, final int year) {
		logger.debug(CLASSNAME + "deleteInvoices : Begin");
		Client client = findById(clientid);
		if (returnType.equals(GSTR1)) {
			List<GSTR1> invoices = (List<GSTR1>) getInvoices(null, client, returnType, month, year);
			gstr1Repository.delete(invoices);
		} else if (returnType.equals(GSTR2) || returnType.equals(MasterGSTConstants.GSTR2A)) {
			List<GSTR2> invoices = (List<GSTR2>) getInvoices(null, client, returnType, month, year);
			gstr2Repository.delete(invoices);
		} else if (returnType.equals(PURCHASE_REGISTER)) {
			List<PurchaseRegister> invoices = (List<PurchaseRegister>) getInvoices(null, client, returnType, month,
					year);
			purchaseRepository.delete(invoices);
		} else if (returnType.equals(GSTR4)) {
			List<GSTR4> invoices = (List<GSTR4>) getInvoices(null, client, returnType, month, year);
			gstr4Repository.delete(invoices);
		} else if (returnType.equals(GSTR5)) {
			List<GSTR5> invoices = (List<GSTR5>) getInvoices(null, client, returnType, month, year);
			gstr5Repository.delete(invoices);
		} else if (returnType.equals(GSTR6)) {
			List<GSTR6> invoices = (List<GSTR6>) getInvoices(null, client, returnType, month, year);
			gstr6Repository.delete(invoices);
		} else if (returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			List<DeliveryChallan> invoices = (List<DeliveryChallan>) getInvoices(null, client, returnType, month, year);
			deliverychallanRepository.delete(invoices);
		} else if (returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			List<ProformaInvoices> invoices = (List<ProformaInvoices>) getInvoices(null, client, returnType, month,
					year);
			proformainvoicesRepository.delete(invoices);
		} else if (returnType.equals(MasterGSTConstants.ESTIMATES)) {
			List<Estimates> invoices = (List<Estimates>) getInvoices(null, client, returnType, month, year);
			estimatesRepository.delete(invoices);
		} else if (returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
			List<PurchaseOrder> invoices = (List<PurchaseOrder>) getInvoices(null, client, returnType, month, year);
			purchaseOrderRepository.delete(invoices);
		} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
			List<EWAYBILL> invoices = (List<EWAYBILL>) getInvoices(null, client, returnType, month, year);
			ewayBillRepository.delete(invoices);
		} else if (returnType.equals(ANX1)) {
			//List<Anx1> invoices = (List<Anx1>) getInvoices(null, client, returnType, month, year);
			//anx1Repository.delete(invoices);
		}
	}

	@Override
	@Transactional
	public String deleteInvoice(final String invoiceId, final String returnType,final String booksOrReturns) {
		logger.debug(CLASSNAME + "deleteInvoice : Begin");
		String invoiceNo = null;
		String matchedId = null;
		List<String> gtr2bMatchingId = Lists.newArrayList();
		String matchedStatus = null;
		InvoiceParent invoice = null;
		if (!returnType.equals(GSTR3B) && !returnType.equals(ANX1)) {
			invoice = getInvoice(invoiceId, returnType);
			if (returnType.equals(PURCHASE_REGISTER)) {
				if (isNotEmpty(invoice.getMatchingId())) {
					matchedId = invoice.getMatchingId();
				}
				if(isNotEmpty(invoice.getMatchingStatus())) {
					matchedStatus = invoice.getMatchingStatus();
				}
				
				if(isNotEmpty(invoice.getGstr2bMatchingId()) && invoice.getGstr2bMatchingId().size() > 0) {
					gtr2bMatchingId.addAll(invoice.getGstr2bMatchingId());
				}
				
			}
			
			if (isEmpty(booksOrReturns) && isNotEmpty(invoice) && isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS)) {
				Client client = findById(invoice.getClientid());
				String gstn = client.getGstnnumber();
				String retPeriod = invoice.getFp();
				ClientStatus clientStatus = getClientStatus(invoice.getClientid(), returnType, retPeriod);
				if(isEmpty(clientStatus) || (isNotEmpty(clientStatus) && isNotEmpty(clientStatus.getStatus()) && !clientStatus.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED) && !clientStatus.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_FILED))) {
					Base gstInvoice = getGSTRDeleteReturnInvoice(invoice, client, returnType);
				try {
					Response deleteResponse = iHubConsumerService.saveReturns(gstInvoice, client.getStatename(),
							client.getGstname(), gstn, retPeriod, returnType, true);
					if (isNotEmpty(deleteResponse) && isNotEmpty(deleteResponse.getStatuscd())
							&& deleteResponse.getStatuscd().equals("1")) {
						invoiceNo = invoice.getInvoiceno();
					}
					logger.debug(CLASSNAME + "deleteInvoice : Delete from GSTN : " + deleteResponse);
				} catch (Exception e) {
					logger.error(CLASSNAME + "deleteInvoice : Delete from GSTN ERROR : ", e);
					}
				}
			}
		}
		deletePaymentsAndReceipts(invoice.getId().toString());
		if (returnType.equals(GSTR1)) {
			GSTR1Delete gstr1deleteinvs = new GSTR1Delete();
			try {
				BeanUtils.copyProperties(gstr1deleteinvs,invoice);
				gstr1deleteinvs.setDeleteddate(new Date());
				gstr1DeleteRepository.save(gstr1deleteinvs);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			gstr1Repository.delete(invoiceId);
		} else if (returnType.equals(GSTR2)) {
			gstr2Repository.delete(invoiceId);
		} else if (returnType.equals(GSTR3B)) {
			gstr3BRepository.delete(invoiceId);
		} else if (returnType.equals(PURCHASE_REGISTER)) {
			PurchaseRegisterDelete prdeleteinvs = new PurchaseRegisterDelete();
			try {
				BeanUtils.copyProperties(prdeleteinvs,invoice);
				prdeleteinvs.setDeleteddate(new Date());
				purchaseRegisterDeleteRepository.save(prdeleteinvs);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			purchaseRepository.delete(invoiceId);
			if (isNotEmpty(matchedId)) {
				if(isNotEmpty(matchedStatus) && matchedStatus.equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED)) {
					List<GSTR2> gstr2Lst = gstr2Repository.findByMatchingId(invoiceId);
					if(isNotEmpty(gstr2Lst)) {
						for(GSTR2 gstr2Inv : gstr2Lst) {
							if (isNotEmpty(gstr2Inv) && !gstr2Inv.isAmendment()) {
								gstr2Repository.delete(matchedId);
							} else {
								gstr2Inv.setMatchingId(null);
								gstr2Inv.setMatchingStatus(null);
								gstr2Inv.setMannualMatchInvoices(null);
								gstr2Repository.save(gstr2Inv);
							}
						}
					}
				}else {
					GSTR2 gstr2 = gstr2Repository.findOne(matchedId);
					if(isNotEmpty(gstr2)) {
						if (isNotEmpty(gstr2) && !gstr2.isAmendment()) {
							gstr2Repository.delete(matchedId);
						} else {
							gstr2.setMatchingId(null);
							gstr2.setMatchingStatus(null);
							gstr2Repository.save(gstr2);
						}
					}
				}
			}
			if(isNotEmpty(gtr2bMatchingId)) {
				List<GSTR2BSupport> gstr2bLst = gstr2bSupportRepository.findByIdIn(gtr2bMatchingId);
				if(isNotEmpty(gstr2bLst) && gstr2bLst.size() > 0) {
					for(GSTR2BSupport inv : gstr2bLst) {
						inv.setGstr2bMatchingRsn(null);
						inv.setGstr2bMatchingId(null);
						inv.setGstr2bMatchingStatus(null);
						gstr2bSupportRepository.save(inv);
					}
				}
			}
		} else if (returnType.equals(GSTR4)) {
			gstr4Repository.delete(invoiceId);
		} else if (returnType.equals(GSTR5)) {
			gstr5Repository.delete(invoiceId);
		} else if (returnType.equals(GSTR6)) {
			gstr6Repository.delete(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			deliverychallanRepository.delete(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			proformainvoicesRepository.delete(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.ESTIMATES)) {
			estimatesRepository.delete(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
			purchaseOrderRepository.delete(invoiceId);
		} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
			ewayBillRepository.delete(invoiceId);
		} else if (returnType.equals(ANX1)) {
			anx1Repository.delete(invoiceId);
		}else if (returnType.equals(MasterGSTConstants.EINVOICE)) {
			einvoiceRepository.delete(invoiceId);
		}
		return invoiceNo;
	}

	public void deletePaymentsAndReceipts(String invoiceid) {
		List<Payments> paymentsLst = recordPaymentsRepository.findByInvoiceid(invoiceid);
		
		if(NullUtil.isNotEmpty(paymentsLst)) {
			for(Payments payment : paymentsLst) {
				deletePayment(payment.getId().toString(), payment.getClientid() , payment.getVoucherNumber(), payment.getInvoiceNumber(), payment.getReturntype());
			}
		}
	}
	
	
	@Override
	@Transactional
	public void cancelInvoice(final String invoiceId, final String returnType, final String booksOrReturns) {
		logger.debug(CLASSNAME + "cancelInvoice : Begin");
		if (returnType.equals(GSTR3B)) {
			// TODO: cancel for 3B
		}else if(returnType.equals(MasterGSTConstants.EWAYBILL)) {
			InvoiceParent invoice = getInvoice(invoiceId, returnType);
			 invoice.setStatus("CNL");
			 invoice.setCancelebillcmnts(invoice.getCancelebillcmnts());
			 ewayBillRepository.save((EWAYBILL) invoice);
		}else if(returnType.equals(MasterGSTConstants.EINVOICE)) {
			InvoiceParent invoice = getInvoice(invoiceId, "GSTR1");
			 //invoice.setStatus("CNL");
			invoice.setIrnStatus("Cancelled");
			invoice.setGstStatus("CANCELLED");
			 gstr1Repository.save((GSTR1) invoice);
		} else {
			InvoiceParent invoice = getInvoice(invoiceId, returnType);

			Client client = findById(invoice.getClientid());
			String gstn = client.getGstnnumber();
			String retPeriod = invoice.getFp();
			Base gstInvoice = getGSTRDeleteReturnInvoice(invoice, client, returnType);
				// String strYear = iyear+"";
			
			if (isEmpty(booksOrReturns) && isNotEmpty(invoice) && isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS)) {

				try {
					Response deleteResponse = iHubConsumerService.saveReturns(gstInvoice, client.getStatename(),
							client.getGstname(), gstn, retPeriod, returnType, true);
					logger.debug(CLASSNAME + "deleteInvoice : Delete from GSTN : " + deleteResponse);
				} catch (Exception e) {
					logger.error(CLASSNAME + "deleteInvoice : Delete from GSTN ERROR : ", e);
				}
				}
		
				invoice.setGstStatus(MasterGSTConstants.GST_STATUS_CANCEL);
				 
				if (returnType.equals(GSTR1)) {
					gstr1Repository.save((GSTR1) invoice);
				} else if (returnType.equals(GSTR2)) {
					gstr2Repository.save((GSTR2) invoice);
				} else if (returnType.equals(PURCHASE_REGISTER)) {
					purchaseRepository.save((PurchaseRegister) invoice);
				} else if (returnType.equals(GSTR4)) {
					gstr4Repository.save((GSTR4) invoice);
				} else if (returnType.equals(GSTR5)) {
					gstr5Repository.save((GSTR5) invoice);
				} else if (returnType.equals(GSTR6)) {
					gstr6Repository.save((GSTR6) invoice);
				}else if (returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
					deliverychallanRepository.save((DeliveryChallan) invoice);
				} else if (returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
					proformainvoicesRepository.save((ProformaInvoices) invoice);
				} else if (returnType.equals(MasterGSTConstants.ESTIMATES)) {
					estimatesRepository.save((Estimates) invoice);
				} else if (returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
					purchaseOrderRepository.save((PurchaseOrder) invoice);
			} else if (returnType.equals(ANX1)) {
				//anx1Repository.save((Anx1) invoice);
			} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
				ewayBillRepository.save((EWAYBILL) invoice);
				}
			}
	}
	
	@Override
	@Transactional
	/*
	 * @Caching(evict = {
	 * 
	 * @CacheEvict(value="clientCache", key="#userId"),
	 * 
	 * @CacheEvict(value="clientMonoCache", key="#clientId") })
	 */
	public void deleteClient(final String userId, final String clientId) {
		logger.debug(CLASSNAME + "deleteClient : Begin");
		User user = userService.findById(userId);
		List<String> clntids = Lists.newArrayList(clientId);
		List<CompanyUser> companyUsers = companyUserRepository.findByCompanyIn(clntids);
		if(isNotEmpty(companyUsers)){
			for(CompanyUser companyUser : companyUsers){
			if(isNotEmpty(companyUser)){
				List<String> userCompanies = companyUser.getCompany(); 
				if(isNotEmpty(userCompanies)){
					if(userCompanies.contains(clientId)){
						userCompanies.remove(clientId);
					}
				}
				companyUser.setCompany(userCompanies);
				companyUserRepository.save(companyUser);
			}
			}
		}
		if(isNotEmpty(user) && (isNotEmpty(user.getParentid()))) {
			if(isNotEmpty(user.getIsglobal()) && user.getIsglobal().equals("false")) {
				clientUserMappingRepository.deleteByUseridAndClientid(userId, clientId);
			} else {
				clientUserMappingRepository.deleteByClientid(clientId);
			}
		} else if(isNotEmpty(user) && isEmpty(user.getParentid())) {
			clientUserMappingRepository.deleteByClientid(clientId);
			clientRepository.delete(clientId);
			gstr1Repository.deleteByClientid(clientId);
			gstr2Repository.deleteByClientid(clientId);
			gstr3BRepository.deleteByClientid(clientId);
			purchaseRepository.deleteByClientid(clientId);
			gstr4Repository.deleteByClientid(clientId);
			gstr5Repository.deleteByClientid(clientId);
			gstr6Repository.deleteByClientid(clientId);
			anx1Repository.deleteByClientid(clientId);
		}
		logger.debug(CLASSNAME + "deleteClient : End");
	}
	
	@Override
	@Transactional
	//@CacheEvict(value="clientCache", key="#userId")
	public void deleteAllClient(final String userId) {
		logger.debug(CLASSNAME + "deleteAllClients : Begin");
		User user = userService.findById(userId);
		if(isNotEmpty(user) && (isEmpty(user.getIsglobal()) || user.getIsglobal().equals("false"))) {
			clientUserMappingRepository.deleteByUserid(userId);
		} else {
			List<Client> client = findByUserid(userId);
			if(isNotEmpty(client)) {
				clientRepository.delete(client);
			}
			clientUserMappingRepository.deleteByUserid(userId);
		}
		logger.debug(CLASSNAME + "deleteAllClient : End");
	}
	
	@Override
	@Transactional(readOnly=true)
	public List<? extends InvoiceParent> getInvoices(final String clientid, final String returnType,
			final List<String> invoiceIds) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if (isNotEmpty(returnType)) {
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndInvoicenoIn(clientid, invoiceIds);
			} else if (returnType.equals(GSTR1A)) {
				return gstr1ARepository.findByClientidAndInvoicenoIn(clientid, invoiceIds);
			}
		}
		return Lists.newArrayList();
	}

	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final String clientid,
			final String returnType) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Calendar cal = Calendar.getInstance();
			int month = cal.get(Calendar.MONTH);
			int year = cal.get(Calendar.YEAR);
			cal.set(year, month, 0, 23, 59, 59);
			Date stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month + 1, 0, 23, 59, 59);
			Date endDate = new java.util.Date(cal.getTimeInMillis());
			if (returnType.equals(GSTR1)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				List<GSTR1> gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid,
						invTypes, stDate, endDate);
				
				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFp(clientid, otherinvTypes,
						retPeriod);
				
				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return gstr1Repository.findByClientidAndDateofinvoiceBetween(clientid,
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				return deliverychallanRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,
						pageable);
			}  else if(returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				return proformainvoicesRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,
						pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				return estimatesRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				return purchaseOrderRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,
						pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final String clientid, final String returnType,
			int month, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Calendar cal = Calendar.getInstance();
			
			cal.set(year, month - 1, 0, 23, 59, 59);
			Date stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			Date endDate = new java.util.Date(cal.getTimeInMillis());
			if (returnType.equals(GSTR1)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				
				List<String> amendmentinvTypes = new ArrayList<String>();
				amendmentinvTypes.add(MasterGSTConstants.B2BA);
				amendmentinvTypes.add(MasterGSTConstants.CDNA);
				amendmentinvTypes.add(MasterGSTConstants.B2CLA);
				amendmentinvTypes.add(MasterGSTConstants.CDNURA);
				amendmentinvTypes.add(MasterGSTConstants.B2CSA);
				amendmentinvTypes.add(MasterGSTConstants.EXPA);
				
				List<GSTR1> getAmendments = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid, amendmentinvTypes, stDate, endDate);
				List<String> refids = Lists.newArrayList();
				if(isNotEmpty(getAmendments)) {
					getAmendments.stream().forEach(inv->{
						if(isNotEmpty(inv.getAmendmentRefId())){
							refids.addAll(inv.getAmendmentRefId());
						}
					});
				}
				List<GSTR1> gstr1 = null;
				if(refids.size() > 0) {
					// exclude original invoices id's
					gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndIdNotIn(clientid, invTypes, stDate, endDate, refids);					
				}else {
					gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid, invTypes, stDate, endDate);
				}
				
				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				
				List<String> otherAmendmentinvTypes = new ArrayList<String>();
				otherAmendmentinvTypes.add(MasterGSTConstants.ATA);
				otherAmendmentinvTypes.add(MasterGSTConstants.TXPA);
				
				List<GSTR1> getOtherAmendments = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid, amendmentinvTypes, stDate, endDate);
				List<String> otherRefids = Lists.newArrayList();
				if(isNotEmpty(getOtherAmendments)) {
					getOtherAmendments.stream().forEach(inv->{
						if(isNotEmpty(inv.getAmendmentRefId())){
							otherRefids.addAll(inv.getAmendmentRefId());
						}
					});
				}
				
				List<GSTR1> gstr1nilltxpat = null;
				if(isNotEmpty(otherRefids)) {
					gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFpAndIdNotIn(clientid, otherinvTypes, retPeriod, otherRefids);					
				}else {
					gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFp(clientid, otherAmendmentinvTypes, retPeriod);					
				}
				
				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return gstr1Repository.findByClientidAndDateofinvoiceBetween(clientid,
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(clientid);
				Boolean billdate = false;
				if (isNotEmpty(otherconfig)) {
					billdate = otherconfig.isEnableTransDate();
				}
				if (isEmpty(otherconfig) || !billdate) {
					return purchaseRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
				} else {
					return purchaseRepository.findByClientidAndBillDateBetween(clientid, stDate, endDate, pageable);
				}
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				return deliverychallanRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,
						pageable);
			}  else if(returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				return proformainvoicesRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,
						pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				return estimatesRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				return purchaseOrderRepository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate,
						pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(clientid, stDate, endDate, pageable);
			}
		}
		return null;
	}

	@Override
	@Transactional(readOnly=true)
	public List<? extends InvoiceParent> getSelectedInvoices(final List<String> invoiceList, final String returnType) {
		logger.debug(CLASSNAME + "getSelectedInvoices : Begin");
		if (isNotEmpty(returnType)) {
			Iterable<? extends InvoiceParent> invIterable = null;
			if (returnType.equals(GSTR1)) {
				invIterable = gstr1Repository.findAll(invoiceList);
			} else if (returnType.equals(GSTR1A)) {
				invIterable = gstr1ARepository.findAll(invoiceList);
			} else if (returnType.equals(GSTR2)) {
				invIterable = gstr2Repository.findAll(invoiceList);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				invIterable = purchaseRepository.findAll(invoiceList);
			} else if (returnType.equals(GSTR4)) {
				invIterable = gstr4Repository.findAll(invoiceList);
			} else if (returnType.equals(GSTR5)) {
				invIterable = gstr5Repository.findAll(invoiceList);
			} else if (returnType.equals(GSTR6)) {
				invIterable = gstr6Repository.findAll(invoiceList);
			} else if (returnType.equals(ANX1)) {
				//invIterable = anx1Repository.findAll(invoiceList);
			}
			if (isNotEmpty(invIterable)) {
				List<InvoiceParent> list=Lists.newArrayList();
				CollectionUtils.addAll(list, invIterable);
				return list;
			}
		}
		return Lists.newArrayList();
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String returnType,
			int month, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		return getInvoices(pageable, client, returnType, month, year, true);
	}

	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getAmendments(Pageable pageable, final String clientid,
			final String returnType, int month, int year) {
		logger.debug(CLASSNAME + "getAmendments : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if(month == 1 || month == 2 || month == 3) {
				cal.set(year - 1, 3, 0, 23, 59, 59);
			} else {
				cal.set(year, 3, 0, 23, 59, 59);
			}
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndIsAmendmentAndDateofinvoiceBetween(clientid, true, stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndIsAmendmentAndDateofinvoiceBetween(clientid, true, stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndIsAmendmentAndDateofinvoiceBetween(clientid, true, stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndIsAmendmentAndDateofinvoiceBetween(clientid, true, stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndIsAmendmentAndDateofinvoiceBetween(clientid, true, stDate,
						endDate, pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public List<? extends InvoiceParent> getOldInvoicesByBranch(final String clientid, final String returnType,
			int month, int year, List<String> branch) {
		logger.debug(CLASSNAME + "getOldInvoicesByBranch : Begin");
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (month == 1 || month == 2 || month == 3) {
				cal.set(year - 1, 3, 0, 23, 59, 59);
			} else {
				cal.set(year, 3, 0, 23, 59, 59);
			}
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			List<String> statusList = Lists.newArrayList();
			statusList.add(MasterGSTConstants.STATUS_FILED);
			statusList.add(MasterGSTConstants.STATUS_SUBMITTED);
			statusList.add(MasterGSTConstants.GST_STATUS_SUCCESS);
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetweenAndBranchIn(clientid,
						statusList, stDate, endDate, branch);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetweenAndBranchIn(clientid,
						statusList, stDate, endDate, branch);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetweenAndBranchIn(clientid,
						statusList, stDate, endDate, branch);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetweenAndBranchIn(clientid,
						statusList, stDate, endDate, branch);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetweenAndBranchIn(clientid,
						statusList, stDate, endDate, branch);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetweenAndBranchIn(clientid,
					//	statusList, stDate, endDate, branch);
			}
		}
		return Lists.newArrayList();
	}

	@Override
	@Transactional(readOnly = true)
	public List<? extends InvoiceParent> getOldInvoices(final String clientid, final String returnType, int month,
			int year) {
		logger.debug(CLASSNAME + "getOldInvoices : Begin");
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if(month == 1 || month == 2 || month == 3) {
				cal.set(year - 1, 3, 0, 23, 59, 59);
			} else {
				cal.set(year, 3, 0, 23, 59, 59);
			}
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			List<String> statusList = Lists.newArrayList();
			statusList.add(MasterGSTConstants.STATUS_FILED);
			statusList.add(MasterGSTConstants.STATUS_SUBMITTED);
			statusList.add(MasterGSTConstants.GST_STATUS_SUCCESS);
			statusList.add(MasterGSTConstants.STATUS_INELIGIBLE);
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetween(clientid,	statusList, 
						stDate, endDate);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetween(clientid,	statusList, 
						stDate, endDate);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetween(clientid,	statusList, 
						stDate, endDate);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetween(clientid,	statusList, 
						stDate, endDate);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetween(clientid,	statusList, 
						stDate, endDate);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndGstStatusNotInAndDateofinvoiceBetween(clientid, statusList,
						//stDate, endDate);
			}
		}
		return Lists.newArrayList();
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String returnType,
			int month, int year, boolean checkQuarterly) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				//String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			
			if (checkQuarterly && isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 0, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year, 9, 0, 23, 59, 59);
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 9, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year + 1, 0, 0, 23, 59, 59);
				}
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, month - 1, 0, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
			if (returnType.equals(GSTR1)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				List<GSTR1> gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(
						client.getId().toString(), invTypes, stDate, endDate);
				
				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFp(client.getId().toString(),
						otherinvTypes, retPeriod);
				
				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
			} else if (returnType.equals(GSTR1A)) {
				return gstr1ARepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
				List<String> genMode = Arrays.asList("EwayBill", "Manual");
				return ewayBillRepository.findByClientidAndGenerateModeInAndEBillDateBetween(client.getId().toString(),
						genMode, stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(ANX1)) {
			}
		}
		return null;
	}

@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getInvoicesByBranchName(Pageable pageable, final Client client,
			final String userid, final String returnType, final String reports, int month, int year,
			final List<String> branch) {
		logger.debug(CLASSNAME + "getInvoicesByBranchName : Begin");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			if (isNotEmpty(client.getFilingoptions())) {
				String yr;
				if (month == 1 || month == 2 || month == 3) {
					yr = (year - 1) + "-" + (year);
				} else {
					yr = year + "-" + (year + 1);
				}
				// String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options -> {
					if (options.getYear().equalsIgnoreCase(yr)) {
						client.setFilingOption(options.getOption());
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (returnType.equals("Unclaimed")) {
				if (year <= 2018) {
					cal.set(2017, 6, 0, 23, 59, 59);
				} else {
					if (month > 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					}
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					} else {
						cal.set(year, 3, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if ((!returnType.equals(MasterGSTConstants.GSTR2)
						&& !returnType.equals(MasterGSTConstants.PURCHASE_REGISTER))
						&& isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
					if ("reports".equals(reports)) {
						cal.set(year, month - 1, 0, 23, 59, 59);
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
						cal.set(year, month, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					} else {
						if (month == 1 || month == 2 || month == 3) {
							cal.set(year, 0, 0, 23, 59, 59);
						} else if (month == 4 || month == 5 || month == 6) {
							cal.set(year, 3, 0, 23, 59, 59);
						} else if (month == 7 || month == 8 || month == 9) {
							cal.set(year, 6, 0, 23, 59, 59);
						} else if (month == 10 || month == 11 || month == 12) {
							cal.set(year, 9, 0, 23, 59, 59);
						}
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
						if (month == 1 || month == 2 || month == 3) {
							cal.set(year, 3, 0, 23, 59, 59);
						} else if (month == 4 || month == 5 || month == 6) {
							cal.set(year, 6, 0, 23, 59, 59);
						} else if (month == 7 || month == 8 || month == 9) {
							cal.set(year, 9, 0, 23, 59, 59);
						} else if (month == 10 || month == 11 || month == 12) {
							cal.set(year + 1, 0, 0, 23, 59, 59);
						}
						endDate = new java.util.Date(cal.getTimeInMillis());
					}
				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
			if (returnType.equals(GSTR1)) {
				String strMonth = month < 10 ? "0" + month : month + "";
				String retPeriod = strMonth + year;
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				List<GSTR1> gstr1 = Lists.newArrayList();
				// List<GSTR1> gstr1 =
				// gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),invTypes,
				// stDate, endDate);

				OtherConfigurations otherconfig = otherConfigurationRepository
						.findByClientid(client.getId().toString());
				Boolean fpidate = false;
				if (isNotEmpty(otherconfig)) {
					fpidate = otherconfig.isEnableinvoiceview();
				}
				if ("reports".equals(reports)) {
					gstr1 = gstr1Repository.findByClientidAndInvtypeInAndBranchInAndDateofinvoiceBetween(
							client.getId().toString(), invTypes, branch, stDate, endDate);
				} else {
					if (isEmpty(otherconfig) || !fpidate) {
						gstr1 = gstr1Repository.findByClientidAndInvtypeInAndBranchInAndDateofinvoiceBetween(
								client.getId().toString(), invTypes, branch, stDate, endDate);
					} else {
						gstr1 = gstr1Repository.findByClientidAndInvtypeInAndFpAndBranchIn(client.getId().toString(),
								invTypes, retPeriod, branch);
					}
				}

				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFpAndBranchIn(
						client.getId().toString(), otherinvTypes, retPeriod, branch);

				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return
				// gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetweenAndBranchIn(client.getId().toString(),
						stDate, endDate, pageable, branch);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth = month < 10 ? "0" + month : month + "";
				String retPeriod = strMonth + year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				return gstr2Repository.findByClientidAndFpAndIsAmendmentAndInvtypeIn(client.getId().toString(),
						retPeriod, true, invTypes, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				// return
				// purchaseRepository.findByClientidAndBillDateBetween(client.getId().toString(),
				// stDate, endDate, pageable);
				OtherConfigurations otherconfig = otherConfigurationRepository
						.findByClientid(client.getId().toString());
				Boolean billdate = false;
				if (isNotEmpty(otherconfig)) {
					billdate = otherconfig.isEnableTransDate();
				}
				if (isEmpty(otherconfig) || !billdate) {
					return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndBranchIn(
							client.getId().toString(), stDate, endDate, pageable, branch);
				} else {
					return purchaseRepository.findByClientidAndBillDateBetweenAndBranchIn(client.getId().toString(),
							stDate, endDate, pageable, branch);
				}
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetweenAndBranchIn(client.getId().toString(),
						stDate, endDate, pageable, branch);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetweenAndBranchIn(client.getId().toString(),
						stDate, endDate, pageable, branch);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetweenAndBranchIn(client.getId().toString(),
						stDate, endDate, pageable, branch);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNullAndBranchIn(
						client.getId().toString(), stDate, endDate, pageable, branch);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				return deliverychallanRepository.findByClientidAndDateofinvoiceBetweenAndBranchIn(
						client.getId().toString(), stDate, endDate, pageable, branch);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				return proformainvoicesRepository.findByClientidAndDateofinvoiceBetweenAndBranchIn(
						client.getId().toString(), stDate, endDate, pageable, branch);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				return estimatesRepository.findByClientidAndDateofinvoiceBetweenAndBranchIn(client.getId().toString(),
						stDate, endDate, pageable, branch);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				return purchaseOrderRepository.findByClientidAndDateofinvoiceBetweenAndBranchIn(
						client.getId().toString(), stDate, endDate, pageable, branch);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
				if ("reports".equals(reports)) {
					return ewayBillRepository.findByClientidAndDateofinvoiceBetweenAndBranchIn(
							client.getId().toString(), stDate, endDate, pageable, branch);
				} else {
					List<String> genMode = Arrays.asList("EwayBill", "Manual");
					return ewayBillRepository.findByClientidAndGenerateModeInAndEBillDateBetweenAndBranchIn(
							client.getId().toString(), genMode, stDate, endDate, pageable, branch);
				}
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetweenAndBranchIn(client.getId().toString(),
					//	stDate, endDate, pageable, branch);
			}
		}
		return null;
	}
	
	private Date[] caliculateStEndDates(final Client client, final String returnType, final String reports,int month, int year){
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		if(returnType.equals("Unclaimed")){
			if(year <= 2018) {
				cal.set(2017, 6, 0, 0, 0, 0);
			} else {
				if(month > 3) {
					cal.set(year, 3, 0, 0, 0, 0);
				} else {
					cal.set(year-1, 3, 0, 0, 0, 0);
				}	
			}
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 0, 0, 0);
			endDate = new java.util.Date(cal.getTimeInMillis());
		}else{
			if(isNotEmpty(client.getFilingOption()) && client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year-1, 3, 0, 0, 0, 0);
				} else {
					cal.set(year, 3, 0, 0, 0, 0);
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 3, 0, 0, 0, 0);
				} else {
					cal.set(year+1, 3, 0, 0, 0, 0);
				}
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else if((!returnType.equals(MasterGSTConstants.GSTR2) && !returnType.equals(MasterGSTConstants.PURCHASE_REGISTER)) && isNotEmpty(client.getFilingOption()) && client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if("reports".equals(reports)) {
					cal.set(year, month - 1, 0, 0, 0, 0);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 0, 0, 0);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}else {
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 0, 0, 0);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 0, 0, 0);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 0, 0, 0);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 0, 0, 0);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 0, 0, 0);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 0, 0, 0);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 0, 0, 0);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year+1, 0, 0, 0, 0, 0);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			} else {
				cal.set(year, month - 1, 0, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 0, 0, 0);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
		}
		return new Date[]{stDate, endDate};
	}
	@Override
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String userid, String returnType,final String reports, int month,
			int year){
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			if (isNotEmpty(client.getFilingoptions())) {
				String yr;
				if (month == 1 || month == 2 || month == 3) {
					yr = (year - 1) + "-" + (year);
				} else {
					yr = year + "-" + (year + 1);
				}
				// String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options -> {
					if (options.getYear().equalsIgnoreCase(yr)) {
						client.setFilingOption(options.getOption());
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (returnType.equals("Unclaimed")) {
				if (year <= 2018) {
					cal.set(2017, 6, 0, 23, 59, 59);
				} else {
					if (month > 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					}
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					} else {
						cal.set(year, 3, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if ((!returnType.equals(MasterGSTConstants.GSTR2)
						&& !returnType.equals(MasterGSTConstants.PURCHASE_REGISTER))
						&& isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
					if ("reports".equals(reports)) {
						cal.set(year, month - 1, 0, 23, 59, 59);
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
						cal.set(year, month, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					} else {
						if (month == 1 || month == 2 || month == 3) {
							cal.set(year, 0, 0, 23, 59, 59);
						} else if (month == 4 || month == 5 || month == 6) {
							cal.set(year, 3, 0, 23, 59, 59);
						} else if (month == 7 || month == 8 || month == 9) {
							cal.set(year, 6, 0, 23, 59, 59);
						} else if (month == 10 || month == 11 || month == 12) {
							cal.set(year, 9, 0, 23, 59, 59);
						}
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
						if (month == 1 || month == 2 || month == 3) {
							cal.set(year, 3, 0, 23, 59, 59);
						} else if (month == 4 || month == 5 || month == 6) {
							cal.set(year, 6, 0, 23, 59, 59);
						} else if (month == 7 || month == 8 || month == 9) {
							cal.set(year, 9, 0, 23, 59, 59);
						} else if (month == 10 || month == 11 || month == 12) {
							cal.set(year + 1, 0, 0, 23, 59, 59);
						}
						endDate = new java.util.Date(cal.getTimeInMillis());
					}
				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
			if (returnType.equals(MasterGSTConstants.EINVOICE)) {
				returnType = GSTR1;
			}
			if (returnType.equals(GSTR1)) {
				String strMonth = month < 10 ? "0" + month : month + "";
				String retPeriod = strMonth + year;
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				List<GSTR1> gstr1 = Lists.newArrayList();
				// List<GSTR1> gstr1 =
				// gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),invTypes,
				// stDate, endDate);

				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
				Boolean fpidate = false;
				if (isNotEmpty(otherconfig)) {
					fpidate = otherconfig.isEnableinvoiceview();
				}
				if ("reports".equals(reports)) {
					gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),invTypes, stDate, endDate);
				} else {
					if (isEmpty(otherconfig) || !fpidate) {
						gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(
								client.getId().toString(), invTypes, stDate, endDate);
					} else {
						gstr1 = gstr1Repository.findByClientidAndInvtypeInAndFp(client.getId().toString(), invTypes,retPeriod);
					}
				}

				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFp(client.getId().toString(),
						otherinvTypes, retPeriod);

				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return
				// gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth = month < 10 ? "0" + month : month + "";
				String retPeriod = strMonth + year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				return gstr2Repository.findByClientidAndFpAndIsAmendmentAndInvtypeIn(client.getId().toString(),
						retPeriod, true, invTypes, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				// return
				// purchaseRepository.findByClientidAndBillDateBetween(client.getId().toString(),
				// stDate, endDate, pageable);
				OtherConfigurations otherconfig = otherConfigurationRepository
						.findByClientid(client.getId().toString());
				Boolean billdate = false;
				if (isNotEmpty(otherconfig)) {
					billdate = otherconfig.isEnableTransDate();
				}
				if (isEmpty(otherconfig) || !billdate) {
					return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
							endDate, pageable);
				} else {
					return purchaseRepository.findByClientidAndBillDateBetween(client.getId().toString(), stDate,
							endDate, pageable);
				}
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				return deliverychallanRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
						stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				return proformainvoicesRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
						stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				return estimatesRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				return purchaseOrderRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
				if ("reports".equals(reports)) {
					return ewayBillRepository.findByClientidAndEBillDateBetween(client.getId().toString(), stDate,
							endDate, pageable);
				} else {
					List<String> genMode = Arrays.asList("EwayBill", "Manual");
					return ewayBillRepository.findByClientidAndGenerateModeInAndEBillDateBetween(
							client.getId().toString(), genMode, stDate, endDate, pageable);
				}
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			} else if (returnType.equals(MasterGSTConstants.EINVOICE)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetweenAndGstr1orEinvoice(client.getId().toString(), stDate, endDate,"Einvoice",pageable);
			}
		}
		return null;
	}
	
	public Map getInvoices(Pageable pageable, final Client client, final String userid, final String returnType,final String reports, int month,
			int year, int start, int length, String searchVal, InvoiceFilter filter, boolean isTotalRequired, String booksOrReturns){
		logger.debug(CLASSNAME + "getInvoices : Begin");
		Map<String, Object> invoicesMap = new HashMap<String, Object>();
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Page<? extends InvoiceParent> invoices = null;
		TotalInvoiceAmount totalInvoiceAmount = null;
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getInvoiceViewOption()) && client.getInvoiceViewOption().equalsIgnoreCase("Yearly")) {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr = (year-1)+"-"+year;
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
			}else {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr;
					if(month == 1 || month == 2 || month == 3) {
						yr = (year-1)+"-"+(year);
					}else {
						yr = year+"-"+(year+1);
					}
					//String yr=year+"-"+(year+1);
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
			}
			Date[] dates = caliculateStEndDates(client, returnType, reports, month, year);
			Date stDate = dates[0];
			Date endDate = dates[1];
			String yearCode = Utility.getYearCode(month, year);
			if (returnType.equals(GSTR1)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				ClientStatus clientStatus = getClientStatus(client.getId().toString(), returnType, retPeriod);
				String filingstatus = "";
				if (isNotEmpty(clientStatus)) {
					filingstatus = clientStatus.getStatus();
				}
				Page<GSTR1> gstr1 = null;
				Boolean prevPendinginv = false;
				if(isEmpty(client.getPrevPendingInv())) {
					prevPendinginv = false;
				}else if("previousMonthsPendingInv".equalsIgnoreCase(client.getPrevPendingInv())){
					prevPendinginv = true;
				}else {
					prevPendinginv = false;
				}
				if(filingstatus.equalsIgnoreCase(MasterGSTConstants.STATUS_FILED) || filingstatus.equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED)) {
					prevPendinginv = false;
				}
				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
				Boolean fpidate = false;
				if(isNotEmpty(otherconfig)){
					fpidate = otherconfig.isEnableinvoiceview();
				}
				if("reports".equals(reports)) {
					gstr1 = gstr1Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
					totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter,"");
				}else {
					if(isEmpty(otherconfig) || !fpidate) {
						if(prevPendinginv && isEmpty(booksOrReturns)) {
							
							boolean contains = false;
							if(isNotEmpty(filter) && isNotEmpty(filter.getPaymentStatus()) && filter.getPaymentStatus().length>0) {
								contains = Arrays.asList(filter.getPaymentStatus()).contains("Pending");
								if(!contains) {
									filter.getPaymentStatus()[filter.getPaymentStatus().length-1] = "Pending";
								}
							}else {
								 String[] tempArray = new String[ 1 ];
								 tempArray[0] ="Pending";
								filter.setPaymentStatus(tempArray);
							}
							gstr1 = gstr1Dao.findByClientidAndMonthAndYearPrevMonthPendingInvoices(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
							totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonthPreviousMonthPendingInvoices(client.getId().toString(), month, yearCode, searchVal, filter);
						}else {
							gstr1 = gstr1Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
							totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter,"");
						}
					} else {
						if(prevPendinginv && isEmpty(booksOrReturns)) {
							boolean contains = false;
							if(isNotEmpty(filter) && isNotEmpty(filter.getPaymentStatus()) && filter.getPaymentStatus().length>0) {
								contains = Arrays.asList(filter.getPaymentStatus()).contains("Pending");
								if(!contains) {
									filter.getPaymentStatus()[filter.getPaymentStatus().length-1] = "Pending";
								}
							}else {
								 String[] tempArray = new String[ 1 ];
								 tempArray[0] ="Pending";
								filter.setPaymentStatus(tempArray);
							}
							gstr1 = gstr1Dao.findByClientidAndMonthAndYearPrevMonthPendingInvoices(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
							totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonthPreviousMonthPendingInvoices(client.getId().toString(), month, yearCode, searchVal, filter);
						}else {
							gstr1 = gstr1Dao.findByClientidAndFp(client.getId().toString(), retPeriod, start, length, searchVal, filter);
							totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForFp(client.getId().toString(), retPeriod, searchVal, filter);
						}
					}
				}
				invoices = gstr1;
			} else if (returnType.equals(GSTR2)) {
				invoices= gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
						MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				invoices = gstr2ADao.findByClientidAndMonthAndYear(client.getId().toString(),invTypes,retPeriod,start,length,searchVal,filter);
				totalInvoiceAmount = gstr2ADao.getTotalInvoicesAmountsForMonth(client.getId().toString(), invTypes,retPeriod, searchVal, filter);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				if("reports".equals(reports)) {
					invoices = purchageRegisterDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
					totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
				}else {
					OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
					Boolean billdate = false;
					if(isNotEmpty(otherconfig)){
						billdate = otherconfig.isEnableTransDate();
					}
					if(isEmpty(otherconfig) || !billdate) {
						invoices = purchageRegisterDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
						totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
					} else {
						invoices = purchageRegisterDao.findByClientidAndBillDateMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
						totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForBillDateMonth(client.getId().toString(), month, yearCode, searchVal, filter);
					}
				}
			} else if (returnType.equals(GSTR4)) {
				//invoices= gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				invoices = gstr4Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = gstr4Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if (returnType.equals(GSTR5)) {
				invoices= gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(GSTR6) || returnType.equals(MasterGSTConstants.ISD) || returnType.equals("Distribution")) {
				//invoices= gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<String> invtypeList = Lists.newArrayList();
				if(returnType.equals(GSTR6)) {
					invtypeList.add(MasterGSTConstants.B2B);
					invtypeList.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				}else if(returnType.equals(MasterGSTConstants.ISD) || returnType.equals("Distribution")) {
					invtypeList.add(MasterGSTConstants.ISD);
					invtypeList.add(MasterGSTConstants.ISDCN);
					invtypeList.add(MasterGSTConstants.ISDDN);
				}
				invoices = gstr6Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, invtypeList,start, length, searchVal, filter);
				totalInvoiceAmount = gstr6Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, invtypeList,searchVal, filter);
			} else if (returnType.equals("Unclaimed")) {
				invoices = purchageRegisterDao.findByClientidAndMonthAndYearForUnclimed(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonthForUnclimed(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				invoices = deliveryChallanaDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = deliveryChallanaDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			}  else if(returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				invoices = proformaDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = proformaDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				invoices = estimatesDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = estimatesDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				invoices = purchaseOrderDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = purchaseOrderDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
			
				if("reports".equals(reports)) {
					invoices = ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,filter);
					totalInvoiceAmount = ewayBillDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal,filter);
				}else {
					invoices = ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,filter);
					totalInvoiceAmount = ewayBillDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal,filter);
				}
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.ANX2)) {
				invoices = anx2Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = anx2Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			}
			invoicesMap.put("invoices",invoices);
			invoicesMap.put("invoicesAmount",totalInvoiceAmount);
		}
		return invoicesMap;
	}
	
	public Map getDeleteAllInvoices(Pageable pageable, final Client client, final String userid, final String returnType,final String reports, int month,
			int year, int start, int length, String searchVal, InvoiceFilter filter, boolean isTotalRequired, String booksOrReturns){
		logger.debug(CLASSNAME + "getInvoices : Begin");
		Map<String, Object> invoicesMap = new HashMap<String, Object>();
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Page<? extends InvoiceParent> invoices = null;
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getInvoiceViewOption()) && client.getInvoiceViewOption().equalsIgnoreCase("Yearly")) {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr = (year-1)+"-"+year;
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
			}else {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr;
					if(month == 1 || month == 2 || month == 3) {
						yr = (year-1)+"-"+(year);
					}else {
						yr = year+"-"+(year+1);
					}
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
			}
			Date[] dates = caliculateStEndDates(client, returnType, reports, month, year);
			Date stDate = dates[0];
			Date endDate = dates[1];
			String yearCode = Utility.getYearCode(month, year);
			if (returnType.equals(GSTR1)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				ClientStatus clientStatus = getClientStatus(client.getId().toString(), returnType, retPeriod);
				String filingstatus = "";
				if (isNotEmpty(clientStatus)) {
					filingstatus = clientStatus.getStatus();
				}
				Page<GSTR1> gstr1 = null;
				Boolean prevPendinginv = false;
				if(isEmpty(client.getPrevPendingInv())) {
					prevPendinginv = false;
				}else if("previousMonthsPendingInv".equalsIgnoreCase(client.getPrevPendingInv())){
					prevPendinginv = true;
				}else {
					prevPendinginv = false;
				}
				if(filingstatus.equalsIgnoreCase(MasterGSTConstants.STATUS_FILED) || filingstatus.equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED)) {
					prevPendinginv = false;
				}
				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
				Boolean fpidate = false;
				if(isNotEmpty(otherconfig)){
					fpidate = otherconfig.isEnableinvoiceview();
				}
				if("reports".equals(reports)) {
					gstr1 = gstr1Dao.findByClientidAndMonthAndYearForDelete(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				}else {
					if(isEmpty(otherconfig) || !fpidate) {
						if(prevPendinginv && isEmpty(booksOrReturns)) {
							boolean contains = false;
							InvoiceFilter filter1 = new InvoiceFilter();
							if(isNotEmpty(filter) && isNotEmpty(filter.getPaymentStatus()) && filter.getPaymentStatus().length>0) {
								contains = Arrays.asList(filter.getPaymentStatus()).contains("Pending");
								 try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
									}
								if(!contains) {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="All";
									filter.setPaymentStatus(tempArray);
								}else {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="Pending";
									filter.setPaymentStatus(tempArray);
								}
							}else {
								try {
									BeanUtils.copyProperties(filter, filter1);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
								 }
								
								 String[] tempArray = new String[ 1 ];
								 tempArray[0] ="Pending";
								filter.setPaymentStatus(tempArray);
							}
							gstr1 = gstr1Dao.findByClientidAndMonthAndYearPrevMonthPendingInvoicesDelete(client.getId().toString(), month, yearCode, start, length, searchVal, filter,filter1);
						}else {
							gstr1 = gstr1Dao.findByClientidAndMonthAndYearForDelete(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
						}
					} else {
						if(prevPendinginv && isEmpty(booksOrReturns)) {
							boolean contains = false;
							InvoiceFilter filter1 = new InvoiceFilter();
							if(isNotEmpty(filter) && isNotEmpty(filter.getPaymentStatus()) && filter.getPaymentStatus().length>0) {
								contains = Arrays.asList(filter.getPaymentStatus()).contains("Pending");
								 try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
									}
								if(!contains) {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="All";
									filter.setPaymentStatus(tempArray);
								}else {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="Pending";
									filter.setPaymentStatus(tempArray);
								}
							}else {
								
								try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
								 }
								
								 String[] tempArray = new String[ 1 ];
								 tempArray[0] ="Pending";
								filter.setPaymentStatus(tempArray);
							}
							gstr1 = gstr1Dao.findByClientidAndMonthAndYearPrevMonthPendingInvoicesDelete(client.getId().toString(), month, yearCode, start, length, searchVal, filter,filter1);
						}else {
							gstr1 = gstr1Dao.findByClientidAndFpDelete(client.getId().toString(), retPeriod, start, length, searchVal, filter);
						}
					}
				}
				invoices = gstr1;
			} else if (returnType.equals(GSTR2)) {
				invoices= gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
						MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				invoices = gstr2ADao.findByClientidAndMonthAndYear(client.getId().toString(),invTypes,retPeriod,start,length,searchVal,filter);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				if("reports".equals(reports)) {
					invoices = purchageRegisterDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				}else {
					OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
					Boolean billdate = false;
					if(isNotEmpty(otherconfig)){
						billdate = otherconfig.isEnableTransDate();
					}
					if(isEmpty(otherconfig) || !billdate) {
						invoices = purchageRegisterDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
					} else {
						invoices = purchageRegisterDao.findByClientidAndBillDateMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
					}
				}
			} else if (returnType.equals(GSTR4)) {
				invoices= gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(GSTR5)) {
				invoices= gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(GSTR6)) {
				invoices= gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals("Unclaimed")) {
				invoices = purchageRegisterDao.findByClientidAndMonthAndYearForUnclimed(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				invoices = deliveryChallanaDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
			}  else if(returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				invoices = proformaDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				invoices = estimatesDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				invoices = purchaseOrderDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
				if("reports".equals(reports)) {
					invoices = ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,filter);
				}else {
					invoices = ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,filter);
				}
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.ANX2)) {
				invoices = anx2Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
			}
			invoicesMap.put("invoices",invoices);
		}
		return invoicesMap;
	}
	
	@Override
	@Transactional
	public String deleteInvoice(InvoiceParent invoice, final String returnType,final String booksOrReturns) {
		logger.debug(CLASSNAME + "deleteInvoice : Begin");
		String invoiceNo = null;
		
		String matchedId = null;
		List<String> gstr2bMatchedId = Lists.newArrayList();
		String matchedStatus = null;
		//InvoiceParent invoice = null;
		if (!returnType.equals(GSTR3B) && !returnType.equals(ANX1)) {
			//invoice = getInvoice(invoiceId, returnType);
			if (returnType.equals(PURCHASE_REGISTER)) {
				if (isNotEmpty(invoice.getMatchingId())) {
					matchedId = invoice.getMatchingId();
				}
				if(isNotEmpty(invoice.getMatchingStatus())) {
					matchedStatus = invoice.getMatchingStatus();
				}
				if (isNotEmpty(invoice.getGstr2bMatchingId()) && invoice.getGstr2bMatchingId().size() > 0) {
					gstr2bMatchedId.addAll(invoice.getGstr2bMatchingId());
				}
			}
			
			if (isEmpty(booksOrReturns) && isNotEmpty(invoice) && isNotEmpty(invoice.getGstStatus())
					&& invoice.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS)) {
				Client client = findById(invoice.getClientid());
				String gstn = client.getGstnnumber();
				String retPeriod = invoice.getFp();
				ClientStatus clientStatus = getClientStatus(invoice.getClientid(), returnType, retPeriod);
				if(isEmpty(clientStatus) || (isNotEmpty(clientStatus) && isNotEmpty(clientStatus.getStatus()) && !clientStatus.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED) && !clientStatus.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_FILED))) {
					invoice = getInvoice(invoice.getId().toString(), returnType);
					Base gstInvoice = getGSTRDeleteReturnInvoice(invoice, client, returnType);
				try {
					Response deleteResponse = iHubConsumerService.saveReturns(gstInvoice, client.getStatename(),
							client.getGstname(), gstn, retPeriod, returnType, true);
					if (isNotEmpty(deleteResponse) && isNotEmpty(deleteResponse.getStatuscd())
							&& deleteResponse.getStatuscd().equals("1")) {
						invoiceNo = invoice.getInvoiceno();
					}
					logger.debug(CLASSNAME + "deleteInvoice : Delete from GSTN : " + deleteResponse);
				} catch (Exception e) {
					logger.error(CLASSNAME + "deleteInvoice : Delete from GSTN ERROR : ", e);
					}
				}
			}
		}
		deletePaymentsAndReceipts(invoice.getId().toString());
		if (returnType.equals(GSTR1)) {
			GSTR1Delete gstr1deleteinvs = new GSTR1Delete();
			try {
				BeanUtils.copyProperties(gstr1deleteinvs,invoice);
				gstr1deleteinvs.setDeleteddate(new Date());
				gstr1DeleteRepository.save(gstr1deleteinvs);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			gstr1Repository.delete(invoice.getId().toString());
		} else if (returnType.equals(GSTR2)) {
			gstr2Repository.delete(invoice.getId().toString());
		} else if (returnType.equals(GSTR3B)) {
			gstr3BRepository.delete(invoice.getId().toString());
		} else if (returnType.equals(PURCHASE_REGISTER)) {
			purchaseRepository.delete(invoice.getId().toString());
			if (isNotEmpty(matchedId)) {
				if(isNotEmpty(matchedStatus) && matchedStatus.equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED)) {
					List<GSTR2> gstr2Lst = gstr2Repository.findByMatchingId(invoice.getId().toString());
					if(isNotEmpty(gstr2Lst)) {
						for(GSTR2 gstr2Inv : gstr2Lst) {
							if (isNotEmpty(gstr2Inv) && !gstr2Inv.isAmendment()) {
								gstr2Repository.delete(matchedId);
							} else {
								gstr2Inv.setMatchingId(null);
								gstr2Inv.setMatchingStatus(null);
								gstr2Inv.setMannualMatchInvoices(null);
								gstr2Repository.save(gstr2Inv);
							}
						}
					}
				}else {
					GSTR2 gstr2 = gstr2Repository.findOne(matchedId);
					if(isNotEmpty(gstr2)) {
						if (isNotEmpty(gstr2) && !gstr2.isAmendment()) {
							gstr2Repository.delete(matchedId);
						} else {
							gstr2.setMatchingId(null);
							gstr2.setMatchingStatus(null);
							gstr2Repository.save(gstr2);
						}
					}
				}
			}
			
			if(gstr2bMatchedId.size() > 0) {
				List<GSTR2BSupport> gstr2bLst = gstr2bSupportRepository.findByIdIn(gstr2bMatchedId);
				
				if(isNotEmpty(gstr2bLst)) {
					gstr2bLst.forEach(inv ->{
						inv.setGstr2bMatchingRsn(null);
						inv.setGstr2bMatchingId(null);
						inv.setGstr2bMatchingStatus(null);
						gstr2bSupportRepository.save(inv);
					});
				}
			}
		} else if (returnType.equals(GSTR4)) {
			gstr4Repository.delete(invoice.getId().toString());
		} else if (returnType.equals(GSTR5)) {
			gstr5Repository.delete(invoice.getId().toString());
		} else if (returnType.equals(GSTR6)) {
			gstr6Repository.delete(invoice.getId().toString());
		} else if (returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			deliverychallanRepository.delete(invoice.getId().toString());
		} else if (returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			proformainvoicesRepository.delete(invoice.getId().toString());
		} else if (returnType.equals(MasterGSTConstants.ESTIMATES)) {
			estimatesRepository.delete(invoice.getId().toString());
		} else if (returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
			purchaseOrderRepository.delete(invoice.getId().toString());
		} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
			ewayBillRepository.delete(invoice.getId().toString());
		} else if (returnType.equals(ANX1)) {
			anx1Repository.delete(invoice.getId().toString());
		}else if (returnType.equals(MasterGSTConstants.EINVOICE)) {
			einvoiceRepository.delete(invoice.getId().toString());
		}
		
		return invoiceNo;
	}
	
	public Map<String, Map<String, String>> getConsolidatedSummeryForYearMonthwise(final Client client, String yearCd, boolean checkQuarterly){
		//String yearCd = month<4? (year-1)+"-"+year : (year)+"-"+(year+1); 
		List<TotalInvoiceAmount> gstr1InvoiceAmounts = gstr1Dao.getConsolidatedSummeryForYearMonthwise(client, yearCd,checkQuarterly,"",null);
		List<TotalInvoiceAmount> purchageInvoiceAmounts = purchageRegisterDao.getConsolidatedSummeryForYearMonthwise(client, yearCd, checkQuarterly);
		List<TotalInvoiceAmount> gstr4InvoiceAmounts = gstr4Dao.getConsolidatedSummeryForYearMonthwise(client, yearCd, checkQuarterly);
		List<TotalInvoiceAmount> gstr5InvoiceAmounts = gstr5Dao.getConsolidatedSummeryForYearMonthwise(client, yearCd, checkQuarterly);
		List<TotalInvoiceAmount> gstr6InvoiceAmounts = gstr6Dao.getConsolidatedSummeryForYearMonthwise(client, yearCd, checkQuarterly);
		List<String> clientids = Lists.newArrayList();
		clientids.add(client.getId().toString());
		List<TotalInvoiceAmount> expensesInvoiceAmounts = expensesDao.getConsolidatedSummeryForYearMonthwise(clientids, yearCd,checkQuarterly);
		Map<String, TotalInvoiceAmount> summerySlsData = new HashMap<String, TotalInvoiceAmount>();
		for(TotalInvoiceAmount gstr1InvoiceAmount : gstr1InvoiceAmounts){
			String code = gstr1InvoiceAmount.get_id();
			//String code = Integer.toString(_id);
			summerySlsData.put(code, gstr1InvoiceAmount);
		}
		List<TotalInvoiceAmount> invs = new ArrayList<>();
		invs.addAll(gstr4InvoiceAmounts);
		invs.addAll(gstr5InvoiceAmounts);
		for(TotalInvoiceAmount gstr4InvoiceAmount : invs){
			String code = gstr4InvoiceAmount.get_id();
			//String code = Integer.toString(_id);
			TotalInvoiceAmount storedData = summerySlsData.get(code);
			if(storedData == null){
				summerySlsData.put(code, gstr4InvoiceAmount);
			}else{
				storedData.setTotalTaxAmount(storedData.getTotalTaxAmount().add(gstr4InvoiceAmount.getTotalTaxAmount()));
				storedData.setTotalIGSTAmount(storedData.getTotalIGSTAmount().add(gstr4InvoiceAmount.getTotalIGSTAmount()));
				storedData.setTotalCGSTAmount(storedData.getTotalCGSTAmount().add(gstr4InvoiceAmount.getTotalCGSTAmount()));
				storedData.setTotalSGSTAmount(storedData.getTotalSGSTAmount().add(gstr4InvoiceAmount.getTotalSGSTAmount()));
				storedData.setTotalTaxableAmount(storedData.getTotalTaxableAmount().add(gstr4InvoiceAmount.getTotalTaxableAmount()));
			}
		}

		Map<String, TotalInvoiceAmount> summeryPchData = new HashMap<String, TotalInvoiceAmount>();
		for(TotalInvoiceAmount purchageInvoiceAmount : purchageInvoiceAmounts){
			String code = purchageInvoiceAmount.get_id();
			//String code = Integer.toString(_id);
			summeryPchData.put(code, purchageInvoiceAmount);
		}
		Map<String, TotalInvoiceAmount> summeryExpensesData = new HashMap<String, TotalInvoiceAmount>();
		for(TotalInvoiceAmount expenseInvoiceAmount : expensesInvoiceAmounts){
			String code = expenseInvoiceAmount.get_id();
			summeryExpensesData.put(code, expenseInvoiceAmount);
		}
		for(TotalInvoiceAmount gstr6InvoiceAmount : gstr6InvoiceAmounts){
			String code = gstr6InvoiceAmount.get_id();
			//String code = Integer.toString(_id);
			TotalInvoiceAmount storedData = summeryPchData.get(code);
			if(storedData == null){
				summeryPchData.put(code, gstr6InvoiceAmount);
			}else{
				storedData.setTotalTaxAmount(storedData.getTotalTaxAmount().add(gstr6InvoiceAmount.getTotalTaxAmount()));
				storedData.setTotalIGSTAmount(storedData.getTotalIGSTAmount().add(gstr6InvoiceAmount.getTotalIGSTAmount()));
				storedData.setTotalCGSTAmount(storedData.getTotalCGSTAmount().add(gstr6InvoiceAmount.getTotalCGSTAmount()));
				storedData.setTotalSGSTAmount(storedData.getTotalSGSTAmount().add(gstr6InvoiceAmount.getTotalSGSTAmount()));
				storedData.setTotalTaxableAmount(storedData.getTotalTaxableAmount().add(gstr6InvoiceAmount.getTotalTaxableAmount()));
			}
		}
		
		Map<String, Map<String, String>> summeryReturnData = new HashMap<String, Map<String, String>>();
		int ct = 12;
		if(checkQuarterly){
			ct = 4;
		}
		for(int i=1; i<=ct; i++){
			String cd = Integer.toString(i);
			Map<String, String> reportMap = new HashMap<String, String>();
			summeryReturnData.put(cd, reportMap);
			Double salesAmt = 0d, purchaseAmt = 0d,expenseAmt = 0d, taxAmt = 0d, salesTax = 0d, purchaseTax = 0d , igst = 0d, cgst = 0d, sgst = 0d , cess = 0d, exempted = 0d,tcs = 0d,ptcs = 0d,tds = 0d;
			TotalInvoiceAmount invoiceAmountSls = summerySlsData.get(cd);
			TotalInvoiceAmount invoiceAmountPch = summeryPchData.get(cd);
			TotalInvoiceAmount invoiceAmountExp = summeryExpensesData.get(cd);
			if(invoiceAmountSls != null){
				salesAmt = invoiceAmountSls.getTotalTaxableAmount().doubleValue();
				taxAmt = invoiceAmountSls.getTotalTaxAmount().doubleValue();
				salesTax = invoiceAmountSls.getTotalTaxAmount().doubleValue();
				igst = invoiceAmountSls.getTotalIGSTAmount().doubleValue();
				cgst = invoiceAmountSls.getTotalCGSTAmount().doubleValue();
				sgst = invoiceAmountSls.getTotalSGSTAmount().doubleValue();
				exempted = invoiceAmountSls.getTotalExemptedAmount().doubleValue();
				tcs = invoiceAmountSls.getTcsTdsAmount().doubleValue();
			}
			if(invoiceAmountPch != null){
				purchaseAmt = invoiceAmountPch.getTotalTaxableAmount().doubleValue();
				taxAmt -= invoiceAmountPch.getTotalTaxAmount().doubleValue();
				purchaseTax = invoiceAmountPch.getTotalTaxAmount().doubleValue();
				igst += invoiceAmountPch.getTotalIGSTAmount().doubleValue();
				cgst += invoiceAmountPch.getTotalCGSTAmount().doubleValue();
				sgst += invoiceAmountPch.getTotalSGSTAmount().doubleValue();
				ptcs = invoiceAmountPch.getTcsTdsAmount().doubleValue();
				tds = invoiceAmountPch.getTdsAmount().doubleValue();
			}
			if(invoiceAmountExp != null) {
				expenseAmt = invoiceAmountExp.getTotalAmount().doubleValue();
			}
			reportMap.put("Sales", decimalFormat.format(salesAmt));
			reportMap.put("Purchase", decimalFormat.format(purchaseAmt));
			reportMap.put("Expenses", decimalFormat.format(expenseAmt));
			reportMap.put("Balance", decimalFormat.format(salesAmt - (purchaseAmt+expenseAmt)));
			reportMap.put("Tax", decimalFormat.format(taxAmt));
			reportMap.put("SalesTax", decimalFormat.format(salesTax));
			reportMap.put("PurchaseTax", decimalFormat.format(purchaseTax));
			reportMap.put("igst", decimalFormat.format(igst));
			reportMap.put("cgst", decimalFormat.format(cgst));
			reportMap.put("sgst", decimalFormat.format(sgst));
			reportMap.put("exempted", decimalFormat.format(exempted));
			reportMap.put("tcsamount", decimalFormat.format(tcs));
			reportMap.put("ptcsamount", decimalFormat.format(ptcs));
			reportMap.put("tdsamount", decimalFormat.format(tds));
		}
		return summeryReturnData;
	}
	
	/*@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String userid, final String returnType, final String reports,int month,
			int year, int start, int length, String searchVal) {
		Map invoicesMap = getInvoices(pageable, client, userid, returnType, reports, month, year, start, length, searchVal, null, false,"");
		return (Page<? extends InvoiceParent>)invoicesMap.get("invoices");
	}*/
	
	public Map<String, Object> getInvoicesSupport(final Client client, final String returnType,final String reports, int month,
			int year){
		Map<String, Object> supportObj = new HashMap<>();
		if (isNotEmpty(returnType)) {
			String yearCd = Utility.getYearCode(month, year); 
			List<String> billToNames = null;
			List<String> customFields = null;
			
			Map<String,List<String>> cf = Maps.newHashMap();
			Map<String,String> cfnames = Maps.newHashMap();
			
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			Date[] dates = caliculateStEndDates(client, returnType, reports, month, year);
			Date stDate = dates[0];
			Date endDate = dates[1];
			if (returnType.equals(GSTR1)) {
				billToNames = gstr1Dao.getBillToNames(client.getId().toString(), month, yearCd);
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldss(client.getId().toString(),returnType,month, yearCd);
			} else if (returnType.equals(GSTR2)) {
				//return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
						MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				billToNames = gstr2Dao.getBillToNames(client.getId().toString(), invTypes, retPeriod);
				//return gstr2Repository.findByClientidAndFpAndIsAmendmentAndInvtypeIn(client.getId().toString(), retPeriod,true,invTypes, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
				Boolean billdate = false;
				if(isNotEmpty(otherconfig)){
					billdate = otherconfig.isEnableTransDate();
				}
				billToNames = purchageRegisterDao.getBillToNames(client.getId().toString(), month, yearCd,billdate);
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldss(client.getId().toString(),returnType,month, yearCd);
			} else if (returnType.equals(GSTR4) || returnType.equals("GSTR4A")) {
				//return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				billToNames = gstr4Dao.getBillToNames(client.getId().toString(), month, yearCd);
			} else if (returnType.equals(GSTR5)) {
				//return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(GSTR6) || returnType.equals("GSTR6Pur")) {
				//return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				billToNames = gstr6Dao.getBillToNames(client.getId().toString(), month, yearCd);
			} else if (returnType.equals("Unclaimed")) {
				billToNames = purchageRegisterDao.getBillToNamesUnclaimed(client.getId().toString(), month, yearCd);
				//return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(client.getId().toString(), stDate, endDate, pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				billToNames = deliveryChallanaDao.getBillToNames(client.getId().toString(), month, yearCd);
				//return deliverychallanRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,pageable);
			}  else if(returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				billToNames = proformaDao.getBillToNames(client.getId().toString(), month, yearCd);
				//return proformainvoicesRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				billToNames = estimatesDao.getBillToNames(client.getId().toString(), month, yearCd);
				//return estimatesRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,pageable);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				billToNames = purchaseOrderDao.getBillToNames(client.getId().toString(), month, yearCd);
				//return purchaseOrderRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,pageable);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				if("reports".equals(reports)) {
					billToNames = ewayBillDao.getCustomBillToNames(client.getId().toString(), stDate, endDate);
				}else {
					billToNames = ewayBillDao.getEBillToNames(client.getId().toString(), month, yearCd);
				}
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldss(client.getId().toString(),returnType,month, yearCd);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.EINVOICE)) {
				billToNames = gstr1Dao.getBillToNames(client.getId().toString(), month, yearCd);
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldss(client.getId().toString(),returnType,month, yearCd);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.ANX1)) {
				billToNames = newAnx1Dao.getBillToNames(client.getId().toString(), month, yearCd);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.ANX2)) {
				billToNames = anx2Dao.getBillToNames(client.getId().toString(), month, yearCd);
			}
			
			Iterator cfs = cf.entrySet().iterator();
			while (cfs.hasNext()) {
				Map.Entry entry = (Map.Entry) cfs.next();
				supportObj.put(entry.getKey().toString(), entry.getValue());
			}
			Iterator cfsname = cfnames.entrySet().iterator();
			while (cfsname.hasNext()) {
				Map.Entry entry = (Map.Entry) cfsname.next();
				supportObj.put(entry.getKey().toString(), entry.getValue());
			}
			
			supportObj.put("billToNames", billToNames);
			//supportObj.put("customFields", customFields);
		}
		return supportObj;
		
	}
	
	
	public List<String> getCustomFields(String clientid, String returnType) {
		CustomFields  custFields = customFieldsRepository.findByClientid(clientid);
		List<String> customFields = Lists.newArrayList();
		if(NullUtil.isNotEmpty(custFields)) {
			if(returnType.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
				if(NullUtil.isNotEmpty(custFields.getSales())) {
					for(CustomData cdata  : custFields.getSales()) {
						if(cdata.getDisplayInFilters().equals(true)) {
							if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
								customFields.add(cdata.getCustomFieldName());
							}
						}
					}
				}
		   }else if(returnType.equalsIgnoreCase(PURCHASE_REGISTER)) {
			   if(NullUtil.isNotEmpty(custFields.getPurchase())) {
				  for(CustomData cdata  : custFields.getPurchase()) {
						if(cdata.getDisplayInFilters().equals(true)) {
							if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
								customFields.add(cdata.getCustomFieldName());
							}
						}
					}
			   }
		   }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
			   if(NullUtil.isNotEmpty(custFields.getEwaybill())) {
				  for(CustomData cdata  : custFields.getEwaybill()) {
						if(cdata.getDisplayInFilters().equals(true)) {
							if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
								customFields.add(cdata.getCustomFieldName());
							}
						}
					}
			   }
		    }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EINVOICE)) {
		    	if(NullUtil.isNotEmpty(custFields.getEinvoice())) {
					  for(CustomData cdata  : custFields.getEinvoice()) {
							if(cdata.getDisplayInFilters().equals(true)) {
								if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
									customFields.add(cdata.getCustomFieldName());
								}
							}
						}
				   }
		    }
		}
		List<String> newList = customFields.stream().distinct().collect(Collectors.toList());
		return newList;
	}
	
	public Map<String,String> getCustomFieldNames(String clientid, String returnType) {
		CustomFields  custFields = customFieldsRepository.findByClientid(clientid);
		Map<String,String> customnames = Maps.newHashMap();
		if(NullUtil.isNotEmpty(custFields)) {
			if(returnType.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
				if(NullUtil.isNotEmpty(custFields.getSales())) {
					customnames = Maps.newHashMap();
					int i=1;
					for(CustomData cdata  : custFields.getSales()) {
						if(cdata.getDisplayInFilters().equals(true)) {
							if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
								customnames.put("customFieldName"+i, cdata.getCustomFieldName());
							}
						}
						i++;
					}
				}
		   }else if(returnType.equalsIgnoreCase(PURCHASE_REGISTER)) {
			   if(NullUtil.isNotEmpty(custFields.getPurchase())) {
				   customnames = Maps.newHashMap();
				   int i=1;
				  for(CustomData cdata  : custFields.getPurchase()) {
						if(cdata.getDisplayInFilters().equals(true)) {
							if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
								customnames.put("customFieldName"+i, cdata.getCustomFieldName());
							}
						}
						i++;
					}
			   }
		   }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
			   if(NullUtil.isNotEmpty(custFields.getEwaybill())) {
				   customnames = Maps.newHashMap();
				   int i=1;
				  for(CustomData cdata  : custFields.getEwaybill()) {
						if(cdata.getDisplayInFilters().equals(true)) {
							if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
								customnames.put("customFieldName"+i, cdata.getCustomFieldName());
							}
						}
						i++;
					}
			   }
		    }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EINVOICE)) {
		    	if(NullUtil.isNotEmpty(custFields.getEinvoice())) {
		    		customnames = Maps.newHashMap();
					   int i=1;
					  for(CustomData cdata  : custFields.getEinvoice()) {
							if(cdata.getDisplayInFilters().equals(true)) {
								if(NullUtil.isNotEmpty(cdata.getCustomFieldName())) {
									customnames.put("customFieldName"+i, cdata.getCustomFieldName());
								}
							}
							i++;
						}
				   }
		    }
		}
		return customnames;
	}
	
	public Map<String,List<String>> getCustomFieldss(String clientid, String returnType,int month,String yearCd) {
		CustomFields  custFields = customFieldsRepository.findByClientid(clientid);
		Map<String,List<String>> cf = Maps.newHashMap();
		
		List<String> customFields = Lists.newArrayList();
		if(NullUtil.isNotEmpty(custFields)) {
			if(returnType.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
				cf = Maps.newHashMap();
				if(NullUtil.isNotEmpty(custFields.getSales())) {
					int i=1;
					for(CustomData cdata  : custFields.getSales()) {
						customFields = Lists.newArrayList();
						if(cdata.getDisplayInFilters().equals(true)) {
							customFields = gstr1Dao.getCustomFields(clientid, month, yearCd, "customFieldtext"+i);
							cf.put("customField"+i, customFields);
						}
						i++;
					}
				}
		   }else if(returnType.equalsIgnoreCase(PURCHASE_REGISTER)) {
			   OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(clientid);
				Boolean billdate = false;
				if(isNotEmpty(otherconfig)){
					billdate = otherconfig.isEnableTransDate();
				}
			   cf = Maps.newHashMap();
			   if(NullUtil.isNotEmpty(custFields.getPurchase())) {
				   int i=1;
				  for(CustomData cdata  : custFields.getPurchase()) {
					  customFields = Lists.newArrayList();
						if(cdata.getDisplayInFilters().equals(true)) {
							customFields = purchageRegisterDao.getCustomFields(clientid, month, yearCd, "customFieldtext"+i,billdate);
							cf.put("customField"+i, customFields);
						}
						i++;
					}
			   }
		   }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
			   cf = Maps.newHashMap();
			   if(NullUtil.isNotEmpty(custFields.getEwaybill())) {
				   int i=1;
				  for(CustomData cdata  : custFields.getEwaybill()) {
					  customFields = Lists.newArrayList();
						if(cdata.getDisplayInFilters().equals(true)) {
							customFields = ewayBillDao.getCustomFields(clientid, month, yearCd, "customFieldtext"+i);
							cf.put("customField"+i, customFields);
						}
						i++;
					}
			   }
		    }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EINVOICE)) {
		    	cf = Maps.newHashMap();
		    	if(NullUtil.isNotEmpty(custFields.getEinvoice())) {
		    		int i=1;
					  for(CustomData cdata  : custFields.getEinvoice()) {
						  customFields = Lists.newArrayList();
							if(cdata.getDisplayInFilters().equals(true)) {
								customFields = gstr1Dao.getCustomFields(clientid, month, yearCd, "customFieldtext"+i);
								cf.put("customField"+i, customFields);
							}
							i++;
						}
				   }
		    }
		}
		return cf;
	}

	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String userid, final String returnType, int month,
			int year,String filingoption) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if(returnType.equals("Unclaimed")){
				if(year <= 2018) {
					cal.set(2017, 6, 0, 23, 59, 59);
				} else {
					if(month > 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					}	
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}else{
				if(isNotEmpty(filingoption) && filingoption.equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					} else {
						cal.set(year, 3, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if (isNotEmpty(filingoption)
						&& filingoption.equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 23, 59, 59);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 23, 59, 59);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year + 1, 0, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {

					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getfyInvoices(Pageable pageable, final Client client, final String userid,
			final String returnType, int month, int year, String filingoption) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if(returnType.equals("Unclaimed")){
				if(year <= 2018) {
					cal.set(2017, 6, 0, 23, 59, 59);
				} else {
					if(month > 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					}	
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}else{
				if(isNotEmpty(filingoption) && filingoption.equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year - 2, 9, 0, 23, 59, 59);
					} else {
						cal.set(year - 1, 9, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if (isNotEmpty(filingoption)
						&& filingoption.equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 23, 59, 59);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 23, 59, 59);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year + 1, 0, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
			
			/*
			 * User user = userService.findById(userid); if(isNotEmpty(user) &&
			 * (isEmpty(user.getIsglobal()) || user.getIsglobal().equals("false"))) {
			 * CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			 * if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getBranch())) { if
			 * (returnType.equals(GSTR1)) { return
			 * gstr1Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate, pageable); } else if
			 * (returnType.equals(GSTR2)) { return
			 * gstr2Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate, pageable); } else if
			 * (returnType.equals(PURCHASE_REGISTER)) { if(isEmpty(client.getFilingOption())
			 * ||
			 * !client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY))
			 * { cal = Calendar.getInstance(); cal.set(year, month-2, 0, 0, 0, 0); Date
			 * oldDate = new java.util.Date(cal.getTimeInMillis()); //Page<PurchaseRegister>
			 * oldInvoices = purchaseRepository.
			 * findByUseridAndClientidAndGstStatusNotAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), MasterGSTConstants.GST_STATUS_SUCCESS, oldDate,
			 * stDate, pageable); return
			 * purchaseRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), oldDate, endDate, pageable); } else { return
			 * purchaseRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate, pageable); } } else if
			 * (returnType.equals(GSTR4)) { return
			 * gstr4Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate, pageable); } else if
			 * (returnType.equals(GSTR5)) { return
			 * gstr5Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate, pageable); } else if
			 * (returnType.equals(GSTR6)) { return
			 * gstr6Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate, pageable); } else if
			 * (returnType.equals("Unclaimed")) { return
			 * purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
			 * client.getId().toString(), stDate, endDate, pageable); } //} }
			 */
					if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
					} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
					} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
					} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
					} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
					} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
					} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getgstr2Matchedfyinvs(Pageable pageable, final Client client,
			final String userid, final String returnType, int month, int year, String filingoption) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if(month < 10) {
				cal.set(year-1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}else {
				cal.set(year, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}	
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.ISD);
				invTypes.add(MasterGSTConstants.IMP_GOODS);
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusIsNotNullAndDateofinvoiceBetween(
						client.getId().toString(), invTypes, stDate, endDate, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			}
		}
		return null;
	}

	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String userid,
			String returnType, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
				cal.set(year, 2, 31, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
			cal.set(year + 1, 3, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			if (returnType.equals(MasterGSTConstants.EINVOICE)) {
				returnType = "GSTR1";
			}
			if (returnType.equals(GSTR1)) {
				String rtStart = "04"+year;
				String rtEnd = "03"+(year+1);
				List<String> fpLst = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year,
						"09" + year, "10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1),
						rtEnd);
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				List<GSTR1> gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(
						client.getId().toString(), invTypes, stDate, endDate);
				
				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				List<GSTR1> gstr1nilltxpat = gstr1Repository
						.findByClientidAndInvtypeInAndFpIn(client.getId().toString(), otherinvTypes, fpLst);
				
				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return
				// gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2A)) {
				String rtStart = "04"+year;
				String rtEnd = "03"+(year+1);		
				List<String> rtArray = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year,
						"09" + year, "10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1),
						rtEnd);
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				return gstr2Repository.findByClientidAndIsAmendmentAndFpInAndInvtypeIn(client.getId().toString(), true,
						rtArray, invTypes, pageable);
			}else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
				return ewayBillRepository.findByClientidAndEBillDateBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String userid,
			String returnType, String fromtime, String totime) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,
					Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
			cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,
					59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
				if (returnType.equals(MasterGSTConstants.EINVOICE)) {
					returnType = GSTR1;
				}
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
				return ewayBillRepository.findByClientidAndEBillDateBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			}
		}
		return null;
	}
	
	public List<? extends InvoiceParent> getSpecificInvoices(final Client client, final String returnType, int month,
			int year, final String invType, final String status) {
		logger.debug(CLASSNAME + "getSpecificInvoices : Begin");
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 0, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year, 9, 0, 23, 59, 59);
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 9, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year + 1, 0, 0, 23, 59, 59);
				}
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, month - 1, 0, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
			if (returnType.equals(GSTR1)) {
				List<String> gstStatus = Lists.newArrayList();
				gstStatus.add(status);
				gstStatus.add("In Progress");
				
				if(invType.equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
					return gstr1Repository.findByClientidAndInvtypeAndCdnur_TypAndGstStatusInAndDateofinvoiceBetween(client.getId().toString(), invType,"B2CS",gstStatus, stDate, endDate);
				}else {
					return gstr1Repository.findByClientidAndInvtypeAndGstStatusInAndDateofinvoiceBetween(client.getId().toString(), invType,gstStatus, stDate, endDate);
				}
			}
		}
		return Lists.newArrayList();
	}
	
	public List<? extends InvoiceParent> getInvoicesByInvtype(final Client client, final String userid,
			final String returnType, final List<String> invType, int month, int year) {
		logger.debug(CLASSNAME + "getSpecificInvoices : Begin");
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				//String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 0, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year, 9, 0, 23, 59, 59);
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 9, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year + 1, 0, 0, 23, 59, 59);
				}
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, month - 1, 0, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
						client.getId().toString(), invType, stDate, endDate);
			}
		}
		return Lists.newArrayList();
	}
	
	@Override
	@Transactional
	public List<? extends InvoiceParent> getInvoices(Pageable pageable, final Client client, final String returnType,
			int month, int year, final String status) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				//String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 0, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year, 9, 0, 23, 59, 59);
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 9, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year + 1, 0, 0, 23, 59, 59);
				}
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, month - 1, 0, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
			if (returnType.equals(GSTR1)) {
				Page<? extends InvoiceParent> invoices = gstr1Repository
						.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<InvoiceParent> filteredInvoices = Lists.newArrayList();
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoiceParent : invoices) {
						if (isEmpty(invoiceParent.getGstStatus()) || !invoiceParent.getGstStatus().equals("CANCELLED") || !invoiceParent.getGstStatus().equals("Ineligible")) {
							if (isEmpty(invoiceParent.getIrnStatus()) || !invoiceParent.getIrnStatus().equalsIgnoreCase("CANCELLED") || !invoiceParent.getGstStatus().equals("Ineligible")) {
								filteredInvoices.add(invoiceParent);
							}
						}
					}
				}
				return filteredInvoices;
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate);
			} else if (returnType.equals(GSTR4)) {
				Page<? extends InvoiceParent> invoices = gstr4Repository
						.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<InvoiceParent> filteredInvoices = Lists.newArrayList();
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoiceParent : invoices) {
						if (isEmpty(invoiceParent.getGstStatus()) || !invoiceParent.getGstStatus().equals(status)) {
							filteredInvoices.add(invoiceParent);
						}
					}
				}
				return filteredInvoices;
			} else if (returnType.equals(GSTR5)) {
				Page<? extends InvoiceParent> invoices = gstr5Repository
						.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<InvoiceParent> filteredInvoices = Lists.newArrayList();
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoiceParent : invoices) {
						if (isEmpty(invoiceParent.getGstStatus()) || !invoiceParent.getGstStatus().equals(status)) {
							filteredInvoices.add(invoiceParent);
						}
					}
				}
				return filteredInvoices;
			} else if (returnType.equals(GSTR6)) {
				Page<? extends InvoiceParent> invoices = gstr6Repository
						.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<InvoiceParent> filteredInvoices = Lists.newArrayList();
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoiceParent : invoices) {
						if (isEmpty(invoiceParent.getGstStatus()) || !invoiceParent.getGstStatus().equals(status)) {
							filteredInvoices.add(invoiceParent);
						}
					}
				}
				return filteredInvoices;
			} else if (returnType.equals(ANX1)) {
				/*
				 * Page<? extends InvoiceParent> invoices = anx1Repository
				 * .findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
				 * endDate, pageable); List<InvoiceParent> filteredInvoices =
				 * Lists.newArrayList(); if (isNotEmpty(invoices)) { for (InvoiceParent
				 * invoiceParent : invoices) { if (isEmpty(invoiceParent.getGstStatus()) ||
				 * !invoiceParent.getGstStatus().equals(status)) {
				 * filteredInvoices.add(invoiceParent); } } } return filteredInvoices;
				 */
			}else if (returnType.equals(MasterGSTConstants.ANX2)) {
				Page<? extends InvoiceParent> invoices = anx2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<InvoiceParent> filteredInvoices = Lists.newArrayList();
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoiceParent : invoices) {
						if (isEmpty(invoiceParent.getGstStatus()) || !invoiceParent.getGstStatus().equals(status)) {
							filteredInvoices.add(invoiceParent);
						}
					}
				}
				return filteredInvoices;
			}
		}
		return Lists.newArrayList();
	}

	@Override
	@Transactional
	public void saveInvoices(Iterable<? extends InvoiceParent> invoices, final String returnType) {
		logger.debug(CLASSNAME + "saveInvoices : Begin");
		if (returnType.equals(GSTR1)) {
			gstr1Repository.save((Iterable<GSTR1>) invoices);
		} else if (returnType.equals(GSTR1A)) {
			gstr1ARepository.save((Iterable<GSTR1A>) invoices);
		} else if (returnType.equals(GSTR2)) {
			gstr2Repository.save((Iterable<GSTR2>) invoices);
		} else if (returnType.equals(PURCHASE_REGISTER)) {
			purchaseRepository.save((Iterable<PurchaseRegister>) invoices);
		} else if (returnType.equals(GSTR4)) {
			gstr4Repository.save((Iterable<GSTR4>) invoices);
		} else if (returnType.equals(GSTR5)) {
			gstr5Repository.save((Iterable<GSTR5>) invoices);
		} else if (returnType.equals(GSTR6)) {
			gstr6Repository.save((Iterable<GSTR6>) invoices);
		}else if (returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			deliverychallanRepository.save((Iterable<DeliveryChallan>) invoices);
		} else if (returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			proformainvoicesRepository.save((Iterable<ProformaInvoices>) invoices);
		} else if (returnType.equals(MasterGSTConstants.ESTIMATES)) {
			estimatesRepository.save((Iterable<Estimates>) invoices);
		} else if (returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
			purchaseOrderRepository.save((Iterable<PurchaseOrder>) invoices);
		} 
		logger.debug(CLASSNAME + "saveInvoices : End");
	}

	@Override
	@Transactional
	public void saveGSTErrors(List<? extends InvoiceParent> invoices, final InvoiceParentSupport gstResponse,
			final String returnType) {
		logger.debug(CLASSNAME + "saveGSTErrors : Begin");
		if (isNotEmpty(gstResponse.getHsnsum())) {
			for(HSNSummary hsnsum : gstResponse.getHsnsum()) {
				if (isNotEmpty(hsnsum.getErrorMsg())) {
					for (InvoiceParent invoice : invoices) {
						for(HSNData hsn : hsnsum.getData()) {
							for(Item item : invoice.getItems()) {
								if(item.getHsn().startsWith(hsn.getHsnSc())) {
									invoice.setGstStatus(hsnsum.getErrorMsg());
								}
							}
						}
					}
				}
			}
		} else if (isNotEmpty(gstResponse.getB2b())) {
			for (GSTRB2B gstItem : gstResponse.getB2b()) {
				if (isNotEmpty(gstItem.getErrorMsg())) {
					for (InvoiceParent invoice : invoices) {
						if (isNotEmpty(invoice.getB2b())) {
							for (GSTRB2B dbItem : invoice.getB2b()) {
								if (isNotEmpty(dbItem.getCtin()) && isNotEmpty(gstItem.getCtin())
										&& dbItem.getCtin().equals(gstItem.getCtin())) {
									if (isNotEmpty(dbItem.getInv())) {
										for (GSTRInvoiceDetails invoiceDetails : dbItem.getInv()) {
											for (GSTRInvoiceDetails gstrInvoiceDetails : gstItem.getInv()) {
												if (invoiceDetails.getInum().equals(gstrInvoiceDetails.getInum())) {
													// dbItem.setErrorMsg(gstItem.getErrorMsg());
													invoice.setGstStatus(gstItem.getErrorMsg());
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} else if (isNotEmpty(gstResponse.getB2cl())) {
			for (GSTRB2CL gstItem : gstResponse.getB2cl()) {
				if (isNotEmpty(gstItem.getErrorMsg())) {
					for (InvoiceParent invoice : invoices) {
						if (isNotEmpty(invoice.getB2cl())) {
							for (GSTRB2CL dbItem : invoice.getB2cl()) {
								if (isNotEmpty(dbItem.getPos()) && isNotEmpty(gstItem.getPos())
										&& dbItem.getPos().equals(gstItem.getPos())) {
									if (isNotEmpty(dbItem.getInv())) {
										for (GSTRInvoiceDetails invoiceDetails : dbItem.getInv()) {
											for (GSTRInvoiceDetails gstrInvoiceDetails : gstItem.getInv()) {
												if (invoiceDetails.getInum().equals(gstrInvoiceDetails.getInum())) {
													// dbItem.setErrorMsg(gstItem.getErrorMsg());
													invoice.setGstStatus(gstItem.getErrorMsg());
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} else if (isNotEmpty(gstResponse.getB2cs())) {
			for (GSTRB2CS gstItem : gstResponse.getB2cs()) {
				if (isNotEmpty(gstItem.getErrorMsg())) {
					for (InvoiceParent invoice : invoices) {
						if (isNotEmpty(invoice.getB2cs())) {
							for (GSTRB2CS dbItem : invoice.getB2cs()) {
								if (isNotEmpty(dbItem.getPos()) && isNotEmpty(gstItem.getPos())
										&& dbItem.getPos().equals(gstItem.getPos()) && isNotEmpty(dbItem.getSplyTy())
										&& isNotEmpty(gstItem.getSplyTy())
										&& dbItem.getSplyTy().equals(gstItem.getSplyTy())
										&& ((isEmpty(dbItem.getEtin()) && isEmpty(gstItem.getEtin()))
												|| (dbItem.getEtin().equals(gstItem.getEtin())))) {
									// dbItem.setErrorMsg(gstItem.getErrorMsg());
									invoice.setGstStatus(gstItem.getErrorMsg());
								}
							}
						}
					}
				}
			}
		} else if (isNotEmpty(gstResponse.getExp())) {
			for (GSTRExports gstItem : gstResponse.getExp()) {
				if (isNotEmpty(gstItem.getErrorMsg())) {
					for (InvoiceParent invoice : invoices) {
						if (isNotEmpty(invoice.getExp())) {
							for (GSTRExports dbItem : invoice.getExp()) {
								if (isNotEmpty(dbItem.getExpTyp()) && isNotEmpty(gstItem.getExpTyp())
										&& dbItem.getExpTyp().equals(gstItem.getExpTyp())) {
									if (isNotEmpty(dbItem.getInv())) {
										for (GSTRExportDetails invoiceDetails : dbItem.getInv()) {
											for (GSTRExportDetails gstrInvoiceDetails : gstItem.getInv()) {
												if (invoiceDetails.getInum().equals(gstrInvoiceDetails.getInum())) {
													// dbItem.setErrorMsg(gstItem.getErrorMsg());
													invoice.setGstStatus(gstItem.getErrorMsg());
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} else if(isNotEmpty(gstResponse.getCdnur())) {
			for(GSTRInvoiceDetails gstItem : gstResponse.getCdnur()) {
				if (isNotEmpty(gstItem.getErrorMsg())) {
					for (InvoiceParent invoice : invoices) {
						if (isNotEmpty(invoice.getCdnur())) {
							for (GSTRInvoiceDetails dbItem : invoice.getCdnur()) {
								if (dbItem.getNtNum().equals(gstItem.getNtNum())) {
									invoice.setGstStatus(gstItem.getErrorMsg());
								}			
							}
						}
					}
				}
			}
		}else if(isNotEmpty(gstResponse.getCdnr())) {
			 
			for (GSTRCreditDebitNotes  gstItem : gstResponse.getCdnr()) {
				if(isNotEmpty(gstItem.getErrorMsg())) { 
					for (InvoiceParent invoice : invoices) {
						if (isNotEmpty(((GSTR1)invoice).getCdnr())) {
							for (GSTRCreditDebitNotes dbItem : ((GSTR1)invoice).getCdnr()) { 
								if((dbItem.getNt().get(0).getNtNum()).equals(gstItem.getNt().get(0).getNtNum())) {
									invoice.setGstStatus(gstItem.getErrorMsg()); 
								} 
							} 
						} 
					} 
				} 
			} 
		}
		/*
		 * else if(isNotEmpty(gstResponse.getAt())) { for(GSTRAdvanceTax gstItem :
		 * gstResponse.getAt()) { if(isNotEmpty(gstItem.getErrorMsg())) {
		 * for(InvoiceParent invoice : invoices) { if(isNotEmpty(invoice.getAt())) {
		 * for(GSTRAdvanceTax dbItem : invoice.getAt()) { if(isNotEmpty(dbItem.getPos())
		 * && isNotEmpty(gstItem.getPos()) && dbItem.getPos().equals(gstItem.getPos())
		 * && isNotEmpty(dbItem.getSplyTy()) && isNotEmpty(gstItem.getSplyTy()) &&
		 * dbItem.getSplyTy().equals(gstItem.getSplyTy())) {
		 * //dbItem.setErrorMsg(gstItem.getErrorMsg());
		 * invoice.setGstStatus(gstItem.getErrorMsg()); } } } } } } } else
		 * if(isNotEmpty(gstResponse.getCdnr())) { for(GSTRCreditDebitNotes gstItem :
		 * gstResponse.getCdnr()) { if(isNotEmpty(gstItem.getErrorMsg())) {
		 * for(InvoiceParent invoice : invoices) { if(isNotEmpty(invoice.getCdnr())) {
		 * for(GSTRCreditDebitNotes dbItem : invoice.getCdnr()) {
		 * if(isNotEmpty(dbItem.getCtin()) && isNotEmpty(gstItem.getCtin()) &&
		 * dbItem.getCtin().equals(gstItem.getCtin())) { if(isNotEmpty(dbItem.getNt()))
		 * { for(GSTRInvoiceDetails invoiceDetails : dbItem.getNt()) {
		 * for(GSTRInvoiceDetails gstrInvoiceDetails : gstItem.getNt()) {
		 * if(invoiceDetails.getInum().equals(gstrInvoiceDetails.getInum())) {
		 * //dbItem.setErrorMsg(gstItem.getErrorMsg());
		 * invoice.setGstStatus(gstItem.getErrorMsg()); } } } } } } } } } } }
		 */
		if(invoices.size() == 1) {
			if (isEmpty(invoices.get(0).getGstStatus())) {
				invoices.get(0).setGstStatus(MasterGSTConstants.GST_STATUS_ERROR);
			}
		} else {
		for (InvoiceParent invoice : invoices) {
			if (isEmpty(invoice.getGstStatus())) {
				invoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
				}
			}
		}
		if (returnType.equals(GSTR1)) {
			gstr1Repository.save((List<GSTR1>) invoices);
		} else if (returnType.equals(GSTR2)) {
			gstr2Repository.save((List<GSTR2>) invoices);
		} else if (returnType.equals(PURCHASE_REGISTER)) {
			purchaseRepository.save((List<PurchaseRegister>) invoices);
		} else if (returnType.equals(GSTR4)) {
			gstr4Repository.save((List<GSTR4>) invoices);
		} else if (returnType.equals(GSTR5)) {
			gstr5Repository.save((List<GSTR5>) invoices);
		} else if (returnType.equals(GSTR6)) {
			gstr6Repository.save((List<GSTR6>) invoices);
		}
		logger.debug(CLASSNAME + "saveGSTErrors : End");
	}

	@Override
	@Transactional
	public void updateExcelData(final Map<String, List<InvoiceParent>> beans, final List<String> sheetList,
			final String returntype, final String id, final String fullname, final String clientId,
			final String templateType) throws IllegalArgumentException, IOException {
		logger.debug(CLASSNAME + "updateExcelData : Begin");
		Client client = findById(clientId);
		List<? extends InvoiceParent> invoiceList = beans.get("invoiceList");
		List<? extends InvoiceParent> creditList = beans.get("creditList");
		List<? extends InvoiceParent> exportList = beans.get("exportList");
		List<? extends InvoiceParent> advReceiptList = beans.get("advReceiptList");
		List<? extends InvoiceParent> b2bList = beans.get("b2bList");
		List<? extends InvoiceParent> b2cList = beans.get("b2cList");
		List<? extends InvoiceParent> b2clList = beans.get("b2clList");
		List<? extends InvoiceParent> advAdjustedList = beans.get("advAdjustedList");
		List<? extends InvoiceParent> cdnurList = beans.get("cdnurList");
		List<? extends InvoiceParent> nilList = beans.get("nilList");
		List<? extends InvoiceParent> b2buList = beans.get("b2buList");
		List<? extends InvoiceParent> impgList = beans.get("impgList");
		List<? extends InvoiceParent> impsList = beans.get("impsList");
		List<? extends InvoiceParent> itrvslList = beans.get("itrvslList");

		List<? extends InvoiceParent> invoices = null;
		if (returntype.equals(GSTR1)) {
			invoices = new ArrayList<GSTR1>();
		} else if (returntype.equals(GSTR4)) {
			invoices = new ArrayList<GSTR4>();
		} else if (returntype.equals(GSTR5)) {
			invoices = new ArrayList<GSTR5>();
		} else if (returntype.equals(GSTR6)) {
			invoices = new ArrayList<GSTR6>();
		}else if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
			invoices = new ArrayList<EWAYBILL>();
		} else {
			invoices = new ArrayList<PurchaseRegister>();
		}
		if (isNotEmpty(sheetList)) {
			for (String sheetName : sheetList) {
				String type = null;
				if (sheetName.equals("creditList")) {
					type = CREDIT_DEBIT_NOTES;
				} else if (sheetName.equals("exportList")) {
					type = EXPORTS;
				} else if (sheetName.equals("advReceiptList")) {
					type = ADVANCES;
				} else if (sheetName.equals("advAdjustedList")) {
					type = ATPAID;
				} else if (sheetName.equals("cdnurList")) {
					type = CDNUR;
				} else if (sheetName.equals("nilList")) {
					type = NIL;
				} else if (sheetName.equals("b2bList")) {
					type = B2B;
				} else if (sheetName.equals("b2cList")) {
					type = B2C;
				} else if (sheetName.equals("b2clList")) {
					type = B2CL;
				} else if (sheetName.equals("b2buList")) {
					type = B2BUR;
				} else if (sheetName.equals("impgList")) {
					type = IMP_GOODS;
				} else if (sheetName.equals("impsList")) {
					type = IMP_SERVICES;
				} else if (sheetName.equals("itrvslList")) {
					type = ITC_REVERSAL;
				}else if(sheetName.equals("invoiceList")) {
					type = B2B;
				}
				invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, beans.get(sheetName), returntype,
						client, type, id, fullname, clientId, templateType);
			}
		} else {
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, invoiceList, returntype, client, null, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, creditList, returntype, client,
					CREDIT_DEBIT_NOTES, id, fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, exportList, returntype, client, EXPORTS,
					id, fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, advReceiptList, returntype, client,
					ADVANCES, id, fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, advAdjustedList, returntype, client,
					ATPAID, id, fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, cdnurList, returntype, client, CDNUR, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, nilList, returntype, client, NIL, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, b2bList, returntype, client, B2B, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, b2cList, returntype, client, B2C, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, b2clList, returntype, client, B2CL, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, b2buList, returntype, client, B2BUR, id,
					fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, impgList, returntype, client, IMP_GOODS,
					id, fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, impsList, returntype, client,
					IMP_SERVICES, id, fullname, clientId, templateType);
			invoices = updateSalesInvoiceData((List<InvoiceParent>) invoices, itrvslList, returntype, client,
					ITC_REVERSAL, id, fullname, clientId, templateType);
		}
		if (isNotEmpty(invoices)) {
			OtherConfigurations otherconfig = getOtherConfig(clientId);
			if (returntype.equals(GSTR1)) {
				if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffSalesField()) && !otherconfig.isEnableroundoffSalesField()) {
					for(GSTR1 salesinvoice : (List<GSTR1>) invoices) {
						if(isNotEmpty(salesinvoice.getTotalamount())) {
							Double notroundofftamnt = salesinvoice.getTotalamount();
							Double roundofftamt = (double) Math.round(notroundofftamnt);
							Double roundoffamt = 0d;
							roundoffamt = roundofftamt - notroundofftamnt;
							salesinvoice.setTotalamount(roundofftamt);
							salesinvoice.setNotroundoftotalamount(notroundofftamnt);
							salesinvoice.setRoundOffAmount(Double.parseDouble(df2.format(roundoffamt)));
							String totalAmtStr = String.format(DOUBLE_FORMAT,roundofftamt);
							salesinvoice.setTotalamount_str(totalAmtStr);
						}
					}
				}
				
				for(GSTR1 salesinvoice : (List<GSTR1>) invoices) {
					Double totalIGST = 0d;
					Double totalCGST = 0d;
					Double totalSGST = 0d;
					Double totalExempted = 0d;
					Double totalCessAmount = 0d;
					
					for (Item item : salesinvoice.getItems()) {
						if (isNotEmpty(item.getIgstamount())) {
							totalIGST += item.getIgstamount();
						}
						if (isNotEmpty(item.getCgstamount())) {
							totalCGST += item.getCgstamount();
						}
						if (isNotEmpty(item.getSgstamount())) {
							totalSGST += item.getSgstamount();
						}
						if (isNotEmpty(item.getExmepted())) {
							totalExempted += item.getExmepted();
						}
						if(isNotEmpty(item.getCessamount())) {
							totalCessAmount+=item.getCessamount();
						}
					}
					salesinvoice.setTotalIgstAmount(totalIGST);
					salesinvoice.setTotalCgstAmount(totalCGST);
					salesinvoice.setTotalSgstAmount(totalSGST);
					salesinvoice.setTotalExemptedAmount(totalExempted);
					salesinvoice.setTotalCessAmount(totalCessAmount);
					if(isNotEmpty(salesinvoice) && isEmpty(salesinvoice.getDueDate()) && isNotEmpty(salesinvoice.getDateofinvoice())) {
						salesinvoice.setDueDate(salesinvoice.getDateofinvoice());
						salesinvoice.setTermDays("0");
					}
					if(isNotEmpty(salesinvoice.getTotalamount())) {
						salesinvoice.setPendingAmount(salesinvoice.getTotalamount());
						salesinvoice.setReceivedAmount(0d);
					}
				}
				List<GSTR1> salesInvoices = gstr1Repository.save((List<GSTR1>) invoices);
				if(isNotEmpty(otherconfig) && (isEmpty(otherconfig.isEnablejournals()) || (isNotEmpty(otherconfig.isEnablejournals()) && !otherconfig.isEnablejournals()))) {
					for(GSTR1 salesinvoice : salesInvoices) {
						if(isNotEmpty(salesinvoice)) {
							if (salesinvoice.getInvtype().equals(MasterGSTConstants.ADVANCES) || salesinvoice.getInvtype().equals(MasterGSTConstants.ATA)) {
								saveAdvancePayments(salesinvoice, returntype);
							}
							boolean isIntraState = true;
							if (isNotEmpty(salesinvoice.getStatename())) {
								if (!salesinvoice.getStatename().equals(client.getStatename())) {
									isIntraState = false;
								}
							}
							if (salesinvoice.getInvtype().equals(MasterGSTConstants.EXPORTS) || salesinvoice.getInvtype().equals(MasterGSTConstants.EXPA)) {
								List<GSTRExports> exp = salesinvoice.getExp();
								if (isNotEmpty(exp)) {
									GSTRExports exps = exp.get(0);
									if (isNotEmpty(exps)) {
										if (exps.getExpTyp().equals("WPAY")) {
											isIntraState = false;
										} else {
											isIntraState = true;
										}
									}
								}
							}else if (salesinvoice.getInvtype().equals(MasterGSTConstants.B2B) || salesinvoice.getInvtype().equals(MasterGSTConstants.B2BA) || salesinvoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || salesinvoice.getInvtype().equals(MasterGSTConstants.CDNUR) || salesinvoice.getInvtype().equals(MasterGSTConstants.CDNA) || salesinvoice.getInvtype().equals(MasterGSTConstants.CDNURA)) {
								if(isNotEmpty(salesinvoice.getB2b()) && isNotEmpty(salesinvoice.getB2b().get(0)) && isNotEmpty(salesinvoice.getB2b().get(0).getInv()) && isNotEmpty(salesinvoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(salesinvoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
									String invtyp = salesinvoice.getB2b().get(0).getInv().get(0).getInvTyp();
									if (invtyp.equals("SEWP") || invtyp.equals("SEWPC") || invtyp.equals("SEWOP")  || invtyp.equals("CBW")) {
										isIntraState = false;
									}
								}
								if(salesinvoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || salesinvoice.getInvtype().equals(MasterGSTConstants.CDNUR) || salesinvoice.getInvtype().equals(MasterGSTConstants.CDNA) || salesinvoice.getInvtype().equals(MasterGSTConstants.CDNURA)) {
									if (isEmpty(salesinvoice.getB2b()) || isEmpty(salesinvoice.getB2b().get(0).getCtin())) {
										isIntraState = false;
									}
								}
							}
							accountingJournalsUtils.createJournalsEntries(salesinvoice.getUserid(),salesinvoice.getClientid(),returntype,salesinvoice,isIntraState);
							//saveJournalInvoice(salesinvoice, salesinvoice.getClientid(), returntype, isIntraState);
						}
					}
				}
			} else if (returntype.equals(GSTR4)) {
				gstr4Repository.save((List<GSTR4>) invoices);
			} else if (returntype.equals(GSTR5)) {
				gstr5Repository.save((List<GSTR5>) invoices);
			} else if (returntype.equals(GSTR6)) {
				gstr6Repository.save((List<GSTR6>) invoices);
			}else if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
				ewayBillRepository.save((List<EWAYBILL>) invoices);
			} else {
				if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
					for(PurchaseRegister salesinvoice : (List<PurchaseRegister>) invoices) {
						if(isNotEmpty(salesinvoice.getTotalamount())) {
							Double notroundofftamnt = salesinvoice.getTotalamount();
							Double roundofftamt = (double) Math.round(notroundofftamnt);
							Double roundoffamt = 0d;
							roundoffamt = roundofftamt - notroundofftamnt;
							salesinvoice.setTotalamount(roundofftamt);
							salesinvoice.setNotroundoftotalamount(notroundofftamnt);
							salesinvoice.setRoundOffAmount(Double.parseDouble(df2.format(roundoffamt)));
							String totalAmtStr = String.format(DOUBLE_FORMAT,roundofftamt);
							salesinvoice.setTotalamount_str(totalAmtStr);
						}
					}
				}
				for(PurchaseRegister salesinvoice : (List<PurchaseRegister>) invoices) {
					Double totalIGST = 0d;
					Double totalCGST = 0d;
					Double totalSGST = 0d;
					Double totalExempted = 0d;
					Double totalCessAmount = 0d;
					
					for (Item item : salesinvoice.getItems()) {
						if (isNotEmpty(item.getIgstamount())) {
							totalIGST += item.getIgstamount();
						}
						if (isNotEmpty(item.getCgstamount())) {
							totalCGST += item.getCgstamount();
						}
						if (isNotEmpty(item.getSgstamount())) {
							totalSGST += item.getSgstamount();
						}
						if (isNotEmpty(item.getExmepted())) {
							totalExempted += item.getExmepted();
						}
						if(isNotEmpty(item.getCessamount())) {
							totalCessAmount+=item.getCessamount();
						}
					}
					salesinvoice.setTotalIgstAmount(totalIGST);
					salesinvoice.setTotalCgstAmount(totalCGST);
					salesinvoice.setTotalSgstAmount(totalSGST);
					salesinvoice.setTotalExemptedAmount(totalExempted);
					salesinvoice.setTotalCessAmount(totalCessAmount);
				}
				List<PurchaseRegister> purchaseRegisters = purchaseRepository.save((List<PurchaseRegister>) invoices);
				List<PurchaseRegister> b2bRegister = Lists.newArrayList();
				List<PurchaseRegister> cdnRegister = Lists.newArrayList();
				if(isNotEmpty(otherconfig) && (isEmpty(otherconfig.isEnablejournals()) || (isNotEmpty(otherconfig.isEnablejournals()) && !otherconfig.isEnablejournals()))) {
					for(PurchaseRegister purchaseRegister : purchaseRegisters) {
						if(isNotEmpty(purchaseRegister.getInvtype()) && purchaseRegister.getInvtype().equals(B2B)) {
							b2bRegister.add(purchaseRegister);
						} else if (isNotEmpty(purchaseRegister.getInvtype())
								&& purchaseRegister.getInvtype().equals(CREDIT_DEBIT_NOTES)) {
							cdnRegister.add(purchaseRegister);
						}
						String statename = "";
						if (isNotEmpty(purchaseRegister.getB2b().get(0).getCtin())) {
							String gstinNumber = purchaseRegister.getB2b().get(0).getCtin().trim();
							List<StateConfig> states = configService.getStates();
							if (isNotEmpty(gstinNumber)) {
								gstinNumber = gstinNumber.substring(0,2);
								for (StateConfig state : states) {
									if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
										statename = state.getName();
										break;
									}
								}
							}
						}
						boolean isIntraState = true;
						if (isNotEmpty(statename)) {
							if (!statename.equals(client.getStatename())) {
								isIntraState = false;
							}
						}
						if(purchaseRegister.getInvtype().equals(MasterGSTConstants.B2BUR) || purchaseRegister.getInvtype().equals(MasterGSTConstants.B2B) || purchaseRegister.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || purchaseRegister.getInvtype().equals(MasterGSTConstants.CDNUR)){
							String revcharge = purchaseRegister.getRevchargetype();
							String subtype = purchaseRegister.getPrinterintra();
							if(isNotEmpty(revcharge) && ("Reverse".equalsIgnoreCase(revcharge) || "Y".equalsIgnoreCase(revcharge))) {
								if(isNotEmpty(purchaseRegister) && isNotEmpty(purchaseRegister.getB2b()) && isNotEmpty(purchaseRegister.getB2b().get(0)) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv()) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0)) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0).getInvTyp()) && purchaseRegister.getB2b().get(0).getInv().get(0).getInvTyp().equalsIgnoreCase("SEWP")) {
									isIntraState = false;
								}else {
									if(purchaseRegister.getInvtype().equals(MasterGSTConstants.B2B)) {
										if (isEmpty(purchaseRegister.getB2b().get(0).getCtin())) {
											if(isNotEmpty(subtype) && "Inter".equalsIgnoreCase(subtype)) {
												isIntraState = false;
											}else {
												isIntraState = true;
											}
										}
									}else {
										if(isNotEmpty(subtype) && "Inter".equalsIgnoreCase(subtype)) {
											isIntraState = false;
										}else {
											isIntraState = true;
										}
									}
								}
							}else {
								if(isNotEmpty(purchaseRegister) && isNotEmpty(purchaseRegister.getB2b()) && isNotEmpty(purchaseRegister.getB2b().get(0)) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv()) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0)) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0).getInvTyp()) && purchaseRegister.getB2b().get(0).getInv().get(0).getInvTyp().equalsIgnoreCase("SEWP")) {
									isIntraState = false;
								}
							}
						}
						accountingJournalsUtils.createJournalsEntries(purchaseRegister.getUserid(),purchaseRegister.getClientid(),returntype,purchaseRegister,isIntraState);
					}
				}
			}
		}
		logger.debug(CLASSNAME + "updateExcelData : End");
	}

	private List<? extends InvoiceParent> updateSalesInvoiceData(List<InvoiceParent> existingInvoices,
			List<? extends InvoiceParent> invoiceList, final String returntype, Client client, String invType,
			final String id, final String fullname, final String clientId, final String templateType) {
		logger.debug(CLASSNAME + "updateSalesInvoiceData : Begin {}", invoiceList);
		
		OtherConfigurations otherconfig = getOtherConfig(clientId);
		List<String> invtypes = Lists.newArrayList();
		if(isEmpty(invType)) {
			invtypes.add("B2B");
			invtypes.add("B2C");
			invtypes.add("B2CL");
		}else {
			invtypes.add(invType);
		}
		if (isEmpty(invoiceList)) {
			return existingInvoices;
		}
		List<StateConfig> states = configService.getStates();
		for (InvoiceParent invoice : invoiceList) {
			boolean present = false;
			boolean isIntraState = true;
			if (isNotEmpty(invoice.getStatename())) {
				String strState = invoice.getStatename();
				Integer pos = null;
				
				if (isNotEmpty(strState)) {
					if (strState.contains("-")) {
						strState = strState.substring(0, strState.indexOf("-")).trim();
					}
					for (StateConfig state : states) {
						if (state.getName().equals(strState)) {
							pos = state.getTin();
							break;
						} else if (state.getCode().equals(strState)) {
							pos = state.getTin();
							invoice.setStatename(state.getName());
							break;
						} else if (state.getTin().toString().equals(strState)) {
							pos = state.getTin();
							invoice.setStatename(state.getName());
							break;
						}
					}
					if (isNotEmpty(pos) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())
							&& isEmpty(invoice.getB2b().get(0).getInv().get(0).getPos())) {
						String strPos = pos < 10 ? "0"+pos : pos.toString();
						invoice.getB2b().get(0).getInv().get(0).setPos(strPos);
					}
					String strClientState = client.getStatename();
					if (strClientState.contains("-")) {
						strClientState = strClientState.substring(0, strClientState.indexOf("-")).trim();
					}
					if ("Purchase Register".equals(returntype) || "GSTR2".equals(returntype)
							|| "PurchaseRegister".equals(returntype)) {
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
							strState = (invoice.getB2b().get(0).getCtin().trim()).substring(0, 2);

						}
					}
					if (!strClientState.equals(strState)) {
						isIntraState = false;
					}
				}
			}
			if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())
					&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
				if(isScientificNotation(invoice.getB2b().get(0).getInv().get(0).getInum())) {
					String val = new BigDecimal(invoice.getB2b().get(0).getInv().get(0).getInum().trim())
							.toPlainString();
					invoice.getB2b().get(0).getInv().get(0).setInum(val);
				} else {
					invoice.getB2b().get(0).getInv().get(0)
							.setInum(invoice.getB2b().get(0).getInv().get(0).getInum().trim());
				}
			}
			if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {

				invoice.getB2b().get(0).setCtin(invoice.getB2b().get(0).getCtin().trim());
			}
			for (InvoiceParent exstngInv : existingInvoices) {
				if ((isNotEmpty(invoice.getB2b()) && isNotEmpty(exstngInv.getB2b())
						&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())
						&& isNotEmpty(exstngInv.getB2b().get(0).getInv().get(0).getInum()) && isNotEmpty(invtypes)
						&& isNotEmpty(exstngInv.getInvtype()) && invtypes.contains(exstngInv.getInvtype())
						&& (exstngInv.getB2b().get(0).getInv().get(0).getInum().trim())
								.equals((invoice.getB2b().get(0).getInv().get(0).getInum().trim()))
						&& isNotEmpty(invoice.getFp()) && exstngInv.getFp().equals(invoice.getFp()))) {
					if (isEmpty(invoice.getB2b().get(0).getCtin()) || exstngInv.getB2b().get(0).getCtin().toUpperCase()
							.equals(invoice.getB2b().get(0).getCtin().toUpperCase())) {
						if(exstngInv.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
							String invCdnDocType;
							String existCdnDocType;
							if (returntype.equals(GSTR1)) {
								invCdnDocType = ((GSTR1)invoice).getCdnr().get(0).getNt().get(0).getNtty();
								existCdnDocType = ((GSTR1)exstngInv).getCdnr().get(0).getNt().get(0).getNtty();
							}else {
								invCdnDocType = ((PurchaseRegister)invoice).getCdn().get(0).getNt().get(0).getNtty();
								existCdnDocType = ((PurchaseRegister)invoice).getCdn().get(0).getNt().get(0).getNtty();
							}
							if(invCdnDocType.equals(existCdnDocType)) {
								if (isNotEmpty(invoice.getItems())) {
									if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
										if (invoice.getItems().get(0).getCategory()
												.equals(MasterGSTConstants.PRODUCT_CODE)
												|| invoice.getItems().get(0).getCategory()
														.equals(MasterGSTConstants.GOODS)) {
											invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
										} else {
											invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
										}
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									}
									exstngInv.getItems().addAll(invoice.getItems());
									List<GSTRItems> gstrItems = populateItemData(exstngInv, isIntraState,returntype);
									Double totalvalue = 0d;
									for(GSTRItems gstritem : gstrItems) {
										if(isNotEmpty(gstritem.getItem())) {
											if(isNotEmpty(gstritem.getItem().getTxval())) {
												totalvalue = totalvalue+gstritem.getItem().getTxval();
											}
											if(isNotEmpty(gstritem.getItem().getCamt())) {
												totalvalue = totalvalue+gstritem.getItem().getCamt();
											}
											if(isNotEmpty(gstritem.getItem().getSamt())) {
												totalvalue = totalvalue+gstritem.getItem().getSamt();
											}
											if(isNotEmpty(gstritem.getItem().getIamt())) {
												totalvalue = totalvalue+gstritem.getItem().getIamt();
											}
											if(isNotEmpty(gstritem.getItem().getCsamt())) {
												totalvalue = totalvalue+gstritem.getItem().getCsamt();
											}
										}
									}
									if (returntype.equals(GSTR1)) {
										((GSTR1) exstngInv).getCdnr().get(0).getNt().get(0).setItms(gstrItems);
										
										if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffSalesField()) && !otherconfig.isEnableroundoffSalesField()) {
											totalvalue = (double) Math.round(totalvalue);
										}
										((GSTR1) exstngInv).getCdnr().get(0).getNt().get(0).setVal(totalvalue);
									}else {
										((PurchaseRegister) exstngInv).getCdn().get(0).getNt().get(0).setItms(gstrItems);
										if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
											totalvalue = (double) Math.round(totalvalue);
										}
										((PurchaseRegister) exstngInv).getCdn().get(0).getNt().get(0).setVal(totalvalue);
									}
									//exstngInv.getB2b().get(0).getInv().get(0).setItms(gstrItems);
									present = true;
								}
							}
							
						}else if(exstngInv.getInvtype().equals(MasterGSTConstants.CDNUR)){
							
							String invCdnDocType;
							String existCdnDocType;
							if (returntype.equals(GSTR1)) {
								invCdnDocType = ((GSTR1)invoice).getCdnur().get(0).getNtty();
								existCdnDocType = ((GSTR1)exstngInv).getCdnur().get(0).getNtty();
							}else {
								invCdnDocType = ((PurchaseRegister)invoice).getCdnur().get(0).getNtty();
								existCdnDocType = ((PurchaseRegister)exstngInv).getCdnur().get(0).getNtty();
							}
							if(invCdnDocType.equals(existCdnDocType)) {
								if (isNotEmpty(invoice.getItems())) {
									if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
										if (invoice.getItems().get(0).getCategory()
												.equals(MasterGSTConstants.PRODUCT_CODE)
												|| invoice.getItems().get(0).getCategory()
														.equals(MasterGSTConstants.GOODS)) {
											invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
										} else {
											invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
										}
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									}
									exstngInv.getItems().addAll(invoice.getItems());
									List<GSTRItems> gstrItems = populateItemData(exstngInv, isIntraState,returntype);
									Double totalvalue = 0d;
									for(GSTRItems gstritem : gstrItems) {
										if(isNotEmpty(gstritem.getItem())) {
											if(isNotEmpty(gstritem.getItem().getTxval())) {
												totalvalue = totalvalue+gstritem.getItem().getTxval();
											}
											if(isNotEmpty(gstritem.getItem().getCamt())) {
												totalvalue = totalvalue+gstritem.getItem().getCamt();
											}
											if(isNotEmpty(gstritem.getItem().getSamt())) {
												totalvalue = totalvalue+gstritem.getItem().getSamt();
											}
											if(isNotEmpty(gstritem.getItem().getIamt())) {
												totalvalue = totalvalue+gstritem.getItem().getIamt();
											}
											if(isNotEmpty(gstritem.getItem().getCsamt())) {
												totalvalue = totalvalue+gstritem.getItem().getCsamt();
											}
										}
									}
									if (returntype.equals(GSTR1)) {
										((GSTR1) exstngInv).getCdnur().get(0).setItms(gstrItems);
										if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffSalesField()) && !otherconfig.isEnableroundoffSalesField()) {
											totalvalue = (double) Math.round(totalvalue);
										}
										((GSTR1) exstngInv).getCdnur().get(0).setVal(totalvalue);
									}else {
										((PurchaseRegister) exstngInv).getCdnur().get(0).setItms(gstrItems);
										if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
											totalvalue = (double) Math.round(totalvalue);
										}
										((PurchaseRegister) exstngInv).getCdnur().get(0).setVal(totalvalue);
									}
									present = true;
								}
							}
						}else if(exstngInv.getInvtype().equals(MasterGSTConstants.B2C)) {
							if (isNotEmpty(invoice.getItems())) {
								if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
									if (invoice.getItems().get(0).getCategory().equals(MasterGSTConstants.PRODUCT_CODE)
											|| invoice.getItems().get(0).getCategory()
													.equals(MasterGSTConstants.GOODS)) {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
									}
								} else {
									invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
								}
								exstngInv.getItems().addAll(invoice.getItems());
								String stateTin = getStateCode(invoice.getStatename());
								List<GSTRB2CS> b2cs = Lists.newArrayList();
								double totaltaxable = 0d;
								double totaltax = 0d;
								for (Item item : exstngInv.getItems()) {
									GSTRB2CS gstrb2csDetail = new GSTRB2CS();
									if (isNotEmpty(item.getIgstrate())) {
										gstrb2csDetail.setRt(item.getIgstrate());
									} else if (isNotEmpty(item.getCgstrate()) && isNotEmpty(item.getSgstrate())) {
										gstrb2csDetail.setRt(item.getCgstrate() + item.getSgstrate());
									}
									if (!isIntraState && isNotEmpty(item.getIgstamount())) {
										gstrb2csDetail.setIamt(item.getIgstamount());
										totaltax = totaltax+item.getIgstamount();
									} else if (isNotEmpty(item.getCgstamount()) && isNotEmpty(item.getSgstamount())) {
										gstrb2csDetail.setCamt(item.getCgstamount());
										gstrb2csDetail.setSamt(item.getSgstamount());
										totaltax = totaltax+item.getCgstamount();
										totaltax = totaltax+item.getSgstamount();
									}
									if (isIntraState) {
										gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTRA);
									} else {
										gstrb2csDetail.setSplyTy(MasterGSTConstants.SUPPLY_TYPE_INTER);
									}
									gstrb2csDetail.setCsamt(item.getCessamount());
									gstrb2csDetail.setTxval(item.getTaxablevalue());
									if(isNotEmpty(item.getTaxablevalue())) {
										totaltaxable = totaltaxable+item.getTaxablevalue();
									}
									if (isNotEmpty(invoice.getStatename())) {
										gstrb2csDetail.setPos(stateTin);
									}
									String ecomGSTIN = "";
									if (isNotEmpty(invoice.getB2cs()) && isNotEmpty(invoice.getB2cs().get(0))
											&& isNotEmpty(invoice.getB2cs().get(0).getEtin())) {
										ecomGSTIN = invoice.getB2cs().get(0).getEtin();
									}
									gstrb2csDetail.setTyp("OE");
									if (isNotEmpty(ecomGSTIN)) {
										gstrb2csDetail.setTyp("E");
										gstrb2csDetail.setEtin(ecomGSTIN.toUpperCase());
									} else if (isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getEtin())) {
										gstrb2csDetail.setTyp("E");
										gstrb2csDetail.setEtin(invoice.getB2b().get(0).getInv().get(0).getEtin().toUpperCase());
									}
									String diffper = invoice.getDiffPercent();
									if ("Yes".equals(diffper)) {
										gstrb2csDetail.setDiffPercent(0.65);
									}
									b2cs.add(gstrb2csDetail);
								}
								exstngInv.setTotaltaxableamount(totaltaxable);
								exstngInv.setTotaltax(totaltax);
								exstngInv.setTotalamount(totaltaxable + totaltax);
								exstngInv.setB2cs(b2cs);
								present = true;
							}
						}else if(exstngInv.getInvtype().equals(MasterGSTConstants.B2CL)) {
							if (isNotEmpty(invoice.getItems())) {
								if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
									if (invoice.getItems().get(0).getCategory().equals(MasterGSTConstants.PRODUCT_CODE)
											|| invoice.getItems().get(0).getCategory()
													.equals(MasterGSTConstants.GOODS)) {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
									}
								} else {
									invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
								}
								exstngInv.getItems().addAll(invoice.getItems());
								List<GSTRItems> gstrItems = populateItemData(exstngInv, isIntraState, returntype);
								Double totalvalue = 0d;
								for(GSTRItems gstritem : gstrItems) {
									if(isNotEmpty(gstritem.getItem())) {
										if(isNotEmpty(gstritem.getItem().getTxval())) {
											totalvalue = totalvalue+gstritem.getItem().getTxval();
										}
										if(isNotEmpty(gstritem.getItem().getCamt())) {
											totalvalue = totalvalue+gstritem.getItem().getCamt();
										}
										if(isNotEmpty(gstritem.getItem().getSamt())) {
											totalvalue = totalvalue+gstritem.getItem().getSamt();
										}
										if(isNotEmpty(gstritem.getItem().getIamt())) {
											totalvalue = totalvalue+gstritem.getItem().getIamt();
										}
										if(isNotEmpty(gstritem.getItem().getCsamt())) {
											totalvalue = totalvalue+gstritem.getItem().getCsamt();
										}
									}
								}
								exstngInv.getB2cl().get(0).getInv().get(0).setItms(gstrItems);
								if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffSalesField()) && !otherconfig.isEnableroundoffSalesField()) {
									totalvalue = (double) Math.round(totalvalue);
								}
								exstngInv.getB2cl().get(0).getInv().get(0).setVal(totalvalue);
									present = true;
							}
						}else if(exstngInv.getInvtype().equals(MasterGSTConstants.B2BUR)) {
							if (isNotEmpty(invoice.getItems())) {
								if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
									if (invoice.getItems().get(0).getCategory().equals(MasterGSTConstants.PRODUCT_CODE)
											|| invoice.getItems().get(0).getCategory()
													.equals(MasterGSTConstants.GOODS)) {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
									}
								} else {
									invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
								}
								exstngInv.getItems().addAll(invoice.getItems());
								List<GSTRItems> gstrItems = populateItemData(exstngInv, isIntraState, returntype);
								Double totalvalue = 0d;
								for(GSTRItems gstritem : gstrItems) {
									if(isNotEmpty(gstritem.getItem())) {
										if(isNotEmpty(gstritem.getItem().getTxval())) {
											totalvalue = totalvalue+gstritem.getItem().getTxval();
										}
										if(isNotEmpty(gstritem.getItem().getCamt())) {
											totalvalue = totalvalue+gstritem.getItem().getCamt();
										}
										if(isNotEmpty(gstritem.getItem().getSamt())) {
											totalvalue = totalvalue+gstritem.getItem().getSamt();
										}
										if(isNotEmpty(gstritem.getItem().getIamt())) {
											totalvalue = totalvalue+gstritem.getItem().getIamt();
										}
										if(isNotEmpty(gstritem.getItem().getCsamt())) {
											totalvalue = totalvalue+gstritem.getItem().getCsamt();
										}
									}
								}
								((PurchaseRegister) exstngInv).getB2bur().get(0).getInv().get(0).setItms(gstrItems);
								if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
									totalvalue = (double) Math.round(totalvalue);
								}
								((PurchaseRegister) exstngInv).getB2bur().get(0).getInv().get(0).setVal(totalvalue);
								present = true;
							}
						} else if(exstngInv.getInvtype().equals(MasterGSTConstants.IMP_GOODS)){
							if (isNotEmpty(invoice.getItems())) {
								if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
									if (invoice.getItems().get(0).getCategory().equals(MasterGSTConstants.PRODUCT_CODE)
											|| invoice.getItems().get(0).getCategory()
													.equals(MasterGSTConstants.GOODS)) {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
									}
								} else {
									invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
								}
								exstngInv.getItems().addAll(invoice.getItems());
								List<GSTRItems> gstrItems = populateItemData(exstngInv, false, returntype);
								List<GSTRImportItems> items = Lists.newArrayList();
								double totalValue = 0d;
								for (GSTRItems gstrItem : gstrItems) {
									if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItc())) {
										GSTRImportItems importItem = new GSTRImportItems();
										importItem.setNum(gstrItem.getNum());
										importItem.setRt(gstrItem.getItem().getRt());
										importItem.setTxval(gstrItem.getItem().getTxval());
										importItem.setIamt(gstrItem.getItem().getIamt());
										importItem.setCsamt(gstrItem.getItem().getCsamt());
										importItem.setElg(gstrItem.getItc().getElg());
										importItem.setiTax(gstrItem.getItc().getiTax());
										importItem.setCsTax(gstrItem.getItc().getCsTax());
										items.add(importItem);
										if(isNotEmpty(gstrItem.getItem().getTxval())) {
											totalValue = totalValue+gstrItem.getItem().getTxval();
										}
										if(isNotEmpty(gstrItem.getItem().getIamt())) {
											totalValue = totalValue+gstrItem.getItem().getIamt();
										}
										if(isNotEmpty(gstrItem.getItem().getCsamt())) {
											totalValue = totalValue+gstrItem.getItem().getCsamt();
										}
									}
								}
								((PurchaseRegister) exstngInv).getImpGoods().get(0).setItms(items);
								if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
									totalValue = (double) Math.round(totalValue);
								}
								((PurchaseRegister) exstngInv).getImpGoods().get(0).setBoeVal(totalValue);
								present = true;
							}
						}else if(exstngInv.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_SERVICES)){
							if (isNotEmpty(invoice.getItems())) {
								if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
									if (invoice.getItems().get(0).getCategory().equals(MasterGSTConstants.PRODUCT_CODE)
											|| invoice.getItems().get(0).getCategory()
													.equals(MasterGSTConstants.GOODS)) {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
									}
								} else {
									invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
								}
								exstngInv.getItems().addAll(invoice.getItems());
								List<GSTRItems> gstrItems = populateItemData(exstngInv, false, returntype);
								List<GSTRImportItems> items = Lists.newArrayList();
								double totalValue = 0d;
								for (GSTRItems gstrItem : gstrItems) {
									if (isNotEmpty(gstrItem.getItem()) && isNotEmpty(gstrItem.getItc())) {
										GSTRImportItems importItem = new GSTRImportItems();
										importItem.setNum(gstrItem.getNum());
										importItem.setRt(gstrItem.getItem().getRt());
										importItem.setTxval(gstrItem.getItem().getTxval());
										importItem.setIamt(gstrItem.getItem().getIamt());
										importItem.setCsamt(gstrItem.getItem().getCsamt());
										importItem.setElg(gstrItem.getItc().getElg());
										importItem.setiTax(gstrItem.getItc().getiTax());
										importItem.setCsTax(gstrItem.getItc().getCsTax());
										items.add(importItem);
										if(isNotEmpty(gstrItem.getItem().getTxval())) {
											totalValue = totalValue+gstrItem.getItem().getTxval();
										}
										if(isNotEmpty(gstrItem.getItem().getIamt())) {
											totalValue = totalValue+gstrItem.getItem().getIamt();
										}
										if(isNotEmpty(gstrItem.getItem().getCsamt())) {
											totalValue = totalValue+gstrItem.getItem().getCsamt();
										}
									}
								}
								((PurchaseRegister) exstngInv).getImpServices().get(0).setItms(items);
								if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
									totalValue = (double) Math.round(totalValue);
								}
								((PurchaseRegister) exstngInv).getImpServices().get(0).setIval(totalValue);
								present = true;
							}
						}else {
							
							if (isNotEmpty(invoice.getItems())) {
								if (isNotEmpty(invoice.getItems().get(0).getCategory())) {
									if (invoice.getItems().get(0).getCategory().equals(MasterGSTConstants.PRODUCT_CODE)
											|| invoice.getItems().get(0).getCategory()
													.equals(MasterGSTConstants.GOODS)) {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
									} else {
										invoice.getItems().get(0).setCategory(MasterGSTConstants.SAC);
									}
								} else {
									invoice.getItems().get(0).setCategory(MasterGSTConstants.HSN);
								}
								exstngInv.getItems().addAll(invoice.getItems());
								List<GSTRItems> gstrItems = populateItemData(exstngInv, isIntraState,returntype);
								exstngInv.getB2b().get(0).getInv().get(0).setItms(gstrItems);
								Double totalvalue = 0d;
								for(GSTRItems gstritem : gstrItems) {
									if(isNotEmpty(gstritem.getItem())) {
										if(isNotEmpty(gstritem.getItem().getTxval())) {
											totalvalue = totalvalue+gstritem.getItem().getTxval();
										}
										if(isNotEmpty(gstritem.getItem().getCamt())) {
											totalvalue = totalvalue+gstritem.getItem().getCamt();
										}
										if(isNotEmpty(gstritem.getItem().getSamt())) {
											totalvalue = totalvalue+gstritem.getItem().getSamt();
										}
										if(isNotEmpty(gstritem.getItem().getIamt())) {
											totalvalue = totalvalue+gstritem.getItem().getIamt();
										}
										if(isNotEmpty(gstritem.getItem().getCsamt())) {
											totalvalue = totalvalue+gstritem.getItem().getCsamt();
										}
									}
								}
								if (returntype.equals(GSTR1)) {
									if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffSalesField()) && !otherconfig.isEnableroundoffSalesField()) {
										totalvalue = (double) Math.round(totalvalue);
									}
								}else {
									if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
										totalvalue = (double) Math.round(totalvalue);
									}
								}
								exstngInv.getB2b().get(0).getInv().get(0).setVal(totalvalue);
								present = true;
							}
						}
					}
				}
			}
			String pInvType = invType;
			if (!present && isNotEmpty(invoice.getB2b())
					&& isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInum())) {
				if (isEmpty(invType) || invType.equals(B2B)) {
					Double totalAmount = 0d;
					if (isNotEmpty(invoice.getItems())) {
						for (Item item : invoice.getItems()) {
							if (isNotEmpty(item.getTotal())) {
								totalAmount += item.getTotal();
							}
						}
					}
					if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())
							|| invoice.getB2b().get(0).getCtin().trim().isEmpty()) {
						
						if (totalAmount > 250000 && !isIntraState) {
							pInvType = B2CL;
						} else {
							pInvType = B2C;
						}
					} else {
						pInvType = B2B;
					}
				}
				InvoiceParent eInv = null;
				if (returntype.equals(GSTR1)) {
					if (isNotEmpty(pInvType)) {
						eInv = gstr1Repository.findByClientidAndInvtypeAndInvoicenoAndFp(client.getId().toString(),
								pInvType, invoice.getB2b().get(0).getInv().get(0).getInum(), invoice.getFp());
					}
				}else if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if (isNotEmpty(pInvType)) {
						eInv = ewayBillRepository.findByClientidAndInvtypeAndInvoicenoAndFp(client.getId().toString(),
								pInvType, invoice.getB2b().get(0).getInv().get(0).getInum(), invoice.getFp());
					}
				}else {
					if (isNotEmpty(pInvType)) {
						if(isNotEmpty(invoice.getB2b().get(0).getCtin())) {
							eInv = purchaseRepository.findByClientidAndInvtypeAndInvoicenoAndB2b_CtinIgnoreCaseAndFp(client.getId().toString(),
								pInvType, invoice.getB2b().get(0).getInv().get(0).getInum(),invoice.getB2b().get(0).getCtin(), invoice.getFp());
						}else {
							eInv = purchaseRepository.findByClientidAndInvtypeAndInvoicenoAndFp(client.getId().toString(),
									pInvType, invoice.getB2b().get(0).getInv().get(0).getInum(), invoice.getFp());
						}
					}
				}
				
					if (isNotEmpty(eInv)) {
						present = true;
						invoice.setId(eInv.getId());
						invoice.getItems().addAll(eInv.getItems());
					}
				
			}
			if (!present) {
				invoice.setUserid(id);
				invoice.setFullname(fullname);
				invoice.setClientid(clientId);
				invoice.setGstin(client.getGstnnumber());
				if (isNotEmpty(pInvType)) {
					invoice.setInvtype(pInvType);
				}
				Double totalvalue = 0d;
				Double notroundofftamnt = 0d;
				if(isNotEmpty(invoice.getItems())) {
					
					for(Item item: invoice.getItems()){
						if(isNotEmpty(item) && isNotEmpty(item.getTotal())) {
							totalvalue += item.getTotal();
							notroundofftamnt += item.getTotal();
						}
					}
					
				}
				if(isNotEmpty(totalvalue)) {
					if (returntype.equals(GSTR1)) {
						if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffSalesField()) && !otherconfig.isEnableroundoffSalesField()) {
							totalvalue = (double) Math.round(totalvalue);
						}
					}else {
						if(isNotEmpty(otherconfig) && isNotEmpty(otherconfig.isEnableroundoffPurField()) && !otherconfig.isEnableroundoffPurField()) {
							totalvalue = (double) Math.round(totalvalue);
						}
					}
				}
				invoice.setTotalamount(totalvalue);
				invoice = populateInvoiceInfo(invoice, null, returntype, isIntraState);
				
				if(invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					if (returntype.equals(GSTR1)) {
						((GSTR1) invoice).getCdnr().get(0).getNt().get(0).setVal(totalvalue);
					}else {
						((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).setVal(totalvalue);
					}
				}else if(invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
					if (returntype.equals(GSTR1)) {
						((GSTR1) invoice).getCdnur().get(0).setVal(totalvalue);
					}else {
						((PurchaseRegister) invoice).getCdnur().get(0).setVal(totalvalue);
					}
				}else if(invoice.getInvtype().equals(MasterGSTConstants.B2CL)) {
					invoice.getB2cl().get(0).getInv().get(0).setVal(totalvalue);
				}else if(invoice.getInvtype().equals(MasterGSTConstants.B2BUR)) {
					((PurchaseRegister) invoice).getB2bur().get(0).getInv().get(0).setVal(totalvalue);
				}else if(invoice.getInvtype().equals(MasterGSTConstants.IMP_GOODS)){
					((PurchaseRegister) invoice).getImpGoods().get(0).setBoeVal(totalvalue);
				}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_SERVICES)){
					((PurchaseRegister) invoice).getImpServices().get(0).setIval(totalvalue);
				}else {
					invoice.getB2b().get(0).getInv().get(0).setVal(totalvalue);
				}
				invoice.setTotalamount(notroundofftamnt);
				if (returntype.equals(GSTR1)) {
					existingInvoices.add((GSTR1) invoice);
				} else if (returntype.equals(GSTR4)) {
					existingInvoices.add((GSTR4) invoice);
				} else if (returntype.equals(GSTR5)) {
					existingInvoices.add((GSTR5) invoice);
				} else if (returntype.equals(GSTR6)) {
					existingInvoices.add((GSTR6) invoice);
				} else if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
					existingInvoices.add((EWAYBILL) invoice);
				}else {
					existingInvoices.add((PurchaseRegister) invoice);
				}
			}
		}
		logger.debug(CLASSNAME + "updateSalesInvoiceData : End");
		return existingInvoices;
	}

	private GSTR2 populateGSTR2(GSTRInvoiceDetails gstrInvoiceDetails, final String gstn, final String fp,
			final String userid, final String clientid, final String invType, final String ctin,final String cfs,final String cfs3b,final String fldtr1,final String flprdr1,final String dtcancel) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		GSTR2 individualInvoice = new GSTR2();
		individualInvoice.setGstin(gstn);
		individualInvoice.setFp(fp);
		individualInvoice.setInvtype(invType);
		individualInvoice.setUserid(userid);
		individualInvoice.setClientid(clientid);
		individualInvoice.setSrctype("GSTAPI");
		if (invType.equals(MasterGSTConstants.CDNA) || invType.equals(MasterGSTConstants.CDNUR)
				|| invType.equals(MasterGSTConstants.CDNURA) || invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
			individualInvoice.setInvoiceno(gstrInvoiceDetails.getNtNum());
		}else {
			individualInvoice.setInvoiceno(gstrInvoiceDetails.getInum());
		}
		try {
			if (invType.equals(MasterGSTConstants.CDNA) || invType.equals(MasterGSTConstants.CDNUR)
					|| invType.equals(MasterGSTConstants.CDNURA)
					|| invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
				if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
					individualInvoice.setDateofinvoice(gstrInvoiceDetails.getNtDt());
				}
			}else {
				if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
					individualInvoice.setDateofinvoice(simpleDateFormat.parse(gstrInvoiceDetails.getIdt()));
				}
			}
		} catch (ParseException e) {
			logger.error(CLASSNAME + "populateGSTR2 :: ERROR in invoice date", e);
		}
		GSTRB2B indGstrb2b = new GSTRB2B();
		if (isNotEmpty(ctin)) {
			indGstrb2b.setCtin(ctin);
		}
		
		if (invType.equals(B2B) || invType.equals(B2BA)) {
			if(isNotEmpty(cfs)) {
				indGstrb2b.setCfs(cfs);
			}
			if(isNotEmpty(cfs3b)) {
				indGstrb2b.setCfs3b(cfs3b);
			}
			if(isNotEmpty(fldtr1)) {
				indGstrb2b.setFldtr1(fldtr1);
			}
			if(isNotEmpty(flprdr1)) {
				indGstrb2b.setFlprdr1(flprdr1);
			}
			if(isNotEmpty(dtcancel)) {
				indGstrb2b.setDtcancel(dtcancel);
			}
			indGstrb2b.getInv().add(gstrInvoiceDetails);
			if (isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getRchrg())) {
				if ("Y".equalsIgnoreCase(gstrInvoiceDetails.getRchrg())) {
					individualInvoice.setRevchargetype("Reverse");
				} else {
					individualInvoice.setRevchargetype("Regular");
				}
			}
		} else if (invType.equals(CREDIT_DEBIT_NOTES) || invType.equals(CDNA)) {
			GSTRCreditDebitNotes note = new GSTRCreditDebitNotes();
			if (isNotEmpty(ctin)) {
				note.setCtin(ctin);
			}
			if(isNotEmpty(cfs)) {
				note.setCfs(cfs);
			}
			if(isNotEmpty(cfs3b)) {
				note.setCfs3b(cfs3b);
			}
			if(isNotEmpty(fldtr1)) {
				note.setFldtr1(fldtr1);
			}
			if(isNotEmpty(flprdr1)) {
				note.setFlprdr1(flprdr1);
			}
			if(isNotEmpty(dtcancel)) {
				note.setDtcancel(dtcancel);
			}
			if(isNotEmpty(gstrInvoiceDetails.getAddress())){
				indGstrb2b.getInv().get(0).setAddress(gstrInvoiceDetails.getAddress());
			}
			note.getNt().add(gstrInvoiceDetails);
			if (isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getRchrg())) {
				if ("Y".equalsIgnoreCase(gstrInvoiceDetails.getRchrg())) {
					individualInvoice.setRevchargetype("Reverse");
				} else {
					individualInvoice.setRevchargetype("Regular");
				}
			}
			if(invType.equals(CDNA)) {
				individualInvoice.getCdna().add(note);
			}else {
				individualInvoice.getCdn().add(note);				
			}
		}
		if(invType.equals(B2BA)) {
			individualInvoice.getB2ba().add(indGstrb2b);
			GSTRB2B indGstrb2ba = new GSTRB2B();
			if (isNotEmpty(ctin)) {
				indGstrb2ba.setCtin(ctin);
				individualInvoice.getB2b().add(indGstrb2ba);
			}
		}else {
			
			individualInvoice.getB2b().add(indGstrb2b);			
		}
		individualInvoice.setTotalamount(gstrInvoiceDetails.getVal());
		Double totalTaxVal = 0d;
		Double totalTax = 0d;
		Double totalITC = 0d;
		List<Item> items = Lists.newArrayList();
		for (GSTRItems gstrItem : gstrInvoiceDetails.getItms()) {
			Item item = new Item();
			Double itemTotal = 0d;
			item.setTaxablevalue(gstrItem.getItem().getTxval());
			
			totalTaxVal += gstrItem.getItem().getTxval();
			if(isNotEmpty(gstrItem.getItem().getTxval())) {
				itemTotal += gstrItem.getItem().getTxval(); 
			}
			item.setRateperitem(gstrItem.getItem().getTxval());
			item.setQuantity(Double.parseDouble("1"));
			if (isNotEmpty(gstrItem.getItem().getRt())) {
				item.setRate(gstrItem.getItem().getRt());
			}
			if (isNotEmpty(gstrItem.getItem().getIamt())) {
				item.setIgstamount(gstrItem.getItem().getIamt());
				item.setIgstrate(gstrItem.getItem().getRt());
				totalTax += gstrItem.getItem().getIamt();
				itemTotal += gstrItem.getItem().getIamt(); 
			}
			if (isNotEmpty(gstrItem.getItem().getCamt())) {
				item.setCgstamount(gstrItem.getItem().getCamt());
				item.setCgstrate(gstrItem.getItem().getRt() / 2);
				totalTax += gstrItem.getItem().getCamt();
				itemTotal += gstrItem.getItem().getCamt(); 
			}
			if (isNotEmpty(gstrItem.getItem().getSamt())) {
				item.setSgstamount(gstrItem.getItem().getSamt());
				item.setSgstrate(gstrItem.getItem().getRt() / 2);
				totalTax += gstrItem.getItem().getSamt();
				itemTotal += gstrItem.getItem().getSamt(); 
			}
			if (isNotEmpty(gstrItem.getItem().getCsamt())) {
				item.setCessamount(gstrItem.getItem().getCsamt());
				totalTax += gstrItem.getItem().getCsamt();
				itemTotal += gstrItem.getItem().getCsamt(); 
			}
			if (gstrInvoiceDetails.getItms().size() == 1) { //Fix for gstr2a invoice edit as purchase register 
				item.setTotal(gstrInvoiceDetails.getVal());
			}else {
				item.setTotal(itemTotal);
			}
			if (isNotEmpty(gstrItem.getItc())) {
				if (isNotEmpty(gstrItem.getItc().getiTax())) {
					totalITC += gstrItem.getItc().getiTax();
				}
				if (isNotEmpty(gstrItem.getItc().getcTax())) {
					totalITC += gstrItem.getItc().getcTax();
				}
				if (isNotEmpty(gstrItem.getItc().getsTax())) {
					totalITC += gstrItem.getItc().getsTax();
				}
				if (isNotEmpty(gstrItem.getItc().getCsTax())) {
					totalITC += gstrItem.getItc().getCsTax();
				}
			}
			items.add(item);
		}
		individualInvoice.setItems(items);
		individualInvoice.setTotaltaxableamount(totalTaxVal);
		individualInvoice.setTotaltax(totalTax);
		individualInvoice.setTotalitc(totalITC);
		Double totalIGST = 0d;
		Double totalCGST = 0d;
		Double totalSGST = 0d;
		Double totalExempted = 0d;
		Double totalCess = 0d;
		for (Item item : individualInvoice.getItems()) {
			if (isNotEmpty(item.getIgstamount())) {
				totalIGST += item.getIgstamount();
			}
			if (isNotEmpty(item.getCgstamount())) {
				totalCGST += item.getCgstamount();
			}
			if (isNotEmpty(item.getSgstamount())) {
				totalSGST += item.getSgstamount();
			}
			if (isNotEmpty(item.getExmepted())) {
				totalExempted += item.getExmepted();
			}
			if (isNotEmpty(item.getCessamount())) {
				totalCess += item.getCessamount();
			}
		}
		individualInvoice.setTotalIgstAmount(totalIGST);
		individualInvoice.setTotalCgstAmount(totalCGST);
		individualInvoice.setTotalSgstAmount(totalSGST);
		individualInvoice.setTotalExemptedAmount(totalExempted);
		individualInvoice.setTotalCessAmount(totalCess);
		individualInvoice = (GSTR2) extrafields(individualInvoice,"GSTR2");
		return individualInvoice;
	}
	
	private GSTR2 populateGSTR2IMPG(GSTR2AIMPG gstrImportDetailss, final String fp,	final String userid, final String clientid, final String invType) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		GSTR2 individualInvoice = new GSTR2();
		individualInvoice.setFp(fp);
		individualInvoice.setInvtype(MasterGSTConstants.IMP_GOODS);
		individualInvoice.setUserid(userid);
		individualInvoice.setClientid(clientid);
		
		
		List<GSTRImportDetails> impGoods = null;
			impGoods = Lists.newArrayList();
			GSTRImportDetails gstrImportDetails = new GSTRImportDetails();
			try {
				if(isNotEmpty(gstrImportDetailss.getBedt())) {
					gstrImportDetails.setBoeDt(simpleDateFormat.parse(gstrImportDetailss.getBedt()));
					individualInvoice.setDateofinvoice(simpleDateFormat.parse(gstrImportDetailss.getBedt()));
				}
				if(isNotEmpty(gstrImportDetailss.getRefdt())) {
					individualInvoice.setBillDate(simpleDateFormat.parse(gstrImportDetailss.getRefdt()));
				}
			} catch (ParseException e) {
				logger.error(CLASSNAME + "populateGSTR2 :: ERROR in invoice date", e);
			}
			if(isNotEmpty(gstrImportDetailss.getBenum())) {
				gstrImportDetails.setBoeNum(gstrImportDetailss.getBenum());
				individualInvoice.setInvoiceno(gstrImportDetailss.getBenum().toString());
			}
			
			if(invType.equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
				gstrImportDetails.setIsSez("N");
				gstrImportDetails.setStin(" ");
			}else {
				gstrImportDetails.setIsSez("Y");
				if(isNotEmpty(gstrImportDetailss.getSgstin())) {
					gstrImportDetails.setStin(gstrImportDetailss.getSgstin());
				}else {
					gstrImportDetails.setStin(" ");
				}
				if(isNotEmpty(gstrImportDetailss.getTdname())) {
					individualInvoice.setBilledtoname(gstrImportDetailss.getTdname());
				}
			}
			if(isNotEmpty(gstrImportDetailss.getPortcd())) {
				gstrImportDetails.setPortCode(gstrImportDetailss.getPortcd());
			}
			Double totalval = 0d;
			totalval += gstrImportDetailss.getTxval() == null ? 0.0 : gstrImportDetailss.getTxval();
			totalval += gstrImportDetailss.getIamt() == null ? 0.0 : gstrImportDetailss.getIamt();
			totalval += gstrImportDetailss.getCsamt() == null ? 0.0 : gstrImportDetailss.getCsamt();
			gstrImportDetails.setBoeVal(totalval);
			
			List<GSTRImportItems> itms = Lists.newArrayList();
			GSTRImportItems importItem = new GSTRImportItems();
			importItem.setNum(1);
			if(isNotEmpty(gstrImportDetailss.getTxval())) {
				importItem.setTxval(gstrImportDetailss.getTxval());
			}
			if(isNotEmpty(gstrImportDetailss.getIamt())) {
				importItem.setIamt(gstrImportDetailss.getIamt());
			}
			if(isNotEmpty(gstrImportDetailss.getCsamt())) {
				importItem.setCsamt(gstrImportDetailss.getCsamt());
			}
			itms.add(importItem);
			gstrImportDetails.setItms(itms);
			impGoods.add(gstrImportDetails);
		
			individualInvoice.setImpGoods(impGoods);
			individualInvoice.setTotalamount(totalval);
		Double totalTaxVal = 0d;
		Double totalTax = 0d;
		Double totalITC = 0d;
		List<Item> items = Lists.newArrayList();
		for (GSTRImportItems gstrItem : gstrImportDetails.getItms()) {
			Item item = new Item();
			Double itemTotal = 0d;
			
			if(isNotEmpty(gstrItem.getTxval())) {
				item.setTaxablevalue(gstrItem.getTxval());
				totalTaxVal += gstrItem.getTxval();
				itemTotal += gstrItem.getTxval();
				item.setRateperitem(gstrItem.getTxval());
			}
			
			item.setQuantity(Double.parseDouble("1"));
			if (isNotEmpty(gstrItem.getIamt())) {
				item.setIgstamount(gstrItem.getIamt());
				totalTax += gstrItem.getIamt();
				itemTotal += gstrItem.getIamt(); 
			}
			if (isNotEmpty(gstrItem.getCsamt())) {
				item.setCessamount(gstrItem.getCsamt());
				totalTax += gstrItem.getCsamt();
				itemTotal += gstrItem.getCsamt(); 
			}
			item.setTotal(itemTotal);
			items.add(item);
		}
		individualInvoice.setItems(items);
		individualInvoice.setTotaltaxableamount(totalTaxVal);
		individualInvoice.setTotaltax(totalTax);
		individualInvoice.setTotalitc(totalITC);
		Double totalIGST = 0d;
		Double totalCGST = 0d;
		Double totalSGST = 0d;
		Double totalExempted = 0d;
		Double totalCess = 0d;
		for (Item item : individualInvoice.getItems()) {
			if (isNotEmpty(item.getIgstamount())) {
				totalIGST += item.getIgstamount();
			}
			if (isNotEmpty(item.getCgstamount())) {
				totalCGST += item.getCgstamount();
			}
			if (isNotEmpty(item.getSgstamount())) {
				totalSGST += item.getSgstamount();
			}
			if (isNotEmpty(item.getExmepted())) {
				totalExempted += item.getExmepted();
			}
			if (isNotEmpty(item.getCessamount())) {
				totalCess += item.getCessamount();
			}
		}
		individualInvoice.setTotalIgstAmount(totalIGST);
		individualInvoice.setTotalCgstAmount(totalCGST);
		individualInvoice.setTotalSgstAmount(totalSGST);
		individualInvoice.setTotalExemptedAmount(totalExempted);
		individualInvoice.setTotalCessAmount(totalCess);
		individualInvoice = (GSTR2) extrafields(individualInvoice,"GSTR2");
		return individualInvoice;
	}
	
	
	
	
	private Anx2 populateAnx2(Anx2Details gstrInvoiceDetails, final String gstn, final String fp,
			final String userid, final String clientid, final String invType, final String ctin,final String cfs) throws ParseException {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		Anx2 individualInvoice = new Anx2();
		individualInvoice.setGstin(gstn);
		individualInvoice.setFp(fp);
		individualInvoice.setInvtype(invType);
		individualInvoice.setUserid(userid);
		individualInvoice.setClientid(clientid);
		individualInvoice.setInvoiceno(gstrInvoiceDetails.getDoc().getNum());
		
		if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
			Date dt1=new SimpleDateFormat("dd-MM-yyyy").parse(gstrInvoiceDetails.getDoc().getDt());
			individualInvoice.setDateofinvoice(dt1);
		}
	
		Anx2Docs indGstrb2b = new Anx2Docs();
		List<Anx2Details> anx2DetailsList = Lists.newArrayList();
		List<Anx2Docs> anx2B2BList = Lists.newArrayList();
		Anx2Details anx2details = new Anx2Details();
		
		if (isNotEmpty(ctin)) {
			indGstrb2b.setCtin(ctin);
		}
		anx2details.setId(new ObjectId());
		if(isNotEmpty(gstrInvoiceDetails.getPos())) {
			anx2details.setPos(gstrInvoiceDetails.getPos());
		}
		if (isNotEmpty(gstrInvoiceDetails.getCfs())) {
			anx2details.setCfs(gstrInvoiceDetails.getCfs());
		}
		if(isNotEmpty(gstrInvoiceDetails.getDiffprcnt())) {
			anx2details.setDiffprcnt(gstrInvoiceDetails.getDiffprcnt());
		}
		if(isNotEmpty(gstrInvoiceDetails.getDoctyp())) {
			anx2details.setDoctyp(gstrInvoiceDetails.getDoctyp());
		}
		if(isNotEmpty(gstrInvoiceDetails.getSec7act())) {
			anx2details.setSec7act(gstrInvoiceDetails.getSec7act());
		}
		if(isNotEmpty(gstrInvoiceDetails.getItcent())) {
			anx2details.setItcent(gstrInvoiceDetails.getItcent());
		}
		if(isNotEmpty(gstrInvoiceDetails.getItcentedtbl())) {
			anx2details.setItcentedtbl(gstrInvoiceDetails.getItcentedtbl());
		}
		if(isNotEmpty(gstrInvoiceDetails.getAction())) {
			anx2details.setAction(gstrInvoiceDetails.getAction());
		}
		if(isNotEmpty(gstrInvoiceDetails.getClmrfnd())) {
			anx2details.setClmrfnd(gstrInvoiceDetails.getClmrfnd());
		}
		if(isNotEmpty(gstrInvoiceDetails.getUplddt())) {
			anx2details.setUplddt(gstrInvoiceDetails.getUplddt());
		}
		if(isNotEmpty(gstrInvoiceDetails.getFlag())) {
			anx2details.setFlag(gstrInvoiceDetails.getFlag());
		}
		if(isNotEmpty(gstrInvoiceDetails.getChksum())) {
			anx2details.setChksum(gstrInvoiceDetails.getChksum());
		}
		if(isNotEmpty(gstrInvoiceDetails.getDoc())) {
			anx2details.setDoc(gstrInvoiceDetails.getDoc());
		}
		if(isNotEmpty(gstrInvoiceDetails.getItems())) {
			anx2details.setItems(gstrInvoiceDetails.getItems());
		}
		anx2DetailsList.add(anx2details);
		indGstrb2b.setDocs(anx2DetailsList);
		anx2B2BList.add(indGstrb2b);
		//individualInvoice.setAnx2b2b(anx2B2BList);
		//individualInvoice.setDe(anx2B2BList);
		if(invType.equalsIgnoreCase(MasterGSTConstants.B2B)) {
			individualInvoice.setAnx2b2b(anx2B2BList);
		}else if(invType.equalsIgnoreCase(MasterGSTConstants.DE)) {
			individualInvoice.setDe(anx2B2BList);
		}else if(invType.equalsIgnoreCase(MasterGSTConstants.SEZWP)) {
			individualInvoice.setSezwp(anx2B2BList);
		}else if(invType.equalsIgnoreCase(MasterGSTConstants.SEZWOP)) {
			individualInvoice.setSezwop(anx2B2BList);
		}  
		individualInvoice.setTotalamount(gstrInvoiceDetails.getDoc().getVal());
		Double totalTaxVal = 0d;
		Double totalTax = 0d;
		
		List<Item> items = Lists.newArrayList();
		for (AnxItems gstrItem : gstrInvoiceDetails.getItems()) {
			Item item = new Item();
			item.setTaxablevalue(gstrItem.getTxval());
			if (gstrInvoiceDetails.getItems().size() == 1) { //Fix for gstr2a invoice edit as purchase register 
				item.setTotal(gstrInvoiceDetails.getDoc().getVal());
			}
			totalTaxVal += gstrItem.getTxval();
			item.setRateperitem(gstrItem.getTxval());
			item.setQuantity(Double.parseDouble("1"));
			if (isNotEmpty(gstrItem.getRate())) {
				item.setRate(gstrItem.getRate());
			}
			if (isNotEmpty(gstrItem.getIgst())) {
				item.setIgstamount(gstrItem.getIgst());
				item.setIgstrate(gstrItem.getRate());
				totalTax += gstrItem.getIgst();
			}
			if (isNotEmpty(gstrItem.getCgst())) {
				item.setCgstamount(gstrItem.getCgst());
				item.setCgstrate(gstrItem.getRate() / 2);
				totalTax += gstrItem.getCgst();
			}
			if (isNotEmpty(gstrItem.getSgst())) {
				item.setCgstamount(gstrItem.getSgst());
				item.setCgstrate(gstrItem.getRate() / 2);
				totalTax += gstrItem.getSgst();
			}
			if (isNotEmpty(gstrItem.getCess())) {
				item.setCessamount(gstrItem.getCess());
			}
			
			items.add(item);
		}
		individualInvoice.setItems(items);
		individualInvoice.setTotaltaxableamount(totalTaxVal);
		individualInvoice.setTotaltax(totalTax);
		
		Double totalIGST = 0d;
		Double totalCGST = 0d;
		Double totalSGST = 0d;
		Double totalExempted = 0d;
		for (Item item : individualInvoice.getItems()) {
			if (isNotEmpty(item.getIgstamount())) {
				totalIGST += item.getIgstamount();
			}
			if (isNotEmpty(item.getCgstamount())) {
				totalCGST += item.getCgstamount();
			}
			if (isNotEmpty(item.getSgstamount())) {
				totalSGST += item.getSgstamount();
			}
			if (isNotEmpty(item.getExmepted())) {
				totalExempted += item.getExmepted();
			}
		}
		individualInvoice.setTotalIgstAmount(totalIGST);
		individualInvoice.setTotalCgstAmount(totalCGST);
		individualInvoice.setTotalSgstAmount(totalSGST);
		individualInvoice.setTotalExemptedAmount(totalExempted);
		individualInvoice = (Anx2) extrafields(individualInvoice,"Anx2");
		return individualInvoice;
	}
	
	@Override
	@Transactional
	public List<PurchaseRegister> getUnclaimedInvoices(final String clientId, final int month, final int year) {
		logger.debug(CLASSNAME + "getUnclaimedInvoices : Begin");
		Calendar cal = Calendar.getInstance();
		if(year <= 2018) {
			cal.set(2017, 6, 0, 23, 59, 59);
		} else {
			if(month > 3) {
				cal.set(year, 3, 0, 23, 59, 59);
			} else {
				cal.set(year - 1, 3, 0, 23, 59, 59);
			}
		}
		Date stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		Date endDate = new java.util.Date(cal.getTimeInMillis());
		List<String> invtype = Lists.newArrayList();
		invtype.add(MasterGSTConstants.ADVANCES);
		invtype.add(MasterGSTConstants.ATPAID);
		invtype.add(MasterGSTConstants.ITC_REVERSAL);
		invtype.add(MasterGSTConstants.NIL);
		return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndInvtypeNotInAndItems_ElgIsNull(clientId,
				stDate, endDate, invtype);
	}
	
	@Override
	@Transactional
	public void syncInvoiceData(final Client client, final String returnType, String userid, final String usertype,
			final int month, final int year) {
		logger.debug(CLASSNAME + "syncInvoiceData : Begin");
		logger.debug(CLASSNAME + "syncInvoiceData : returnType {}", returnType);
		logger.debug(CLASSNAME + "syncInvoiceData : month {}", month);
		logger.debug(CLASSNAME + "syncInvoiceData : year {}", year);
		String strMonth = month < 10 ? "0" + month : month + "";
		String status = null;
		String dwndstatus_gstr1="NODATA_FOUND";
		ClientStatus clientStatus = getClientStatus(client.getId().toString(), returnType, strMonth + year);
		if (isEmpty(clientStatus) || isNotEmpty(userid)) {
			Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), strMonth + year, userid,
					returnType, false);
			if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
					&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
				if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
					for (TrackResponse trackResponse : response.getData().getStatusList()) {
						status = trackResponse.getStatus();
						client.setStatus(status);
						if(isEmpty(clientStatus)) {
							clientStatus = new ClientStatus();
							clientStatus.setClientId(client.getId().toString());
							clientStatus.setReturnPeriod(trackResponse.getRetPeriod());
							clientStatus.setReturnType(trackResponse.getRtntype());
						}
						clientStatus.setArn(trackResponse.getArn());
						clientStatus.setStatus(trackResponse.getStatus());
						if(isNotEmpty(trackResponse.getDof())) {
							SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
							try {
								clientStatus.setDof(dateFormat.parse(trackResponse.getDof()));
								saveClientStatus(clientStatus);
							} catch (ParseException e) {
							}
						}
					}
				}
			}
		}
		if(isEmpty(userid)) {
			List<ClientUserMapping> mappings = clientUserMappingRepository.findByClientid(client.getId().toString());
			if(isNotEmpty(mappings)) {
				userid = mappings.get(0).getUserid();
			}
		}
		//TODO : Add applicable inv types
		String[] invTypes = { B2B, B2C, B2CL, CREDIT_DEBIT_NOTES, EXPORTS, ADVANCES, ATPAID, CDNUR, NIL, B2BA, B2CSA,
				B2CLA, CDNA, CDNURA, ATA, EXPA, TXPA };
		if(returnType.equals(GSTR4)) {
			invTypes = Arrays
					.asList(B2B, B2BUR, CREDIT_DEBIT_NOTES, CDNUR, ADVANCES, ATPAID, MasterGSTConstants.IMP_SERVICES)
					.toArray(new String[0]);
		}
		for(String invType : invTypes) {
			try {
				InvoiceParent invoice = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(), month, year, returnType, invType, null, userid, true);
				if(isNotEmpty(invoice)) {
					processGSTRData(invoice, client, status, returnType, invType, userid, usertype, month, year);
					dwndstatus_gstr1="DATA_FOUND";
				}
			} catch(MasterGSTException e) {
				logger.debug(CLASSNAME + "syncInvoiceData : ERROR", e);
			}
		}
		String retPeriod = strMonth + year;
		List<GSTR1DownloadStatus> gstr1DownloadStatus = gstr1DowloadService.getGSTR1DownloadStatus(userid,
				client.getId().toString(), retPeriod);
		gstr1DowloadService.deleteGSTR1DownloadStatus(gstr1DownloadStatus);
			GSTR1DownloadStatus dwnldstatus = new GSTR1DownloadStatus();
			dwnldstatus.setUserid(userid);
			dwnldstatus.setClientid(client.getId().toString());
			dwnldstatus.setReturnperiod(retPeriod);
			dwnldstatus.setStatus("DOWNLOAD");
			dwnldstatus.setFinancialyear(year + "");
			dwnldstatus.setCurrrentmonth(strMonth);
			if("DATA_FOUND".equals(dwndstatus_gstr1)) {
				dwnldstatus.setInvoicedata("invoices available");
			}else {
				dwnldstatus.setInvoicedata("invoices not available");
			}
			gstr1DowloadService.savedownloadstatus(dwnldstatus);
		
		
		logger.debug(CLASSNAME + "syncInvoiceData : End");
	}
	
	public void processAnx2Data(AnxInvoiceSupport invoice, final Client client, String returnType,
			String invType, String userid, final int month, final int year) {
		logger.debug(CLASSNAME + "processAnx2Data : Begin");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		List<String> receivedInvIds = Lists.newArrayList();
		List<String> receivedInvIdss = Lists.newArrayList();
		String strMonth = month < 10 ? "0" + month : month + "";
	
			if (invType.equals(MasterGSTConstants.B2B)) {
				if (isNotEmpty(invoice.getAnx2b2b())) {
					for (Anx2Docs anxb2b : invoice.getAnx2b2b()) {
							if(isNotEmpty(anxb2b.getDocs())) {
								for (Anx2Details gstrInvoiceDetails : anxb2b.getDocs()) {
									String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
									
										if(isNotEmpty(anxb2b.getCtin())) {
											String ctin = anxb2b.getCtin();
											invNoCtin = invNoCtin+ctin;
										}
										if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
											//String idate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
											invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
										}
									receivedInvIdss.add(invNoCtin);
									receivedInvIds.add(gstrInvoiceDetails.getDoc().getNum());
								}
							}
				}
			} 
		}else if(invType.equals(MasterGSTConstants.DE)) {
			if (isNotEmpty(invoice.getDe())) {
				for (Anx2Docs anxb2b : invoice.getDe()) {
						if(isNotEmpty(anxb2b.getDocs())) {
							for (Anx2Details gstrInvoiceDetails : anxb2b.getDocs()) {
								String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
								
									if(isNotEmpty(anxb2b.getCtin())) {
										String ctin = anxb2b.getCtin();
										invNoCtin = invNoCtin+ctin;
									}
									if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
										//String idate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
										invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
									}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getDoc().getNum());
							}
						}
			}
		} 
		}else if(invType.equals(MasterGSTConstants.SEZWP)) {
			if (isNotEmpty(invoice.getSezwp())) {
				for (Anx2Docs anxb2b : invoice.getSezwp()) {
						if(isNotEmpty(anxb2b.getDocs())) {
							for (Anx2Details gstrInvoiceDetails : anxb2b.getDocs()) {
								String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
								
									if(isNotEmpty(anxb2b.getCtin())) {
										String ctin = anxb2b.getCtin();
										invNoCtin = invNoCtin+ctin;
									}
									if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
										//String idate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
										invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
									}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getDoc().getNum());
							}
						}
			}
		} 
		}else if(invType.equals(MasterGSTConstants.SEZWOP)) {
			if (isNotEmpty(invoice.getSezwop())) {
				for (Anx2Docs anxb2b : invoice.getSezwop()) {
						if(isNotEmpty(anxb2b.getDocs())) {
							for (Anx2Details gstrInvoiceDetails : anxb2b.getDocs()) {
								String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
								
									if(isNotEmpty(anxb2b.getCtin())) {
										String ctin = anxb2b.getCtin();
										invNoCtin = invNoCtin+ctin;
									}
									if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
										//String idate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
										invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
									}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getDoc().getNum());
							}
						}
			}
		} 
		}
		if(isNotEmpty(receivedInvIds)) {
			List<Anx2> existingRecords = anx2Repository.findByClientidAndInvoicenoIn(client.getId().toString(),receivedInvIds);
			if(isNotEmpty(existingRecords)) {
				List<String> availableInvoices = Lists.newArrayList();
				List<String> availableInvoicess = Lists.newArrayList();
				for(Anx2 anx2 : existingRecords) {
					if (anx2.getInvtype().equals(B2B)) {
						if (isNotEmpty(anx2.getAnx2b2b())) {
							for (Anx2Docs gstrb2b : anx2.getAnx2b2b()) {
								if(isNotEmpty(gstrb2b.getDocs())) {
									for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
										String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
										
											if(isNotEmpty(gstrb2b.getCtin())) {
												String ctin = gstrb2b.getCtin();
												invNoCtin = invNoCtin+ctin;
											}
											if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
												//String idate1 = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
												invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
											}
											availableInvoicess.add(invNoCtin);
									}
								}
								availableInvoices.add(anx2.getInvoiceno());
							}
						
						}
					}else if (anx2.getInvtype().equals(MasterGSTConstants.DE)) {
						if (isNotEmpty(anx2.getDe())) {
							for (Anx2Docs gstrb2b : anx2.getDe()) {
								if(isNotEmpty(gstrb2b.getDocs())) {
									for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
										String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
										
											if(isNotEmpty(gstrb2b.getCtin())) {
												String ctin = gstrb2b.getCtin();
												invNoCtin = invNoCtin+ctin;
											}
											if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
												//String idate1 = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
												invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
											}
											availableInvoicess.add(invNoCtin);
									}
								}
								availableInvoices.add(anx2.getInvoiceno());
							}
							
						}
					}else if (anx2.getInvtype().equals(MasterGSTConstants.SEZWP)) {
						if (isNotEmpty(anx2.getSezwp())) {
							for (Anx2Docs gstrb2b : anx2.getSezwp()) {
								if(isNotEmpty(gstrb2b.getDocs())) {
									for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
										String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
										
											if(isNotEmpty(gstrb2b.getCtin())) {
												String ctin = gstrb2b.getCtin();
												invNoCtin = invNoCtin+ctin;
											}
											if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
												//String idate1 = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
												invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
											}
											availableInvoicess.add(invNoCtin);
									}
								}
								availableInvoices.add(anx2.getInvoiceno());
							}
							
						}
					}else if (anx2.getInvtype().equals(MasterGSTConstants.SEZWOP)) {
						if (isNotEmpty(anx2.getSezwop())) {
							for (Anx2Docs gstrb2b : anx2.getSezwop()) {
								if(isNotEmpty(gstrb2b.getDocs())) {
									for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
										String invNoCtin = gstrInvoiceDetails.getDoc().getNum();
										
											if(isNotEmpty(gstrb2b.getCtin())) {
												String ctin = gstrb2b.getCtin();
												invNoCtin = invNoCtin+ctin;
											}
											if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
												//String idate1 = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
												invNoCtin = invNoCtin+gstrInvoiceDetails.getDoc().getDt();
											}
											availableInvoicess.add(invNoCtin);
									}
								}
								availableInvoices.add(anx2.getInvoiceno());
							}
							
						}
					}        
				}
				anx2Repository.save(existingRecords);
				receivedInvIdss.removeAll(availableInvoicess);
				receivedInvIds.removeAll(availableInvoices);
			}
		}
		if(isNotEmpty(receivedInvIdss)) {
		List<Anx2> newRecords = Lists.newArrayList(); 
		List<GSTR2> newRecords1 = Lists.newArrayList(); 
		if(isNotEmpty(invoice)) {
			 if (isNotEmpty(invoice.getAnx2b2b()) && invType.equals(MasterGSTConstants.B2B)) {
				for (Anx2Docs gstrb2b : invoice.getAnx2b2b()) {
					if(isNotEmpty(gstrb2b.getDocs())) {
						Map<String, ResponseData> gstnMap = Maps.newHashMap();
						for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
							String dwnldInvNoCtin = "";
							if(isNotEmpty(gstrInvoiceDetails.getDoc().getNum())){
								dwnldInvNoCtin = gstrInvoiceDetails.getDoc().getNum();
							}
							// && gstnMap.containsKey(gstrb2b.getCtin()
							if(isNotEmpty(gstrb2b.getCtin())) {
								String dwnldctin = gstrb2b.getCtin();
								dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
							}
							if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
								//String dwnlddate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
								dwnldInvNoCtin = dwnldInvNoCtin+gstrInvoiceDetails.getDoc().getDt();
							}
							
						
								Anx2 newInvoice = null;
								try {
									newInvoice = populateAnx2(gstrInvoiceDetails, null, null, userid, client.getId().toString(), MasterGSTConstants.B2B, gstrb2b.getCtin(), null);
								} catch (ParseException e) {
									e.printStackTrace();
								}
									if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
										newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
									}
							
								if(isNotEmpty(gstrb2b.getCtin())){
									String gstnno = gstrb2b.getCtin();
									gstnno = gstnno.substring(0,2);
									for(StateConfig stateConfig : configService.getStates()) {
										if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
											if(isNotEmpty(stateConfig.getName())) {
												//newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
								}
								if (isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
									if(isNotEmpty(gstnMap.get(gstrb2b.getCtin()).getTradeNam())) {
										//newInvoice.setBilledtoname(gstnMap.get(gstrb2b.getCtin()).getTradeNam());
									}
								}
								newRecords.add(newInvoice);
								//newRecords1.add(newInvoice1);
							}
						}
					}
				}else  if (isNotEmpty(invoice.getDe()) && invType.equals(MasterGSTConstants.DE)) {
					for (Anx2Docs gstrb2b : invoice.getDe()) {
						if(isNotEmpty(gstrb2b.getDocs())) {
							for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
								String dwnldInvNoCtin = "";
								if(isNotEmpty(gstrInvoiceDetails.getDoc().getNum())){
									dwnldInvNoCtin = gstrInvoiceDetails.getDoc().getNum();
								}
								// && gstnMap.containsKey(gstrb2b.getCtin()
								if(isNotEmpty(gstrb2b.getCtin())) {
									String dwnldctin = gstrb2b.getCtin();
									dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
									//String dwnlddate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
									dwnldInvNoCtin = dwnldInvNoCtin+gstrInvoiceDetails.getDoc().getDt();
								}
								
								Anx2 deInvoice = null;
								try {
									deInvoice = populateAnx2(gstrInvoiceDetails, null, null, userid, client.getId().toString(), MasterGSTConstants.DE, gstrb2b.getCtin(), null);
								} catch (ParseException e) {
									e.printStackTrace();
								}
								
								newRecords.add(deInvoice);
							}	
							
							
						}
					}
				}else  if (isNotEmpty(invoice.getSezwp()) && invType.equals(MasterGSTConstants.SEZWP)) {
					for (Anx2Docs gstrb2b : invoice.getSezwp()) {
						if(isNotEmpty(gstrb2b.getDocs())) {
							for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
								String dwnldInvNoCtin = "";
								if(isNotEmpty(gstrInvoiceDetails.getDoc().getNum())){
									dwnldInvNoCtin = gstrInvoiceDetails.getDoc().getNum();
								}
								// && gstnMap.containsKey(gstrb2b.getCtin()
								if(isNotEmpty(gstrb2b.getCtin())) {
									String dwnldctin = gstrb2b.getCtin();
									dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
									//String dwnlddate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
									dwnldInvNoCtin = dwnldInvNoCtin+gstrInvoiceDetails.getDoc().getDt();
								}
								
								Anx2 deInvoice = null;
								try {
									deInvoice = populateAnx2(gstrInvoiceDetails, null, null, userid, client.getId().toString(), MasterGSTConstants.SEZWP, gstrb2b.getCtin(), null);
								} catch (ParseException e) {
									e.printStackTrace();
								}
								
								newRecords.add(deInvoice);
							}	
							
							
						}
					}
				}else  if (isNotEmpty(invoice.getSezwop()) && invType.equals(MasterGSTConstants.SEZWOP)) {
					for (Anx2Docs gstrb2b : invoice.getSezwop()) {
						if(isNotEmpty(gstrb2b.getDocs())) {
							for (Anx2Details gstrInvoiceDetails : gstrb2b.getDocs()) {
								String dwnldInvNoCtin = "";
								if(isNotEmpty(gstrInvoiceDetails.getDoc().getNum())){
									dwnldInvNoCtin = gstrInvoiceDetails.getDoc().getNum();
								}
								// && gstnMap.containsKey(gstrb2b.getCtin()
								if(isNotEmpty(gstrb2b.getCtin())) {
									String dwnldctin = gstrb2b.getCtin();
									dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getDoc().getDt())) {
									//String dwnlddate = simpleDateFormat.format(gstrInvoiceDetails.getDoc().getDt());
									dwnldInvNoCtin = dwnldInvNoCtin+gstrInvoiceDetails.getDoc().getDt();
								}
								
								Anx2 deInvoice = null;
								try {
									deInvoice = populateAnx2(gstrInvoiceDetails, null, null, userid, client.getId().toString(), MasterGSTConstants.SEZWOP, gstrb2b.getCtin(), null);
								} catch (ParseException e) {
									e.printStackTrace();
								}
								
								newRecords.add(deInvoice);
							}	
							
							
						}
					}
				}
			 
			}
		if(isNotEmpty(newRecords)) {
			anx2Repository.save(newRecords);
		}
		gstr2Repository.save(newRecords1);
	}
}

	
	
	public void processGSTRData(InvoiceParent invoice, final Client client, String status, String returnType,
			String invType, String userid, final String usertype, final int month, final int year) {
		logger.debug(CLASSNAME + "processGSTRData : Begin");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		List<String> receivedInvIds = Lists.newArrayList();
		List<String> receivedInvIdss = Lists.newArrayList();
		String strMonth = month < 10 ? "0" + month : month + "";
		if (invType.equals(B2B)) {
			if (isNotEmpty(invoice.getB2b())) {
				for (GSTRB2B gstrb2b : invoice.getB2b()) {
					if(isNotEmpty(gstrb2b.getInv())) {
						for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
							
							String invNoCtin = gstrInvoiceDetails.getInum();
							
								if(isNotEmpty(gstrb2b.getCtin())) {
									String ctin = gstrb2b.getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
									String idt = gstrInvoiceDetails.getIdt();
									invNoCtin = invNoCtin+idt;
								}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrInvoiceDetails.getInum());
						}
					}
				}
			}
		}else if (invType.equals(MasterGSTConstants.B2BA)) {
			if (isNotEmpty(((GSTR1) invoice).getB2ba())) {
				for (GSTRB2B gstrb2b : ((GSTR1) invoice).getB2ba()) {
					if(isNotEmpty(gstrb2b.getInv())) {
						for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
							String invNoCtin = gstrInvoiceDetails.getInum();
								if(isNotEmpty(gstrb2b.getCtin())) {
									String ctin = gstrb2b.getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
									String idt = gstrInvoiceDetails.getIdt();
									invNoCtin = invNoCtin+idt;
								}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrInvoiceDetails.getInum());
						}
					}
				}
			}
		}else if (invType.equals(CREDIT_DEBIT_NOTES)) {
			if(returnType.equals(GSTR1)) {
				if (isNotEmpty(((GSTR1)invoice).getCdnr())) {
					for (GSTRCreditDebitNotes gstrcdn : ((GSTR1)invoice).getCdnr()) {
						if(isNotEmpty(gstrcdn.getNt())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
								
								String invNoCtin = gstrInvoiceDetails.getNtNum();
								
								if(isNotEmpty(gstrcdn.getCtin())) {
									String ctin = gstrcdn.getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
									String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
									invNoCtin = invNoCtin+idt;
								}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getNtNum());
							}
						}
					}
				}
			} else if(returnType.equals(GSTR1A)) {
				if (isNotEmpty(((GSTR1A)invoice).getCdnr())) {
					for (GSTRCreditDebitNotes gstrcdn : ((GSTR1A)invoice).getCdnr()) {
						if(isNotEmpty(gstrcdn.getNt())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
								String invNoCtin = gstrInvoiceDetails.getNtNum();
								
								if(isNotEmpty(gstrcdn.getCtin())) {
									String ctin = gstrcdn.getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
									String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
									invNoCtin = invNoCtin+idt;
								}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getNtNum());
							}
						}
					}
				}
			
			} else {
				if (isNotEmpty(invoice.getCdn())) {
					for (GSTRCreditDebitNotes gstrcdn : invoice.getCdn()) {
						if(isNotEmpty(gstrcdn.getNt())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
								String invNoCtin = gstrInvoiceDetails.getNtNum();
								
								if(isNotEmpty(gstrcdn.getCtin())) {
									String ctin = gstrcdn.getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
									String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
									invNoCtin = invNoCtin+idt;
								}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getNtNum());
							}
						}
					}
				}
			}
		}else if (invType.equals(MasterGSTConstants.CDNA)) {
			if(returnType.equals(GSTR1)) {
				if (isNotEmpty(((GSTR1)invoice).getCdnra())) {
					for (GSTRCreditDebitNotes gstrcdn : ((GSTR1)invoice).getCdnra()) {
						if(isNotEmpty(gstrcdn.getNt())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
								String invNoCtin = gstrInvoiceDetails.getNtNum();
								if(isNotEmpty(gstrcdn.getCtin())) {
									String ctin = gstrcdn.getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
									String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
									invNoCtin = invNoCtin+idt;
								}
								receivedInvIdss.add(invNoCtin);
								receivedInvIds.add(gstrInvoiceDetails.getNtNum());
							}
						}
					}
				}
			}
		}else if (invType.equals(B2C) || invType.equals(MasterGSTConstants.B2CSA)){
			if (isNotEmpty(invoice.getB2cs())){
				for(GSTRB2CS gstrb2cs : invoice.getB2cs()){
					if (isNotEmpty(gstrb2cs.getPos()) && isNotEmpty(gstrb2cs.getSplyTy())){
						receivedInvIdss.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
						receivedInvIds.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
					}
				}
			}else if (isNotEmpty(((GSTR1)invoice).getB2csa())){
				for(GSTRB2CSA gstrb2cs : ((GSTR1)invoice).getB2csa()){
					if (isNotEmpty(gstrb2cs.getPos()) && isNotEmpty(gstrb2cs.getSplyTy())){
						receivedInvIdss.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
						receivedInvIds.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
					}
				}
			}
		} else if (invType.equals(B2CL)){
			if (isNotEmpty(invoice.getB2cl())){
				for(GSTRB2CL gstrb2cl : invoice.getB2cl()){
					if (isNotEmpty(gstrb2cl.getInv())){
						for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2cl.getInv()) {
							String invNoCtin = gstrInvoiceDetails.getInum();
							if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
								String idt = gstrInvoiceDetails.getIdt();
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrInvoiceDetails.getInum());
						}
					}
				}
			}
		}else if (invType.equals(MasterGSTConstants.B2CLA)){
			if (isNotEmpty(((GSTR1) invoice).getB2cla())){
				for(GSTRB2CL gstrb2cl : ((GSTR1) invoice).getB2cla()){
					if (isNotEmpty(gstrb2cl.getInv())){
						for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2cl.getInv()) {
							String invNoCtin = gstrInvoiceDetails.getInum();
							if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
								String idt = gstrInvoiceDetails.getIdt();
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrInvoiceDetails.getInum());
						}
					}
				}
			}
		}else if (invType.equals(EXPORTS)){
			if (isNotEmpty(invoice.getExp())){
				for(GSTRExports gstrexp : invoice.getExp()){
					if (isNotEmpty(gstrexp.getInv())){
						for (GSTRExportDetails gstrExportDetails : gstrexp.getInv()){
							
							String invNoCtin = gstrExportDetails.getInum();
							if(isNotEmpty(gstrExportDetails.getIdt())) {
								String idt = simpleDateFormat.format(gstrExportDetails.getIdt());
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrExportDetails.getInum());
						}
					}
				}
			}
			
		}else if (invType.equals(MasterGSTConstants.EXPA)){
			if (isNotEmpty(((GSTR1) invoice).getExpa())){
				for(GSTRExports gstrexp : ((GSTR1) invoice).getExpa()){
					if (isNotEmpty(gstrexp.getInv())){
						for (GSTRExportDetails gstrExportDetails : gstrexp.getInv()){
							String invNoCtin = gstrExportDetails.getInum();
							if(isNotEmpty(gstrExportDetails.getIdt())) {
								String idt = simpleDateFormat.format(gstrExportDetails.getIdt());
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrExportDetails.getInum());
						}
					}
				}
			}
		}else if (invType.equals(ADVANCES)){
			if(returnType.equals(GSTR1)) {
				if (isNotEmpty(((GSTR1)invoice).getAt())){
					for (GSTRAdvanceTax gstradvtax : ((GSTR1)invoice).getAt()){
						if (isNotEmpty(gstradvtax.getPos()) && isNotEmpty(gstradvtax.getSplyTy())){
							receivedInvIdss.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
							receivedInvIds.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
						}
					}
				}
			}
		}else if (invType.equals(ATA)){
			if(returnType.equals(GSTR1)) {
				if (isNotEmpty(((GSTR1)invoice).getAta())){
					for (GSTRAdvanceTax gstradvtax : ((GSTR1)invoice).getAta()){
						if (isNotEmpty(gstradvtax.getPos()) && isNotEmpty(gstradvtax.getSplyTy())){
							receivedInvIdss.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
							receivedInvIds.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
						}
					}
				}
			}
		}else if( invType.equals(ATPAID)) {
			if(returnType.equals(GSTR1)) {
				if (isNotEmpty(invoice.getTxpd())){
					for (GSTRAdvanceTax gstradvtax : invoice.getTxpd()){
						if (isNotEmpty(gstradvtax.getPos()) && isNotEmpty(gstradvtax.getSplyTy())){
							receivedInvIdss.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
							receivedInvIds.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
						}
					}
				}
			}
		}else if(invType.equals(MasterGSTConstants.TXPA)) {
			if(returnType.equals(GSTR1)) {
				if (isNotEmpty(invoice.getTxpda())){
					for (GSTRAdvanceTax gstradvtax : invoice.getTxpda()){
						if (isNotEmpty(gstradvtax.getPos()) && isNotEmpty(gstradvtax.getSplyTy())){
							receivedInvIdss.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
							receivedInvIds.add(gstradvtax.getPos()+gstradvtax.getSplyTy());
						}
					}
				}
			}
		}else if (invType.equals(CDNUR)){
			if(returnType.equals(GSTR1)){
				if(isNotEmpty(((GSTR1)invoice).getCdnur())){
					for (GSTRInvoiceDetails gstrcdnur : ((GSTR1)invoice).getCdnur()){
						if(isNotEmpty(gstrcdnur.getNtNum())){
							
							String invNoCtin = gstrcdnur.getNtNum();
							
							if(isNotEmpty(gstrcdnur.getNtDt())) {
								String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrcdnur.getNtNum());
						}
					}
				}
			} else {
				if (isNotEmpty(invoice.getCdnur())){
					for (GSTRInvoiceDetails gstrcdnur : invoice.getCdnur()){
						if (isNotEmpty(gstrcdnur.getNtNum())){
							String invNoCtin = gstrcdnur.getNtNum();
							
							if(isNotEmpty(gstrcdnur.getNtDt())) {
								String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrcdnur.getNtNum());
						}
					}
				}
			}
		}else if (invType.equals(MasterGSTConstants.CDNURA)){
			if(returnType.equals(GSTR1)){
				if(isNotEmpty(((GSTR1)invoice).getCdnura())){
					for (GSTRInvoiceDetails gstrcdnur : ((GSTR1)invoice).getCdnura()){
						if(isNotEmpty(gstrcdnur.getNtNum())){
							String invNoCtin = gstrcdnur.getNtNum();
							if(isNotEmpty(gstrcdnur.getNtDt())) {
								String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
								invNoCtin = invNoCtin+idt;
							}
							receivedInvIdss.add(invNoCtin);
							receivedInvIds.add(gstrcdnur.getNtNum());
						}
					}
				}
			}
		}else if(invType.equals(NIL)) {
			if (isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getInv())) {
				for(GSTRNilItems gstrnil : invoice.getNil().getInv()) {
					if (isNotEmpty(gstrnil.getSplyType())) {
						receivedInvIdss.add(gstrnil.getSplyType());
						receivedInvIds.add(gstrnil.getSplyType());
					}
				}
			}
		}//TODO : Add for remaining inv types
		if(isNotEmpty(receivedInvIds)) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				//String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 0, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year, 9, 0, 23, 59, 59);
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if(month == 1 || month == 2 || month == 3) {
					cal.set(year, 3, 0, 23, 59, 59);
				} else if(month == 4 || month == 5 || month == 6) {
					cal.set(year, 6, 0, 23, 59, 59);
				} else if(month == 7 || month == 8 || month == 9) {
					cal.set(year, 9, 0, 23, 59, 59);
				} else if(month == 10 || month == 11 || month == 12) {
					cal.set(year + 1, 0, 0, 23, 59, 59);
				}
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, month - 1, 0, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
			if(returnType.equals(GSTR1)) {
				String fp = strMonth + year;
				/*
				 * Get GSTR1 Invoice Based on Client Id & ReceivedInvoices
				 */
				List<GSTR1> existingRecords = gstr1Repository.findByClientidAndInvoicenoInAndInvtype(client.getId().toString(), receivedInvIds,invType);
				//List<GSTR1> existingRecords = gstr1Repository.findByClientidAndInvoicenoIn(client.getId().toString(), receivedInvIds);
				/*
				 * Get GSTR1 Invoice Based on Client Id & ReceivedInvoices & Month & Year
				 */
				// List<GSTR1> existingRecords = gstr1Repository.findByClientidAndInvoicenoInAndDateofinvoiceBetween(client.getId().toString(), receivedInvIds, stDate, endDate);
				if(isNotEmpty(existingRecords)) {
					List<String> availableInvoices = Lists.newArrayList();
					List<String> availableInvoicess = Lists.newArrayList();
					for(GSTR1 gstr1 : existingRecords) {
						gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
						if(isNotEmpty(status)) {
							gstr1.setGstStatus(status);
							fp = gstr1.getFp();
						}else {
							if(isEmpty(gstr1.getGstStatus())) {
								gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
							}
						}
						
						if (gstr1.getInvtype().equals(B2B)) {
							if (isNotEmpty(gstr1.getB2b())) {
								for (GSTRB2B gstrb2b : gstr1.getB2b()) {
									if(isNotEmpty(gstrb2b.getInv())) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
											String invNoCtin = gstrInvoiceDetails.getInum();
											
												if(isNotEmpty(gstrb2b.getCtin())) {
													String ctin = gstrb2b.getCtin();
													invNoCtin = invNoCtin+ctin;
												}
												if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
													String idt = gstrInvoiceDetails.getIdt();
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
										}
									}
								}
							}
						}else if (gstr1.getInvtype().equals(MasterGSTConstants.B2BA)) {
							if (isNotEmpty(gstr1.getB2ba())) {
								for (GSTRB2B gstrb2b : gstr1.getB2ba()) {
									if(isNotEmpty(gstrb2b.getInv())) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
											String invNoCtin = gstrInvoiceDetails.getInum();
												if(isNotEmpty(gstrb2b.getCtin())) {
													String ctin = gstrb2b.getCtin();
													invNoCtin = invNoCtin+ctin;
												}
												if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
													String idt = gstrInvoiceDetails.getIdt();
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
										}
									}
								}
							}
						}else if (gstr1.getInvtype().equals(CREDIT_DEBIT_NOTES)) {
								if (isNotEmpty(gstr1.getCdnr())) {
									for (GSTRCreditDebitNotes gstrcdn : gstr1.getCdnr()) {
										if(isNotEmpty(gstrcdn.getNt())) {
											for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
												
												String invNoCtin = gstrInvoiceDetails.getNtNum();
												
												if(isNotEmpty(gstrcdn.getCtin())) {
													String ctin = gstrcdn.getCtin();
													invNoCtin = invNoCtin+ctin;
												}
												if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
													String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}
								}
						}else if (gstr1.getInvtype().equals(MasterGSTConstants.CDNA)) {
							if (isNotEmpty(gstr1.getCdnra())) {
								for (GSTRCreditDebitNotes gstrcdn : gstr1.getCdnra()) {
									if(isNotEmpty(gstrcdn.getNt())) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
											String invNoCtin = gstrInvoiceDetails.getNtNum();
											if(isNotEmpty(gstrcdn.getCtin())) {
												String ctin = gstrcdn.getCtin();
												invNoCtin = invNoCtin+ctin;
											}
											if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
												String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
												invNoCtin = invNoCtin+idt;
											}
											availableInvoicess.add(invNoCtin);
										}
									}
								}
							}
					}else if (gstr1.getInvtype().equals(B2CL) || gstr1.getInvtype().equals(MasterGSTConstants.B2CLA)) {
								if (isNotEmpty(gstr1.getB2cl())){
									for(GSTRB2CL gstrb2cl : gstr1.getB2cl()){
										if (isNotEmpty(gstrb2cl.getInv())){
											for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2cl.getInv()) {
												String invNoCtin = gstrInvoiceDetails.getInum();
												if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
													String idt = gstrInvoiceDetails.getIdt();
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}
								}else if (isNotEmpty(gstr1.getB2cla())){
									for(GSTRB2CL gstrb2cl : gstr1.getB2cla()){
										if (isNotEmpty(gstrb2cl.getInv())){
											for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2cl.getInv()) {
												String invNoCtin = gstrInvoiceDetails.getInum();
												if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
													String idt = gstrInvoiceDetails.getIdt();
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}
								}
						} else if (gstr1.getInvtype().equals(EXPORTS)
								|| gstr1.getInvtype().equals(MasterGSTConstants.EXPA)) {
								if (isNotEmpty(gstr1.getExp())){
									for(GSTRExports gstrexp : gstr1.getExp()){
										if (isNotEmpty(gstrexp.getInv())){
											for (GSTRExportDetails gstrExportDetails : gstrexp.getInv()){
												String invNoCtin = gstrExportDetails.getInum();
												if(isNotEmpty(gstrExportDetails.getIdt())) {
													String idt = simpleDateFormat.format(gstrExportDetails.getIdt());
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}
								}else if (isNotEmpty(gstr1.getExpa())){
									for(GSTRExports gstrexp : gstr1.getExpa()){
										if (isNotEmpty(gstrexp.getInv())){
											for (GSTRExportDetails gstrExportDetails : gstrexp.getInv()){
												String invNoCtin = gstrExportDetails.getInum();
												if(isNotEmpty(gstrExportDetails.getIdt())) {
													String idt = simpleDateFormat.format(gstrExportDetails.getIdt());
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}
								}
						} else if (gstr1.getInvtype().equals(CDNUR)
								|| gstr1.getInvtype().equals(MasterGSTConstants.CDNURA)) {
									if(isNotEmpty(gstr1.getCdnur())){
										for (GSTRInvoiceDetails gstrcdnur : gstr1.getCdnur()){
											if(isNotEmpty(gstrcdnur.getNtNum())){
												
												String invNoCtin = gstrcdnur.getNtNum();
												
												if(isNotEmpty(gstrcdnur.getNtDt())) {
													String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}else if(isNotEmpty(gstr1.getCdnura())){
										for (GSTRInvoiceDetails gstrcdnur : gstr1.getCdnura()){
											if(isNotEmpty(gstrcdnur.getNtNum())){
												
												String invNoCtin = gstrcdnur.getNtNum();
												
												if(isNotEmpty(gstrcdnur.getNtDt())) {
													String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
													invNoCtin = invNoCtin+idt;
												}
												availableInvoicess.add(invNoCtin);
											}
										}
									}
								}
						availableInvoices.add(gstr1.getInvoiceno());
					}
					gstr1Repository.save(existingRecords);
					receivedInvIdss.removeAll(availableInvoicess);
					receivedInvIds.removeAll(availableInvoices);
				}
				if(invType.equals(B2C) || invType.equals(MasterGSTConstants.B2CSA)) {
					if(invType.equals(MasterGSTConstants.B2CSA)) {
						existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, B2CSA);						
					}else {
						existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, B2C);
					}
					if(isNotEmpty(existingRecords)) {
						List<String> availableInvoices = Lists.newArrayList();
						List<String> availableInvoicess = Lists.newArrayList();
						for(GSTR1 gstr1 : existingRecords) {
							gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
							if(isNotEmpty(status)) {
								gstr1.setGstStatus(status);
							}else {
								if(isEmpty(gstr1.getGstStatus())) {
									gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
								}
							}
							
							if(isEmpty(gstr1.getDateofinvoice())) {
								if(isNotEmpty(gstr1.getFp())) {
									try {
										int iMonth = Integer.parseInt(gstr1.getFp().substring(0, 2));
										int iYear = Integer.parseInt(gstr1.getFp().substring(2));
										cal.set(iYear, iMonth-1, 1);
										gstr1.setDateofinvoice(cal.getTime());
									} catch (Exception e) {
									}
								} else {
									cal.set(year, month-1, 1);
									gstr1.setDateofinvoice(cal.getTime());
								}
							}
							if (isNotEmpty(gstr1.getB2cs())) {
								for(GSTRB2CS gstrb2cs : gstr1.getB2cs()) {
									if (isNotEmpty(gstrb2cs.getPos()) && isNotEmpty(gstrb2cs.getSplyTy())) {
										availableInvoices.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
										availableInvoicess.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
									}
								}
							}else if (isNotEmpty(gstr1.getB2csa())) {
								for(GSTRB2CSA gstrb2cs : gstr1.getB2csa()) {
									if (isNotEmpty(gstrb2cs.getPos()) && isNotEmpty(gstrb2cs.getSplyTy())) {
										availableInvoices.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
										availableInvoicess.add(gstrb2cs.getPos()+gstrb2cs.getSplyTy());
									}
								}
							}
						}
						gstr1Repository.save(existingRecords);
						receivedInvIds.removeAll(availableInvoices);
						receivedInvIdss.removeAll(availableInvoicess);
					}
				}
				if(invType.equals(NIL)){
					existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, NIL);
					if(isNotEmpty(existingRecords)) {
						List<String> availableInvoices = Lists.newArrayList();
						List<String> availableInvoicess = Lists.newArrayList();
						for(GSTR1 gstr1 : existingRecords) {
							gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
							if(isNotEmpty(status)) {
								gstr1.setGstStatus(status);
							}else {
								if(isEmpty(gstr1.getGstStatus())) {
									gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
								}
							}
							if(isEmpty(gstr1.getDateofinvoice())) {
								if(isNotEmpty(gstr1.getFp())) {
									try {
										int iMonth = Integer.parseInt(gstr1.getFp().substring(0, 2));
										int iYear = Integer.parseInt(gstr1.getFp().substring(2));
										cal.set(iYear, iMonth-1, 1);
										gstr1.setDateofinvoice(cal.getTime());
									} catch (Exception e) {
									}
								} else {
									cal.set(year, month-1, 1);
									gstr1.setDateofinvoice(cal.getTime());
								}
							}
							if (isNotEmpty(gstr1.getNil()) && isNotEmpty(gstr1.getNil().getInv())) {
								for(GSTRNilItems gstrnil : gstr1.getNil().getInv()) {
									if (isNotEmpty(gstrnil.getSplyType())) {
										availableInvoices.add(gstrnil.getSplyType());
										availableInvoicess.add(gstrnil.getSplyType());
									}
								}
							}
						}
						gstr1Repository.save(existingRecords);
						receivedInvIds.removeAll(availableInvoices);
						receivedInvIdss.removeAll(availableInvoicess);
					}
				}
				if(invType.equals(ADVANCES)){
					existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, ADVANCES);
					if(isNotEmpty(existingRecords)) {
						List<String> availableInvoices = Lists.newArrayList();
						List<String> availableInvoicess = Lists.newArrayList();
						for(GSTR1 gstr1 : existingRecords) {
							gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
							if(isNotEmpty(status)) {
								gstr1.setGstStatus(status);
							}else {
								if(isEmpty(gstr1.getGstStatus())) {
									gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
								}
							}
							if(isEmpty(gstr1.getDateofinvoice())) {
								if(isNotEmpty(gstr1.getFp())) {
									try {
										int iMonth = Integer.parseInt(gstr1.getFp().substring(0, 2));
										int iYear = Integer.parseInt(gstr1.getFp().substring(2));
										cal.set(iYear, iMonth-1, 1);
										gstr1.setDateofinvoice(cal.getTime());
									} catch (Exception e) {
									}
								} else {
									cal.set(year, month-1, 1);
									gstr1.setDateofinvoice(cal.getTime());
								}
							}
							if (isNotEmpty(gstr1.getAt())) {
								for(GSTRAdvanceTax gstrat : gstr1.getAt()) {
									if (isNotEmpty(gstrat.getPos()) && isNotEmpty(gstrat.getSplyTy())) {
										availableInvoices.add(gstrat.getPos()+gstrat.getSplyTy());
										availableInvoicess.add(gstrat.getPos()+gstrat.getSplyTy());
									}
								}
							}
						}
						gstr1Repository.save(existingRecords);
						receivedInvIds.removeAll(availableInvoices);
						receivedInvIdss.removeAll(availableInvoicess);
					}
				}
				if(invType.equals(ATA)){
					existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, ATA);
					if(isNotEmpty(existingRecords)) {
						List<String> availableInvoices = Lists.newArrayList();
						List<String> availableInvoicess = Lists.newArrayList();
						for(GSTR1 gstr1 : existingRecords) {
							gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
							if(isNotEmpty(status)) {
								gstr1.setGstStatus(status);
							}else {
								if(isEmpty(gstr1.getGstStatus())) {
									gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
								}
							}
							if(isEmpty(gstr1.getDateofinvoice())) {
								if(isNotEmpty(gstr1.getFp())) {
									try {
										int iMonth = Integer.parseInt(gstr1.getFp().substring(0, 2));
										int iYear = Integer.parseInt(gstr1.getFp().substring(2));
										cal.set(iYear, iMonth-1, 1);
										gstr1.setDateofinvoice(cal.getTime());
									} catch (Exception e) {
									}
								} else {
									cal.set(year, month-1, 1);
									gstr1.setDateofinvoice(cal.getTime());
								}
							}
							if (isNotEmpty(gstr1.getAta())) {
								for(GSTRAdvanceTax gstrat : gstr1.getAta()) {
									if (isNotEmpty(gstrat.getPos()) && isNotEmpty(gstrat.getSplyTy())) {
										availableInvoices.add(gstrat.getPos()+gstrat.getSplyTy());
										availableInvoicess.add(gstrat.getPos()+gstrat.getSplyTy());
									}
								}
							}
						}
						gstr1Repository.save(existingRecords);
						receivedInvIds.removeAll(availableInvoices);
						receivedInvIdss.removeAll(availableInvoicess);
					}
				}
				if(invType.equals(ATPAID)){
					existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, ATPAID);
					if(isNotEmpty(existingRecords)) {
						List<String> availableInvoices = Lists.newArrayList();
						List<String> availableInvoicess = Lists.newArrayList();
						for(GSTR1 gstr1 : existingRecords) {
							gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
							if(isNotEmpty(status)) {
								gstr1.setGstStatus(status);
							}else {
								if(isEmpty(gstr1.getGstStatus())) {
									gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
								}
							}
							if(isEmpty(gstr1.getDateofinvoice())) {
								if(isNotEmpty(gstr1.getFp())) {
									try {
										int iMonth = Integer.parseInt(gstr1.getFp().substring(0, 2));
										int iYear = Integer.parseInt(gstr1.getFp().substring(2));
										cal.set(iYear, iMonth-1, 1);
										gstr1.setDateofinvoice(cal.getTime());
									} catch (Exception e) {
									}
								} else {
									cal.set(year, month-1, 1);
									gstr1.setDateofinvoice(cal.getTime());
								}
							}
							if (isNotEmpty(gstr1.getTxpd())) {
								for(GSTRAdvanceTax gstrat : gstr1.getTxpd()) {
									if (isNotEmpty(gstrat.getPos()) && isNotEmpty(gstrat.getSplyTy())) {
										availableInvoices.add(gstrat.getPos()+gstrat.getSplyTy());
										availableInvoicess.add(gstrat.getPos()+gstrat.getSplyTy());
									}
								}
							}
						}
						gstr1Repository.save(existingRecords);
						receivedInvIds.removeAll(availableInvoices);
						receivedInvIdss.removeAll(availableInvoicess);
					}
				}
				if(invType.equals(TXPA)){
					existingRecords = gstr1Repository.findByClientidAndFpAndInvtype(client.getId().toString(), fp, TXPA);
					if(isNotEmpty(existingRecords)) {
						List<String> availableInvoices = Lists.newArrayList();
						List<String> availableInvoicess = Lists.newArrayList();
						for(GSTR1 gstr1 : existingRecords) {
							gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
							if(isNotEmpty(status)) {
								gstr1.setGstStatus(status);
							}else {
								if(isEmpty(gstr1.getGstStatus())) {
									gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
								}
							}
							if(isEmpty(gstr1.getDateofinvoice())) {
								if(isNotEmpty(gstr1.getFp())) {
									try {
										int iMonth = Integer.parseInt(gstr1.getFp().substring(0, 2));
										int iYear = Integer.parseInt(gstr1.getFp().substring(2));
										cal.set(iYear, iMonth-1, 1);
										gstr1.setDateofinvoice(cal.getTime());
									} catch (Exception e) {
									}
								} else {
									cal.set(year, month-1, 1);
									gstr1.setDateofinvoice(cal.getTime());
								}
							}
							if (isNotEmpty(gstr1.getTxpda())) {
								for(GSTRAdvanceTax gstrat : gstr1.getTxpda()) {
									if (isNotEmpty(gstrat.getPos()) && isNotEmpty(gstrat.getSplyTy())) {
										availableInvoices.add(gstrat.getPos()+gstrat.getSplyTy());
										availableInvoicess.add(gstrat.getPos()+gstrat.getSplyTy());
									}
								}
							}
						}
						gstr1Repository.save(existingRecords);
						receivedInvIds.removeAll(availableInvoices);
						receivedInvIdss.removeAll(availableInvoicess);
					}
				}
				if(isNotEmpty(receivedInvIdss)) {
					List<GSTR1> newRecords = Lists.newArrayList(); 
					if(isNotEmpty(invoice)) {
						if (isNotEmpty(invoice.getB2b()) && invType.equals(B2B)) {
							for (GSTRB2B gstrb2b : invoice.getB2b()) {
								if(isNotEmpty(gstrb2b.getInv())) {
									Map<String, ResponseData> gstnMap = Maps.newHashMap();
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getInum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getInum();
										}
										// && gstnMap.containsKey(gstrb2b.getCtin()
										if(isNotEmpty(gstrb2b.getCtin())) {
											String dwnldctin = gstrb2b.getCtin();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
										}
										if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
											String dwnlddate = gstrInvoiceDetails.getIdt();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnlddate;
										}
										
										if (isNotEmpty(gstrInvoiceDetails.getInum()) && receivedInvIdss.contains(dwnldInvNoCtin)) {
											if (isNotEmpty(gstrb2b.getCtin()) && !gstnMap.containsKey(gstrb2b.getCtin())) {
												Response response = iHubConsumerService.publicSearch(gstrb2b.getCtin());
												if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
													ResponseData data = response.getData();
													if(isNotEmpty(data.getTradeNam())) {
														data.setTradeNam(data.getTradeNam());
													}else {
														data.setTradeNam(data.getLgnm());
													}
													gstnMap.put(gstrb2b.getCtin(), data);
												}
											}
											String dealertype = "";
											if (isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
												String addr;
												GSTINPublicAddress gstinAddress = gstnMap.get(gstrb2b.getCtin()).getPradr();
												if(isNotEmpty(gstinAddress)){
													GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
													if(isNotEmpty(gstinAddressData)){
														addr = gstinAddressData.getBnm() + ","
																+ gstinAddressData.getSt() + ","
																+ gstinAddressData.getLoc() + ","
																+ gstinAddressData.getDst() + ","
																+ gstinAddressData.getStcd() + ","
																+ gstinAddressData.getCity() + ","
																+ gstinAddressData.getFlno() + ","
																+ gstinAddressData.getPncd();
														gstrInvoiceDetails.setAddress(addr);
													}
												}
												dealertype = gstnMap.get(gstrb2b.getCtin()).getDty();
											}
											
											GSTR1 newInvoice = populateGSTR1(gstrInvoiceDetails, null, null, null,client.getGstnnumber(), month, year, userid,client.getId().toString(), invType, gstrb2b.getCtin(), null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											newInvoice.setDealerType(dealertype);
											if(isNotEmpty(gstrInvoiceDetails.getPos())) {
												String pos = gstrInvoiceDetails.getPos();
												for(StateConfig stateConfig : configService.getStates()) {
													if (pos.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}else if(isNotEmpty(gstrb2b.getCtin())){
												String gstnno = gstrb2b.getCtin();
												gstnno = gstnno.substring(0,2);
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin(): stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											if (isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
												newInvoice.setBilledtoname(gstnMap.get(gstrb2b.getCtin()).getTradeNam());
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											
											newRecords.add(newInvoice);
										}
									}
								}
							}
						} else if (isNotEmpty(((GSTR1) invoice).getB2ba()) && invType.equals(B2BA)) {
							for (GSTRB2B gstrb2b : ((GSTR1) invoice).getB2ba()) {
								if(isNotEmpty(gstrb2b.getInv())) {
									
									Map<String, ResponseData> gstnMap = Maps.newHashMap();
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getInum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getInum();
										}
										// && gstnMap.containsKey(gstrb2b.getCtin()
										if(isNotEmpty(gstrb2b.getCtin())) {
											String dwnldctin = gstrb2b.getCtin();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
										}
										if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
											String dwnlddate = gstrInvoiceDetails.getIdt();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnlddate;
										}
										
										if (isNotEmpty(gstrInvoiceDetails.getInum()) && receivedInvIdss.contains(dwnldInvNoCtin)) {
											if (isNotEmpty(gstrb2b.getCtin()) && !gstnMap.containsKey(gstrb2b.getCtin())) {
												Response response = iHubConsumerService.publicSearch(gstrb2b.getCtin());
												if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
													ResponseData data = response.getData();
													if(isNotEmpty(data.getTradeNam())) {
														data.setTradeNam(data.getTradeNam());
													}else {
														data.setTradeNam(data.getLgnm());
													}
													gstnMap.put(gstrb2b.getCtin(), data);
												}
											}
											String dealertype = "";
											if (isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
												String addr;
												GSTINPublicAddress gstinAddress = gstnMap.get(gstrb2b.getCtin()).getPradr();
												if(isNotEmpty(gstinAddress)){
													GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
													if(isNotEmpty(gstinAddressData)){
														addr = gstinAddressData.getBnm() + ","
																+ gstinAddressData.getSt() + ","
																+ gstinAddressData.getLoc() + ","
																+ gstinAddressData.getDst() + ","
																+ gstinAddressData.getStcd() + ","
																+ gstinAddressData.getCity() + ","
																+ gstinAddressData.getFlno() + ","
																+ gstinAddressData.getPncd();
														gstrInvoiceDetails.setAddress(addr);
													}
												}
												dealertype = gstnMap.get(gstrb2b.getCtin()).getDty();
											}
											
											GSTR1 newInvoice = populateGSTR1(gstrInvoiceDetails, null, null, null,client.getGstnnumber(), month, year, userid,client.getId().toString(), invType, gstrb2b.getCtin(), null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											newInvoice.setDealerType(dealertype);
											if(isNotEmpty(gstrInvoiceDetails.getPos())) {
												String pos = gstrInvoiceDetails.getPos();
												for(StateConfig stateConfig : configService.getStates()) {
													if (pos.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}else if(isNotEmpty(gstrb2b.getCtin())){
												String gstnno = gstrb2b.getCtin();
												gstnno = gstnno.substring(0,2);
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											if (isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
												newInvoice.setBilledtoname(gstnMap.get(gstrb2b.getCtin()).getTradeNam());
											}
											if(isNotEmpty(gstrb2b.getInv().get(0)) && isNotEmpty(gstrb2b.getInv().get(0).getOinum()) && isNotEmpty(gstrb2b.getInv().get(0).getOidt())) {
												//GSTR1 inv = gstr1Repository.findByInvoicenoAndClientidAndInvtype(gstrb2b.getInv().get(0).getOinum(), client.getId().toString(), B2B);
												GSTR1 inv = gstr1Dao.findByInvoicenoAndClientidAndInvtypeAndDateofinvoice_str(gstrb2b.getInv().get(0).getOinum(), client.getId().toString(), B2B, (gstrb2b.getInv().get(0).getOidt()).replaceAll("-", "/"));
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						} else if (isNotEmpty(((GSTR1) invoice).getCdnr())
								&& invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
							for (GSTRCreditDebitNotes gstrcdn : ((GSTR1)invoice).getCdnr()) {
								if(isNotEmpty(gstrcdn.getNt())) {
									Map<String, ResponseData> gstnMap = Maps.newHashMap();
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
										
										if(isNotEmpty(gstrcdn.getCtin()) && !gstnMap.containsKey(gstrcdn.getCtin())) {
											Response response = iHubConsumerService.publicSearch(gstrcdn.getCtin());
											if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
													&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
												ResponseData data = response.getData();
												if(isNotEmpty(data.getTradeNam())) {
													data.setTradeNam(data.getTradeNam());
												}else {
													data.setTradeNam(data.getLgnm());
												}
												gstnMap.put(gstrcdn.getCtin(), data);
											}
										}
										String dealertype = "";
										if(isNotEmpty(gstrcdn.getCtin()) && gstnMap.containsKey(gstrcdn.getCtin())) {
											String addr;
											GSTINPublicAddress gstinAddress = gstnMap.get(gstrcdn.getCtin()).getPradr();
											if(isNotEmpty(gstinAddress)){
												GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
												if(isNotEmpty(gstinAddressData)){
													addr = gstinAddressData.getBnm() + "," + gstinAddressData.getSt()
															+ "," + gstinAddressData.getLoc() + ","
															+ gstinAddressData.getDst() + ","
															+ gstinAddressData.getStcd() + ","
															+ gstinAddressData.getCity() + ","
															+ gstinAddressData.getFlno() + ","
															+ gstinAddressData.getPncd();
													gstrInvoiceDetails.setAddress(addr);
												}
											}
											dealertype = gstnMap.get(gstrcdn.getCtin()).getDty();
										}
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getNtNum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getNtNum();
										}
										if(isNotEmpty(gstrcdn.getCtin())) {
											String dwnldctin = gstrcdn.getCtin();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
										}
										
										if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
											String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
											dwnldInvNoCtin = dwnldInvNoCtin+idt;
										}
										if (isNotEmpty(gstrInvoiceDetails.getNtNum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											GSTR1 newInvoice = populateGSTR1(gstrInvoiceDetails, null, null, null,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, gstrcdn.getCtin(), null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											if(isNotEmpty(gstrInvoiceDetails.getRchrg())) {
												if(gstrInvoiceDetails.getRchrg().equalsIgnoreCase("Y")) {
													newInvoice.setRevchargetype("Reverse");
												}else {
													newInvoice.setRevchargetype("Regular");
												}
											}
											if(isNotEmpty(gstrInvoiceDetails.getPos())) {
												String pos = gstrInvoiceDetails.getPos();
												for(StateConfig stateConfig : configService.getStates()) {
													if (pos.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}else if(isNotEmpty(gstrcdn.getCtin())){
												String gstnno = gstrcdn.getCtin();
												gstnno = gstnno.substring(0,2);
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											newInvoice.setDealerType(dealertype);
											if (isNotEmpty(gstrcdn.getCtin())
													&& gstnMap.containsKey(gstrcdn.getCtin())) {
												newInvoice
														.setBilledtoname(gstnMap.get(gstrcdn.getCtin()).getTradeNam());
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						}else if (isNotEmpty(((GSTR1) invoice).getCdnra())
								&& invType.equals(MasterGSTConstants.CDNA)) {
							for (GSTRCreditDebitNotes gstrcdn : ((GSTR1)invoice).getCdnra()) {
								if(isNotEmpty(gstrcdn.getNt())) {
									Map<String, ResponseData> gstnMap = Maps.newHashMap();
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
										
										if(isNotEmpty(gstrcdn.getCtin()) && !gstnMap.containsKey(gstrcdn.getCtin())) {
											Response response = iHubConsumerService.publicSearch(gstrcdn.getCtin());
											if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
													&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
												ResponseData data = response.getData();
												if(isNotEmpty(data.getTradeNam())) {
													data.setTradeNam(data.getTradeNam());
												}else {
													data.setTradeNam(data.getLgnm());
												}
												gstnMap.put(gstrcdn.getCtin(), data);
											}
										}
										String dealertype = "";
										if(isNotEmpty(gstrcdn.getCtin()) && gstnMap.containsKey(gstrcdn.getCtin())) {
											String addr;
											GSTINPublicAddress gstinAddress = gstnMap.get(gstrcdn.getCtin()).getPradr();
											if(isNotEmpty(gstinAddress)){
												GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
												if(isNotEmpty(gstinAddressData)){
													addr = gstinAddressData.getBnm() + "," + gstinAddressData.getSt()
															+ "," + gstinAddressData.getLoc() + ","
															+ gstinAddressData.getDst() + ","
															+ gstinAddressData.getStcd() + ","
															+ gstinAddressData.getCity() + ","
															+ gstinAddressData.getFlno() + ","
															+ gstinAddressData.getPncd();
													gstrInvoiceDetails.setAddress(addr);
												}
											}
											dealertype = gstnMap.get(gstrcdn.getCtin()).getDty();
										}
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getNtNum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getNtNum();
										}
										if(isNotEmpty(gstrcdn.getCtin())) {
											String dwnldctin = gstrcdn.getCtin();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
										}
										
										if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
											String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
											dwnldInvNoCtin = dwnldInvNoCtin+idt;
										}
										if (isNotEmpty(gstrInvoiceDetails.getNtNum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											GSTR1 newInvoice = populateGSTR1(gstrInvoiceDetails, null, null, null,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, gstrcdn.getCtin(), null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											if(isNotEmpty(gstrInvoiceDetails.getRchrg())) {
												if(gstrInvoiceDetails.getRchrg().equalsIgnoreCase("Y")) {
													newInvoice.setRevchargetype("Reverse");
												}else {
													newInvoice.setRevchargetype("Regular");
												}
											}
											if(isNotEmpty(gstrInvoiceDetails.getPos())) {
												String pos = gstrInvoiceDetails.getPos();
												for(StateConfig stateConfig : configService.getStates()) {
													if (pos.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}else if(isNotEmpty(gstrcdn.getCtin())){
												String gstnno = gstrcdn.getCtin();
												gstnno = gstnno.substring(0,2);
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											newInvoice.setDealerType(dealertype);
											if (isNotEmpty(gstrcdn.getCtin())
													&& gstnMap.containsKey(gstrcdn.getCtin())) {
												newInvoice
														.setBilledtoname(gstnMap.get(gstrcdn.getCtin()).getTradeNam());
											}
											/*if(isNotEmpty(gstrcdn.getNt().get(0)) && isNotEmpty(gstrcdn.getNt().get(0).getOntNum())) {
												GSTR1 inv = gstr1Repository.findByInvoicenoAndClientidAndInvtype(gstrcdn.getNt().get(0).getOntNum(), client.getId().toString(), CREDIT_DEBIT_NOTES);
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}*/
											
											if(isNotEmpty(gstrcdn.getNt().get(0)) && isNotEmpty(gstrcdn.getNt().get(0).getOntNum()) && isNotEmpty(gstrcdn.getNt().get(0).getOntDt())) {
												//GSTR1 inv = gstr1Repository.findByInvoicenoAndClientidAndInvtype(gstrb2b.getInv().get(0).getOinum(), client.getId().toString(), B2B);
												String ontdt = new SimpleDateFormat("dd/MM/YYYY").format(gstrcdn.getNt().get(0).getOntDt());
												GSTR1 inv = gstr1Dao.findByInvoicenoAndClientidAndInvtypeAndDateofinvoice_str(gstrcdn.getNt().get(0).getOntNum(), client.getId().toString(), CREDIT_DEBIT_NOTES, ontdt);
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						} else if (isNotEmpty(invoice.getB2cl()) && invType.equals(MasterGSTConstants.B2CL)) {
							for (GSTRB2CL gstrb2cl : invoice.getB2cl()) {
								if(isNotEmpty(gstrb2cl.getInv())) {
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2cl.getInv()) {
										
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getInum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getInum();
										}
										if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
											String idt = gstrInvoiceDetails.getIdt();
											dwnldInvNoCtin = dwnldInvNoCtin+idt;
										}
										
										if (isNotEmpty(gstrInvoiceDetails.getInum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											GSTR1 newInvoice = populateGSTR1(gstrInvoiceDetails, null, null, null,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, null, gstrb2cl.getPos());
											if(isNotEmpty(gstrb2cl.getPos())){
												String gstnno = gstrb2cl.getPos();
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						}else if (isNotEmpty(((GSTR1)invoice).getB2cla()) && invType.equals(MasterGSTConstants.B2CLA)) {
							for (GSTRB2CL gstrb2cl : ((GSTR1)invoice).getB2cla()) {
								if(isNotEmpty(gstrb2cl.getInv())) {
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2cl.getInv()) {
										
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getInum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getInum();
										}
										if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
											String idt = gstrInvoiceDetails.getIdt();
											dwnldInvNoCtin = dwnldInvNoCtin+idt;
										}
										
										if (isNotEmpty(gstrInvoiceDetails.getInum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											GSTR1 newInvoice = populateGSTR1(gstrInvoiceDetails, null, null, null,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, null, gstrb2cl.getPos());
											if(isNotEmpty(gstrb2cl.getPos())){
												String gstnno = gstrb2cl.getPos();
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}

											/*if(isNotEmpty(gstrInvoiceDetails.getOinum())) {
												GSTR1 inv = gstr1Repository.findByInvoicenoAndClientidAndInvtype(gstrInvoiceDetails.getOinum(), client.getId().toString(), B2CL);
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}*/
											if(isNotEmpty(gstrInvoiceDetails.getOinum()) && isNotEmpty(gstrInvoiceDetails.getOidt())) {
												GSTR1 inv = gstr1Dao.findByInvoicenoAndClientidAndInvtypeAndDateofinvoice_str(gstrInvoiceDetails.getOinum(), client.getId().toString(), B2CL, (gstrInvoiceDetails.getOidt()).replaceAll("-", "/"));
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						} else if (isNotEmpty(invoice.getB2cs()) && invType.equals(MasterGSTConstants.B2C)) {
							for (GSTRB2CS gstrb2cs : invoice.getB2cs()) {
								if (isNotEmpty(gstrb2cs.getPos()) && isNotEmpty(gstrb2cs.getSplyTy())
										&& receivedInvIdss.contains(gstrb2cs.getPos() + gstrb2cs.getSplyTy())) {
									GSTR1 newInvoice = populateGSTR1(null, null, null, null, client.getGstnnumber(),
											month, year, userid, client.getId().toString(), invType, null, null);
									newInvoice.getB2cs().add(gstrb2cs);
									if(isNotEmpty(gstrb2cs.getPos())){
										String gstnno = gstrb2cs.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									Double totalTaxVal = 0d;
									Double totalTax = 0d;
									Double itemTotal = 0d;
									List<Item> items = Lists.newArrayList();
									Item item = new Item();
									if(isNotEmpty(gstrb2cs.getTxval())) {
										item.setTaxablevalue(gstrb2cs.getTxval());
										totalTaxVal = gstrb2cs.getTxval();
									}
									if (isNotEmpty(gstrb2cs.getIamt())) {
										item.setIgstamount(gstrb2cs.getIamt());
										item.setIgstrate(gstrb2cs.getRt());
										totalTax += gstrb2cs.getIamt();
										newInvoice.setTotalIgstAmount(gstrb2cs.getIamt());
									}
									if (isNotEmpty(gstrb2cs.getCamt())) {
										item.setCgstamount(gstrb2cs.getCamt());
										item.setCgstrate(gstrb2cs.getRt() / 2);
										totalTax += gstrb2cs.getCamt();
										newInvoice.setTotalCgstAmount(gstrb2cs.getCamt());
									}
									if (isNotEmpty(gstrb2cs.getSamt())) {
										item.setSgstamount(gstrb2cs.getSamt());
										item.setSgstrate(gstrb2cs.getRt() / 2);
										totalTax += gstrb2cs.getSamt();
										newInvoice.setTotalSgstAmount(gstrb2cs.getSamt());
									}
									if (isNotEmpty(gstrb2cs.getCsamt())) {
										item.setCessamount(gstrb2cs.getCsamt());
										totalTax += gstrb2cs.getCsamt();
										newInvoice.setTotalCessAmount(gstrb2cs.getCsamt());
									}
									if(isNotEmpty(gstrb2cs.getTxval())) {
										itemTotal += gstrb2cs.getTxval();
									}
									if (isNotEmpty(gstrb2cs.getIamt())) {
										itemTotal += gstrb2cs.getIamt();
									}
									if (isNotEmpty(gstrb2cs.getCamt())) {
										itemTotal += gstrb2cs.getCamt();
									}
									if (isNotEmpty(gstrb2cs.getSamt())) {
										itemTotal += gstrb2cs.getSamt();
									}
									if (isNotEmpty(gstrb2cs.getCsamt())) {
										itemTotal += gstrb2cs.getCsamt();
									}
									item.setTotal(itemTotal);
									items.add(item);
									newInvoice.setItems(items);
									newInvoice.setTotaltaxableamount(totalTaxVal);
									newInvoice.setTotaltax(totalTax);
									newInvoice.setTotalamount(totalTaxVal+totalTax);
									
									String totalTaxableAmtStr = String.format(DOUBLE_FORMAT,totalTaxVal);
									String totalTaxStr = String.format(DOUBLE_FORMAT,totalTax);
									String totalAmtStr = String.format(DOUBLE_FORMAT,totalTaxVal+totalTax);
									newInvoice.setTotalamount_str(totalAmtStr);
									newInvoice.setTotaltaxableamount_str(totalTaxableAmtStr);
									newInvoice.setTotaltax_str(totalTaxStr);
									
									if(isEmpty(newInvoice.getDateofinvoice())) {
										if(isNotEmpty(newInvoice.getFp())) {
											try {
												int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
												int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
												cal.set(iYear, iMonth-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											} catch (Exception e) {
											}
										} else {
											cal.set(year, month-1, 1);
											newInvoice.setDateofinvoice(cal.getTime());
											String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
											newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
										}
									}
									
									Date dt = null;
									dt = (Date)newInvoice.getDateofinvoice();
								
								if(isNotEmpty(dt)) {
									int mth = dt.getMonth();
									int yr = dt.getYear()+1900;
									int quarter = mth/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
									mth++;
									
									newInvoice.setMthCd(""+mth);
									newInvoice.setYrCd(""+yearCode);
									newInvoice.setQrtCd(""+quarter);
								}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrb2cs) && isNotEmpty(gstrb2cs.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
									newRecords.add(newInvoice);
								}
							}
						}else if (isNotEmpty(((GSTR1)invoice).getB2csa()) && invType.equals(MasterGSTConstants.B2CSA)) {
							for (GSTRB2CSA gstrb2cs : ((GSTR1)invoice).getB2csa()) {
								if (isNotEmpty(gstrb2cs.getPos()) && isNotEmpty(gstrb2cs.getSplyTy())
										&& receivedInvIdss.contains(gstrb2cs.getPos() + gstrb2cs.getSplyTy())) {
									GSTR1 newInvoice = populateGSTR1(null, null, null, null, client.getGstnnumber(),
											month, year, userid, client.getId().toString(), invType, null, null);
									newInvoice.getB2csa().add(gstrb2cs);
									if(isNotEmpty(gstrb2cs.getPos())){
										String gstnno = gstrb2cs.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									Double totalTaxVal = 0d;
									Double totalTax = 0d;
									Double itemTotal = 0d;
									Double totalITC = 0d;
									Double totalamount = 0d;
									List<Item> items = Lists.newArrayList();
																		
									if(isNotEmpty(gstrb2cs.getItms())) {
										for (GSTRItemDetails gstrItem : gstrb2cs.getItms()) {
											Double taxVal = 0d;
											Double tax = 0d;
												Item item = new Item();
												item.setTaxablevalue(gstrItem.getTxval());
												item.setRateperitem(gstrItem.getTxval());
												item.setQuantity(Double.parseDouble("1"));
												item.setRate(gstrItem.getRt());
												taxVal += gstrItem.getTxval();
												totalTaxVal += gstrItem.getTxval();
												if (isNotEmpty(gstrItem.getIamt())) {
													item.setIgstamount(gstrItem.getIamt());
													item.setIgstrate(gstrItem.getRt());
													tax += gstrItem.getIamt();
													totalTax += gstrItem.getIamt();
												}
												if (isNotEmpty(gstrItem.getCamt())) {
													item.setCgstamount(gstrItem.getCamt());
													item.setCgstrate(gstrItem.getRt() / 2);
													tax += gstrItem.getCamt();
													totalTax += gstrItem.getCamt();
												}
												if (isNotEmpty(gstrItem.getSamt())) {
													item.setSgstamount(gstrItem.getSamt());
													item.setSgstrate(gstrItem.getRt() / 2);
													tax += gstrItem.getSamt();
													totalTax += gstrItem.getSamt();
												}
												if (isNotEmpty(gstrItem.getCsamt())) {
													item.setCessamount(gstrItem.getCsamt());
													tax += gstrItem.getCsamt();
													totalTax += gstrItem.getCsamt();
												}
												item.setTotal(taxVal + tax);
												items.add(item);
												totalamount =  taxVal + tax;
											}
										}
									newInvoice.setItems(items);
									newInvoice.setTotaltaxableamount(totalTaxVal);
									newInvoice.setTotaltax(totalTax);
									newInvoice.setTotalamount(totalTaxVal+totalTax);
									
									String totalTaxableAmtStr = String.format(DOUBLE_FORMAT,totalTaxVal);
									String totalTaxStr = String.format(DOUBLE_FORMAT,totalTax);
									String totalAmtStr = String.format(DOUBLE_FORMAT,totalTaxVal+totalTax);
									newInvoice.setTotalamount_str(totalAmtStr);
									newInvoice.setTotaltaxableamount_str(totalTaxableAmtStr);
									newInvoice.setTotaltax_str(totalTaxStr);
									
									if(isEmpty(newInvoice.getDateofinvoice())) {
										if(isNotEmpty(newInvoice.getFp())) {
											try {
												int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
												int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
												cal.set(iYear, iMonth-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											} catch (Exception e) {
											}
										} else {
											cal.set(year, month-1, 1);
											newInvoice.setDateofinvoice(cal.getTime());
											String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
											newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
										}
									}
									
									Date dt = null;
									dt = (Date)newInvoice.getDateofinvoice();
								
								if(isNotEmpty(dt)) {
									int mth = dt.getMonth();
									int yr = dt.getYear()+1900;
									int quarter = mth/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
									mth++;
									
									newInvoice.setMthCd(""+mth);
									newInvoice.setYrCd(""+yearCode);
									newInvoice.setQrtCd(""+quarter);
								}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrb2cs) && isNotEmpty(gstrb2cs.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									List<GSTR1> inv = gstr1Repository.findByClientidAndFpAndB2cs_PosAndB2cs_splyTyAndInvtype(client.getId().toString(), fp, gstrb2cs.getPos(), gstrb2cs.getSplyTy(),MasterGSTConstants.B2C);
									if(isNotEmpty(inv)) {
										List<String> refids = Lists.newArrayList();
										inv.stream().forEach(invv -> refids.add(invv.getId().toString()));
										if(isNotEmpty(refids)) {
											newInvoice.setAmendmentRefId(refids);
										}
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
									newRecords.add(newInvoice);
								}
							}
						} else if (isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getInv())
								&& invType.equals(MasterGSTConstants.NIL)) {
							if(isNotEmpty(invoice.getNil().getInv())) {
								for (GSTRNilItems gstrNil : invoice.getNil().getInv()) {
									if (isNotEmpty(gstrNil.getSplyType())
											&& receivedInvIdss.contains(gstrNil.getSplyType())) {
										GSTR1 newInvoice = populateGSTR1(null, null, null, gstrNil,
												client.getGstnnumber(), month, year, userid, client.getId().toString(),
												invType, null, null);
										newInvoice.setNil(invoice.getNil());
										if(isNotEmpty(status)) {
											newInvoice.setGstStatus(status);
										}else {
											if(isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getFlag())) {
												newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
											}
										}
										if(isEmpty(newInvoice.getDateofinvoice())) {
											if(isNotEmpty(newInvoice.getFp())) {
												try {
													int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
													int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
													cal.set(iYear, iMonth-1, 1);
													newInvoice.setDateofinvoice(cal.getTime());
													String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
													newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
												} catch (Exception e) {
												}
											} else {
												cal.set(year, month-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											}
										}
										
										Date dt = null;
										dt = (Date)newInvoice.getDateofinvoice();
									
									if(isNotEmpty(dt)) {
										int mth = dt.getMonth();
										int yr = dt.getYear()+1900;
										int quarter = mth/3;
										quarter = quarter == 0 ? 4 : quarter;
										String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
										mth++;
										
										newInvoice.setMthCd(""+mth);
										newInvoice.setYrCd(""+yearCode);
										newInvoice.setQrtCd(""+quarter);
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
										newRecords.add(newInvoice);
									}
								}
							}
						} else if (isNotEmpty(invoice.getExp()) && invType.equals(MasterGSTConstants.EXPORTS)) {
							for (GSTRExports gstrexp : invoice.getExp()) {
								String exptyp = "";
								if(isNotEmpty(gstrexp) && isNotEmpty(gstrexp.getExpTyp())) {
									exptyp = gstrexp.getExpTyp();
								}
								if(isNotEmpty(gstrexp.getInv())) {
									for (GSTRExportDetails gstrExportDetails : gstrexp.getInv()) {
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrExportDetails.getInum())){
											dwnldInvNoCtin = gstrExportDetails.getInum();
										}
										if(isNotEmpty(gstrExportDetails.getIdt())) {
											String idt = simpleDateFormat.format(gstrExportDetails.getIdt());
											dwnldInvNoCtin = dwnldInvNoCtin+idt;
										}
										if (isNotEmpty(gstrExportDetails.getInum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											GSTR1 newInvoice = populateGSTR1(null, gstrExportDetails, null, null,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, null, null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrExportDetails) && isNotEmpty(gstrExportDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											if(isNotEmpty(exptyp)) {
												newInvoice.getExp().get(0).setExpTyp(exptyp);
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						}else if (isNotEmpty(((GSTR1)invoice).getExpa()) && invType.equals(MasterGSTConstants.EXPA)) {
							for (GSTRExports gstrexp : ((GSTR1)invoice).getExpa()) {
								String exptyp = "";
								if(isNotEmpty(gstrexp) && isNotEmpty(gstrexp.getExpTyp())) {
									exptyp = gstrexp.getExpTyp();
								}
								if(isNotEmpty(gstrexp.getInv())) {
									for (GSTRExportDetails gstrExportDetails : gstrexp.getInv()) {
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrExportDetails.getInum())){
											dwnldInvNoCtin = gstrExportDetails.getInum();
										}
										if(isNotEmpty(gstrExportDetails.getIdt())) {
											String idt = simpleDateFormat.format(gstrExportDetails.getIdt());
											dwnldInvNoCtin = dwnldInvNoCtin+idt;
										}
										if (isNotEmpty(gstrExportDetails.getInum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											GSTR1 newInvoice = populateGSTR1(null, gstrExportDetails, null, null,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, null, null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}else {
												if(isNotEmpty(gstrExportDetails) && isNotEmpty(gstrExportDetails.getFlag())) {
													newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
												}
											}
											if(isNotEmpty(exptyp)) {
												newInvoice.getExpa().get(0).setExpTyp(exptyp);
											}
											/*if(isNotEmpty(gstrExportDetails.getOinum())) {
												GSTR1 inv = gstr1Repository.findByInvoicenoAndClientidAndInvtype(gstrExportDetails.getOinum(), client.getId().toString(), EXPORTS);
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}*/
											if(isNotEmpty(gstrExportDetails.getOinum()) && isNotEmpty(gstrExportDetails.getOidt())) {
												String oidt = new SimpleDateFormat("dd/MM/YYYY").format(gstrExportDetails.getOidt());
												GSTR1 inv = gstr1Dao.findByInvoicenoAndClientidAndInvtypeAndDateofinvoice_str(gstrExportDetails.getOinum(), client.getId().toString(), EXPORTS, oidt);
												if(isNotEmpty(inv)) {
													newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
												}
											}
											if(isNotEmpty(newInvoice.getDateofinvoice())) {
												newInvoice.setDueDate(newInvoice.getDateofinvoice());
												newInvoice.setTermDays("0");
											}
											if(isNotEmpty(newInvoice.getTotalamount())) {
												newInvoice.setPendingAmount(newInvoice.getTotalamount());
												newInvoice.setReceivedAmount(0d);
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						} else if (isNotEmpty(((GSTR1) invoice).getCdnur())
								&& invType.equals(MasterGSTConstants.CDNUR)) {
							for (GSTRInvoiceDetails gstrcdnur : ((GSTR1)invoice).getCdnur()) {
								String dwnldInvNoCtin = "";
								if(isNotEmpty(gstrcdnur.getNtNum())){
									dwnldInvNoCtin = gstrcdnur.getNtNum();
								}
								
								if(isNotEmpty(gstrcdnur.getNtDt())) {
									String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
									dwnldInvNoCtin = dwnldInvNoCtin+idt;
								}
								
								if(isNotEmpty(gstrcdnur.getNtNum()) && receivedInvIdss.contains(dwnldInvNoCtin)) {
									GSTR1 newInvoice = populateGSTR1(gstrcdnur, null, null, null,
											client.getGstnnumber(), month, year, userid, client.getId().toString(),
											invType, null, gstrcdnur.getPos());
									if(isNotEmpty(gstrcdnur.getPos())){
										String gstnno = gstrcdnur.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrcdnur) && isNotEmpty(gstrcdnur.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
									newRecords.add(newInvoice);
								}
							}
							
						}else if (isNotEmpty(((GSTR1) invoice).getCdnura())
								&& invType.equals(MasterGSTConstants.CDNURA)) {
							for (GSTRInvoiceDetails gstrcdnur : ((GSTR1)invoice).getCdnura()) {
								String dwnldInvNoCtin = "";
								if(isNotEmpty(gstrcdnur.getNtNum())){
									dwnldInvNoCtin = gstrcdnur.getNtNum();
								}
								
								if(isNotEmpty(gstrcdnur.getNtDt())) {
									String idt = simpleDateFormat.format(gstrcdnur.getNtDt());
									dwnldInvNoCtin = dwnldInvNoCtin+idt;
								}
								
								if(isNotEmpty(gstrcdnur.getNtNum()) && receivedInvIdss.contains(dwnldInvNoCtin)) {
									GSTR1 newInvoice = populateGSTR1(gstrcdnur, null, null, null,
											client.getGstnnumber(), month, year, userid, client.getId().toString(),
											invType, null, gstrcdnur.getPos());
									if(isNotEmpty(gstrcdnur.getPos())){
										String gstnno = gstrcdnur.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrcdnur) && isNotEmpty(gstrcdnur.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									/*if(isNotEmpty(gstrcdnur.getOntNum()) && isNotEmpty(gstrcdnur.getOntNum())) {
										GSTR1 inv = gstr1Repository.findByInvoicenoAndClientidAndInvtype(gstrcdnur.getOntNum(), client.getId().toString(), CDNUR);
										if(isNotEmpty(inv)) {
											newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
										}
									}*/
									
									if(isNotEmpty(gstrcdnur.getOntNum()) && isNotEmpty(gstrcdnur.getOntDt())) {
										String oidt = new SimpleDateFormat("dd/MM/YYYY").format(gstrcdnur.getOntDt());
										GSTR1 inv = gstr1Dao.findByInvoicenoAndClientidAndInvtypeAndDateofinvoice_str(gstrcdnur.getOntNum(), client.getId().toString(), CDNUR, oidt);
										if(isNotEmpty(inv)) {
											newInvoice.setAmendmentRefId(Arrays.asList(inv.getId().toString()));
										}
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
									newRecords.add(newInvoice);
								}
							}
							
						} else if (isNotEmpty(invoice.getTxpd()) && invType.equals(MasterGSTConstants.ATPAID)){
							for (GSTRAdvanceTax gstrtxpd : invoice.getTxpd()) {
								if (isNotEmpty(gstrtxpd.getPos()) && isNotEmpty(gstrtxpd.getSplyTy())
										&& receivedInvIdss.contains(gstrtxpd.getPos() + gstrtxpd.getSplyTy())) {
									GSTR1 newInvoice = populateGSTR1(null, null, gstrtxpd, null, client.getGstnnumber(),
											month, year, userid, client.getId().toString(), invType, null,
											gstrtxpd.getPos());
									newInvoice.getTxpd().add(gstrtxpd);
									if(isNotEmpty(gstrtxpd.getPos())){
										String gstnno = gstrtxpd.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrtxpd) && isNotEmpty(gstrtxpd.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									if(isEmpty(newInvoice.getDateofinvoice())) {
										if(isNotEmpty(newInvoice.getFp())) {
											try {
												int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
												int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
												cal.set(iYear, iMonth-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											} catch (Exception e) {
											}
										} else {
											cal.set(year, month-1, 1);
											newInvoice.setDateofinvoice(cal.getTime());
											String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
											newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
										}
									}
									
									Date dt = null;
									dt = (Date)newInvoice.getDateofinvoice();
								
								if(isNotEmpty(dt)) {
									int mth = dt.getMonth();
									int yr = dt.getYear()+1900;
									int quarter = mth/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
									mth++;
									
									newInvoice.setMthCd(""+mth);
									newInvoice.setYrCd(""+yearCode);
									newInvoice.setQrtCd(""+quarter);
								}
								if(isNotEmpty(newInvoice.getDateofinvoice())) {
									newInvoice.setDueDate(newInvoice.getDateofinvoice());
									newInvoice.setTermDays("0");
								}
								if(isNotEmpty(newInvoice.getTotalamount())) {
									newInvoice.setPendingAmount(newInvoice.getTotalamount());
									newInvoice.setReceivedAmount(0d);
								}
									newRecords.add(newInvoice);
								}
							}
						}else if (isNotEmpty(invoice.getTxpda()) && invType.equals(MasterGSTConstants.TXPA)){
							for (GSTRAdvanceTax gstrtxpd : invoice.getTxpda()) {
								if (isNotEmpty(gstrtxpd.getPos()) && isNotEmpty(gstrtxpd.getSplyTy())
										&& receivedInvIdss.contains(gstrtxpd.getPos() + gstrtxpd.getSplyTy())) {
									GSTR1 newInvoice = populateGSTR1(null, null, gstrtxpd, null, client.getGstnnumber(),
											month, year, userid, client.getId().toString(), invType, null,
											gstrtxpd.getPos());
									newInvoice.getTxpd().add(gstrtxpd);
									newInvoice.getTxpda().add(gstrtxpd);
									if(isNotEmpty(gstrtxpd.getPos())){
										String gstnno = gstrtxpd.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrtxpd) && isNotEmpty(gstrtxpd.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									if(isEmpty(newInvoice.getDateofinvoice())) {
										if(isNotEmpty(newInvoice.getFp())) {
											try {
												int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
												int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
												cal.set(iYear, iMonth-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											} catch (Exception e) {
											}
										} else {
											cal.set(year, month-1, 1);
											newInvoice.setDateofinvoice(cal.getTime());
											String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
											newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
										}
									}
									
									Date dt = null;
									dt = (Date)newInvoice.getDateofinvoice();
								
								if(isNotEmpty(dt)) {
									int mth = dt.getMonth();
									int yr = dt.getYear()+1900;
									int quarter = mth/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
									mth++;
									
									newInvoice.setMthCd(""+mth);
									newInvoice.setYrCd(""+yearCode);
									newInvoice.setQrtCd(""+quarter);
								}
									List<GSTR1> inv = gstr1Repository.findByClientidAndFpAndTxpd_PosAndTxpd_splyTyAndInvtype(client.getId().toString(), gstrtxpd.getOmon(), gstrtxpd.getPos(), gstrtxpd.getSplyTy(),MasterGSTConstants.ATPAID);
									if(isNotEmpty(inv)) {
										List<String> refids = Lists.newArrayList();
										inv.stream().forEach(invv -> refids.add(invv.getId().toString()));
										if(isNotEmpty(refids)) {
											newInvoice.setAmendmentRefId(refids);
										}
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
									newRecords.add(newInvoice);
								}
							}
						} else if (isNotEmpty(((GSTR1) invoice).getAt())
								&& invType.equals(MasterGSTConstants.ADVANCES)) {
							for (GSTRAdvanceTax gstrat : ((GSTR1)invoice).getAt()) {
								if (isNotEmpty(gstrat.getPos()) && isNotEmpty(gstrat.getSplyTy())
										&& receivedInvIdss.contains(gstrat.getPos() + gstrat.getSplyTy())) {
									GSTR1 newInvoice = populateGSTR1(null, null, gstrat, null, client.getGstnnumber(),
											month, year, userid, client.getId().toString(), invType, null,
											gstrat.getPos());
									newInvoice.getAt().add(gstrat);
									if(isNotEmpty(gstrat.getPos())){
										String gstnno = gstrat.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrat) && isNotEmpty(gstrat.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									if(isEmpty(newInvoice.getDateofinvoice())) {
										if(isNotEmpty(newInvoice.getFp())) {
											try {
												int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
												int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
												cal.set(iYear, iMonth-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											} catch (Exception e) {
											}
										} else {
											cal.set(year, month-1, 1);
											newInvoice.setDateofinvoice(cal.getTime());
											String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
											newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
										}
									}
									
									Date dt = null;
									dt = (Date)newInvoice.getDateofinvoice();
								
								if(isNotEmpty(dt)) {
									int mth = dt.getMonth();
									int yr = dt.getYear()+1900;
									int quarter = mth/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
									mth++;
									
									newInvoice.setMthCd(""+mth);
									newInvoice.setYrCd(""+yearCode);
									newInvoice.setQrtCd(""+quarter);
								}
								if(isNotEmpty(newInvoice.getDateofinvoice())) {
									newInvoice.setDueDate(newInvoice.getDateofinvoice());
									newInvoice.setTermDays("0");
								}
								if(isNotEmpty(newInvoice.getTotalamount())) {
									newInvoice.setPendingAmount(newInvoice.getTotalamount());
									newInvoice.setReceivedAmount(0d);
								}
									newRecords.add(newInvoice);
								}
							}
						}else if (isNotEmpty(((GSTR1) invoice).getAta())
								&& invType.equals(MasterGSTConstants.ATA)) {
							for (GSTRAdvanceTax gstrat : ((GSTR1)invoice).getAta()) {
								if (isNotEmpty(gstrat.getPos()) && isNotEmpty(gstrat.getSplyTy())
										&& receivedInvIdss.contains(gstrat.getPos() + gstrat.getSplyTy())) {
									GSTR1 newInvoice = populateGSTR1(null, null, gstrat, null, client.getGstnnumber(),
											month, year, userid, client.getId().toString(), invType, null,
											gstrat.getPos());
									newInvoice.getAt().add(gstrat);
									newInvoice.getAta().add(gstrat);
									if(isNotEmpty(gstrat.getPos())){
										String gstnno = gstrat.getPos();
										for(StateConfig stateConfig : configService.getStates()) {
											if (gstnno.equals(stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
													: stateConfig.getTin() + "")) {
												newInvoice.setStatename(stateConfig.getName());
											}
										}
									}
									if(isNotEmpty(status)) {
										newInvoice.setGstStatus(status);
									}else {
										if(isNotEmpty(gstrat) && isNotEmpty(gstrat.getFlag())) {
											newInvoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
										}
									}
									if(isEmpty(newInvoice.getDateofinvoice())) {
										if(isNotEmpty(newInvoice.getFp())) {
											try {
												int iMonth = Integer.parseInt(newInvoice.getFp().substring(0, 2));
												int iYear = Integer.parseInt(newInvoice.getFp().substring(2));
												cal.set(iYear, iMonth-1, 1);
												newInvoice.setDateofinvoice(cal.getTime());
												String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
												newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
											} catch (Exception e) {
											}
										} else {
											cal.set(year, month-1, 1);
											newInvoice.setDateofinvoice(cal.getTime());
											String dateOfInvoiceStr = dateFormatOnlyDate.format(cal.getTime());
											newInvoice.setDateofinvoice_str(dateOfInvoiceStr);
										}
									}
									
									Date dt = null;
									dt = (Date)newInvoice.getDateofinvoice();
								
								if(isNotEmpty(dt)) {
									int mth = dt.getMonth();
									int yr = dt.getYear()+1900;
									int quarter = mth/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
									mth++;
									
									newInvoice.setMthCd(""+mth);
									newInvoice.setYrCd(""+yearCode);
									newInvoice.setQrtCd(""+quarter);
								}
									List<GSTR1> inv = gstr1Repository.findByClientidAndFpAndAt_PosAndAt_splyTyAndInvtype(client.getId().toString(), gstrat.getOmon(), gstrat.getPos(), gstrat.getSplyTy(),MasterGSTConstants.ADVANCES);
									if(isNotEmpty(inv)) {
										List<String> refids = Lists.newArrayList();
										inv.stream().forEach(invv -> refids.add(invv.getId().toString()));
										if(isNotEmpty(refids)) {
											newInvoice.setAmendmentRefId(refids);
										}
									}
									if(isNotEmpty(newInvoice.getDateofinvoice())) {
										newInvoice.setDueDate(newInvoice.getDateofinvoice());
										newInvoice.setTermDays("0");
									}
									if(isNotEmpty(newInvoice.getTotalamount())) {
										newInvoice.setPendingAmount(newInvoice.getTotalamount());
										newInvoice.setReceivedAmount(0d);
									}
									newRecords.add(newInvoice);
								}
							}
						}//TODO : Add for remaining inv types
					}
					gstr1Repository.save(newRecords);
					String usrid = userid(userid,client.getId().toString());
					SubscriptionDetails subscriptionDetails = subscriptionService.getSubscriptionData(usrid);
					if(isNotEmpty(subscriptionDetails)) {
						if(isNotEmpty(usertype) && usertype.equals(MasterGSTConstants.SUVIDHA_CENTERS) 
								&& isNotEmpty(subscriptionDetails.getUserid())
								&& !usrid.equals(subscriptionDetails.getUserid())) {
							subscriptionDetails.setId(new ObjectId());
							subscriptionDetails.setUserid(usrid);
						}
						if(isNotEmpty(subscriptionDetails.getProcessedInvoices())) {
							subscriptionDetails.setProcessedInvoices(
									subscriptionDetails.getProcessedInvoices() + newRecords.size());
						} else {
							subscriptionDetails.setProcessedInvoices(newRecords.size());
						}
						subscriptionService.updateSubscriptionData(subscriptionDetails);
					}
				}
				//TODO : Add for remaining return types (GSTR2, 3 etc) - not urgent
			} else if(returnType.equals(GSTR1A)) {
				cal = Calendar.getInstance();
				String fp = strMonth + year;
				// List<GSTR1A> existingRecords =
				// gstr1ARepository.findByClientidAndInvoicenoIn(client.getId().toString(),
				// receivedInvIds);
				List<GSTR1A> existingRecords = gstr1ARepository.findByClientidAndInvoicenoInAndDateofinvoiceBetween(
						client.getId().toString(), receivedInvIds, stDate, endDate);
				if(isNotEmpty(existingRecords)) {
					List<String> availableInvoices = Lists.newArrayList();
					for(GSTR1A gstr1 : existingRecords) {
						if(isNotEmpty(status)) {
							gstr1.setGstStatus(status);
						}
						availableInvoices.add(gstr1.getInvoiceno());
					}
					gstr1ARepository.save(existingRecords);
					receivedInvIds.removeAll(availableInvoices);
				}
				if(isNotEmpty(receivedInvIds)) {
					List<GSTR1A> newRecords = Lists.newArrayList(); 
					if(isNotEmpty(invoice)) {
						if (isNotEmpty(invoice.getB2b())) {
							for (GSTRB2B gstrb2b : invoice.getB2b()) {
								if(isNotEmpty(gstrb2b.getInv())) {
									Map<String, ResponseData> gstnMap = Maps.newHashMap();
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getInum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getInum();
										}
										if(isNotEmpty(gstrb2b.getCtin())) {
											String dwnldctin = gstrb2b.getCtin();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
										}
										if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
											String dwnlddate = gstrInvoiceDetails.getIdt();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnlddate;
										}
										if (isNotEmpty(gstrInvoiceDetails.getInum())
												&& receivedInvIdss.contains(dwnldInvNoCtin)) {
											if (isNotEmpty(gstrb2b.getCtin())
													&& !gstnMap.containsKey(gstrb2b.getCtin())) {
												Response response = iHubConsumerService.publicSearch(gstrb2b.getCtin());
												if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
														&& response.getStatuscd()
																.equals(MasterGSTConstants.SUCCESS_CODE)) {
													ResponseData data = response.getData();
													if(isNotEmpty(data.getTradeNam())) {
														data.setTradeNam(data.getTradeNam());
													}else {
														data.setTradeNam(data.getLgnm());
													}
													gstnMap.put(gstrb2b.getCtin(), data);
												}
											}
											
											if (isNotEmpty(gstrb2b.getCtin())
													&& gstnMap.containsKey(gstrb2b.getCtin())) {
												String addr;
												GSTINPublicAddress gstinAddress = gstnMap.get(gstrb2b.getCtin())
														.getPradr();
												if(isNotEmpty(gstinAddress)){
													GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
													if(isNotEmpty(gstinAddressData)){
														addr = gstinAddressData.getBnm() + ","
																+ gstinAddressData.getSt() + ","
																+ gstinAddressData.getLoc() + ","
																+ gstinAddressData.getDst() + ","
																+ gstinAddressData.getStcd() + ","
																+ gstinAddressData.getCity() + ","
																+ gstinAddressData.getFlno() + ","
																+ gstinAddressData.getPncd();
														gstrInvoiceDetails.setAddress(addr);
													}
												}
											}
											GSTR1A newInvoice = populateGSTR1A(gstrInvoiceDetails,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, gstrb2b.getCtin(), null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}
											if(isNotEmpty(gstrb2b.getCtin())){
												String gstnno = gstrb2b.getCtin();
												gstnno = gstnno.substring(0,2);
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											if (isNotEmpty(gstrb2b.getCtin())
													&& gstnMap.containsKey(gstrb2b.getCtin())) {
												newInvoice
														.setBilledtoname(gstnMap.get(gstrb2b.getCtin()).getTradeNam());
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						} else if (isNotEmpty(((GSTR1A)invoice).getCdnr())) {
							for (GSTRCreditDebitNotes gstrcdn : ((GSTR1A)invoice).getCdnr()) {
								if(isNotEmpty(gstrcdn.getNt())) {
									Map<String, ResponseData> gstnMap = Maps.newHashMap();
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
										String dwnldInvNoCtin = "";
										if(isNotEmpty(gstrInvoiceDetails.getNtNum())){
											dwnldInvNoCtin = gstrInvoiceDetails.getNtNum();
										}
										if(isNotEmpty(gstrcdn.getCtin())) {
											String dwnldctin = gstrcdn.getCtin();
											dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
										}
										if (isNotEmpty(gstrInvoiceDetails.getNtNum())
												&& receivedInvIds.contains(dwnldInvNoCtin)) {
											GSTR1A newInvoice = populateGSTR1A(gstrInvoiceDetails,
													client.getGstnnumber(), month, year, userid,
													client.getId().toString(), invType, gstrcdn.getCtin(), null);
											if(isNotEmpty(status)) {
												newInvoice.setGstStatus(status);
											}
											if(isNotEmpty(gstrcdn.getCtin())){
												String gstnno = gstrcdn.getCtin();
												gstnno = gstnno.substring(0,2);
												for(StateConfig stateConfig : configService.getStates()) {
													if (gstnno.equals(
															stateConfig.getTin() < 10 ? "0" + stateConfig.getTin()
																	: stateConfig.getTin() + "")) {
														newInvoice.setStatename(stateConfig.getName());
													}
												}
											}
											if (isNotEmpty(gstrcdn.getCtin())
													&& gstnMap.containsKey(gstrcdn.getCtin())) {
												newInvoice.setBilledtoname(gstnMap.get(gstrcdn.getCtin()).getLgnm());
											}
											newRecords.add(newInvoice);
										}
									}
								}
							}
						}
					}
					gstr1ARepository.save(newRecords);
					String usrid = userid(userid,client.getId().toString());
					SubscriptionDetails subscriptionDetails = subscriptionService.getSubscriptionData(userid);
					if(isNotEmpty(subscriptionDetails)) {
						if(isNotEmpty(usertype) && usertype.equals(MasterGSTConstants.SUVIDHA_CENTERS) 
								&& isNotEmpty(subscriptionDetails.getUserid())
								&& !usrid.equals(subscriptionDetails.getUserid())) {
							subscriptionDetails.setId(new ObjectId());
							subscriptionDetails.setUserid(usrid);
						}
						if(isNotEmpty(subscriptionDetails.getProcessedInvoices())) {
							subscriptionDetails.setProcessedInvoices(
									subscriptionDetails.getProcessedInvoices() + newRecords.size());
						} else {
							subscriptionDetails.setProcessedInvoices(newRecords.size());
						}
						subscriptionService.updateSubscriptionData(subscriptionDetails);
					}
				}
			}
		}
		logger.debug(CLASSNAME + "processGSTRData : End");
	}
	
	private GSTR1 populateGSTR1(GSTRInvoiceDetails gstrInvoiceDetails, GSTRExportDetails gstrExportDetails,
			GSTRAdvanceTax gstrAdvanceTax, GSTRNilItems gstrNilItems, final String gstn, final int month, int year,
			final String userid, final String clientid, final String invType, final String ctin, final String pos) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String strMonth = month < 10 ? "0" + month : month + "";
		GSTR1 individualInvoice = new GSTR1();
		individualInvoice.setGstin(gstn);
		individualInvoice.setFp(strMonth+year);
		individualInvoice.setInvtype(invType);
		individualInvoice.setUserid(userid);
		individualInvoice.setClientid(clientid);
		individualInvoice.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
		individualInvoice.setSrctype("GSTAPI");
		if(invType.endsWith("A")) {
			individualInvoice.setAmendment(true);
		}

		if(isNotEmpty(gstrInvoiceDetails)) {
			if(isNotEmpty(gstrInvoiceDetails.getIrn())) {
				individualInvoice.setIrnNo(gstrInvoiceDetails.getIrn());
				individualInvoice.setIrnStatus(MasterGSTConstants.GENERATED);
				if(isNotEmpty(gstrInvoiceDetails.getIrngendate())) {
					individualInvoice.setAckDt(gstrInvoiceDetails.getIrngendate());
				}
			}
			gstrInvoiceDetails.setIrn(null);
			gstrInvoiceDetails.setIrngendate(null);
			if (invType.equals(MasterGSTConstants.CDNA) || invType.equals(MasterGSTConstants.CDNUR)
					|| invType.equals(MasterGSTConstants.CDNURA)
					|| invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
				if(isNotEmpty(gstrInvoiceDetails.getNtNum())) {
					individualInvoice.setInvoiceno(gstrInvoiceDetails.getNtNum());
				}
			}else {
				if(isNotEmpty(gstrInvoiceDetails.getInum())) {
					individualInvoice.setInvoiceno(gstrInvoiceDetails.getInum());
				}
				if (isNotEmpty(gstrInvoiceDetails.getRchrg())) {
					if ("Y".equalsIgnoreCase(gstrInvoiceDetails.getRchrg())) {
						individualInvoice.setRevchargetype("Reverse");
					} else {
						individualInvoice.setRevchargetype("Regular");
					}
				}
			}
			try {
				if (invType.equals(MasterGSTConstants.CDNA) || invType.equals(MasterGSTConstants.CDNUR)
						|| invType.equals(MasterGSTConstants.CDNURA)
						|| invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
						individualInvoice.setDateofinvoice(gstrInvoiceDetails.getNtDt());
					}
				}else {
					if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
						individualInvoice.setDateofinvoice(simpleDateFormat.parse(gstrInvoiceDetails.getIdt()));
					}
				}
			} catch (ParseException e) {
				logger.error(CLASSNAME + "populateGSTR1 :: ERROR in invoice date", e);
			}
			if(isNotEmpty(gstrInvoiceDetails.getVal())) {
				individualInvoice.setTotalamount(gstrInvoiceDetails.getVal());
			}
			GSTRB2B indGstrb2b = new GSTRB2B();
			if (isNotEmpty(ctin)) {
				indGstrb2b.setCtin(ctin);
			}
			if (invType.equals(B2B) || invType.equals(B2BA) ) {
				indGstrb2b.getInv().add(gstrInvoiceDetails);
			} else if (invType.equals(CREDIT_DEBIT_NOTES) || invType.equals(MasterGSTConstants.CDNA)) {
				GSTRCreditDebitNotes note = new GSTRCreditDebitNotes();
				if (isNotEmpty(ctin)) {
					note.setCtin(ctin);
				}
				if(isNotEmpty(gstrInvoiceDetails.getAddress())){
					indGstrb2b.getInv().get(0).setAddress(gstrInvoiceDetails.getAddress());
				}
				note.getNt().add(gstrInvoiceDetails);
				if(invType.equals(MasterGSTConstants.CDNA)) {
					individualInvoice.getCdnra().add(note);					
				}
				individualInvoice.getCdnr().add(note);
			} else if (invType.equals(B2CL)) {
				GSTRB2CL gstrb2cl = new GSTRB2CL();
				if(isNotEmpty(pos)) {
					gstrb2cl.setPos(pos);
				}
				gstrb2cl.getInv().add(gstrInvoiceDetails);
				individualInvoice.getB2cl().add(gstrb2cl);
			}else if (invType.equals(B2CLA)) {
				GSTRB2CL gstrb2cl = new GSTRB2CL();
				if(isNotEmpty(pos)) {
					gstrb2cl.setPos(pos);
				}
				gstrb2cl.getInv().add(gstrInvoiceDetails);
				individualInvoice.getB2cla().add(gstrb2cl);
				individualInvoice.getB2cl().add(gstrb2cl);
			} else if (invType.equals(EXPORTS)) {
				GSTRExports gstrexports = new GSTRExports();
				gstrexports.getInv().add(gstrExportDetails);
				individualInvoice.getExp().add(gstrexports);
				if(isNotEmpty(gstrExportDetails.getInum())) {
					individualInvoice.setInvoiceno(gstrExportDetails.getInum());
				}
				if(isNotEmpty(gstrExportDetails.getIdt())) {
					individualInvoice.setDateofinvoice(gstrExportDetails.getIdt());
				}
			}else if (invType.equals(MasterGSTConstants.EXPA)) {
				GSTRExports gstrexports = new GSTRExports();
				gstrexports.getInv().add(gstrExportDetails);
				individualInvoice.getExp().add(gstrexports);
				individualInvoice.getExpa().add(gstrexports);
				if(isNotEmpty(gstrExportDetails.getInum())) {
					individualInvoice.setInvoiceno(gstrExportDetails.getInum());
				}
				if(isNotEmpty(gstrExportDetails.getIdt())) {
					individualInvoice.setDateofinvoice(gstrExportDetails.getIdt());
				}
			} else if (invType.equals(CDNUR)) {
				individualInvoice.getCdnur().add(gstrInvoiceDetails);
			}else if (invType.equals(CDNURA)) {
				individualInvoice.getCdnura().add(gstrInvoiceDetails);
				individualInvoice.getCdnur().add(gstrInvoiceDetails);
			}// Add for ADVANCES & ATPAID
			//TODO : Add for remaining inv types
			
			
			if(invType.equals(B2BA)) {
				individualInvoice.getB2ba().add(indGstrb2b);
				GSTRB2B revGstrb2b = new GSTRB2B();
				if (isNotEmpty(ctin)) {
					revGstrb2b.setCtin(ctin);
				}
				individualInvoice.getB2b().add(revGstrb2b);
			}else {
				individualInvoice.getB2b().add(indGstrb2b);
			}
		} else if (invType.equals(EXPORTS)) {
			if(isNotEmpty(gstrExportDetails)) {
				GSTRExports gstrexports = new GSTRExports();
				if(isNotEmpty(gstrExportDetails.getIrn())) {
					individualInvoice.setIrnNo(gstrExportDetails.getIrn());
					individualInvoice.setIrnStatus(MasterGSTConstants.GENERATED);
					if(isNotEmpty(gstrExportDetails.getIrngendate())) {
						individualInvoice.setAckDt(gstrExportDetails.getIrngendate());
					}
				}
				gstrExportDetails.setIrn(null);
				gstrExportDetails.setIrngendate(null);
				gstrexports.getInv().add(gstrExportDetails);
				individualInvoice.getExp().add(gstrexports);
				if(isNotEmpty(gstrExportDetails.getInum())) {
					individualInvoice.setInvoiceno(gstrExportDetails.getInum());
				}
				if(isNotEmpty(gstrExportDetails.getIdt())) {
					individualInvoice.setDateofinvoice(gstrExportDetails.getIdt());
				}
				
			}
		} else if (invType.equals(MasterGSTConstants.EXPA)) {
			if(isNotEmpty(gstrExportDetails)) {
				GSTRExports gstrexports = new GSTRExports();
				gstrexports.getInv().add(gstrExportDetails);
				individualInvoice.getExpa().add(gstrexports);
				if(isNotEmpty(gstrExportDetails.getInum())) {
					individualInvoice.setInvoiceno(gstrExportDetails.getInum());
				}
				if(isNotEmpty(gstrExportDetails.getIdt())) {
					individualInvoice.setDateofinvoice(gstrExportDetails.getIdt());
				}
			}
		}else if(invType.equals(MasterGSTConstants.ATPAID) || invType.equals(MasterGSTConstants.ADVANCES)
				|| invType.equals(MasterGSTConstants.TXPA) || invType.equals(MasterGSTConstants.ATA)) {
			if(isNotEmpty(gstrAdvanceTax)) {
				if(isNotEmpty(gstrAdvanceTax.getPos())) {
					for(StateConfig stateConfig : configService.getStates()) {
						if (gstrAdvanceTax.getPos().equals(
								stateConfig.getTin() < 10 ? "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
							individualInvoice.setStatename(stateConfig.getName());
						}
					}
				}
			}
		}
		populateItems(individualInvoice, gstrInvoiceDetails, gstrExportDetails,gstrAdvanceTax,gstrNilItems);
		individualInvoice = (GSTR1) extrafields(individualInvoice,MasterGSTConstants.GSTR1);
		return individualInvoice;
	}
	
	private GSTR1A populateGSTR1A(GSTRInvoiceDetails gstrInvoiceDetails, final String gstn, final int month, int year,
			final String userid, final String clientid, final String invType, final String ctin, final String pos) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String strMonth = month < 10 ? "0" + month : month + "";
		GSTR1A individualInvoice = new GSTR1A();
		individualInvoice.setGstin(gstn);
		individualInvoice.setFp(strMonth+year);
		individualInvoice.setInvtype(invType);
		individualInvoice.setUserid(userid);
		individualInvoice.setClientid(clientid);
		individualInvoice.setAmendment(true);
		if(isNotEmpty(gstrInvoiceDetails)) {
			if(isNotEmpty(gstrInvoiceDetails.getInum())) {
				individualInvoice.setInvoiceno(gstrInvoiceDetails.getInum());
			}
			try {
				if (invType.equals(MasterGSTConstants.CDNA) || invType.equals(MasterGSTConstants.CDNUR)
						|| invType.equals(MasterGSTConstants.CDNURA)
						|| invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
						individualInvoice.setDateofinvoice(gstrInvoiceDetails.getNtDt());
					}
				}else {
					if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
						individualInvoice.setDateofinvoice(simpleDateFormat.parse(gstrInvoiceDetails.getIdt()));
					}
				}
			} catch (ParseException e) {
				logger.error(CLASSNAME + "populateGSTR1A :: ERROR in invoice date", e);
			}
			if(isNotEmpty(gstrInvoiceDetails.getVal())) {
				individualInvoice.setTotalamount(gstrInvoiceDetails.getVal());
			}
			GSTRB2B indGstrb2b = new GSTRB2B();
			if (isNotEmpty(ctin)) {
				indGstrb2b.setCtin(ctin);
			}
			if (invType.equals(B2B)) {
				indGstrb2b.getInv().add(gstrInvoiceDetails);
			} else if (invType.equals(CREDIT_DEBIT_NOTES)) {
				GSTRCreditDebitNotes note = new GSTRCreditDebitNotes();
				if (isNotEmpty(ctin)) {
					note.setCtin(ctin);
				}
				indGstrb2b.getInv().get(0).setAddress(gstrInvoiceDetails.getAddress());
				note.getNt().add(gstrInvoiceDetails);
				individualInvoice.getCdnr().add(note);
			} else if (invType.equals(B2CL)) {
				GSTRB2CL gstrb2cl = new GSTRB2CL();
				if(isNotEmpty(pos)) {
					gstrb2cl.setPos(pos);
				}
				gstrb2cl.getInv().add(gstrInvoiceDetails);
				individualInvoice.getB2cl().add(gstrb2cl);
			}
			individualInvoice.getB2b().add(indGstrb2b);
		}
		populateItems(individualInvoice, gstrInvoiceDetails, null,null,null);
		return individualInvoice;
	}
	
	public List<EWAYBILL> populateEwayBillData(List<EwayBillResponseData> ewayBillinvoice, User user, Client client,
			final String returntype) throws ParseException {
		List<EWAYBILL> elist = Lists.newArrayList();
		for (EwayBillResponseData invoice : ewayBillinvoice) {
			boolean isIntraState = true;
			Date stDate = null;
			Date endDate = null;
			EWAYBILL einvoice;
			Date idate = new SimpleDateFormat("dd/MM/yyyy").parse(invoice.getDocDate());

			String[] fip = invoice.getDocDate().split("/");
			int mt = Integer.parseInt(fip[1]);
			String strMonth = mt < 10 ? "0" + mt : mt + "";
			String fp = strMonth + fip[2];
			Date date = idate;
			Calendar calendar = new GregorianCalendar();
			calendar.setTime(date);
			int year = calendar.get(Calendar.YEAR);
			int month = calendar.get(Calendar.MONTH) + 1;
			int day = calendar.get(Calendar.DAY_OF_MONTH);

			if (isNotEmpty(returntype)) {
				if (isNotEmpty(client.getFilingoptions())) {
					String yr;
					if (month == 1 || month == 2 || month == 3) {
						yr = (year - 1) + "-" + (year);
					} else {
						yr = year + "-" + (year + 1);
					}
					// String yr=year+"-"+(year+1);
					client.getFilingoptions().forEach(options -> {
						if (options.getYear().equalsIgnoreCase(yr)) {
							client.setFilingOption(options.getOption());
						}
					});
				}

				Calendar cal = Calendar.getInstance();

				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					} else {
						cal.set(year, 3, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if ((!returntype.equals(MasterGSTConstants.GSTR2)
						&& !returntype.equals(MasterGSTConstants.PURCHASE_REGISTER))
						&& isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {

					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 23, 59, 59);
					} else if (month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if (month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if (month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if (month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if (month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 0, 0, 0);
					} else if (month == 10 || month == 11 || month == 12) {
						cal.set(year + 1, 0, 0, 0, 0, 0);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());

				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}

			}

			EWAYBILL ebill = ewayBillRepository.findByClientidAndFpAndEwayBillNumber(client.getId().toString(), fp,String.valueOf(invoice.getEwbillNo()));
			
			if (isNotEmpty(ebill)) {
				
				List<EBillVehicleListDetails> elists = Lists.newArrayList();
				EBillVehicleListDetails gstrrvlist = new EBillVehicleListDetails();

				List<EBillVehicleListDetails> vehiclelist = Lists.newArrayList();

				for (EBillVehicleListDetails evlist : invoice.getVehiclListDetails()) {
					gstrrvlist.setVehicleType(invoice.getVehicleType());
					gstrrvlist.setVehicleNo(evlist.getVehicleNo());
					gstrrvlist.setFromPlace(invoice.getFromPlace());
					gstrrvlist.setFromState(invoice.getFromStateCode());
					if (isNotEmpty(evlist.getTripshtNo())) {
						gstrrvlist.setTripshtNo(evlist.getTripshtNo());
					}
					gstrrvlist.setUserGSTINTransin(evlist.getUserGSTINTransin());
					Date dt1 = Calendar.getInstance().getTime();
					DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
					String strDate = dateFormat.format(dt1);
					gstrrvlist.setEnteredDate(strDate);
					gstrrvlist.setTransMode(evlist.getTransMode());
					gstrrvlist.setTransDocNo(evlist.getTransDocNo());
					if (isNotEmpty(evlist.getTransDocDate())) {
						gstrrvlist.setTransDocDate(evlist.getTransDocDate());
					} else {
						gstrrvlist.setTransDocDate("");
					}
					gstrrvlist.setVehicleType(evlist.getVehicleType());
					if (isNotEmpty(evlist.getGroupNo())) {
						gstrrvlist.setGroupNo(evlist.getGroupNo());
					}
					vehiclelist.add(evlist);
					elists.add(gstrrvlist);
					ebill.setVehiclListDetails(vehiclelist);
				}

				
				
				List<Item> items = Lists.newArrayList();


				List<EwayBillItems> ebillItems = Lists.newArrayList();
				Double totalIGST = 0d;
				Double totalCGST = 0d;
				Double totalSGST = 0d;
				Double totalExempted = 0d;
				for (EwayBillItems eItem : invoice.getItemList()) {
					Item gstrItem = new Item();
					if (isNotEmpty(eItem.getProductName())) {
						gstrItem.setItemno(eItem.getProductName());
					}
				
					if (isNotEmpty(eItem.getHsnCode())) {
						gstrItem.setHsn(String.valueOf(eItem.getHsnCode()));
					}
					if (isNotEmpty(eItem.getQuantity()) && eItem.getQuantity() >0) {
						gstrItem.setQuantity(eItem.getQuantity());
					}else {
						gstrItem.setQuantity(1d);
					}
					if (isNotEmpty(eItem.getQuantity()) && isNotEmpty(eItem.getTaxableAmount())) {
						gstrItem.setRateperitem(eItem.getTaxableAmount() / eItem.getQuantity());
					}
					if (isNotEmpty(eItem.getIgstRate())) {
						if (eItem.getIgstRate() > 0) {
							gstrItem.setRate(eItem.getIgstRate());
							gstrItem.setIgstrate(eItem.getIgstRate());
							if(isNotEmpty(eItem.getTaxableAmount())) {
								gstrItem.setIgstamount((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100);
								totalIGST += (eItem.getTaxableAmount() * eItem.getIgstRate()) / 100;
							}
						}
					}
					if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
						if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
							double cgstamt=0d;
							gstrItem.setCgstrate(eItem.getCgstRate());
							gstrItem.setSgstrate(eItem.getSgstRate());
							gstrItem.setRate(eItem.getCgstRate() + eItem.getSgstRate());
							if(isNotEmpty(eItem.getTaxableAmount())) {
								cgstamt = (eItem.getTaxableAmount() * eItem.getCgstRate()) / 100;
							}
							gstrItem.setCgstamount(cgstamt);
							gstrItem.setSgstamount(cgstamt);
							totalCGST += cgstamt;
							totalSGST += cgstamt;
						}
					}
					if (isEmpty(eItem.getTotalAmount())) {
						if (eItem.getIgstRate() > 0) {
							gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100));
						} else if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
							if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
								gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getCgstRate()) / 100) + ((eItem.getTaxableAmount() * eItem.getSgstRate()) / 100));
							}
						}
					}
					if (isNotEmpty(eItem.getTaxableAmount())) {
						gstrItem.setTaxablevalue(eItem.getTaxableAmount());
					}
				
					if (isNotEmpty(eItem.getCessRate())) {
						gstrItem.setCessrate(eItem.getCessRate());
					}
					if (isNotEmpty(eItem.getQtyUnit())) {
						gstrItem.setUqc(eItem.getQtyUnit());
					}
					items.add(gstrItem);

				}
				
				
				ebill.setTotalIgstAmount(totalIGST);
				ebill.setTotalCgstAmount(totalCGST);
				ebill.setTotalSgstAmount(totalSGST);
				ebill.setTotalExemptedAmount(totalExempted);
				ebill.setActualDist(invoice.getActualDist());
				ebill.setTransDistance(invoice.getActualDist().toString());
				ebill.setItems(items);
				int sumFactor = 1;
				int mth=-1,yr=-1;
					Date dt = new SimpleDateFormat("dd/MM/yyyy").parse(invoice.getEwbillDate());
					if(dt != null){
						mth = dt.getMonth();
						yr = dt.getYear()+1900;
					}
				int quarter = mth/3;
				quarter = quarter == 0 ? 4 : quarter;
				String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
				mth++;
				ebill.setSftr(sumFactor);
				ebill.setMthCd(String.valueOf(mth));
				ebill.setQrtCd(String.valueOf(quarter));
				ebill.setYrCd(yearCode);
				ebill.setCsftr(sumFactor);
				einvoice = ebill;
				elist.add(einvoice);
			} else {

				einvoice = new EWAYBILL();
				if (returntype.equals(MasterGSTConstants.EWAYBILL)) {

					if (isNotEmpty(invoice.getFromStateCode())) {
						if (!invoice.getFromStateCode().equals(client.getStatename())) {
							isIntraState = false;
						}
					}

					if (isNotEmpty(user.getId())) {
						einvoice.setUserid(user.getId().toString());
					}
					if (isNotEmpty(client.getId())) {
						einvoice.setClientid(client.getId().toString());
					}
					String sDate1 = invoice.getEwbillDate();
					Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(sDate1);

					einvoice.setInvoiceno(invoice.getDocNo());
					einvoice.setDateofinvoice(idate);
					einvoice.getB2b().get(0).setCtin(invoice.getToGstin());
					einvoice.setBilledtoname(invoice.getToTrdName());
					einvoice.setStatename(invoice.getToStateCode().toString());
					einvoice.setEwayBillNumber(invoice.getEwbillNo().toString());
					// einvoice.seteBillNo(invoice.getEwbillNo());
					einvoice.seteBillDate(date1);
					einvoice.setFp(fp);
					einvoice.setRevchargetype("Regular");
					einvoice.setInvtype("B2B");
					einvoice.setGenerateMode("EwayBill");
					einvoice.setTotalamount(invoice.getTotInvValue());
					einvoice.setTotaltaxableamount(invoice.getTotalValue());
					einvoice.setSupplyType(invoice.getSupplyType().trim());
					einvoice.setSubSupplyType(invoice.getSubSupplyType().trim());
					einvoice.setStatus(invoice.getStatus());
					einvoice.setDocType(invoice.getDocType());
					einvoice.setFromGstin(invoice.getFromGstin());
					einvoice.setFromPlace(invoice.getFromPlace());
					einvoice.setFromTrdName(invoice.getFromTrdName());
					einvoice.setFromPincode(invoice.getFromPincode());
					einvoice.setFromAddr1(invoice.getFromAddr1());
					einvoice.setFromAddr2(invoice.getFromAddr2());
					einvoice.setFromStateCode(invoice.getFromStateCode());
					einvoice.setToGstin(invoice.getToGstin());
					einvoice.setToPlace(invoice.getToPlace());
					einvoice.setToStateCode(invoice.getToStateCode());
					einvoice.setToPincode(invoice.getToPincode());
					einvoice.setToAddr1(invoice.getToAddr1());
					einvoice.setToAddr2(invoice.getToAddr2());
					einvoice.setToTrdName(invoice.getToTrdName());
					einvoice.setActualDist(invoice.getActualDist());
					einvoice.setTransDistance(invoice.getActualDist().toString());

					einvoice.setTransporterId(invoice.getTransporterId());
					einvoice.setTransporterName(invoice.getTransporterName());
					einvoice.setActualDist(invoice.getActualDist());
					einvoice.setValidUpto(invoice.getValidUpto());
					einvoice.setNoValidDays(invoice.getNoValidDays());
					einvoice.setExtendedTimes(invoice.getExtendedTimes());
					einvoice.setRejectStatus(invoice.getRejectStatus());
					einvoice.setVehicleType(invoice.getVehicleType());
					einvoice.setTransactionType(invoice.getTransactionType());
					einvoice.setOtherValue(invoice.getOtherValue());
					einvoice.setCessNonAdvolValue(invoice.getCessNonAdvolValue());

					List<EBillVehicleListDetails> elists = Lists.newArrayList();
					EBillVehicleListDetails gstrrvlist = new EBillVehicleListDetails();

					List<EBillVehicleListDetails> vehiclelist = Lists.newArrayList();

					for (EBillVehicleListDetails evlist : invoice.getVehiclListDetails()) {
						gstrrvlist.setVehicleType(evlist.getVehicleType());
						gstrrvlist.setVehicleNo(evlist.getVehicleNo());
						gstrrvlist.setFromPlace(invoice.getFromPlace());
						gstrrvlist.setFromState(invoice.getFromStateCode());
						if (isNotEmpty(evlist.getTripshtNo())) {
							gstrrvlist.setTripshtNo(evlist.getTripshtNo());
						}
						gstrrvlist.setUserGSTINTransin(evlist.getUserGSTINTransin());
						Date dt1 = Calendar.getInstance().getTime();
						DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
						String strDate = dateFormat.format(dt1);
						gstrrvlist.setEnteredDate(strDate);
						gstrrvlist.setTransMode(evlist.getTransMode());
						gstrrvlist.setTransDocNo(evlist.getTransDocNo());
						if (isNotEmpty(evlist.getTransDocDate())) {
							gstrrvlist.setTransDocDate(evlist.getTransDocDate());
						} else {
							gstrrvlist.setTransDocDate("");
						}
						gstrrvlist.setVehicleType(evlist.getVehicleType());
						if (isNotEmpty(evlist.getGroupNo())) {
							gstrrvlist.setGroupNo(evlist.getGroupNo());
						}
						vehiclelist.add(evlist);
						elists.add(gstrrvlist);
						einvoice.setVehiclListDetails(vehiclelist);
					}

					List<Item> items = Lists.newArrayList();


					List<EwayBillItems> ebillItems = Lists.newArrayList();
					Double totalIGST = 0d;
					Double totalCGST = 0d;
					Double totalSGST = 0d;
					Double totalExempted = 0d;
					for (EwayBillItems eItem : invoice.getItemList()) {
						Item gstrItem = new Item();
						if (isNotEmpty(eItem.getProductName())) {
							gstrItem.setItemno(eItem.getProductName());
						}
						if (isNotEmpty(eItem.getHsnCode())) {
							gstrItem.setHsn(String.valueOf(eItem.getHsnCode()));
						}
						if (isNotEmpty(eItem.getQuantity()) && eItem.getQuantity() >0) {
							gstrItem.setQuantity(eItem.getQuantity());
						}else {
							gstrItem.setQuantity(1d);
						}
						if (isNotEmpty(eItem.getQuantity()) && isNotEmpty(eItem.getTaxableAmount())) {
							gstrItem.setRateperitem(eItem.getTaxableAmount() / eItem.getQuantity());
						}
						if (isNotEmpty(eItem.getIgstRate())) {
							if (eItem.getIgstRate() > 0) {
								gstrItem.setRate(eItem.getIgstRate());
								gstrItem.setIgstrate(eItem.getIgstRate());
								if(isNotEmpty(eItem.getTaxableAmount())) {
									gstrItem.setIgstamount((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100);
									totalIGST += (eItem.getTaxableAmount() * eItem.getIgstRate()) / 100;
								}
							}
						}
						if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
							if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
								double cgstamt=0d;
								gstrItem.setCgstrate(eItem.getCgstRate());
								gstrItem.setSgstrate(eItem.getSgstRate());
								gstrItem.setRate(eItem.getCgstRate() + eItem.getSgstRate());
								if(isNotEmpty(eItem.getTaxableAmount())) {
									cgstamt = (eItem.getTaxableAmount() * eItem.getCgstRate()) / 100;
								}
								gstrItem.setCgstamount(cgstamt);
								gstrItem.setSgstamount(cgstamt);
								totalCGST += cgstamt;
								totalSGST += cgstamt;
							}
						}
						if (isEmpty(eItem.getTotalAmount())) {
							if (eItem.getIgstRate() > 0) {
								gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100));
							} else if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
								if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
									gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getCgstRate()) / 100) + ((eItem.getTaxableAmount() * eItem.getCgstRate()) / 100));
								}
							}
						}
						if (isNotEmpty(eItem.getTaxableAmount())) {
							gstrItem.setTaxablevalue(eItem.getTaxableAmount());
						}
					
						if (isNotEmpty(eItem.getCessRate())) {
							gstrItem.setCessrate(eItem.getCessRate());
						}
						if (isNotEmpty(eItem.getQtyUnit())) {
							gstrItem.setUqc(eItem.getQtyUnit());
						}
						ebillItems.add(eItem);

						items.add(gstrItem);
					}
					einvoice.setTotalIgstAmount(totalIGST);
					einvoice.setTotalCgstAmount(totalCGST);
					einvoice.setTotalSgstAmount(totalSGST);
					einvoice.setTotalExemptedAmount(totalExempted);
					einvoice.setItems(items);
					

				}
				// populateItems(null, null, null,null,null,invoice);
				List<GSTRItems> gitems = populateItemData(einvoice, isIntraState, returntype);
				List<GSTRInvoiceDetails> inv = Lists.newArrayList();
				GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
				gstrInvoiceDetail.setInum(invoice.getDocNo());
				gstrInvoiceDetail.setIdt(invoice.getDocDate());
				gstrInvoiceDetail.setPos(invoice.getToStateCode().toString());
				gstrInvoiceDetail.setRchrg("N");
				gstrInvoiceDetail.setVal(invoice.getTotInvValue());
				gstrInvoiceDetail.setInvTyp("R");
				gstrInvoiceDetail.setEtin("");

				gstrInvoiceDetail.setItms(gitems);

				inv.add(gstrInvoiceDetail);
				einvoice.getB2b().get(0).setInv(inv);

				int sumFactor = 1;
				int mth=-1,yr=-1;
					Date dt = new SimpleDateFormat("dd/MM/yyyy").parse(invoice.getEwbillDate());
					if(dt != null){
						mth = dt.getMonth();
						yr = dt.getYear()+1900;
					}
				int quarter = mth/3;
				quarter = quarter == 0 ? 4 : quarter;
				String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
				mth++;
				einvoice.setSftr(sumFactor);
				einvoice.setMthCd(String.valueOf(mth));
				einvoice.setQrtCd(String.valueOf(quarter));
				einvoice.setYrCd(yearCode);
				einvoice.setCsftr(sumFactor);
				// einvoice.getB2b().get(0).getInv().get(0).setItms(gitems);
				elist.add(einvoice);
			}
		}
		return elist;

	}
	
	public List<EWAYBILL> populateEwayBillData(List<EwayBillResponseData> ewayBillinvoice, User user, Client client,
			final String returntype,final String inwardoroutward,Map<String,StateConfig> statetin) throws ParseException {
		List<EWAYBILL> elist = Lists.newArrayList();
		for (EwayBillResponseData invoice : ewayBillinvoice) {
			boolean isIntraState = true;
			Date stDate = null;
			Date endDate = null;
			EWAYBILL einvoice;
			Date idate = new SimpleDateFormat("dd/MM/yyyy").parse(invoice.getDocDate());

			String[] fip = invoice.getDocDate().split("/");
			int mt = Integer.parseInt(fip[1]);
			String strMonth = mt < 10 ? "0" + mt : mt + "";
			String fp = strMonth + fip[2];
			Date date = idate;
			Calendar calendar = new GregorianCalendar();
			calendar.setTime(date);
			int year = calendar.get(Calendar.YEAR);
			int month = calendar.get(Calendar.MONTH) + 1;
			int day = calendar.get(Calendar.DAY_OF_MONTH);

			if (isNotEmpty(returntype)) {
				if (isNotEmpty(client.getFilingoptions())) {
					String yr;
					if (month == 1 || month == 2 || month == 3) {
						yr = (year - 1) + "-" + (year);
					} else {
						yr = year + "-" + (year + 1);
					}
					// String yr=year+"-"+(year+1);
					client.getFilingoptions().forEach(options -> {
						if (options.getYear().equalsIgnoreCase(yr)) {
							client.setFilingOption(options.getOption());
						}
					});
				}

				Calendar cal = Calendar.getInstance();

				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					} else {
						cal.set(year, 3, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if ((!returntype.equals(MasterGSTConstants.GSTR2)
						&& !returntype.equals(MasterGSTConstants.PURCHASE_REGISTER))
						&& isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {

					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 23, 59, 59);
					} else if (month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if (month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if (month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if (month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if (month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 0, 0, 0);
					} else if (month == 10 || month == 11 || month == 12) {
						cal.set(year + 1, 0, 0, 0, 0, 0);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());

				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}

			}

			EWAYBILL ebill = ewayBillRepository.findByClientidAndFpAndEwayBillNumber(client.getId().toString(), fp,String.valueOf(invoice.getEwbillNo()));
			
			if (isNotEmpty(ebill)) {
				
				List<EBillVehicleListDetails> elists = Lists.newArrayList();
				EBillVehicleListDetails gstrrvlist = new EBillVehicleListDetails();

				List<EBillVehicleListDetails> vehiclelist = Lists.newArrayList();

				for (EBillVehicleListDetails evlist : invoice.getVehiclListDetails()) {
					gstrrvlist.setVehicleType(invoice.getVehicleType());
					gstrrvlist.setVehicleNo(evlist.getVehicleNo());
					gstrrvlist.setFromPlace(invoice.getFromPlace());
					gstrrvlist.setFromState(invoice.getFromStateCode());
					if (isNotEmpty(evlist.getTripshtNo())) {
						gstrrvlist.setTripshtNo(evlist.getTripshtNo());
					}
					gstrrvlist.setUserGSTINTransin(evlist.getUserGSTINTransin());
					Date dt1 = Calendar.getInstance().getTime();
					DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
					String strDate = dateFormat.format(dt1);
					gstrrvlist.setEnteredDate(strDate);
					gstrrvlist.setTransMode(evlist.getTransMode());
					gstrrvlist.setTransDocNo(evlist.getTransDocNo());
					if (isNotEmpty(evlist.getTransDocDate())) {
						gstrrvlist.setTransDocDate(evlist.getTransDocDate());
					} else {
						gstrrvlist.setTransDocDate("");
					}
					gstrrvlist.setVehicleType(evlist.getVehicleType());
					if (isNotEmpty(evlist.getGroupNo())) {
						gstrrvlist.setGroupNo(evlist.getGroupNo());
					}
					vehiclelist.add(evlist);
					elists.add(gstrrvlist);
					ebill.setVehiclListDetails(vehiclelist);
				}

				
				
				List<Item> items = Lists.newArrayList();


				List<EwayBillItems> ebillItems = Lists.newArrayList();
				Double totalIGST = 0d;
				Double totalCGST = 0d;
				Double totalSGST = 0d;
				Double totalExempted = 0d;
				for (EwayBillItems eItem : invoice.getItemList()) {
					Item gstrItem = new Item();
					if (isNotEmpty(eItem.getProductName())) {
						gstrItem.setItemno(eItem.getProductName());
					}
				
					if (isNotEmpty(eItem.getHsnCode())) {
						gstrItem.setHsn(String.valueOf(eItem.getHsnCode()));
					}
					if (isNotEmpty(eItem.getQuantity()) && eItem.getQuantity() >0) {
						gstrItem.setQuantity(eItem.getQuantity());
					}else {
						gstrItem.setQuantity(1d);
					}
					if (isNotEmpty(eItem.getQuantity()) && isNotEmpty(eItem.getTaxableAmount())) {
						gstrItem.setRateperitem(eItem.getTaxableAmount() / eItem.getQuantity());
					}
					if (isNotEmpty(eItem.getIgstRate())) {
						if (eItem.getIgstRate() > 0) {
							gstrItem.setRate(eItem.getIgstRate());
							gstrItem.setIgstrate(eItem.getIgstRate());
							if(isNotEmpty(eItem.getTaxableAmount())) {
								gstrItem.setIgstamount((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100);
								totalIGST += (eItem.getTaxableAmount() * eItem.getIgstRate()) / 100;
							}
						}
					}
					if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
						if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
							double cgstamt=0d;
							gstrItem.setCgstrate(eItem.getCgstRate());
							gstrItem.setSgstrate(eItem.getSgstRate());
							gstrItem.setRate(eItem.getCgstRate() + eItem.getSgstRate());
							if(isNotEmpty(eItem.getTaxableAmount())) {
								cgstamt = (eItem.getTaxableAmount() * eItem.getCgstRate()) / 100;
							}
							gstrItem.setCgstamount(cgstamt);
							gstrItem.setSgstamount(cgstamt);
							totalCGST += cgstamt;
							totalSGST += cgstamt;
						}
					}
					if (isEmpty(eItem.getTotalAmount())) {
						if (eItem.getIgstRate() > 0) {
							gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100));
						} else if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
							if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
								gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getCgstRate()) / 100) + ((eItem.getTaxableAmount() * eItem.getSgstRate()) / 100));
							}
						}
					}
					if (isNotEmpty(eItem.getTaxableAmount())) {
						gstrItem.setTaxablevalue(eItem.getTaxableAmount());
					}
				
					if (isNotEmpty(eItem.getCessRate())) {
						gstrItem.setCessrate(eItem.getCessRate());
					}
					if (isNotEmpty(eItem.getQtyUnit())) {
						gstrItem.setUqc(eItem.getQtyUnit());
					}
					items.add(gstrItem);

				}
				
				
				ebill.setTotalIgstAmount(totalIGST);
				ebill.setTotalCgstAmount(totalCGST);
				ebill.setTotalSgstAmount(totalSGST);
				ebill.setTotalExemptedAmount(totalExempted);
				ebill.setActualDist(invoice.getActualDist());
				ebill.setTransDistance(invoice.getActualDist().toString());
				ebill.setItems(items);
				int sumFactor = 1;
				int mth=-1,yr=-1;
					Date dt = new SimpleDateFormat("dd/MM/yyyy").parse(invoice.getEwbillDate());
					if(dt != null){
						mth = dt.getMonth();
						yr = dt.getYear()+1900;
					}
				int quarter = mth/3;
				quarter = quarter == 0 ? 4 : quarter;
				String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
				mth++;
				ebill.setSftr(sumFactor);
				ebill.setMthCd(String.valueOf(mth));
				ebill.setQrtCd(String.valueOf(quarter));
				ebill.setYrCd(yearCode);
				ebill.setCsftr(sumFactor);
				einvoice = ebill;
				elist.add(einvoice);
			} else {

				einvoice = new EWAYBILL();
				if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if(inwardoroutward.equalsIgnoreCase("otherParties")) {
						if (isNotEmpty(invoice.getFromStateCode())) {
							Integer tin = (Integer) invoice.getFromStateCode();
							String statename = (tin < 10) ? ("0" + tin) : (tin + "");
							StateConfig state = statetin.get(statename);
							if(isNotEmpty(state)) {
								statename = state.getName();
							}
							if (!statename.equals(client.getStatename())) {
								isIntraState = false;
							}
							einvoice.setStatename(statename);
						}
						einvoice.getB2b().get(0).setCtin(invoice.getFromGstin());
						einvoice.setBilledtoname(invoice.getFromTrdName());
					}else {
						if (isNotEmpty(invoice.getToStateCode())) {
							Integer tin = (Integer) invoice.getToStateCode();
							String statename = (tin < 10) ? ("0" + tin) : (tin + "");
							StateConfig state = statetin.get(statename);
							if(isNotEmpty(state)) {
								statename = state.getName();
							}
							if (!statename.equals(client.getStatename())) {
								isIntraState = false;
							}
							einvoice.setStatename(statename);
						}
						einvoice.getB2b().get(0).setCtin(invoice.getToGstin());
						einvoice.setBilledtoname(invoice.getToTrdName());
						
					}
					if (isNotEmpty(user.getId())) {
						einvoice.setUserid(user.getId().toString());
					}
					if (isNotEmpty(client.getId())) {
						einvoice.setClientid(client.getId().toString());
					}
					String sDate1 = invoice.getEwbillDate();
					Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(sDate1);

					einvoice.setInvoiceno(invoice.getDocNo());
					einvoice.setDateofinvoice(idate);
					einvoice.setEwayBillNumber(invoice.getEwbillNo().toString());
					// einvoice.seteBillNo(invoice.getEwbillNo());
					einvoice.seteBillDate(date1);
					einvoice.setFp(fp);
					einvoice.setRevchargetype("Regular");
					einvoice.setInvtype("B2B");
					einvoice.setGenerateMode("EwayBill");
					einvoice.setTotaltaxableamount(invoice.getTotalValue());
					einvoice.setSupplyType(invoice.getSupplyType().trim());
					einvoice.setSubSupplyType(invoice.getSubSupplyType().trim());
					einvoice.setStatus(invoice.getStatus());
					einvoice.setDocType(invoice.getDocType());
					einvoice.setFromGstin(invoice.getFromGstin());
					einvoice.setFromPlace(invoice.getFromPlace());
					einvoice.setFromTrdName(invoice.getFromTrdName());
					einvoice.setFromPincode(invoice.getFromPincode());
					einvoice.setFromAddr1(invoice.getFromAddr1());
					einvoice.setFromAddr2(invoice.getFromAddr2());
					einvoice.setFromStateCode(invoice.getFromStateCode());
					einvoice.setToGstin(invoice.getToGstin());
					einvoice.setToPlace(invoice.getToPlace());
					einvoice.setToStateCode(invoice.getToStateCode());
					einvoice.setToPincode(invoice.getToPincode());
					einvoice.setToAddr1(invoice.getToAddr1());
					einvoice.setToAddr2(invoice.getToAddr2());
					einvoice.setToTrdName(invoice.getToTrdName());
					einvoice.setActualDist(invoice.getActualDist());
					einvoice.setTransDistance(invoice.getActualDist().toString());

					einvoice.setTransporterId(invoice.getTransporterId());
					einvoice.setTransporterName(invoice.getTransporterName());
					einvoice.setActualDist(invoice.getActualDist());
					einvoice.setValidUpto(invoice.getValidUpto());
					einvoice.setNoValidDays(invoice.getNoValidDays());
					einvoice.setExtendedTimes(invoice.getExtendedTimes());
					einvoice.setRejectStatus(invoice.getRejectStatus());
					einvoice.setVehicleType(invoice.getVehicleType());
					einvoice.setTransactionType(invoice.getTransactionType());
					einvoice.setOtherValue(invoice.getOtherValue());
					einvoice.setCessNonAdvolValue(invoice.getCessNonAdvolValue());

					List<EBillVehicleListDetails> elists = Lists.newArrayList();
					EBillVehicleListDetails gstrrvlist = new EBillVehicleListDetails();

					List<EBillVehicleListDetails> vehiclelist = Lists.newArrayList();

					for (EBillVehicleListDetails evlist : invoice.getVehiclListDetails()) {
						gstrrvlist.setVehicleType(evlist.getVehicleType());
						gstrrvlist.setVehicleNo(evlist.getVehicleNo());
						gstrrvlist.setFromPlace(invoice.getFromPlace());
						gstrrvlist.setFromState(invoice.getFromStateCode());
						if (isNotEmpty(evlist.getTripshtNo())) {
							gstrrvlist.setTripshtNo(evlist.getTripshtNo());
						}
						gstrrvlist.setUserGSTINTransin(evlist.getUserGSTINTransin());
						Date dt1 = Calendar.getInstance().getTime();
						DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
						String strDate = dateFormat.format(dt1);
						gstrrvlist.setEnteredDate(strDate);
						gstrrvlist.setTransMode(evlist.getTransMode());
						gstrrvlist.setTransDocNo(evlist.getTransDocNo());
						if (isNotEmpty(evlist.getTransDocDate())) {
							gstrrvlist.setTransDocDate(evlist.getTransDocDate());
						} else {
							gstrrvlist.setTransDocDate("");
						}
						gstrrvlist.setVehicleType(evlist.getVehicleType());
						if (isNotEmpty(evlist.getGroupNo())) {
							gstrrvlist.setGroupNo(evlist.getGroupNo());
						}
						vehiclelist.add(evlist);
						elists.add(gstrrvlist);
						einvoice.setVehiclListDetails(vehiclelist);
					}

					List<Item> items = Lists.newArrayList();


					List<EwayBillItems> ebillItems = Lists.newArrayList();
					Double totalIGST = 0d;
					Double totalCGST = 0d;
					Double totalSGST = 0d;
					Double totalExempted = 0d;
					for (EwayBillItems eItem : invoice.getItemList()) {
						Item gstrItem = new Item();
						if (isNotEmpty(eItem.getProductName())) {
							gstrItem.setItemno(eItem.getProductName());
						}
						if (isNotEmpty(eItem.getHsnCode())) {
							gstrItem.setHsn(String.valueOf(eItem.getHsnCode()));
						}
						if (isNotEmpty(eItem.getQuantity()) && eItem.getQuantity() >0) {
							gstrItem.setQuantity(eItem.getQuantity());
						}else {
							gstrItem.setQuantity(1d);
						}
						if (isNotEmpty(eItem.getQuantity()) && isNotEmpty(eItem.getTaxableAmount())) {
							gstrItem.setRateperitem(eItem.getTaxableAmount() / eItem.getQuantity());
						}
						if (isNotEmpty(eItem.getIgstRate())) {
							if (eItem.getIgstRate() > 0) {
								gstrItem.setRate(eItem.getIgstRate());
								gstrItem.setIgstrate(eItem.getIgstRate());
								if(isNotEmpty(eItem.getTaxableAmount())) {
									gstrItem.setIgstamount((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100);
									totalIGST += (eItem.getTaxableAmount() * eItem.getIgstRate()) / 100;
								}
							}
						}
						if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
							if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
								double cgstamt=0d;
								gstrItem.setCgstrate(eItem.getCgstRate());
								gstrItem.setSgstrate(eItem.getSgstRate());
								gstrItem.setRate(eItem.getCgstRate() + eItem.getSgstRate());
								if(isNotEmpty(eItem.getTaxableAmount())) {
									cgstamt = (eItem.getTaxableAmount() * eItem.getCgstRate()) / 100;
								}
								gstrItem.setCgstamount(cgstamt);
								gstrItem.setSgstamount(cgstamt);
								totalCGST += cgstamt;
								totalSGST += cgstamt;
							}
						}
						if (isEmpty(eItem.getTotalAmount())) {
							if (eItem.getIgstRate() > 0) {
								gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getIgstRate()) / 100));
							} else if (isNotEmpty(eItem.getCgstRate()) && isNotEmpty(eItem.getSgstRate())) {
								if (eItem.getCgstRate() > 0 && eItem.getSgstRate() > 0) {
									gstrItem.setTotal(eItem.getTaxableAmount() + ((eItem.getTaxableAmount() * eItem.getCgstRate()) / 100) + ((eItem.getTaxableAmount() * eItem.getCgstRate()) / 100));
								}
							}
						}
						if (isNotEmpty(eItem.getTaxableAmount())) {
							gstrItem.setTaxablevalue(eItem.getTaxableAmount());
						}
					
						if (isNotEmpty(eItem.getCessRate())) {
							gstrItem.setCessrate(eItem.getCessRate());
						}
						if (isNotEmpty(eItem.getQtyUnit())) {
							gstrItem.setUqc(eItem.getQtyUnit());
						}
						ebillItems.add(eItem);

						items.add(gstrItem);
					}
					einvoice.setTotalIgstAmount(totalIGST);
					einvoice.setTotalCgstAmount(totalCGST);
					einvoice.setTotalSgstAmount(totalSGST);
					einvoice.setTotalExemptedAmount(totalExempted);
					einvoice.setItems(items);
					einvoice.setSrctype("GSTAPI");

				}
				// populateItems(null, null, null,null,null,invoice);
				List<GSTRItems> gitems = populateItemData(einvoice, isIntraState, returntype);
				einvoice.setTotalamount(invoice.getTotInvValue());
				List<GSTRInvoiceDetails> inv = Lists.newArrayList();
				GSTRInvoiceDetails gstrInvoiceDetail = new GSTRInvoiceDetails();
				gstrInvoiceDetail.setInum(invoice.getDocNo());
				gstrInvoiceDetail.setIdt(invoice.getDocDate());
				gstrInvoiceDetail.setPos(invoice.getToStateCode().toString());
				gstrInvoiceDetail.setRchrg("N");
				gstrInvoiceDetail.setVal(invoice.getTotInvValue());
				gstrInvoiceDetail.setInvTyp("R");
				gstrInvoiceDetail.setEtin("");

				gstrInvoiceDetail.setItms(gitems);

				inv.add(gstrInvoiceDetail);
				einvoice.getB2b().get(0).setInv(inv);

				int sumFactor = 1;
				int mth=-1,yr=-1;
					Date dt = new SimpleDateFormat("dd/MM/yyyy").parse(invoice.getEwbillDate());
					if(dt != null){
						mth = dt.getMonth();
						yr = dt.getYear()+1900;
					}
				int quarter = mth/3;
				quarter = quarter == 0 ? 4 : quarter;
				String yearCode = quarter == 4 ? (yr-1)+"-"+yr : (yr)+"-"+(yr+1);
				mth++;
				einvoice.setSftr(sumFactor);
				einvoice.setMthCd(String.valueOf(mth));
				einvoice.setQrtCd(String.valueOf(quarter));
				einvoice.setYrCd(yearCode);
				einvoice.setCsftr(sumFactor);
				// einvoice.getB2b().get(0).getInv().get(0).setItms(gitems);
				elist.add(einvoice);
			}
		}
		return elist;

	}

	private void populateItems(InvoiceParent individualInvoice, GSTRInvoiceDetails gstrInvoiceDetails,
			GSTRExportDetails gstrExportDetails, GSTRAdvanceTax gstrAdvanceTax, GSTRNilItems gstrNilItems) {
		Double totalTaxVal = 0d;
		Double totalTax = 0d;
		Double totalITC = 0d;
		Double totalamount = 0d;
		List<Item> items = Lists.newArrayList();
		if(isNotEmpty(gstrInvoiceDetails) && isNotEmpty(gstrInvoiceDetails.getItms())) {
			totalamount += gstrInvoiceDetails.getVal();
			individualInvoice.setTotalamount(totalamount);
			for (GSTRItems gstrItem : gstrInvoiceDetails.getItms()) {
				Item item = new Item();
				item.setTaxablevalue(gstrItem.getItem().getTxval());
				item.setRateperitem(gstrItem.getItem().getTxval());
				item.setQuantity(Double.parseDouble("1"));
				item.setRate(gstrItem.getItem().getRt());
				
				Double itemTaxVal = 0d;
				itemTaxVal = gstrItem.getItem().getTxval();
				Double itemTax = 0d;
				
				totalTaxVal += gstrItem.getItem().getTxval();
				if (isNotEmpty(gstrItem.getItem().getIamt())) {
					item.setIgstamount(gstrItem.getItem().getIamt());
					item.setIgstrate(gstrItem.getItem().getRt());
					totalTax += gstrItem.getItem().getIamt();
					itemTax += gstrItem.getItem().getIamt();
				}
				if (isNotEmpty(gstrItem.getItem().getCamt())) {
					item.setCgstamount(gstrItem.getItem().getCamt());
					item.setCgstrate(gstrItem.getItem().getRt() / 2);
					totalTax += gstrItem.getItem().getCamt();
					itemTax += gstrItem.getItem().getCamt();
				}
				if (isNotEmpty(gstrItem.getItem().getSamt())) {
					item.setSgstamount(gstrItem.getItem().getSamt());
					item.setSgstrate(gstrItem.getItem().getRt() / 2);
					totalTax += gstrItem.getItem().getSamt();
					itemTax += gstrItem.getItem().getSamt();
				}
				if (isNotEmpty(gstrItem.getItem().getCsamt())) {
					item.setCessamount(gstrItem.getItem().getCsamt());
					totalTax += gstrItem.getItem().getCsamt();
					itemTax += gstrItem.getItem().getCsamt();
				}
				if (isNotEmpty(gstrItem.getItc())) {
					if (isNotEmpty(gstrItem.getItc().getiTax())) {
						totalITC += gstrItem.getItc().getiTax();
					}
					if (isNotEmpty(gstrItem.getItc().getcTax())) {
						totalITC += gstrItem.getItc().getcTax();
					}
					if (isNotEmpty(gstrItem.getItc().getsTax())) {
						totalITC += gstrItem.getItc().getsTax();
					}
					if (isNotEmpty(gstrItem.getItc().getCsTax())) {
						totalITC += gstrItem.getItc().getCsTax();
					}
				}
				if (gstrInvoiceDetails.getItms().size() == 1) { 
					item.setTotal(gstrInvoiceDetails.getVal());
				}else {
					//item.setTotal(totalTaxVal + totalTax);
					item.setTotal(itemTaxVal + itemTax);
				}
				items.add(item);
			}
		} else if(isNotEmpty(gstrExportDetails) && isNotEmpty(gstrExportDetails.getItms())) {
			totalamount += gstrExportDetails.getVal();
			for (GSTRItemDetails gstrItem : gstrExportDetails.getItms()) {
				Item item = new Item();
				item.setTaxablevalue(gstrItem.getTxval());
				totalTaxVal += gstrItem.getTxval();
				item.setRateperitem(gstrItem.getTxval());
				item.setQuantity(Double.parseDouble("1"));
				item.setRate(gstrItem.getRt());
				Double itemTaxVal = 0d;
				itemTaxVal = gstrItem.getTxval();
				Double itemTax = 0d;
				if (isNotEmpty(gstrItem.getIamt())) {
					item.setIgstamount(gstrItem.getIamt());
					item.setIgstrate(gstrItem.getRt());
					totalTax += gstrItem.getIamt();
					itemTax += gstrItem.getIamt();
				}
				if (isNotEmpty(gstrItem.getCamt())) {
					item.setCgstamount(gstrItem.getCamt());
					item.setCgstrate(gstrItem.getRt() / 2);
					totalTax += gstrItem.getCamt();
					itemTax += gstrItem.getCamt();
				}
				if (isNotEmpty(gstrItem.getSamt())) {
					item.setSgstamount(gstrItem.getSamt());
					item.setSgstrate(gstrItem.getRt() / 2);
					totalTax += gstrItem.getSamt();
					itemTax += gstrItem.getSamt();
				}
				if (isNotEmpty(gstrItem.getCsamt())) {
					item.setCessamount(gstrItem.getCsamt());
					totalTax += gstrItem.getCsamt();
					itemTax += gstrItem.getCsamt();
				}
				if (gstrExportDetails.getItms().size() == 1) { 
					item.setTotal(gstrExportDetails.getVal());
				}else {
					item.setTotal(itemTaxVal + itemTax);
				}
				items.add(item);	
			}
			individualInvoice.setTotalamount(totalamount);
		}else if(individualInvoice.getInvtype().equals(MasterGSTConstants.ATPAID) && isNotEmpty(gstrAdvanceTax)) {
			
			for(GSTRItemDetails gstrItem : gstrAdvanceTax.getItms()) {
				Item item = new Item();
				item.setTaxablevalue(gstrItem.getTxval());
				item.setRateperitem(gstrItem.getTxval());
				item.setQuantity(Double.parseDouble("1"));
				item.setRate(gstrItem.getRt());
				item.setAdvadjustedAmount(gstrItem.getAdvAmt());
				totalTaxVal += gstrItem.getAdvAmt();
				if (isNotEmpty(gstrItem.getIamt())) {
					item.setIgstamount(gstrItem.getIamt());
					item.setIgstrate(gstrItem.getRt());
					totalTax += gstrItem.getIamt();
				}
				if (isNotEmpty(gstrItem.getCamt())) {
					item.setCgstamount(gstrItem.getCamt());
					item.setCgstrate(gstrItem.getRt() / 2);
					totalTax += gstrItem.getCamt();
				}
				if (isNotEmpty(gstrItem.getSamt())) {
					item.setSgstamount(gstrItem.getSamt());
					item.setSgstrate(gstrItem.getRt() / 2);
					totalTax += gstrItem.getSamt();
				}
				if (isNotEmpty(gstrItem.getCsamt())) {
					item.setCessamount(gstrItem.getCsamt());
				}
				totalamount += gstrItem.getAdvAmt()+totalTax;
				item.setTotal(gstrItem.getAdvAmt()+totalTax);
				if(isNotEmpty(gstrAdvanceTax.getPos())) {
					item.setAdvStateName(gstrAdvanceTax.getPos());					
				}
				
				items.add(item);
			}
			individualInvoice.setTotalamount(totalamount);
		}else if(individualInvoice.getInvtype().equals(MasterGSTConstants.TXPA) && isNotEmpty(gstrAdvanceTax)) {
			Double totTaxableAmt = 0d;
			for(GSTRItemDetails gstrItem : gstrAdvanceTax.getItms()) {
				
				Item item = new Item();
				item.setTaxablevalue(gstrItem.getTxval());
				item.setRateperitem(gstrItem.getTxval());
				item.setQuantity(Double.parseDouble("1"));
				item.setRate(gstrItem.getRt());
				item.setTaxablevalue(gstrItem.getAdvAmt());
				item.setAdvadjustedAmount(gstrItem.getAdvAmt());
				if (isNotEmpty(gstrItem.getIamt())) {
					item.setIgstamount(gstrItem.getIamt());
					item.setIgstrate(gstrItem.getRt());
					totalTax += gstrItem.getIamt();
				}
				if (isNotEmpty(gstrItem.getCamt())) {
					item.setCgstamount(gstrItem.getCamt());
					item.setCgstrate(gstrItem.getRt() / 2);
					totalTax += gstrItem.getCamt();
				}
				if (isNotEmpty(gstrItem.getSamt())) {
					item.setSgstamount(gstrItem.getSamt());
					item.setSgstrate(gstrItem.getRt() / 2);
					totalTax += gstrItem.getSamt();
				}
				if (isNotEmpty(gstrItem.getCsamt())) {
					item.setCessamount(gstrItem.getCsamt());
				}
				if(isNotEmpty(gstrAdvanceTax.getPos())) {
					item.setAdvStateName(gstrAdvanceTax.getPos());					
				}
				
				totalTaxVal += gstrItem.getAdvAmt();
				totalamount += gstrItem.getAdvAmt()+totalTax;
				item.setTotal(gstrItem.getAdvAmt()+totalTax);
				items.add(item);
			}
			individualInvoice.setTotalamount(totalamount);
		}else if((individualInvoice.getInvtype().equals(MasterGSTConstants.ADVANCES) || individualInvoice.getInvtype().equals(MasterGSTConstants.ATA)) && isNotEmpty(gstrAdvanceTax)) {
			for(GSTRItemDetails gstrItem : gstrAdvanceTax.getItms()) {
				Double itemtax = 0d;
				Item item = new Item();
				item.setTaxablevalue(gstrItem.getAdvAmt());
				item.setRateperitem(gstrItem.getAdvAmt());
				item.setQuantity(Double.parseDouble("1"));
				item.setRate(gstrItem.getRt());
				if (isNotEmpty(gstrItem.getIamt())) {
					item.setIgstamount(gstrItem.getIamt());
					item.setIgstrate(gstrItem.getRt());
					itemtax += gstrItem.getIamt();
					totalTax += gstrItem.getIamt();
				}
				if (isNotEmpty(gstrItem.getCamt())) {
					item.setCgstamount(gstrItem.getCamt());
					item.setCgstrate(gstrItem.getRt() / 2);
					itemtax += gstrItem.getCamt();
					totalTax += gstrItem.getCamt();
				}
				if (isNotEmpty(gstrItem.getSamt())) {
					item.setSgstamount(gstrItem.getSamt());
					item.setSgstrate(gstrItem.getRt() / 2);
					itemtax += gstrItem.getSamt();
					totalTax += gstrItem.getSamt();
				}
				if (isNotEmpty(gstrItem.getCsamt())) {
					item.setCessamount(gstrItem.getCsamt());
				}
				totalamount += gstrItem.getAdvAmt()+totalTax;
				totalTaxVal += gstrItem.getAdvAmt();
				item.setTotal(gstrItem.getAdvAmt() + itemtax);
				item.setAdvreceived(gstrItem.getAdvAmt() + itemtax);
				items.add(item);
			}
			individualInvoice.setTotalamount(totalamount);
		}else if(isNotEmpty(gstrNilItems)) {
			if(isNotEmpty(gstrNilItems.getNilAmt()) && gstrNilItems.getNilAmt() != 0d) {
				Item item = new Item();
				item.setTotal(gstrNilItems.getNilAmt());
				item.setTaxablevalue(gstrNilItems.getNilAmt());
				item.setType("Nil Rated");
				totalTaxVal += gstrNilItems.getNilAmt();
				items.add(item);
			}
			if(isNotEmpty(gstrNilItems.getExptAmt()) && gstrNilItems.getExptAmt() != 0d) {
				Item item = new Item();
				item.setTotal(gstrNilItems.getExptAmt());
				item.setTaxablevalue(gstrNilItems.getExptAmt());
				item.setType("Exempted");
				totalTaxVal += gstrNilItems.getExptAmt();
				items.add(item);
			}
			if(isNotEmpty(gstrNilItems.getNgsupAmt()) && gstrNilItems.getNgsupAmt() != 0d) {
				Item item = new Item();
				item.setTotal(gstrNilItems.getNgsupAmt());
				item.setTaxablevalue(gstrNilItems.getNgsupAmt());
				item.setType("Non-GST");
				totalTaxVal += gstrNilItems.getNgsupAmt();
				items.add(item);
			}
			individualInvoice.setTotalamount(totalTaxVal);
		}
		
		individualInvoice.setItems(items);
		individualInvoice.setTotaltaxableamount(totalTaxVal);
		individualInvoice.setTotaltax(totalTax);
		individualInvoice.setTotalitc(totalITC);
	}

	@Override
	@Transactional
	public void updateGSTR2AReturnData(InvoiceParent gstr2a, final String invType, final String gstn,
			final String clientid, final String fp, final int month, final int year) {
		logger.debug(CLASSNAME + "updateGSTR2ReturnData : Begin");
		Client client = findById(clientid);
		List<GSTR2> gstr2DwnldList = Lists.newArrayList();
		Pageable pageable = new PageRequest(0, 2, Sort.Direction.DESC, "createdDate");
		Map<String, ResponseData> gstnMap = Maps.newHashMap();
		if (invType.equals(B2B) || invType.equals(B2BA)) {
			if (isNotEmpty(gstr2a.getB2b())) {
				List<GSTR2> gstr2List = gstr2Repository.findByClientidAndFpAndInvtype(clientid, fp, invType);
				List<String> gstr2AList = Lists.newArrayList();
				List<String> gstr2Ids = Lists.newArrayList();
				for(GSTR2 g2 : gstr2List) {
					if(isNotEmpty(g2.getInvoiceno())) {
						gstr2Ids.add(g2.getInvoiceno());
						if(g2.isAmendment()) {
							String invNoCtin = g2.getInvoiceno();
							if(isNotEmpty(g2.getB2b())) {
								if(isNotEmpty(g2.getB2b().get(0).getCtin())) {
									String ctin = g2.getB2b().get(0).getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(g2.getB2b().get(0).getInv().get(0).getIdt())) {
									String idt = g2.getB2b().get(0).getInv().get(0).getIdt();
									invNoCtin = invNoCtin+idt;
								}
							}
							gstr2AList.add(invNoCtin);
						}
					}
				}
				//gstr2Repository.delete(gstr2AList);
				for (GSTRB2B gstrb2b : gstr2a.getB2b()) {
					if(isNotEmpty(gstrb2b.getCtin()) && !gstnMap.containsKey(gstrb2b.getCtin())) {
						Page<GSTINPublicData> page = gstinPublicDataRepository.findByGstin(gstrb2b.getCtin(), pageable);
						if(isNotEmpty(page) && isNotEmpty(page.getContent())) {
							GSTINPublicData publicData = page.getContent().get(0);
							ResponseData data = new ResponseData();
							if(isNotEmpty(publicData.getTradeNam())) {
								data.setTradeNam(publicData.getTradeNam());
							}else {
								data.setTradeNam(publicData.getLgnm());
							}
							data.setPradr(publicData.getPradr());
							gstnMap.put(gstrb2b.getCtin(), data);
						} else {
							Response response = iHubConsumerService.publicSearch(gstrb2b.getCtin());
							if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								ResponseData data = response.getData();
								if(isNotEmpty(data.getTradeNam())) {
									data.setTradeNam(data.getTradeNam());
								}else {
									data.setTradeNam(data.getLgnm());
								}
								gstnMap.put(gstrb2b.getCtin(), data);
							}
						}
					}
					for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
							String dwnldInvNoCtin = gstrInvoiceDetails.getInum();
							 //&& gstnMap.containsKey(gstrb2b.getCtin())
							if(isNotEmpty(gstrb2b.getCtin())) {
								String dwnldctin = gstrb2b.getCtin();
								dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
							}
							if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
								String dwnlddate = gstrInvoiceDetails.getIdt();
								dwnldInvNoCtin = dwnldInvNoCtin+dwnlddate;
							}
						
						if(isEmpty(gstr2AList) || !gstr2AList.contains(dwnldInvNoCtin)) {
							if(isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
								String addr;
								GSTINPublicAddress gstinAddress = gstnMap.get(gstrb2b.getCtin()).getPradr();
								if(isNotEmpty(gstinAddress)){
									GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
									if(isNotEmpty(gstinAddressData)){
										addr = gstinAddressData.getBnm() + "," + gstinAddressData.getSt() + ","
												+ gstinAddressData.getLoc() + "," + gstinAddressData.getDst() + ","
												+ gstinAddressData.getStcd() + "," + gstinAddressData.getCity() + ","
												+ gstinAddressData.getFlno() + "," + gstinAddressData.getPncd();
										gstrInvoiceDetails.setAddress(addr);
									}
								}
							}
							GSTR2 individualInvoice = populateGSTR2(gstrInvoiceDetails, gstn, fp, gstr2a.getUserid(),
									gstr2a.getClientid(), invType, gstrb2b.getCtin(),gstrb2b.getCfs(),gstrb2b.getCfs3b(),gstrb2b.getFldtr1(),gstrb2b.getFlprdr1(),gstrb2b.getDtcancel());
							
							if(isNotEmpty(client) && isNotEmpty(client.getStatename())) {
								individualInvoice.setStatename(client.getStatename());
							}
							
							if(isNotEmpty(gstrb2b.getCtin()) && gstnMap.containsKey(gstrb2b.getCtin())) {
								individualInvoice.setBilledtoname(gstnMap.get(gstrb2b.getCtin()).getTradeNam());
							}
							individualInvoice.setAmendment(gstr2a.isAmendment());
							gstr2DwnldList.add(individualInvoice);
							//gstr2Repository.save(individualInvoice);
						}
					}
				}
			}else if (isNotEmpty(((GSTR2) gstr2a).getB2ba())) {
				List<GSTR2> gstr2List = gstr2Repository.findByClientidAndFpAndInvtype(clientid, fp, invType);
				List<String> gstr2AList = Lists.newArrayList();
				List<String> gstr2Ids = Lists.newArrayList();
				for(GSTR2 g2 : gstr2List) {
					if(isNotEmpty(g2.getInvoiceno())) {
						gstr2Ids.add(g2.getInvoiceno());
						if(g2.isAmendment()) {
							String invNoCtin = g2.getInvoiceno();
							if(isNotEmpty(((GSTR2) g2).getB2ba())) {
								if(isNotEmpty(((GSTR2) g2).getB2ba().get(0).getCtin())) {
									String ctin = ((GSTR2) g2).getB2ba().get(0).getCtin();
									invNoCtin = invNoCtin+ctin;
								}
								if(isNotEmpty(((GSTR2) g2).getB2ba().get(0).getInv().get(0).getIdt())) {
									String idt = ((GSTR2) g2).getB2ba().get(0).getInv().get(0).getIdt();
									invNoCtin = invNoCtin+idt;
								}
							}
							gstr2AList.add(invNoCtin);
						}
					}
				}
				//gstr2Repository.delete(gstr2AList);
				for (GSTRB2B gstrb2ba : ((GSTR2)gstr2a).getB2ba()) {
					if(isNotEmpty(gstrb2ba.getCtin()) && !gstnMap.containsKey(gstrb2ba.getCtin())) {
						Page<GSTINPublicData> page = gstinPublicDataRepository.findByGstin(gstrb2ba.getCtin(), pageable);
						if(isNotEmpty(page) && isNotEmpty(page.getContent())) {
							GSTINPublicData publicData = page.getContent().get(0);
							ResponseData data = new ResponseData();
							if(isNotEmpty(publicData.getTradeNam())) {
								data.setTradeNam(publicData.getTradeNam());
							}else {
								data.setTradeNam(publicData.getLgnm());
							}
							data.setPradr(publicData.getPradr());
							gstnMap.put(gstrb2ba.getCtin(), data);
						} else {
							Response response = iHubConsumerService.publicSearch(gstrb2ba.getCtin());
							if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								ResponseData data = response.getData();
								if(isNotEmpty(data.getTradeNam())) {
									data.setTradeNam(data.getTradeNam());
								}else {
									data.setTradeNam(data.getLgnm());
								}
								gstnMap.put(gstrb2ba.getCtin(), data);
							}
						}
					}
					for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2ba.getInv()) {
							String dwnldInvNoCtin = gstrInvoiceDetails.getInum();
							if(isNotEmpty(gstrb2ba.getCtin())) {
								String dwnldctin = gstrb2ba.getCtin();
								dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
							}
							if(isNotEmpty(gstrInvoiceDetails.getIdt())) {
								String dwnlddate = gstrInvoiceDetails.getIdt();
								dwnldInvNoCtin = dwnldInvNoCtin+dwnlddate;
							}
						
						if(isEmpty(gstr2AList) || !gstr2AList.contains(dwnldInvNoCtin)) {
							if(isNotEmpty(gstrb2ba.getCtin()) && gstnMap.containsKey(gstrb2ba.getCtin())) {
								String addr;
								GSTINPublicAddress gstinAddress = gstnMap.get(gstrb2ba.getCtin()).getPradr();
								if(isNotEmpty(gstinAddress)){
									GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
									if(isNotEmpty(gstinAddressData)){
										addr = gstinAddressData.getBnm() + "," + gstinAddressData.getSt() + ","
												+ gstinAddressData.getLoc() + "," + gstinAddressData.getDst() + ","
												+ gstinAddressData.getStcd() + "," + gstinAddressData.getCity() + ","
												+ gstinAddressData.getFlno() + "," + gstinAddressData.getPncd();
										gstrInvoiceDetails.setAddress(addr);
									}
								}
							}
							GSTR2 individualInvoice = populateGSTR2(gstrInvoiceDetails, gstn, fp, gstr2a.getUserid(),
									gstr2a.getClientid(), invType, gstrb2ba.getCtin(),gstrb2ba.getCfs(),gstrb2ba.getCfs3b(),gstrb2ba.getFldtr1(),gstrb2ba.getFlprdr1(),gstrb2ba.getDtcancel());
							
							if(isNotEmpty(client) && isNotEmpty(client.getStatename())) {
								individualInvoice.setStatename(client.getStatename());
							}
							
							if(isNotEmpty(gstrb2ba.getCtin()) && gstnMap.containsKey(gstrb2ba.getCtin())) {
								individualInvoice.setBilledtoname(gstnMap.get(gstrb2ba.getCtin()).getTradeNam());
							}
							individualInvoice.setAmendment(gstr2a.isAmendment());
							gstr2DwnldList.add(individualInvoice);
							//gstr2Repository.save(individualInvoice);
						}
					}
				}
			}
		} else if (invType.equals(CREDIT_DEBIT_NOTES) || invType.equals(CDNA)) {
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
			if (isNotEmpty(gstr2a.getCdn())) {
				List<GSTR2> gstr2List = gstr2Repository.findByClientidAndFpAndInvtype(clientid, fp, invType);
				List<String> gstr2Ids = Lists.newArrayList();
				List<String> gstr2AList = Lists.newArrayList();
				for(GSTR2 g2 : gstr2List) {
					if(isNotEmpty(g2.getInvoiceno())) {
						gstr2Ids.add(g2.getInvoiceno());
						if(g2.isAmendment()) {
							String invNoCtin = g2.getInvoiceno();
						if(isNotEmpty(g2.getCdn())) {
							if(isNotEmpty(g2.getCdn().get(0).getCtin())) {
								String ctin = g2.getCdn().get(0).getCtin();
								invNoCtin = invNoCtin+ctin;
							}
							if(isNotEmpty(g2.getCdn().get(0).getNt().get(0).getNtDt())) {
								String idt = simpleDateFormat.format(g2.getCdn().get(0).getNt().get(0).getNtDt());
								invNoCtin = invNoCtin+idt;
							}
						}
							gstr2AList.add(invNoCtin);
						}
					}
				}
				//gstr2Repository.delete(gstr2AList);
				for (GSTRCreditDebitNotes gstrcdn : gstr2a.getCdn()) {
					if(isNotEmpty(gstrcdn.getCtin()) && !gstnMap.containsKey(gstrcdn.getCtin())) {
						Page<GSTINPublicData> page = gstinPublicDataRepository.findByGstin(gstrcdn.getCtin(), pageable);
						if(isNotEmpty(page) && isNotEmpty(page.getContent())) {
							GSTINPublicData publicData = page.getContent().get(0);
							ResponseData data = new ResponseData();
							if(isNotEmpty(publicData.getTradeNam())) {
								data.setTradeNam(publicData.getTradeNam());
							}else {
								data.setTradeNam(publicData.getLgnm());
							}
							data.setPradr(publicData.getPradr());
							gstnMap.put(gstrcdn.getCtin(), data);
						} else {
							Response response = iHubConsumerService.publicSearch(gstrcdn.getCtin());
							if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
									&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								ResponseData data = response.getData();
								if(isNotEmpty(data.getTradeNam())) {
									data.setTradeNam(data.getTradeNam());
								}else {
									data.setTradeNam(data.getLgnm());
								}
								gstnMap.put(gstrcdn.getCtin(), data);
							}
						}
					}
					
					for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
						String dwnldInvNoCtin = gstrInvoiceDetails.getNtNum();
						if(isNotEmpty(gstrcdn.getCtin())) {
							String dwnldctin = gstrcdn.getCtin();
							dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
						}
						
						if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
							String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
							dwnldInvNoCtin = dwnldInvNoCtin+idt;
						}
						
						if(isEmpty(gstr2AList) || !gstr2AList.contains(dwnldInvNoCtin)) {
							if(isNotEmpty(gstrcdn.getCtin()) && gstnMap.containsKey(gstrcdn.getCtin())) {
								String addr;
								GSTINPublicAddress gstinAddress = gstnMap.get(gstrcdn.getCtin()).getPradr();
								if(isNotEmpty(gstinAddress)){
									GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
									if(isNotEmpty(gstinAddressData)){
										addr = gstinAddressData.getBnm() + "," + gstinAddressData.getSt() + ","
												+ gstinAddressData.getLoc() + "," + gstinAddressData.getDst() + ","
												+ gstinAddressData.getStcd() + "," + gstinAddressData.getCity() + ","
												+ gstinAddressData.getFlno() + "," + gstinAddressData.getPncd();
										gstrInvoiceDetails.setAddress(addr);
									}
								}
							}
							GSTR2 individualInvoice = populateGSTR2(gstrInvoiceDetails, gstn, fp, gstr2a.getUserid(),
									gstr2a.getClientid(), invType, gstrcdn.getCtin(),gstrcdn.getCfs(),gstrcdn.getCfs3b(),gstrcdn.getFldtr1(),gstrcdn.getFlprdr1(),gstrcdn.getDtcancel());
							/*
							 * if(isNotEmpty(gstrcdn.getCtin())){ String gstnno = gstrcdn.getCtin(); gstnno
							 * = gstnno.substring(0,2); for(StateConfig stateConfig :
							 * configService.getStates()) { if (gstnno.equals(stateConfig.getTin() < 10 ?
							 * "0" + stateConfig.getTin() : stateConfig.getTin() + "")) {
							 * individualInvoice.setStatename(stateConfig.getName()); } } }
							 */
							if(isNotEmpty(client) && isNotEmpty(client.getStatename())) {
								individualInvoice.setStatename(client.getStatename());
							}
							if(isNotEmpty(gstrcdn.getCtin()) && gstnMap.containsKey(gstrcdn.getCtin())) {
								individualInvoice.setBilledtoname(gstnMap.get(gstrcdn.getCtin()).getTradeNam());
							}
							individualInvoice.setAmendment(gstr2a.isAmendment());
							gstr2DwnldList.add(individualInvoice);
							//gstr2Repository.save(individualInvoice);
						}
					}
				}
			}else if (isNotEmpty(((GSTR2)gstr2a).getCdna())) {
				List<GSTR2> gstr2List = gstr2Repository.findByClientidAndFpAndInvtype(clientid, fp, invType);
				List<String> gstr2Ids = Lists.newArrayList();
				List<String> gstr2AList = Lists.newArrayList();
				for(GSTR2 g2 : gstr2List) {
					if(isNotEmpty(g2.getInvoiceno())) {
						gstr2Ids.add(g2.getInvoiceno());
						if(g2.isAmendment()) {
							String invNoCtin = g2.getInvoiceno();
						if(isNotEmpty(((GSTR2)g2).getCdna())) {
							if(isNotEmpty(((GSTR2)g2).getCdn().get(0).getCtin())) {
								String ctin = ((GSTR2)g2).getCdn().get(0).getCtin();
								invNoCtin = invNoCtin+ctin;
							}
							if(isNotEmpty(((GSTR2)g2).getCdn().get(0).getNt().get(0).getNtDt())) {
								String idt = simpleDateFormat.format(((GSTR2)g2).getCdn().get(0).getNt().get(0).getNtDt());
								invNoCtin = invNoCtin+idt;
							}
						}
							gstr2AList.add(invNoCtin);
						}
					}
				}
				//gstr2Repository.delete(gstr2AList);
				for (GSTRCreditDebitNotes gstrcdna : ((GSTR2)gstr2a).getCdna()) {
					if(isNotEmpty(gstrcdna.getCtin()) && !gstnMap.containsKey(gstrcdna.getCtin())) {
						Page<GSTINPublicData> page = gstinPublicDataRepository.findByGstin(gstrcdna.getCtin(), pageable);
						if(isNotEmpty(page) && isNotEmpty(page.getContent())) {
							GSTINPublicData publicData = page.getContent().get(0);
							ResponseData data = new ResponseData();
							if(isNotEmpty(publicData.getTradeNam())) {
								data.setTradeNam(publicData.getTradeNam());
							}else {
								data.setTradeNam(publicData.getLgnm());
							}
							data.setPradr(publicData.getPradr());
							gstnMap.put(gstrcdna.getCtin(), data);
						} else {
							Response response = iHubConsumerService.publicSearch(gstrcdna.getCtin());
							if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
									&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								ResponseData data = response.getData();
								if(isNotEmpty(data.getTradeNam())) {
									data.setTradeNam(data.getTradeNam());
								}else {
									data.setTradeNam(data.getLgnm());
								}
								gstnMap.put(gstrcdna.getCtin(), data);
							}
						}
					}
					
					for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdna.getNt()) {
						String dwnldInvNoCtin = gstrInvoiceDetails.getNtNum();
						if(isNotEmpty(gstrcdna.getCtin())) {
							String dwnldctin = gstrcdna.getCtin();
							dwnldInvNoCtin = dwnldInvNoCtin+dwnldctin;
						}
						
						if(isNotEmpty(gstrInvoiceDetails.getNtDt())) {
							String idt = simpleDateFormat.format(gstrInvoiceDetails.getNtDt());
							dwnldInvNoCtin = dwnldInvNoCtin+idt;
						}
						
						if(isEmpty(gstr2AList) || !gstr2AList.contains(dwnldInvNoCtin)) {
							if(isNotEmpty(gstrcdna.getCtin()) && gstnMap.containsKey(gstrcdna.getCtin())) {
								String addr;
								GSTINPublicAddress gstinAddress = gstnMap.get(gstrcdna.getCtin()).getPradr();
								if(isNotEmpty(gstinAddress)){
									GSTINPublicAddressData gstinAddressData = gstinAddress.getAddr();
									if(isNotEmpty(gstinAddressData)){
										addr = gstinAddressData.getBnm() + "," + gstinAddressData.getSt() + ","
												+ gstinAddressData.getLoc() + "," + gstinAddressData.getDst() + ","
												+ gstinAddressData.getStcd() + "," + gstinAddressData.getCity() + ","
												+ gstinAddressData.getFlno() + "," + gstinAddressData.getPncd();
										gstrInvoiceDetails.setAddress(addr);
									}
								}
							}
							GSTR2 individualInvoice = populateGSTR2(gstrInvoiceDetails, gstn, fp, gstr2a.getUserid(),
									gstr2a.getClientid(), invType, gstrcdna.getCtin(),gstrcdna.getCfs(),gstrcdna.getCfs3b(),gstrcdna.getFldtr1(),gstrcdna.getFlprdr1(),gstrcdna.getDtcancel());
							
							if(isNotEmpty(client) && isNotEmpty(client.getStatename())) {
								individualInvoice.setStatename(client.getStatename());
							}
							if(isNotEmpty(gstrcdna.getCtin()) && gstnMap.containsKey(gstrcdna.getCtin())) {
								individualInvoice.setBilledtoname(gstnMap.get(gstrcdna.getCtin()).getTradeNam());
							}
							individualInvoice.setAmendment(gstr2a.isAmendment());
							gstr2DwnldList.add(individualInvoice);
							//gstr2Repository.save(individualInvoice);
						}
					}
				}
			}
		}else if(invType.equals(MasterGSTConstants.IMP_GOODS) || invType.equals(MasterGSTConstants.IMPGSEZ)){
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
			if (isNotEmpty(((GSTR2)gstr2a).getImpg())) {
				for (GSTR2AIMPG gstrimpg : ((GSTR2)gstr2a).getImpg()) {
					GSTR2 individualInvoice = populateGSTR2IMPG(gstrimpg, fp, gstr2a.getUserid(), gstr2a.getClientid(), invType);
					if(isNotEmpty(client) && isNotEmpty(client.getStatename())) {
						individualInvoice.setStatename(client.getStatename());
					}
					individualInvoice.setAmendment(gstr2a.isAmendment());
					gstr2DwnldList.add(individualInvoice);
				}
			}else if (isNotEmpty(((GSTR2)gstr2a).getImpgsez())) {
				for (GSTR2AIMPG gstrimpg : ((GSTR2)gstr2a).getImpgsez()) {
					GSTR2 individualInvoice = populateGSTR2IMPG(gstrimpg, fp, gstr2a.getUserid(), gstr2a.getClientid(), invType);
					if(isNotEmpty(client) && isNotEmpty(client.getStatename())) {
						individualInvoice.setStatename(client.getStatename());
					}
					individualInvoice.setAmendment(gstr2a.isAmendment());
					gstr2DwnldList.add(individualInvoice);
				}
			}
		}
		gstr2Repository.save(gstr2DwnldList);
		//gstr2DwnldList = gstr2Repository.save(gstr2DwnldList);
		//updateMismatchStatus(purchaseRegisters, gstr2DwnldList, invType, gstn, fp);
		logger.debug(CLASSNAME + "updateGSTR2ReturnData : End");
	}
	
	@Override
	@Transactional(readOnly=true)
	public List<PurchaseRegister> getPurchaseRegisters(final String invType, final String clientid, final int month,
			final int year, boolean isYear) {
		Date stDate = null;
		Date endDate = null;
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);

		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH) + 1;
		Calendar cal = Calendar.getInstance();
		if (isYear) {
			if (month < 10) {
				cal.set(year - 1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if (presentYear != year) {
					cal.set(year, 12, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, presentMonth, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}

			} else {
				cal.set(year - 1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if (presentYear != year) {
					cal.set(year, 12, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, presentMonth, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
		} else {
			cal.set(year, 3, 1, 0, 0, 0);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year + 1, 3, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
		}
		return purchaseRepository.findByClientidAndInvtypeAndDateofinvoiceBetween(clientid, invType, stDate, endDate);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<PurchaseRegister> getPageablePurchaseRegisters(final String invType, final String clientid, final int month,
			final int year, boolean isYear, Pageable pageable, boolean billdate) {
		Date stDate = null;
		Date endDate = null;
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);

		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH) + 1;
		Calendar cal = Calendar.getInstance();
		if (isYear) {
			if (month < 10) {
				cal.set(year - 1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if (presentYear != year) {
					cal.set(year, 12, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, presentMonth, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}

			} else {
				cal.set(year - 1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if (presentYear != year) {
					cal.set(year, 12, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, presentMonth, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
		} else {
			cal.set(year, 3, 1, 0, 0, 0);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year + 1, 3, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
		}
		if(billdate) {
			List<String> matchingstatuspr = Lists.newArrayList();
			matchingstatuspr.add("");
			matchingstatuspr.add(null);
			matchingstatuspr.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
			return purchaseRepository.findByClientidAndInvtypeAndDateofinvoiceBetweenAndMatchingStatusIn(clientid, invType, stDate, endDate, matchingstatuspr,pageable);
		}else {
			List<String> matchingstatuspr = Lists.newArrayList();
			matchingstatuspr.add("");
			matchingstatuspr.add(null);
			matchingstatuspr.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
			return purchaseRepository.findByClientidAndInvtypeAndBillDateBetweenAndMatchingStatusIn(clientid, invType, stDate, endDate,matchingstatuspr, pageable);
		}
		
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<PurchaseRegister> getPurchaseRegistersByInvoiceNos(final String clientid, final String invtype, List<String> invoiceNos, Pageable pageable) {
		List<String> matchingstatuspr = Lists.newArrayList();
		matchingstatuspr.add("");
		matchingstatuspr.add(null);
		matchingstatuspr.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
		return purchageRegisterDao.findByClientidAndInvtypeAndInvoicenoInAndMatchingStatusIn(clientid, invtype, invoiceNos,matchingstatuspr, pageable);
		//return purchaseRepository.findByClientidAndInvtypeAndInvoicenoInAndMatchingStatusIn(clientid,invtype, invoiceNos, matchingstatuspr,pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public List<PurchaseRegister> getPurchaseRegistersByTransactionDate(final String invType, final String clientid, final int month, final int year, boolean isYear) {
		Date stDate = null;
		Date endDate = null;
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);

		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH) + 1;
		Calendar cal = Calendar.getInstance();
		if (isYear) {
		if(month < 10) {
			cal.set(year-1, 3, 1, 0, 0, 0);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
				if (presentYear != year) {
					cal.set(year, 12, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, presentMonth, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}

			} else {
				cal.set(year - 1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				if (presentYear != year) {
					cal.set(year, 12, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, presentMonth, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
		}else {
			cal.set(year, 3, 1, 0, 0, 0);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year + 1, 3, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
		}
		return purchaseRepository.findByClientidAndInvtypeAndBillDateBetween(clientid, invType, stDate, endDate);
	}
	
	@Override
	@Transactional
	public void updateClientConfig(ClientConfig clientConfig) {
		logger.debug(CLASSNAME + "updateClientConfig : Begin");
		clientConfigRepository.save(clientConfig);
	}
	
	@Override
	@Transactional
	public ClientConfig getClientConfig(String clientId) {
		logger.debug(CLASSNAME + "updateClientConfig : Begin");
		return clientConfigRepository.findByClientId(clientId);
	}
	
	public String removeLeadingZeros(String str){
		if (str == null){
			return null;
		}
		char[] chars = str.toCharArray();
		int index = 0;
		for (; index < str.length();index++) {
			if (chars[index] != '0'){
				break;
			}
		}
		return (index == 0) ? str :str.substring(index);
	}
	
	 public List<Character> convertStringToCharList(String str){ 
	  
	        List<Character> chars = new ArrayList<>();  
	        for (char ch : str.toCharArray()) { 
	            chars.add(ch); 
	        }  
	        return chars; 
	    } 
	
	@Override
	@Transactional
	@Async("reconcileTaskExecutor")
	public void updateMismatchStatus(String clientId, final String invType, final String gstn, final String fp, int month, int year, final String monthlyOrYearly,final boolean isBilledDate) {
		logger.debug(CLASSNAME + "updateMismatchStatus : Begin");
		ClientConfig clientConfig = getClientConfig(clientId);
		boolean hasMore = true;
		while(hasMore) {
			hasMore = reconcilePaginatedData(clientId, invType, fp, month, year, monthlyOrYearly, clientConfig, isBilledDate);
			logger.info(CLASSNAME + "updateMismatchStatus ::"+hasMore);
		}
		ReconcileTemp recon = reconcileTempRepository.findByClientid(clientId);
		Long totalProcessed = 0l;
			if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2ab2binvoices())) {
				totalProcessed += recon.getProcessedgstr2ab2binvoices();
			}
			if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2acreditinvoices())) {
				totalProcessed += recon.getProcessedgstr2acreditinvoices();
			}
			if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2aimpginvoices())) {
				totalProcessed += recon.getProcessedgstr2aimpginvoices();
			}
		recon.setProcessedgstr2ainvoices(totalProcessed);
		recon = reconcileTempRepository.save(recon);
		
		
		reconcileMissingInvoices(clientId, invType, fp, clientConfig, isBilledDate, recon);
		
		
		logger.debug(CLASSNAME + "updateMismatchStatus : End");
	}

	private boolean reconcilePaginatedData(String clientId, final String invType, final String fp, int month, int year,	final String monthlyOrYearly, ClientConfig clientConfig,final boolean billdate) {
		ReconcileTemp recon = reconcileTempRepository.findByClientid(clientId);
		//int maxCounter = 20000;
		int maxCounter = 5000;
		Page<PurchaseRegister> purchaseRegisters = null;
		Page<GSTR2> gstr2List = null;
		List<PurchaseRegister> purchaseRegisterContent = Lists.newArrayList();
		List<GSTR2> gstr2Content = Lists.newArrayList();
		int defaultSize = 2000, prPageIndex = 0, gstr2Pageindex = 0;
		Pageable prPageable = new PageRequest(prPageIndex++, defaultSize, Sort.Direction.ASC, "invoiceno");
		Pageable gstr2Pageable = new PageRequest(gstr2Pageindex++, defaultSize, Sort.Direction.ASC, "invoiceno");
		if ("monthly".equalsIgnoreCase(monthlyOrYearly)) {
			logger.info(CLASSNAME + "reconcilePaginatedData ::"+monthlyOrYearly);

			purchaseRegisters = getPageablePurchaseRegisters(invType, clientId, month, year, true, prPageable,billdate);
			gstr2List = gstr2Repository.findByClientidAndFpAndInvtypeAndIsAmendmentAndMatchingStatusIsNull(clientId, fp, invType, true, gstr2Pageable);
			if(null != purchaseRegisters && isNotEmpty(purchaseRegisters.getContent()) && null != gstr2List && isNotEmpty(gstr2List.getContent())) {
				if(isNotEmpty(purchaseRegisters) && isNotEmpty(purchaseRegisters.getContent())) {
					purchaseRegisterContent.addAll(purchaseRegisters.getContent());
				}
				if(isNotEmpty(gstr2List) && isNotEmpty(gstr2List.getContent())) {
					gstr2Content.addAll(gstr2List.getContent());
				}
				while((purchaseRegisterContent.size() <= maxCounter) && purchaseRegisters.hasNext()) {
					prPageable = new PageRequest(prPageIndex++, defaultSize, Sort.Direction.ASC, "invoiceno");
					purchaseRegisters = getPageablePurchaseRegisters(invType, clientId, month, year, true, prPageable,billdate);
					if(isNotEmpty(purchaseRegisters) && isNotEmpty(purchaseRegisters.getContent())) {
						purchaseRegisterContent.addAll(purchaseRegisters.getContent());
					}
					if((gstr2Content.size() <= maxCounter) && gstr2List.hasNext()) {
						gstr2Pageable = new PageRequest(gstr2Pageindex++, defaultSize, Sort.Direction.ASC, "invoiceno");
						gstr2List = gstr2Repository.findByClientidAndFpAndInvtypeAndIsAmendmentAndMatchingStatusIsNull(clientId, fp, invType, true, gstr2Pageable);
						if(isNotEmpty(gstr2List) && isNotEmpty(gstr2List.getContent())) {
							gstr2Content.addAll(gstr2List.getContent());
						}
					}
				}
				while((gstr2Content.size() <= maxCounter) && gstr2List.hasNext()) {
					gstr2Pageable = new PageRequest(gstr2Pageindex++, defaultSize, Sort.Direction.ASC, "invoiceno");
					gstr2List = gstr2Repository.findByClientidAndFpAndInvtypeAndIsAmendmentAndMatchingStatusIsNull(clientId, fp, invType, true, gstr2Pageable);
					if(isNotEmpty(gstr2List) && isNotEmpty(gstr2List.getContent())) {
						gstr2Content.addAll(gstr2List.getContent());
					}
				}
				logger.debug(CLASSNAME + "reconcilePaginatedData purchaseRegisterContent size::"+purchaseRegisterContent+" ,gstr2Content size ::"+gstr2Content.size());
				updateMismatchedStatusForPageable(purchaseRegisterContent, gstr2Content, invType, clientConfig, clientId);
				if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2ainvoices())) {
					recon.setProcessedgstr2ainvoices(recon.getProcessedgstr2ainvoices()+gstr2Content.size());
				}else {
					recon.setProcessedgstr2ainvoices(new Long(gstr2Content.size()));
				}
				if(invType.equals(MasterGSTConstants.B2B)) {
					if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2ab2binvoices())) {
						recon.setProcessedgstr2ab2binvoices(recon.getProcessedgstr2ab2binvoices()+gstr2Content.size());
					}else {
						recon.setProcessedgstr2ab2binvoices(new Long(gstr2Content.size()));
					}
				}else if(invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2acreditinvoices())) {
						recon.setProcessedgstr2acreditinvoices(recon.getProcessedgstr2acreditinvoices()+gstr2Content.size());
					}else {
						recon.setProcessedgstr2acreditinvoices(new Long(gstr2Content.size()));
					}
				}else if(invType.equals(MasterGSTConstants.IMP_GOODS)) {
					if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2aimpginvoices())) {
						recon.setProcessedgstr2aimpginvoices(recon.getProcessedgstr2aimpginvoices()+gstr2Content.size());
					}else {
						recon.setProcessedgstr2aimpginvoices(new Long(gstr2Content.size()));
					}
				}
				recon = reconcileTempRepository.save(recon);
			}
		} else {
			String fpYear = fp.substring(2);
			int yr = Integer.parseInt(fpYear);
			Date presentDate = new Date();
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(presentDate);
			int presentYear = calendar.get(Calendar.YEAR);
			List<String> rtarray = Lists.newArrayList();
			for (int i = yr; i <= presentYear; i++) {
				for (int j = 4; j <= 12; j++) {
					String strMonth = j < 10 ? "0" + j : j + "";
					rtarray.add(strMonth + (i));
				}
				for (int k = 1; k <= 3; k++) {
					String strMonth = k < 10 ? "0" + k : k + "";
					rtarray.add(strMonth + (i + 1));
				}
			}
			
			purchaseRegisters = getPageablePurchaseRegisters(invType, clientId, month, year, false, prPageable,billdate);
			gstr2List = gstr2Repository.findByClientidAndFpInAndInvtypeAndIsAmendmentAndMatchingStatusIsNull(clientId, rtarray, invType, true, gstr2Pageable);
			if(null != purchaseRegisters && isNotEmpty(purchaseRegisters.getContent()) && null != gstr2List && isNotEmpty(gstr2List.getContent())) {
				if(isNotEmpty(purchaseRegisters) && isNotEmpty(purchaseRegisters.getContent())) {
					purchaseRegisterContent.addAll(purchaseRegisters.getContent());
				}
				if(isNotEmpty(gstr2List) && isNotEmpty(gstr2List.getContent())) {
					gstr2Content.addAll(gstr2List.getContent());
				}
				//updateMismatchedStatusForPageable(purchaseRegisterContent, gstr2Content, invType, clientConfig, clientId);				
				while((purchaseRegisterContent.size() <= maxCounter) && purchaseRegisters.hasNext()) {
					prPageable = new PageRequest(prPageIndex++, defaultSize, Sort.Direction.ASC, "invoiceno");
					purchaseRegisters = getPageablePurchaseRegisters(invType, clientId, month, year, false, prPageable,billdate);
					if(isNotEmpty(purchaseRegisters) && isNotEmpty(purchaseRegisters.getContent())) {
						purchaseRegisterContent.addAll(purchaseRegisters.getContent());
					}
					if((gstr2Content.size() <= maxCounter) && gstr2List.hasNext()) {
						gstr2Pageable = new PageRequest(gstr2Pageindex++, defaultSize, Sort.Direction.ASC, "invoiceno");
						gstr2List = gstr2Repository.findByClientidAndFpInAndInvtypeAndIsAmendmentAndMatchingStatusIsNull(clientId, rtarray, invType, true, gstr2Pageable);
						if(isNotEmpty(gstr2List) && isNotEmpty(gstr2List.getContent())) {
							gstr2Content.addAll(gstr2List.getContent());
						}
					}
					//updateMismatchedStatusForPageable(purchaseRegisterContent, gstr2Content, invType, clientConfig, clientId);
				}
				while((gstr2Content.size() <= maxCounter) && gstr2List.hasNext()) {
					gstr2Pageable = new PageRequest(gstr2Pageindex++, defaultSize, Sort.Direction.ASC, "invoiceno");
					gstr2List = gstr2Repository.findByClientidAndFpInAndInvtypeAndIsAmendmentAndMatchingStatusIsNull(clientId, rtarray, invType, true, gstr2Pageable);
					if(isNotEmpty(gstr2List) && isNotEmpty(gstr2List.getContent())) {
						gstr2Content.addAll(gstr2List.getContent());
					}
					//updateMismatchedStatusForPageable(purchaseRegisterContent, gstr2Content, invType, clientConfig, clientId);
				}
				if(((null == gstr2List || !gstr2List.hasNext()) && (null != purchaseRegisters && purchaseRegisters.hasNext()))) {
					List<String> gstr2InvList = Lists.newArrayList();
					for (GSTR2 gstr2 : gstr2List) {
						if(isNotEmpty(gstr2.getInvoiceno())) {
							gstr2InvList.add(gstr2.getInvoiceno());
						}
					}
					List<PurchaseRegister> tempPRList = purchaseRepository.findByClientidAndInvoicenoIn(clientId, gstr2InvList);
					if(isNotEmpty(tempPRList)) {
						purchaseRegisterContent = tempPRList;
					}
				}
				
				updateMismatchedStatusForPageable(purchaseRegisterContent, gstr2Content, invType, clientConfig, clientId);
				if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2ainvoices())) {
					recon.setProcessedgstr2ainvoices(recon.getProcessedgstr2ainvoices()+gstr2Content.size());
				}else {
					recon.setProcessedgstr2ainvoices(new Long(gstr2Content.size()));
				}
				if(invType.equals(MasterGSTConstants.B2B)) {
					if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2ab2binvoices())) {
						recon.setProcessedgstr2ab2binvoices(recon.getProcessedgstr2ab2binvoices()+gstr2Content.size());
					}else {
						recon.setProcessedgstr2ab2binvoices(new Long(gstr2Content.size()));
					}
				}else if(invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2acreditinvoices())) {
						recon.setProcessedgstr2acreditinvoices(recon.getProcessedgstr2acreditinvoices()+gstr2Content.size());
					}else {
						recon.setProcessedgstr2acreditinvoices(new Long(gstr2Content.size()));
					}
				}else if(invType.equals(MasterGSTConstants.IMP_GOODS)) {
					if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedgstr2aimpginvoices())) {
						recon.setProcessedgstr2aimpginvoices(recon.getProcessedgstr2aimpginvoices()+gstr2Content.size());
					}else {
						recon.setProcessedgstr2aimpginvoices(new Long(gstr2Content.size()));
					}
				}
				recon = reconcileTempRepository.save(recon);
			}
		}
		if(isNotEmpty(gstr2Content)) {
			List<String> reconlist = Lists.newArrayList();
			reconlist.add(MasterGSTConstants.GST_STATUS_MATCHED);
			reconlist.add(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
			reconlist.add("Matched In Other Months");
			reconlist.add("Round Off Matched");
			reconlist.add("Round Off Matched In Other Months");
			reconlist.add("Probable Matched");
			reconlist.add("Mismatched");
			reconlist.add("Tax Mismatched");
			reconlist.add("Invoice Value Mismatched");
			reconlist.add("GST No Mismatched");
			reconlist.add("Invoice No Mismatched");
			reconlist.add("Invoice Date Mismatched");
			reconlist.add("Manual Matched");
			List<GSTR2> gstr2NotMatchedList = Lists.newArrayList();
			for (GSTR2 gstr2 : gstr2Content) {
				if (isEmpty(gstr2.getMatchingStatus()) || (isNotEmpty(gstr2.getMatchingStatus())
						&& !reconlist.contains(gstr2.getMatchingStatus()))) {
					gstr2.setMatchingStatus("Not In Purchases");
					gstr2NotMatchedList.add(gstr2);
				}
			}
			if(isNotEmpty(gstr2NotMatchedList) && ((null != gstr2List && gstr2List.hasNext()) 
							|| ((null == gstr2List || !gstr2List.hasNext()) && (null != purchaseRegisters && purchaseRegisters.hasNext())))) {
				saveBulkGSTR2(gstr2NotMatchedList);
			}
		}
		
		if(invType.equals(MasterGSTConstants.B2B)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getTotalb2binvoices()) && isNotEmpty(recon.getProcessedgstr2ab2binvoices()) && recon.getProcessedgstr2ab2binvoices()<recon.getTotalb2binvoices()) {
				return true;
			}else {
				return false;
			}
		}else if(invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getTotalcreditinvoices()) && isNotEmpty(recon.getProcessedgstr2acreditinvoices()) && recon.getProcessedgstr2acreditinvoices()<recon.getTotalcreditinvoices()) {
				return true;
			}else {
				return false;
			}
		}else if(invType.equals(MasterGSTConstants.IMP_GOODS)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getTotalimpginvoices()) && isNotEmpty(recon.getProcessedgstr2aimpginvoices()) && recon.getProcessedgstr2aimpginvoices()<recon.getTotalimpginvoices()) {
				return true;
			}else {
				return false;
			}
		}
		
		if(isNotEmpty(recon) && isNotEmpty(recon.getTotalinvoices()) && isNotEmpty(recon.getProcessedgstr2ainvoices()) && recon.getProcessedgstr2ainvoices()>=recon.getTotalinvoices()) {
			return false;
		}
		return (null != purchaseRegisters && purchaseRegisters.hasNext()) && (null != gstr2List && gstr2List.hasNext());
	}

	private void updateMismatchedStatusForPageable(List<PurchaseRegister> prr, List<GSTR2> gstr2List,
			final String invType, ClientConfig clientConfig, String clientId) {
		Double allowedDiff = 0d;
		Double allowedDays = 0d;
		boolean ignoreHyphen = true;
		boolean ignoreSlash = true;
		boolean ignoreZeroOrO = true;
		boolean ignoreCapitalI = true;
		boolean ignorel = true;
		boolean ignoreInvoiceMatch = true;
		if(isNotEmpty(clientConfig)) {
			if(isNotEmpty(clientConfig.getReconcileDiff())) {
				allowedDiff = clientConfig.getReconcileDiff();
			}
			if(isNotEmpty(clientConfig.getAllowedDays())) {
				allowedDays = clientConfig.getAllowedDays();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreHyphen())) {
				ignoreHyphen = clientConfig.isEnableIgnoreHyphen();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreSlash())) {
				ignoreSlash = clientConfig.isEnableIgnoreSlash();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreZero())) {
				ignoreZeroOrO = clientConfig.isEnableIgnoreZero();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreI())) {
				ignoreCapitalI = clientConfig.isEnableIgnoreI();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreL())) {
				ignorel = clientConfig.isEnableIgnoreL();
			}
			if(isNotEmpty(clientConfig.isEnableInvoiceMatch())) {
				ignoreInvoiceMatch = clientConfig.isEnableInvoiceMatch();
			}
		}else {
			ignoreHyphen = true;
			ignoreSlash = true;
			ignoreZeroOrO = true;
			ignoreCapitalI = true;
			ignorel = true;
			ignoreInvoiceMatch = true;
		}
		List<PurchaseRegister> purchaseRegisters = Lists.newArrayList();
		//List<GSTR2> gstr2aInvoic = 
		purchaseRegisters.addAll(prr);
		List<PurchaseRegister> savePRList = Lists.newArrayList();
		List<GSTR2> saveGSTR2List = Lists.newArrayList();
		List<PurchaseRegister> savePRProbableList = Lists.newArrayList();
		List<String> matchingid = Lists.newArrayList();
		if (isNotEmpty(gstr2List)) {
			for (GSTR2 gstr2 : gstr2List) {
				if (isEmpty(gstr2.getMatchingStatus()) || (isNotEmpty(gstr2.getMatchingStatus())
						&& !gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED))) {
					//gstr2.setMatchingStatus("Not In Purchases");
					//gstr2 = gstr2Repository.save(gstr2);
					boolean mstatus = false;
					List<PurchaseRegister> savePRGList = Lists.newArrayList();
					List<PurchaseRegister> savePRRList = Lists.newArrayList();
					List<PurchaseRegister> savePRGINVNOList = Lists.newArrayList();
					List<PurchaseRegister> savePRGINVDATEList = Lists.newArrayList();
					List<PurchaseRegister> savePRGGSTNOList = Lists.newArrayList();
					List<PurchaseRegister> savePRGTAXList = Lists.newArrayList();
					List<PurchaseRegister> savePRGINVVALUEList = Lists.newArrayList();
					List<PurchaseRegister> savePRPList = Lists.newArrayList();
					logger.info("purchaseRegister matching status checking ::"+gstr2.getId().toString());
					for (PurchaseRegister purchaseRegister : purchaseRegisters) {
						if(!mstatus) {
						if (isEmpty(purchaseRegister.getMatchingStatus()) || (isNotEmpty(purchaseRegister.getMatchingStatus()) && !purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED))) {
							if (invType.equals(B2B) && isNotEmpty(gstr2.getInvtype()) && gstr2.getInvtype().equals(invType)) {
								if (isNotEmpty(gstr2.getB2b())) {
									for (GSTRB2B gstrb2b : gstr2.getB2b()) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
											if(isNotEmpty(gstrInvoiceDetails.getInum()) && isNotEmpty(gstrInvoiceDetails.getIdt())) {
											if (isNotEmpty(purchaseRegister.getB2b())
													&& isNotEmpty(purchaseRegister.getB2b().get(0).getCtin())
													&& isNotEmpty(purchaseRegister.getB2b().get(0).getInv())
													&& isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0).getInum()) && isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
												SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
												String dateBeforeString = gstrInvoiceDetails.getIdt();
												String dateAfterString = purchaseRegister.getB2b().get(0).getInv().get(0).getIdt();
												float daysBetween = 0f;
												double daysBetweenInvoiceDate = 0d;
												 try {
												       Date dateBefore = myFormat.parse(dateBeforeString);
												       Date dateAfter = myFormat.parse(dateAfterString);
												       long difference = dateAfter.getTime() - dateBefore.getTime();
												       daysBetween = (difference / (1000*60*60*24));
												       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
												 } catch (Exception e) {
												       e.printStackTrace();
												 }
												String purchaseregisterInvoiceNo = (purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim();
												String gstr2InvoiceNo = (gstrInvoiceDetails.getInum()).trim();
												 if(ignoreHyphen) {
													 if(purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
													 }
												 }
												 if(ignoreSlash) {
													 if(purchaseregisterInvoiceNo.contains("/")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
													 }
													if (gstr2InvoiceNo.contains("/")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
													 }
												 }
												 if(ignoreZeroOrO) {
														if (purchaseregisterInvoiceNo.contains("o")	|| purchaseregisterInvoiceNo.contains("O")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
													 }
													 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
													 }
												 }
												 if(ignoreCapitalI) {
													 if(purchaseregisterInvoiceNo.contains("I")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
													 }
													 if(gstr2InvoiceNo.contains("I")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
													 }
												 }
												 if(ignorel) {
													 if(purchaseregisterInvoiceNo.contains("l")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
													 }
													 if(gstr2InvoiceNo.contains("l")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
													 }
												 }
												 gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
												 purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
												if ((gstrb2b.getCtin().trim()).equals((purchaseRegister.getB2b().get(0).getCtin()).trim())
													&& (gstrInvoiceDetails.getInum().trim().toLowerCase()).equals((purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim().toLowerCase())
													&& daysBetweenInvoiceDate <= allowedDays
													&& gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())
													&& gstrInvoiceDetails.getPos().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getPos())) {
														if(isNotEmpty(gstrb2b.getCfs())) {
															purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
														}
														if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
															&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
															&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
															|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
															&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
															&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
															&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
															&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
															|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
															&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																	|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																	&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
																	&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																	|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))) {
																		if (gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
																			if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																				logger.info(CLASSNAME + " Reconcile Status ::"+MasterGSTConstants.GST_STATUS_MATCHED);
																				
																			}else {
																				logger.info(CLASSNAME + " Reconcile Status ::"+MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																			}
																		}else {
																			logger.info(CLASSNAME + " Reconcile Status ::"+MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		}
																}else {
																	logger.info(CLASSNAME + " Reconcile Status ::"+MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
																savePRList.add((PurchaseRegister) purchaseRegister);
																saveGSTR2List.add(gstr2);
																matchingid.add(gstr2.getId().toString());
																savePRRList.add((PurchaseRegister) purchaseRegister);
																mstatus = true;
															} else {
																if(gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																	if(savePRGTAXList.size() < 1) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																		savePRGTAXList.add((PurchaseRegister) purchaseRegister);
																	}
																}else {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	savePRGList.add((PurchaseRegister) purchaseRegister);
																}
																savePRList.add((PurchaseRegister) purchaseRegister);
																saveGSTR2List.add(gstr2);
															}
												} else if ((gstrInvoiceDetails.getInum().trim().toLowerCase()).equals((purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim().toLowerCase())
															&& (gstrb2b.getCtin().trim()).equals((purchaseRegister.getB2b().get(0).getCtin()).trim())) {
														if (isNotEmpty(gstrb2b.getCfs())) {
															purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
														}
															if (daysBetweenInvoiceDate <= allowedDays) {
																	if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																		&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																		|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																		&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																		|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																		&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																		&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																		|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																				&& (((gstr2.getTotaltaxableamount()	- purchaseRegister.getTotaltaxableamount()) == 0)
																				|| ((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) == 0)))
																				&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																				&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																				|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))
																				&& (((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) == 0)
																				|| ((purchaseRegister.getTotalamount()	- gstr2.getTotalamount()) == 0))) {
																					if (gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
																						if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																						}else {
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																						}
																					}else {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					}
																			}else {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			}
																			savePRList.add((PurchaseRegister) purchaseRegister);
																			saveGSTR2List.add(gstr2);
																			matchingid.add(gstr2.getId().toString());
																			savePRRList.add((PurchaseRegister) purchaseRegister);
																			mstatus = true;
																		} else {
																			if(gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																				if(savePRGTAXList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																					savePRGTAXList.add((PurchaseRegister) purchaseRegister);
																				}
																			}else if(!gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																				if(savePRGINVVALUEList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																					savePRGINVVALUEList.add((PurchaseRegister) purchaseRegister);
																				}
																			}else {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				savePRGList.add((PurchaseRegister) purchaseRegister);
																			}
																			savePRList.add((PurchaseRegister) purchaseRegister);
																			saveGSTR2List.add(gstr2);
																		}
															} else {
																if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																		&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																		|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																		&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																		|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																		&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																		&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																		|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																		if(gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																			if(savePRGINVDATEList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																				savePRGINVDATEList.add((PurchaseRegister) purchaseRegister);
																			}
																		}else if(!gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																			if(savePRGINVVALUEList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																				savePRGINVVALUEList.add((PurchaseRegister) purchaseRegister);
																			}
																		}else {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			savePRGList.add((PurchaseRegister) purchaseRegister);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	}
															}
														} else if ((gstrb2b.getCtin().trim()).equals((purchaseRegister.getB2b().get(0).getCtin()).trim())
																&& gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
																if (isNotEmpty(gstrb2b.getCfs())) {
																	purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
																}
																Double alldDiff = 0d;
																if (allowedDiff == 0d) {
																	alldDiff = 1d;
																} else {
																	alldDiff = allowedDiff;
																}
																if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																	&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= alldDiff)
																	&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																	&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) <= alldDiff)
																	&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))
																	&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																	&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																	|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																	&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0))) {
																	if (ignoreInvoiceMatch) {
																		List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstr2InvoiceNo));
																		List<Character> purinvd = convertStringToCharList(removeLeadingZeros(purchaseregisterInvoiceNo));
																		if (purinvd.containsAll(gstrinvd) || gstrinvd.containsAll(purinvd)) {
																			if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo) || purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																				if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																				}else {
																					if(savePRPList.size() < 1) {
																						purchaseRegister.setMatchingId(gstr2.getId().toString());
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																						matchingid.add(gstr2.getId().toString());
																						savePRPList.add((PurchaseRegister) purchaseRegister);
																						savePRProbableList.add((PurchaseRegister) purchaseRegister);
																					}
																				}
																			}else {
																				if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																				}else {
																					if(savePRGINVNOList.size() < 1) {
																						purchaseRegister.setMatchingId(gstr2.getId().toString());
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																						savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																					}
																				}
																			}
																		} else {
																		if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				if(savePRPList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					matchingid.add(gstr2.getId().toString());
																					savePRPList.add((PurchaseRegister) purchaseRegister);
																					savePRProbableList.add((PurchaseRegister) purchaseRegister);
																				}
																			}	
																		}else{
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				if(savePRGINVNOList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																					savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																				}
																			}
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																} else if (gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRPList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			matchingid.add(gstr2.getId().toString());
																			savePRPList.add((PurchaseRegister) purchaseRegister);
																			savePRProbableList.add((PurchaseRegister) purchaseRegister);
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																} else {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRGINVNOList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																			savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}
															}
														} else if ((gstrInvoiceDetails.getInum().trim().toLowerCase()).equals((purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim().toLowerCase())
																&& gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
															if (isNotEmpty(gstrb2b.getCfs())) {
																purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
															}
															Double alldDiff = 0d;
															if (allowedDiff == 0d) {
																alldDiff = 1d;
															} else {
																alldDiff = allowedDiff;
															}
															if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
																&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
																&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0))) {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRGINVNOList.size() < 1) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																		savePRGGSTNOList.add((PurchaseRegister) purchaseRegister);
																	}
																}
																savePRList.add((PurchaseRegister) purchaseRegister);
																saveGSTR2List.add(gstr2);
																}
															}
														}
													}
												}
											}
										}
							} else if (invType.equals(CREDIT_DEBIT_NOTES) && isNotEmpty(gstr2.getInvtype()) && gstr2.getInvtype().equals(invType)) {
								if (isNotEmpty(gstr2.getCdn())) {
									for (GSTRCreditDebitNotes gstrcdn : gstr2.getCdn()) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
											if (isNotEmpty(gstrInvoiceDetails.getNtNum()) && isNotEmpty(gstrInvoiceDetails.getNtDt())) {
												if (isNotEmpty(purchaseRegister.getCdn().get(0).getCtin())
														&& isNotEmpty(purchaseRegister.getCdn().get(0).getNt())
														&& isNotEmpty(purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum()) && isNotEmpty(purchaseRegister.getCdn().get(0).getNt().get(0).getNtDt())) {
													SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
													String dateBeforeString = myFormat.format(gstrInvoiceDetails.getNtDt());
													String dateAfterString = myFormat.format(purchaseRegister.getCdn().get(0).getNt().get(0).getNtDt());
													float daysBetween = 0f;
													double daysBetweenInvoiceDate = 0d;
													try {
														Date dateBefore = myFormat.parse(dateBeforeString);
														Date dateAfter = myFormat.parse(dateAfterString);
														long difference = dateAfter.getTime() - dateBefore.getTime();
														daysBetween = (difference / (1000 * 60 * 60 * 24));
														daysBetweenInvoiceDate = Math.abs((double) daysBetween);
													} catch (Exception e) {
														e.printStackTrace();
													}
													String purchaseregisterInvoiceNo = purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim();
													String gstr2InvoiceNo = gstrInvoiceDetails.getNtNum().trim();
													if (ignoreHyphen) {
														if (purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
														}
														if (gstr2InvoiceNo.contains("-")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
														}
													}
													if (ignoreSlash) {
														if (purchaseregisterInvoiceNo.contains("/")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
														}
														if (gstr2InvoiceNo.contains("/")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
														}
													}
													if (ignoreZeroOrO) {
														if (purchaseregisterInvoiceNo.contains("o")|| purchaseregisterInvoiceNo.contains("O")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
														}
														if (gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
														}
													}
													if (ignoreCapitalI) {
														if (purchaseregisterInvoiceNo.contains("I")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
														}
														if (gstr2InvoiceNo.contains("I")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
														}
													}
													if (ignorel) {
														if (purchaseregisterInvoiceNo.contains("l")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
														}
														if (gstr2InvoiceNo.contains("l")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
														}
													}
													gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
													if ((gstrcdn.getCtin().trim()).equals((purchaseRegister.getCdn().get(0).getCtin().trim()))
															&& (gstrInvoiceDetails.getNtNum().trim().toLowerCase()).equals((purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim().toLowerCase()))
															&& daysBetweenInvoiceDate <= allowedDays
															&& gstrInvoiceDetails.getVal().equals(purchaseRegister.getCdn().get(0).getNt().get(0).getVal())) {
														if(isNotEmpty(gstrcdn.getCfs())) {
															purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
														}
														List<Double> pTxValues = Lists.newArrayList();
														if (isNotEmpty(gstrInvoiceDetails.getItms())&& isNotEmpty(purchaseRegister.getCdn().get(0).getNt().get(0).getItms())) {
															for (GSTRItems gstrItem : purchaseRegister.getCdn().get(0).getNt().get(0).getItms()) {
																pTxValues.add(gstrItem.getItem().getTxval());
															}
														}
													if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
														 && ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														 && (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
														 || (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														 && (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
														 && (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
														 && ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														 && (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
														 || (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														 && (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
														 && (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
														&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
														&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
														|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
														&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																|| ((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)))) {
																	if (dateBeforeString.equals(dateAfterString)) {
																		if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		}else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		}
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	}
															}else {
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
														savePRList.add((PurchaseRegister) purchaseRegister);
														saveGSTR2List.add(gstr2);
														matchingid.add(gstr2.getId().toString());
														savePRRList.add((PurchaseRegister) purchaseRegister);
														mstatus = true;
													} else {
														if(gstrInvoiceDetails.getVal().equals(purchaseRegister.getCdn().get(0).getNt().get(0).getVal())) {
															if(savePRGTAXList.size() < 1) {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																savePRGTAXList.add((PurchaseRegister) purchaseRegister);
															}
														}else {
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePRGList.add((PurchaseRegister) purchaseRegister);
														}
														savePRList.add((PurchaseRegister) purchaseRegister);
														saveGSTR2List.add(gstr2);
													}
												} else if ((gstrInvoiceDetails.getNtNum().trim().toLowerCase()).equals((purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim().toLowerCase()))
															&& (gstrcdn.getCtin().trim()).equals((purchaseRegister.getCdn().get(0).getCtin().trim()))) {
														if (isNotEmpty(gstrcdn.getCfs())) {
															purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
														}
														if (daysBetweenInvoiceDate <= allowedDays) {
															if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& ((((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																&& ((((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) <= allowedDiff)
																&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
																&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																		|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& (((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) == 0)
																		|| ((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)))
																		&& (((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) == 0)
																		|| ((purchaseRegister.getTotalamount()	- gstr2.getTotalamount()) == 0))) {
																		if (dateBeforeString.equals(dateAfterString)) {
																			if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																				mstatus = true;
																			}else {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																			}
																		} else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		}
																	} else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																	matchingid.add(gstr2.getId().toString());
																	savePRRList.add((PurchaseRegister) purchaseRegister);
																	mstatus = true;
																} else {
																	if(gstrInvoiceDetails.getVal().equals(purchaseRegister.getCdn().get(0).getNt().get(0).getVal())) {
																		if(savePRGTAXList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																			savePRGTAXList.add((PurchaseRegister) purchaseRegister);
																		}
																	}else if(!gstrInvoiceDetails.getVal().equals(purchaseRegister.getCdn().get(0).getNt().get(0).getVal())) {
																		if(savePRGINVVALUEList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																			savePRGINVVALUEList.add((PurchaseRegister) purchaseRegister);
																		}
																	}else {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		savePRGList.add((PurchaseRegister) purchaseRegister);
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}
															} else {
																if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& ((((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																		&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																		|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& ((((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) <= allowedDiff)
																		&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																		|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																		&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																		&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																		|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																		
																	if(gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																		if(savePRGINVDATEList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																			savePRGINVDATEList.add((PurchaseRegister) purchaseRegister);
																		}
																	}else if(!gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())) {
																		if(savePRGINVVALUEList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																			savePRGINVVALUEList.add((PurchaseRegister) purchaseRegister);
																		}
																	}else {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		savePRGList.add((PurchaseRegister) purchaseRegister);
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}
															}
														} else if ((gstrcdn.getCtin().trim()).equals((purchaseRegister.getCdn().get(0).getCtin()).trim())&& dateBeforeString.equals(dateAfterString)) {
															if(isNotEmpty(gstrcdn.getCfs())) {
																purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
															}
															Double alldDiff = 0d;
															if (allowedDiff == 0d) {
																alldDiff = 1d;
															} else {
																alldDiff = allowedDiff;
															}
															if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																	&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
																	&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																	&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
																	&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																	&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																	&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																	|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																	&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																if(ignoreInvoiceMatch) {
																	List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstr2InvoiceNo));
																	List<Character> purinvd = convertStringToCharList(removeLeadingZeros(purchaseregisterInvoiceNo));
																	if (purinvd.containsAll(gstrinvd) || gstrinvd.containsAll(purinvd)) {
																		if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				if(savePRPList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					matchingid.add(gstr2.getId().toString());
																					savePRPList.add((PurchaseRegister) purchaseRegister);
																					savePRProbableList.add((PurchaseRegister) purchaseRegister);
																				}
																			}
																		}else {
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				if(savePRGINVNOList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																					savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																				}
																			}
																		}
																	}else {
																		if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				if(savePRPList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					matchingid.add(gstr2.getId().toString());
																					savePRPList.add((PurchaseRegister) purchaseRegister);
																					savePRProbableList.add((PurchaseRegister) purchaseRegister);
																				}
																			}	
																		}else{
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				if(savePRGINVNOList.size() < 1) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																					savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																				}
																			}
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																} else if (gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRPList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			matchingid.add(gstr2.getId().toString());
																			
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			savePRProbableList.add((PurchaseRegister) purchaseRegister);
																			savePRPList.add((PurchaseRegister) purchaseRegister);
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}else {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRGINVNOList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																			savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}
															}
														} else if ((gstrInvoiceDetails.getNtNum().trim().toLowerCase()).equals((purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim().toLowerCase()))
																&& dateBeforeString.equals(dateAfterString)) {
															if(isNotEmpty(gstrcdn.getCfs())) {
																purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
															}
															Double alldDiff = 0d;
															if (allowedDiff == 0d) {
																alldDiff = 1d;
															} else {
																alldDiff = allowedDiff;
															}
															if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
																&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
																&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
																&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																	
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRGINVNOList.size() < 1) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																		savePRGGSTNOList.add((PurchaseRegister) purchaseRegister);
																	}
																}
																savePRList.add((PurchaseRegister) purchaseRegister);
																saveGSTR2List.add(gstr2);
																}
															}
												}
											}
										}
									}
								}
							}else if(invType.equals(MasterGSTConstants.IMP_GOODS) && isNotEmpty(gstr2.getInvtype()) && gstr2.getInvtype().equals(invType)) {
								if (isNotEmpty(gstr2.getImpGoods())) {
									for (GSTRImportDetails gstrimpg : gstr2.getImpGoods()) {
										if(isNotEmpty(gstrimpg.getBoeNum()) && isNotEmpty(gstrimpg.getBoeDt())) {
											if(isNotEmpty(purchaseRegister.getImpGoods()) && isNotEmpty(purchaseRegister.getImpGoods().get(0)) && isNotEmpty(purchaseRegister.getImpGoods().get(0).getBoeNum()) && isNotEmpty(purchaseRegister.getDateofinvoice())) {
												SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
												String dateBeforeString = myFormat.format(gstrimpg.getBoeDt());
												String dateAfterString = myFormat.format(purchaseRegister.getDateofinvoice());
												float daysBetween = 0f;
												double daysBetweenInvoiceDate = 0d;
												 try {
												       Date dateBefore = myFormat.parse(dateBeforeString);
												       Date dateAfter = myFormat.parse(dateAfterString);
												       long difference = dateAfter.getTime() - dateBefore.getTime();
												       daysBetween = (difference / (1000*60*60*24));
												       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
												 } catch (Exception e) {
												       e.printStackTrace();
												 }
												String purchaseregisterInvoiceNo = (purchaseRegister.getImpGoods().get(0).getBoeNum().toString()).trim();
												String gstr2InvoiceNo = (gstrimpg.getBoeNum().toString()).trim();
												 if(ignoreHyphen) {
													 if(purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
													 }
												 }
												 if(ignoreSlash) {
													 if(purchaseregisterInvoiceNo.contains("/")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
													 }
													if (gstr2InvoiceNo.contains("/")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
													 }
												 }
												 if(ignoreZeroOrO) {
														if (purchaseregisterInvoiceNo.contains("o")	|| purchaseregisterInvoiceNo.contains("O")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
													 }
													 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
													 }
												 }
												 if(ignoreCapitalI) {
													 if(purchaseregisterInvoiceNo.contains("I")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
													 }
													 if(gstr2InvoiceNo.contains("I")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
													 }
												 }
												 if(ignorel) {
													 if(purchaseregisterInvoiceNo.contains("l")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
													 }
													 if(gstr2InvoiceNo.contains("l")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
													 }
												 }
												 gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
												 purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
												 
												 if(isEmpty(gstrimpg.getStin())) {
													 gstrimpg.setStin(" ");
												 }
												 if(isEmpty(purchaseRegister) || isEmpty(purchaseRegister.getImpGoods()) || isEmpty(purchaseRegister.getImpGoods().get(0)) || isEmpty(purchaseRegister.getImpGoods().get(0).getStin())) {
													 purchaseRegister.getImpGoods().get(0).setStin(" ");
												 }
												 
												 if ((gstrimpg.getStin().trim()).equals((purchaseRegister.getImpGoods().get(0).getStin()).trim())
															&& ((gstrimpg.getBoeNum().toString()).trim().toLowerCase()).equals((purchaseRegister.getImpGoods().get(0).getBoeNum().toString()).trim().toLowerCase())
															&& daysBetweenInvoiceDate <= allowedDays
															&& gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																
																if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																	&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																	&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																			|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																			&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
																			&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																			|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))) {
																				if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																					if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																						mstatus = true;
																					}else {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																					}
																				}else {
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																				}
																		}else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																		matchingid.add(gstr2.getId().toString());
																		savePRRList.add((PurchaseRegister) purchaseRegister);
																		mstatus = true;
																	} else {
																		if(gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																			if(savePRGTAXList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																				savePRGTAXList.add((PurchaseRegister) purchaseRegister);
																			}
																		}else {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			savePRGList.add((PurchaseRegister) purchaseRegister);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	}
														} else if (((gstrimpg.getBoeNum().toString()).trim().toLowerCase()).equals((purchaseRegister.getInvoiceno()).trim().toLowerCase())
																&& (gstrimpg.getStin().trim()).equals((purchaseRegister.getImpGoods().get(0).getStin()))) {
																if (daysBetweenInvoiceDate <= allowedDays) {
																		if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																			&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																			|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																			&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																			&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																			&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																			|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))
																			&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																					&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																					&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																					|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																					&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				//Mahi-reconsileMatchingIds.add(purchaseRegister.getId().toString());
																				if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																					&& (((gstr2.getTotaltaxableamount()	- purchaseRegister.getTotaltaxableamount()) == 0)
																					|| ((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) == 0)))
																					&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																					&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																					|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))
																					&& (((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) == 0)
																					|| ((purchaseRegister.getTotalamount()	- gstr2.getTotalamount()) == 0))) {
																					if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																						if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																							mstatus = true;
																						}else {
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																						}
																					}else {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					}
																				}else {
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																				}
																				savePRList.add((PurchaseRegister) purchaseRegister);
																				saveGSTR2List.add(gstr2);
																				matchingid.add(gstr2.getId().toString());
																				savePRRList.add((PurchaseRegister) purchaseRegister);
																				mstatus = true;
																			} else {
																				if(gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																					if(savePRGTAXList.size() < 1) {
																						purchaseRegister.setMatchingId(gstr2.getId().toString());
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																						savePRGTAXList.add((PurchaseRegister) purchaseRegister);
																					}
																				}else if(!gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																					if(savePRGINVVALUEList.size() < 1) {
																						purchaseRegister.setMatchingId(gstr2.getId().toString());
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																						savePRGINVVALUEList.add((PurchaseRegister) purchaseRegister);
																					}
																				}else {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																					savePRGList.add((PurchaseRegister) purchaseRegister);
																				}
																				savePRList.add((PurchaseRegister) purchaseRegister);
																				saveGSTR2List.add(gstr2);
																			}
																} else {
																	if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																			&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																			|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																			&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																			&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																			&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																			|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))
																			&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																					&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																					&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																					|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																					&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																		
																		if(gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																			if(savePRGINVDATEList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																				savePRGINVDATEList.add((PurchaseRegister) purchaseRegister);
																			}
																		}else if(!gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																			if(savePRGINVVALUEList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																				savePRGINVVALUEList.add((PurchaseRegister) purchaseRegister);
																			}
																		}else {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			savePRGList.add((PurchaseRegister) purchaseRegister);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																		}
																}
															} else if ((gstrimpg.getStin().trim()).equals((purchaseRegister.getImpGoods().get(0).getStin()).trim())
																	&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																	Double alldDiff = 0d;
																	if (allowedDiff == 0d) {
																		alldDiff = 1d;
																	} else {
																		alldDiff = allowedDiff;
																	}
																	if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																		&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																		|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= alldDiff)
																		&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																		&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																		|| (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) <= alldDiff)
																		&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																				&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																				&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																				|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																				&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																		if (ignoreInvoiceMatch) {
																			List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstr2InvoiceNo));
																			List<Character> purinvd = convertStringToCharList(removeLeadingZeros(purchaseregisterInvoiceNo));
																			if (purinvd.containsAll(gstrinvd) || gstrinvd.containsAll(purinvd)) {
																				if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																					if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																					}else {
																						if(savePRPList.size() < 1) {
																							purchaseRegister.setMatchingId(gstr2.getId().toString());
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																							matchingid.add(gstr2.getId().toString());
																							savePRPList.add((PurchaseRegister) purchaseRegister);
																							savePRProbableList.add((PurchaseRegister) purchaseRegister);
																						}
																					}
																				}else {
																					if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																					}else {
																						if(savePRGINVNOList.size() < 1) {
																							purchaseRegister.setMatchingId(gstr2.getId().toString());
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																							savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																						}
																					}
																				}
																			}else {
																				if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																					if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																					}else {
																						if(savePRPList.size() < 1) {
																							purchaseRegister.setMatchingId(gstr2.getId().toString());
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																							matchingid.add(gstr2.getId().toString());
																							savePRPList.add((PurchaseRegister) purchaseRegister);
																							savePRProbableList.add((PurchaseRegister) purchaseRegister);
																						}
																					}	
																				}else{
																					if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																					}else {
																						if(savePRGINVNOList.size() < 1) {
																							purchaseRegister.setMatchingId(gstr2.getId().toString());
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																							savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																						}
																					}
																				}
																			}
																			savePRList.add((PurchaseRegister) purchaseRegister);
																			saveGSTR2List.add(gstr2);
																	} else if (gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {
																			if(savePRPList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				matchingid.add(gstr2.getId().toString());
																				
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				savePRProbableList.add((PurchaseRegister) purchaseRegister);
																				savePRPList.add((PurchaseRegister) purchaseRegister);
																			}
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	} else {
																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {
																			if(savePRGINVNOList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																				savePRGINVNOList.add((PurchaseRegister) purchaseRegister);
																			}
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	}
																}
															} else if (((gstrimpg.getBoeNum().toString()).trim().toLowerCase()).equals((purchaseRegister.getInvoiceno()).trim().toLowerCase())
																	&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																Double alldDiff = 0d;
																if (allowedDiff == 0d) {
																	alldDiff = 1d;
																} else {
																	alldDiff = allowedDiff;
																}
																if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																	&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
																	&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																	&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
																	&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																			&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																			&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																			|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																			&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRGINVNOList.size() < 1) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																		savePRGGSTNOList.add((PurchaseRegister) purchaseRegister);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	}
																	}
																}
															}
														}
													}
												}
											}
						}
					}else{
						logger.info(CLASSNAME + " for loo break");
						
						break;
					}//mstatus
					}
					if(isNotEmpty(savePRRList) && savePRRList.size() > 0) {
						if(isNotEmpty(purchaseRegisters)) {
							purchaseRegisters.removeAll(savePRRList);
						}
					}
					if(isNotEmpty(savePRGList) && savePRGList.size() > 1) {
						savePRGList.remove(0);
						removematchingid(savePRGList);
					}
				}
			}
		}
		saveBulkPR(savePRList);
		saveBulkGSTR2(saveGSTR2List);
		removegstr2id(matchingid,clientId);
		
		if(isNotEmpty(savePRProbableList) && savePRProbableList.size() > 0) {
			for(PurchaseRegister pr : savePRProbableList) {
				if(isNotEmpty(pr.getMatchingId()) && isNotEmpty(pr.getMatchingStatus()) && MasterGSTConstants.GST_STATUS_PROBABLEMATCHED.equalsIgnoreCase(pr.getMatchingStatus())) {
					GSTR2 gstr2 = gstr2Repository.findOne(pr.getMatchingId());
					if(isNotEmpty(gstr2)) {
						if(isNotEmpty(gstr2.getMatchingStatus()) && !MasterGSTConstants.GST_STATUS_PROBABLEMATCHED.equalsIgnoreCase(gstr2.getMatchingStatus())) {
							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
							gstr2Repository.save(gstr2);
						}
					}
				}
			}
		}
	}
	
	void saveBulkPR(List<PurchaseRegister> savePRList) {
		int batchCount = 2000;
		if(savePRList.size() > batchCount) {
			int index = 0;
			while((savePRList.size()-index) > batchCount) {
				List<PurchaseRegister> subList = savePRList.subList(index, index+batchCount);
				purchaseRepository.save(subList);
				index=index+batchCount;
			}
			purchaseRepository.save(savePRList.subList(index, savePRList.size()));
		} else {
			purchaseRepository.save(savePRList);
		}
	}
	
	void saveBulkGSTR2(List<GSTR2> saveGSTRList) {
		int batchCount = 2000;
		if(saveGSTRList.size() > batchCount) {
			int index = 0;
			while((saveGSTRList.size()-index) > batchCount) {
				List<GSTR2> subList = saveGSTRList.subList(index, index+batchCount);
				gstr2Repository.save(subList);
				index=index+batchCount;
			}
			gstr2Repository.save(saveGSTRList.subList(index, saveGSTRList.size()));
		} else {
			gstr2Repository.save(saveGSTRList);
		}
	}

	private void reconcileMissingInvoices(String clientId, final String invType, final String fp, ClientConfig clientConfig,boolean billdate,ReconcileTemp recon) {
		logger.info(CLASSNAME + " reconcileMissingInvoices method calling...");
		int month = Integer.parseInt(fp.substring(0, 2));
		int year = Integer.parseInt(fp.substring(2));
		Calendar cal = Calendar.getInstance();

		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);

		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH) + 1;

		Date ystDate = null;
		Date yendDate = null;
		if (month < 10) {
			cal.set(year - 1, 3, 1, 0, 0, 0);
			ystDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			if (presentYear != year) {
				cal.set(year, 9, 0, 23, 59, 59);
				yendDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, presentMonth, 0, 23, 59, 59);
				yendDate = new java.util.Date(cal.getTimeInMillis());
			}
		} else {
			cal.set(year - 1, 3, 1, 0, 0, 0);
			ystDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			if (presentYear != year) {
				cal.set(year, 9, 0, 23, 59, 59);
				yendDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, presentMonth, 0, 23, 59, 59);
				yendDate = new java.util.Date(cal.getTimeInMillis());
			}
		}
		long notinpurchases = purchageRegisterDao.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndNotInGstr2aInvoicescount(clientId, invType, ystDate, yendDate,billdate);
		if(isNotEmpty(recon) && isNotEmpty(recon.getTotalpurchaseinvoices())) {
			recon.setTotalpurchaseinvoices(recon.getTotalpurchaseinvoices()+notinpurchases);
		}else {
			recon.setTotalpurchaseinvoices(notinpurchases);
		}
		recon = reconcileTempRepository.save(recon);
		
		boolean hasMore = true;
		while(hasMore) {
			hasMore = reconcileMissingPageable(clientId, invType, ystDate, yendDate, clientConfig,billdate);
		}
		if(isNotEmpty(recon) && isNotEmpty(recon.getTotalpurchaseinvoices())) {
			recon.setProcessedpurchaseinvoices(recon.getTotalpurchaseinvoices());
		}else {
			recon.setProcessedpurchaseinvoices(notinpurchases);
		}
		reconcileTempRepository.save(recon);
	}
	
	private boolean reconcileMissingPageable(String clientId, final String invType, Date ystDate, Date yendDate,ClientConfig clientConfig ,boolean billdate) {
		logger.info(CLASSNAME + " reconcileMissingPageable method calling...");

		List<String> invTypes = new ArrayList<String>();
		invTypes.add(invType);

		List<PurchaseRegister> notInGstr2aList = Lists.newArrayList();
		List<GSTR2> gstr2aInvoiceList = Lists.newArrayList();
		//int maxCounter = 20000;
		int maxCounter = 5000;
		Pageable pageable = new PageRequest(0, 2000);
		Page<? extends InvoiceParent> notInGstr2Ainvoices = null;
		
		List<String> statusIsNull = Lists.newArrayList();
		//isNull, "", isExits False
		statusIsNull.add("");
		statusIsNull.add(null);
		
		if(billdate) {
			//notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusIsNull(clientId, invTypes, ystDate, yendDate, pageable);
			notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusIn(clientId, invTypes, ystDate, yendDate, statusIsNull, pageable);
		} else {
			//notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndBillDateBetweenAndMatchingStatusIsNull(clientId, invTypes, ystDate, yendDate, pageable);
			notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndBillDateBetweenAndMatchingStatusIn(clientId, invTypes, ystDate, yendDate, statusIsNull, pageable);
		}
		List<PurchaseRegister> ngstr2a = (List<PurchaseRegister>) notInGstr2Ainvoices.getContent();
		if (isNotEmpty(ngstr2a)) {
			notInGstr2aList.addAll(ngstr2a);
		}
		while(notInGstr2aList.size() <= maxCounter && notInGstr2Ainvoices.hasNext()) {
			if(billdate) {
				//notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusIsNull(clientId, invTypes, ystDate,yendDate, notInGstr2Ainvoices.nextPageable());
				notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusIn(clientId, invTypes, ystDate,yendDate, statusIsNull, notInGstr2Ainvoices.nextPageable());
			} else {
				//notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndBillDateBetweenAndMatchingStatusIsNull(clientId, invTypes, ystDate,yendDate, notInGstr2Ainvoices.nextPageable());
				notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndBillDateBetweenAndMatchingStatusIn(clientId, invTypes, ystDate,yendDate, statusIsNull, notInGstr2Ainvoices.nextPageable());
			}
			ngstr2a = (List<PurchaseRegister>) notInGstr2Ainvoices.getContent();
			if (isNotEmpty(ngstr2a)) {
				notInGstr2aList.addAll(ngstr2a);
			}
		}
		
		List<String> gstr2status = Lists.newArrayList();
		gstr2status.add("");
		gstr2status.add(null);
		gstr2status.add("Not In Purchases");
		Page<? extends InvoiceParent> gstr2aInvoices = gstr2Repository.findByClientidAndInvtypeInAndIsAmendmentAndDateofinvoiceBetweenAndMatchingStatusIn(clientId,invTypes, true, ystDate, yendDate,gstr2status, pageable);
		List<GSTR2> npur = (List<GSTR2>) gstr2aInvoices.getContent();
		if (isNotEmpty(npur)) {
			gstr2aInvoiceList.addAll(npur);
		}
		while(gstr2aInvoiceList.size() <= maxCounter && gstr2aInvoices.hasNext()) {
			gstr2aInvoices = gstr2Repository.findByClientidAndInvtypeInAndIsAmendmentAndDateofinvoiceBetweenAndMatchingStatusIsNull(clientId,invTypes, true, ystDate, yendDate, gstr2aInvoices.nextPageable());
			npur = (List<GSTR2>) gstr2aInvoices.getContent();
			if (isNotEmpty(npur)) {
				gstr2aInvoiceList.addAll(npur);
			}
		}
		
		reconcileRemainingRecords(clientId, invType, clientConfig, notInGstr2aList, gstr2aInvoiceList);
		ReconcileTemp recon = reconcileTempRepository.findByClientid(clientId);
		if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedpurchaseinvoices())) {
			recon.setProcessedpurchaseinvoices(recon.getProcessedpurchaseinvoices()+notInGstr2aList.size());
		}else {
			recon.setProcessedpurchaseinvoices(new Long(notInGstr2aList.size()));
		}
		if(invType.equals(MasterGSTConstants.B2B)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedpurchaseb2binvoices())) {
				recon.setProcessedpurchaseb2binvoices(recon.getProcessedpurchaseb2binvoices()+notInGstr2aList.size());
			}else {
				recon.setProcessedpurchaseb2binvoices(new Long(notInGstr2aList.size()));
			}
		}else if(invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedpurchasecreditinvoices())) {
				recon.setProcessedpurchasecreditinvoices(recon.getProcessedpurchasecreditinvoices()+notInGstr2aList.size());
			}else {
				recon.setProcessedpurchasecreditinvoices(new Long(notInGstr2aList.size()));
			}
		}else if(invType.equals(MasterGSTConstants.IMP_GOODS)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getProcessedpurchaseimpginvoices())) {
				recon.setProcessedpurchaseimpginvoices(recon.getProcessedpurchaseimpginvoices()+notInGstr2aList.size());
			}else {
				recon.setProcessedpurchaseimpginvoices(new Long(notInGstr2aList.size()));
			}
		}
		recon = reconcileTempRepository.save(recon);
		
		if(isNotEmpty(notInGstr2aList)) {
			List<String> reconlist = Lists.newArrayList();
			reconlist.add(MasterGSTConstants.GST_STATUS_MATCHED);
			reconlist.add(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
			reconlist.add("Matched In Other Months");
			reconlist.add("Round Off Matched");
			reconlist.add("Round Off Matched In Other Months");
			reconlist.add("Probable Matched");
			reconlist.add("Mismatched");
			reconlist.add("Tax Mismatched");
			reconlist.add("Invoice Value Mismatched");
			reconlist.add("GST No Mismatched");
			reconlist.add("Invoice No Mismatched");
			reconlist.add("Invoice Date Mismatched");
			reconlist.add("Manual Matched");
			List<PurchaseRegister> gstr2NotMatchedList = Lists.newArrayList();
			for (PurchaseRegister gstr2 : notInGstr2aList) {
				if (isEmpty(gstr2.getMatchingStatus()) || (isNotEmpty(gstr2.getMatchingStatus())
						&& !reconlist.contains(gstr2.getMatchingStatus()))) {
					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
					gstr2NotMatchedList.add(gstr2);
				}
			}
			if(isNotEmpty(gstr2NotMatchedList)) {
				saveBulkPR(gstr2NotMatchedList);
			}
		}
		
		if(invType.equals(MasterGSTConstants.B2B)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getTotalpurchaseb2binvoices()) && isNotEmpty(recon.getProcessedpurchaseb2binvoices()) && recon.getProcessedpurchaseb2binvoices()<recon.getTotalpurchaseb2binvoices()) {
				return true;
			}else {
				return false;
			}
		}else if(invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getTotalpurchasecreditinvoices()) && isNotEmpty(recon.getProcessedpurchasecreditinvoices()) && recon.getProcessedpurchasecreditinvoices()<recon.getTotalpurchasecreditinvoices()) {
				return true;
			}else {
				return false;
			}
		}else if(invType.equals(MasterGSTConstants.IMP_GOODS)) {
			if(isNotEmpty(recon) && isNotEmpty(recon.getTotalpurchaseimpginvoices()) && isNotEmpty(recon.getProcessedpurchaseimpginvoices()) && recon.getProcessedpurchaseimpginvoices()<recon.getTotalpurchaseimpginvoices()) {
				return true;
			}else {
				return false;
			}
		}
		
		if(isNotEmpty(recon) && isNotEmpty(recon.getTotalpurchaseinvoices()) && isNotEmpty(recon.getProcessedpurchaseinvoices()) && recon.getProcessedpurchaseinvoices()>=recon.getTotalpurchaseinvoices()) {
			return false;
		}
		return (null != notInGstr2Ainvoices && notInGstr2Ainvoices.hasNext()) && (null != gstr2aInvoices && gstr2aInvoices.hasNext());
	}

	private void reconcileRemainingRecords(String clientId, final String invType, ClientConfig clientConfig,
			List<PurchaseRegister> notingstr2a, List<GSTR2> gstr2aInvoic) {
		logger.info(CLASSNAME + " reconcileRemainingRecords method calling...");

		Double allowedDiff = 0d;
		Double allowedDays = 0d;
		boolean ignoreHyphen = true;
		boolean ignoreSlash = true;
		boolean ignoreZeroOrO = true;
		boolean ignoreCapitalI = true;
		boolean ignorel = true;
		boolean ignoreInvoiceMatch = true;
		if(isNotEmpty(clientConfig)) {
			if(isNotEmpty(clientConfig.getReconcileDiff())) {
				allowedDiff = clientConfig.getReconcileDiff();
			}
			if(isNotEmpty(clientConfig.getAllowedDays())) {
				allowedDays = clientConfig.getAllowedDays();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreHyphen())) {
				ignoreHyphen = clientConfig.isEnableIgnoreHyphen();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreSlash())) {
				ignoreSlash = clientConfig.isEnableIgnoreSlash();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreZero())) {
				ignoreZeroOrO = clientConfig.isEnableIgnoreZero();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreI())) {
				ignoreCapitalI = clientConfig.isEnableIgnoreI();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreL())) {
				ignorel = clientConfig.isEnableIgnoreL();
			}
			if(isNotEmpty(clientConfig.isEnableInvoiceMatch())) {
				ignoreInvoiceMatch = clientConfig.isEnableInvoiceMatch();
			}
		}else {
			ignoreHyphen = true;
			ignoreSlash = true;
			ignoreZeroOrO = true;
			ignoreCapitalI = true;
			ignorel = true;
			ignoreInvoiceMatch = true;
		}
		
		List<PurchaseRegister> savePPRList = Lists.newArrayList();
		List<GSTR2> savePGSTR2List = Lists.newArrayList();
		List<String> statusMatchingIds = Lists.newArrayList();
		List<PurchaseRegister> savePPRProbableList = Lists.newArrayList();
		List<String> pmatchingid = Lists.newArrayList();
		if (isNotEmpty(notingstr2a)) {
			for (PurchaseRegister purchaseRegister : notingstr2a) {
				boolean mstatus = false;
				List<GSTR2> savePPRRList = Lists.newArrayList();
				List<GSTR2> savePRGINVNOList = Lists.newArrayList();
				List<GSTR2> savePRGINVDATEList = Lists.newArrayList();
				List<GSTR2> savePRGGSTNOList = Lists.newArrayList();
				List<GSTR2> savePRGTAXList = Lists.newArrayList();
				List<GSTR2> savePRGINVVALUEList = Lists.newArrayList();
				List<GSTR2> savePRPList = Lists.newArrayList();
				List<PurchaseRegister> savePPRGList = Lists.newArrayList();
				logger.info(CLASSNAME + " reconcileRemainingRecords purchaseRegister macting status checking");
				for (GSTR2 gstr2 : gstr2aInvoic) {
					if (!mstatus) {
						if (invType.equals(B2B) && isNotEmpty(purchaseRegister.getInvtype())
								&& purchaseRegister.getInvtype().equals(invType)) {
								if (isNotEmpty(purchaseRegister.getB2b())) {
									for (GSTRB2B gstrb2b : purchaseRegister.getB2b()) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
											if (isNotEmpty(gstrInvoiceDetails.getInum()) && isNotEmpty(gstrInvoiceDetails.getIdt())) {
												if (isNotEmpty(gstr2.getB2b()) && isNotEmpty(gstr2.getB2b().get(0).getCtin())
													&& isNotEmpty(gstr2.getB2b().get(0).getInv())
													&& isNotEmpty(gstr2.getB2b().get(0).getInv().get(0).getInum())
													&& isNotEmpty(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
													SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
													String dateBeforeString = gstrInvoiceDetails.getIdt();
													String dateAfterString = gstr2.getB2b().get(0).getInv().get(0).getIdt();
													float daysBetween = 0f;
													double daysBetweenInvoiceDate = 0d;
													try {
												       Date dateBefore = myFormat.parse(dateBeforeString);
												       Date dateAfter = myFormat.parse(dateAfterString);
												       long difference = dateAfter.getTime() - dateBefore.getTime();
												       daysBetween = (difference / (1000*60*60*24));
												       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
													} catch (Exception e) {
														e.printStackTrace();
													}
													String purchaseregisterInvoiceNo = gstr2.getB2b().get(0).getInv().get(0).getInum().trim();
													String gstr2InvoiceNo = gstrInvoiceDetails.getInum().trim();
													if(ignoreHyphen) {
														if(purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
														}
														 if(gstr2InvoiceNo.contains("-")) {
															 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
														 }
													}
												 if(ignoreSlash) {
													 if(purchaseregisterInvoiceNo.contains("/")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
													 }
												 }
												 if(ignoreZeroOrO) {
												if (purchaseregisterInvoiceNo.contains("o") || purchaseregisterInvoiceNo.contains("O")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
													 }
													 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
													 }
												 }
												 if(ignoreCapitalI) {
													 if(purchaseregisterInvoiceNo.contains("I")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
													 }
													 if(gstr2InvoiceNo.contains("I")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
													 }
												 }
												 if(ignorel) {
													 if(purchaseregisterInvoiceNo.contains("l")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
													 }
													 if(gstr2InvoiceNo.contains("l")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
													 }
												 }
												gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
												if ((gstrb2b.getCtin().trim()).equals((gstr2.getB2b().get(0).getCtin().trim()))
													&& (gstrInvoiceDetails.getInum().trim()).equals((gstr2.getB2b().get(0).getInv().get(0).getInum().trim()))
													&& daysBetweenInvoiceDate <= allowedDays
													&& gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
													if(isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
														gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
													}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
															if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
																|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
																&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
																if (gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
																	if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																	}
																}else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePGSTR2List.add((GSTR2) gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															savePPRList.add(purchaseRegister);
															statusMatchingIds.add(gstr2.getId().toString());
															pmatchingid.add(gstr2.getId().toString());
															savePPRRList.add((GSTR2) gstr2);
															mstatus = true;
															
														} else {
															if(gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
																if(savePRGTAXList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	savePRGTAXList.add(gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													} else if ((gstrInvoiceDetails.getInum().trim()).equals((gstr2.getB2b().get(0).getInv().get(0).getInum().trim()))
														&& (gstrb2b.getCtin().trim()).equals((gstr2.getB2b().get(0).getCtin().trim()))) {
														if (isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
															gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
														}
													if (daysBetweenInvoiceDate <= allowedDays) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
															&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
															&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
															|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
															&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
															&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
															&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
															&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))
															&& (isNotEmpty(purchaseRegister.getTotalamount())&& isNotEmpty(gstr2.getTotalamount())
															&& ((((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
															&& (purchaseRegister.getTotalamount()- gstr2.getTotalamount()) >= 0) || (((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
															&& (gstr2.getTotalamount()- purchaseRegister.getTotalamount()) >= 0)))) {
															if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
																|| ((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax())
																&& (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) == 0) 
																|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))
																&& (((purchaseRegister.getTotalamount() - gstr2.getTotalamount()) == 0) 
																|| ((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) == 0))) {
																if (gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
																	if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																	}
																} else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
															} else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePGSTR2List.add((GSTR2) gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															savePPRList.add(purchaseRegister);
															statusMatchingIds.add(gstr2.getId().toString());
															pmatchingid.add(gstr2.getId().toString());
															savePPRRList.add((GSTR2) gstr2);
															mstatus = true;
														} else {
															
															if(gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
																if(savePRGTAXList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	savePRGTAXList.add(gstr2);
																}
															}else if(!gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
																if(savePRGINVVALUEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	savePRGINVVALUEList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													}else {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
																&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
																|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
																&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
																&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0))) {
															
															if(gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
																if(savePRGINVDATEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																	savePRGINVDATEList.add(gstr2);
																}
															}else if(!gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
																if(savePRGINVVALUEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	savePRGINVVALUEList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
																savePGSTR2List.add((GSTR2) gstr2);
																savePPRList.add(purchaseRegister);
															}
													}
											} else if ((gstrb2b.getCtin().trim()).equals((gstr2.getB2b().get(0).getCtin().trim()))
														&& gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
												Double alldDiff = 0d;
												if (allowedDiff == 0d) {
													alldDiff = 1d;
												} else {
													alldDiff = allowedDiff;
												}
													if(isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
														gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
													}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))
														&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
														&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
														|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
														&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0))) {
															if(ignoreInvoiceMatch) {
																List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstrInvoiceDetails.getInum().trim()));
																List<Character> purinvd = convertStringToCharList(removeLeadingZeros(gstr2.getB2b().get(0).getInv().get(0).getInum().trim()));
																if (purinvd.containsAll(gstrinvd)|| gstrinvd.containsAll(purinvd)) {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRPList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			pmatchingid.add(gstr2.getId().toString());
																			savePRPList.add((GSTR2) gstr2);
																			savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																		}
																	}
																}else {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		if(savePRGINVNOList.size() < 1) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																			savePRGINVNOList.add((GSTR2) gstr2);
																		}
																	}
																}
																savePGSTR2List.add(gstr2);
																savePPRList.add((PurchaseRegister) purchaseRegister);
															}else if(gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRPList.size() < 1) {
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		pmatchingid.add(gstr2.getId().toString());
																		savePRPList.add((GSTR2) gstr2);
																		savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																	}
																}
																savePGSTR2List.add((GSTR2) gstr2);
																savePPRList.add(purchaseRegister);
															}else {
																
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRGINVNOList.size() < 1) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																		savePRGINVNOList.add((GSTR2) gstr2);
																	}
																}
																savePGSTR2List.add(gstr2);
																savePPRList.add((PurchaseRegister) purchaseRegister);
															}
													}
												} else if ((gstrInvoiceDetails.getInum().trim()).equals((gstr2.getB2b().get(0).getInv().get(0).getInum().trim()))&& gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
													Double alldDiff = 0d;
													if (allowedDiff == 0d) {
														alldDiff = 1d;
													} else {
														alldDiff = allowedDiff;
													}
													if (isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
														gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
													}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))
														&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
														&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
														|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
														&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0))) {
														if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
														}else {
															if(savePRGGSTNOList.size() < 1) {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																savePRGGSTNOList.add(gstr2);
															}
															savePPRList.add((PurchaseRegister) purchaseRegister);
															savePGSTR2List.add(gstr2);
														}
														}
													}
												}
											}
										}
									}
								}
						} else if (invType.equals(CREDIT_DEBIT_NOTES) && isNotEmpty(purchaseRegister.getInvtype()) && purchaseRegister.getInvtype().equals(invType)) {
								if (isNotEmpty(purchaseRegister.getCdn())) {
									for (GSTRCreditDebitNotes gstrcdn : purchaseRegister.getCdn()) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
											if (isNotEmpty(gstrInvoiceDetails.getNtNum())&& isNotEmpty(gstrInvoiceDetails.getNtDt())) {
												if (isNotEmpty(gstr2.getCdn()) && isNotEmpty(gstr2.getCdn().get(0)) && isNotEmpty(gstr2.getCdn().get(0).getCtin())
													&& isNotEmpty(gstr2.getCdn().get(0).getNt())
													&& isNotEmpty(gstr2.getCdn().get(0).getNt().get(0).getNtDt())
													&& isNotEmpty(gstr2.getCdn().get(0).getNt().get(0).getNtNum())) {
													SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
													String dateBeforeString = myFormat.format(gstrInvoiceDetails.getNtDt());
													String dateAfterString = myFormat.format(gstr2.getCdn().get(0).getNt().get(0).getNtDt());
													float daysBetween = 0f;
													double daysBetweenInvoiceDate = 0d;
													try {
												       Date dateBefore = myFormat.parse(dateBeforeString);
												       Date dateAfter = myFormat.parse(dateAfterString);
												       long difference = dateAfter.getTime() - dateBefore.getTime();
												       daysBetween = (difference / (1000*60*60*24));
												       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
													} catch (Exception e) {
														e.printStackTrace();
													}
													String purchaseregisterInvoiceNo = gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim();
													String gstr2InvoiceNo = gstrInvoiceDetails.getNtNum().trim();
													if(ignoreHyphen) {
													 if(purchaseregisterInvoiceNo.contains("-")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
													 }
													}
												 if(ignoreSlash) {
													 if(purchaseregisterInvoiceNo.contains("/")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
													 }
												 }
												 if(ignoreZeroOrO) {
													 if (purchaseregisterInvoiceNo.contains("o") || purchaseregisterInvoiceNo.contains("O")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
													 }
													 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
													 }
												 }
												 if(ignoreCapitalI) {
													 if(purchaseregisterInvoiceNo.contains("I")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
													 }
													 if(gstr2InvoiceNo.contains("I")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
													 }
												 }
												 if(ignorel) {
													 if(purchaseregisterInvoiceNo.contains("l")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
													 }
													 if(gstr2InvoiceNo.contains("l")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
													 }
												 }
												 gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
												if ((gstrcdn.getCtin().trim()).equals((gstr2.getCdn().get(0).getCtin().trim()))
													&& (gstrInvoiceDetails.getNtNum().trim()).equals((gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim()))
														&& daysBetweenInvoiceDate <= allowedDays
														&& gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
													if(isNotEmpty(gstr2.getCdn().get(0).getCfs())) {
														gstrcdn.setCfs(gstr2.getCdn().get(0).getCfs());
													}
													List<Double> pTxValues = Lists.newArrayList();
													if (isNotEmpty(gstrInvoiceDetails.getItms())&& isNotEmpty(gstr2.getCdn().get(0).getNt().get(0).getItms())) {
														for (GSTRItems gstrItem : gstr2.getCdn().get(0).getNt().get(0).getItms()) {
															pTxValues.add(gstrItem.getItem().getTxval());
														}
													}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
															if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
																|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
																&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)
																|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
																if (dateBeforeString.equals(dateAfterString)) {
																	if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																	}
																}else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePGSTR2List.add(gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															
															savePPRList.add((PurchaseRegister)purchaseRegister);
															pmatchingid.add(gstr2.getId().toString());
															savePPRRList.add((GSTR2) gstr2);
															mstatus = true;
														} else {
															if(gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
																if(savePRGTAXList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	savePRGTAXList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
													}
												} else if ((gstrInvoiceDetails.getNtNum().trim()).equals((gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim()))
														&& (gstrcdn.getCtin().trim()).equals((gstr2.getCdn().get(0).getCtin().trim()))) {
													if (isNotEmpty(gstr2.getCdn().get(0).getCfs())) {
														gstrcdn.setCfs(gstr2.getCdn().get(0).getCfs());
													}
													if (daysBetweenInvoiceDate <= allowedDays) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
															&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
															&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
															|| (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
															&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
															&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
															&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
															&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
															|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
															&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))
															&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
															&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
															&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
															|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
															&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
															if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
																&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
																|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
																&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)
																|| ((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) == 0)))
																&& (isNotEmpty(purchaseRegister.getTotalamount())&& isNotEmpty(gstr2.getTotalamount())
																		&& (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) == 0)
																		|| ((gstr2.getTotalamount()- purchaseRegister.getTotalamount()) == 0)))) {
																if (dateBeforeString.equals(dateAfterString)) {
																	if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																	}
																} else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
															} else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePGSTR2List.add(gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															
															savePPRList.add((PurchaseRegister) purchaseRegister);
															pmatchingid.add(gstr2.getId().toString());
															savePPRRList.add((GSTR2) gstr2);
															mstatus = true;
														} else {
															
															if(gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
																if(savePRGTAXList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	savePRGTAXList.add((GSTR2) gstr2);
																}
															}else if(!gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
																if(savePRGINVVALUEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	savePRGINVVALUEList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													}else {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
																&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
																|| (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
																&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
																|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))
																&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
															
															if(gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
																if(savePRGINVDATEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																	savePRGINVDATEList.add((GSTR2) gstr2);
																}
															}else if(!gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
																if(savePRGINVVALUEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	savePRGINVVALUEList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add((GSTR2) gstr2);
															savePPRList.add(purchaseRegister);
														}
													}
												} else if ((gstrcdn.getCtin().trim()).equals((gstr2.getCdn().get(0).getCtin().trim()))
														&& dateBeforeString.equals(dateAfterString)) {
													Double alldDiff = 0d;
													if (allowedDiff == 0d) {
														alldDiff = 1d;
													} else {
														alldDiff = allowedDiff;
													}
													if(isNotEmpty(gstr2.getCdn().get(0).getCfs())) {
														gstrcdn.setCfs(gstr2.getCdn().get(0).getCfs());
													}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
														&& ((((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) <= alldDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
														|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
														&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
														&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
														&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
														|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
														&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
														if(ignoreInvoiceMatch) {
														List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstrInvoiceDetails.getNtNum().trim()));
														List<Character> purinvd = convertStringToCharList(removeLeadingZeros(gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim()));
															if (purinvd.containsAll(gstrinvd)|| gstrinvd.containsAll(purinvd)) {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRPList.size() < 1) {
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		pmatchingid.add(gstr2.getId().toString());
																		savePRPList.add((GSTR2) gstr2);
																		savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																	}
																}
															}else {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRGINVNOList.size() < 1) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																		savePRGINVNOList.add((GSTR2) gstr2);
																	}
																}
																
															}
															savePGSTR2List.add((GSTR2) gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}else if(gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
															if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
															}else {
																if(isNotEmpty(savePRPList) && savePRPList.size() < 1) {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	pmatchingid.add(gstr2.getId().toString());
																	savePRPList.add((GSTR2) gstr2);
																	savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																}
															}
															savePGSTR2List.add((GSTR2) gstr2);
															savePPRList.add(purchaseRegister);
														}else {
															if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
															}else {
																if(savePRGINVNOList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																	savePRGINVNOList.add((GSTR2) gstr2);
																}
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													}
												} else if ((gstrInvoiceDetails.getNtNum().trim().toLowerCase()).equals((gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim().toLowerCase()))
														&& dateBeforeString.equals(dateAfterString)) {
													if(isNotEmpty(gstrcdn.getCfs())) {
														purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
													}
													Double alldDiff = 0d;
													if (allowedDiff == 0d) {
														alldDiff = 1d;
													} else {
														alldDiff = allowedDiff;
													}
													if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
														&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
														|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
														&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
														|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))
														&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
														&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
														&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
														|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
														&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
															
														if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
														}else {
															if(savePRGINVNOList.size() < 1) {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																savePRGGSTNOList.add((GSTR2) gstr2);
															}
														}
														savePPRList.add((PurchaseRegister) purchaseRegister);
														savePGSTR2List.add(gstr2);
														}
													}
											}
										}
									}
								}
							}
						}else if (invType.equals(MasterGSTConstants.IMP_GOODS) && isNotEmpty(purchaseRegister.getInvtype()) && purchaseRegister.getInvtype().equals(invType)) {
								if (isNotEmpty(purchaseRegister.getImpGoods())) {
									for (GSTRImportDetails gstrimpg : purchaseRegister.getImpGoods()) {
											if (isNotEmpty(gstrimpg.getBoeNum()) && isNotEmpty(gstrimpg.getBoeDt())) {
												if (isNotEmpty(gstr2.getImpGoods()) && isNotEmpty(gstr2.getImpGoods().get(0).getBoeNum())) {
													SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
													String dateBeforeString = myFormat.format(gstrimpg.getBoeDt());
													String dateAfterString = myFormat.format(gstr2.getImpGoods().get(0).getBoeDt());
													float daysBetween = 0f;
													double daysBetweenInvoiceDate = 0d;
													try {
												       Date dateBefore = myFormat.parse(dateBeforeString);
												       Date dateAfter = myFormat.parse(dateAfterString);
												       long difference = dateAfter.getTime() - dateBefore.getTime();
												       daysBetween = (difference / (1000*60*60*24));
												       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
													} catch (Exception e) {
														e.printStackTrace();
													}
													String purchaseregisterInvoiceNo = (gstr2.getImpGoods().get(0).getBoeNum().toString()).trim();
													String gstr2InvoiceNo = (gstrimpg.getBoeNum().toString()).trim();
													if(ignoreHyphen) {
														if(purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
														}
														 if(gstr2InvoiceNo.contains("-")) {
															 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
														 }
													}
												 if(ignoreSlash) {
													 if(purchaseregisterInvoiceNo.contains("/")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
													 }
												 }
												 if(ignoreZeroOrO) {
												if (purchaseregisterInvoiceNo.contains("o") || purchaseregisterInvoiceNo.contains("O")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
													 }
													 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
													 }
												 }
												 if(ignoreCapitalI) {
													 if(purchaseregisterInvoiceNo.contains("I")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
													 }
													 if(gstr2InvoiceNo.contains("I")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
													 }
												 }
												 if(ignorel) {
													 if(purchaseregisterInvoiceNo.contains("l")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
													 }
													 if(gstr2InvoiceNo.contains("l")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
													 }
												 }
												gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
												 if(isEmpty(gstrimpg.getStin())) {
													 gstrimpg.setStin(" ");
												 }
												 if(isEmpty(gstr2) || isEmpty(gstr2.getImpGoods()) || isEmpty(gstr2.getImpGoods().get(0)) || isEmpty(gstr2.getImpGoods().get(0).getStin())) {
													 gstr2.getImpGoods().get(0).setStin(" ");
												 }
												
												
												if ((gstrimpg.getStin().trim()).equals((gstr2.getImpGoods().get(0).getStin().trim()))
													&& ((gstrimpg.getBoeNum().toString()).trim()).equals(((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim()))
													&& daysBetweenInvoiceDate <= allowedDays
													&& gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
															if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
																|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
																&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
																if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
																	if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																	}
																}else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePGSTR2List.add((GSTR2) gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															
															savePPRList.add(purchaseRegister);
															pmatchingid.add(gstr2.getId().toString());
															savePPRRList.add((GSTR2) gstr2);
															mstatus = true;
														} else {
															if(gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
																if(savePRGTAXList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	savePRGTAXList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													} else if (((gstrimpg.getBoeNum().toString()).trim()).equals((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim())
														&& (gstrimpg.getStin().trim()).equals((gstr2.getImpGoods().get(0).getStin()).trim())){
													if (daysBetweenInvoiceDate <= allowedDays) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
															&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
															&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
															|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
															&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
															&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
															&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
															&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))) {
															if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
																|| ((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax())
																&& (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) == 0) 
																|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))
																&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																		&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																		&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																		|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
																	if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																	}
																} else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																}
															} else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePGSTR2List.add((GSTR2) gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															
															savePPRList.add(purchaseRegister);
															pmatchingid.add(gstr2.getId().toString());
															savePPRRList.add((GSTR2) gstr2);
															mstatus = true;
														} else {
															if(gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
																if(savePRGTAXList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_TAX_MISMATCHED);
																	savePRGTAXList.add((GSTR2) gstr2);
																}
															}else if(!gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
																if(savePRGINVVALUEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	savePRGINVVALUEList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															savePGSTR2List.add(gstr2);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													}else {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
																&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
																&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
																|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
																&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
																&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))
																&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																		&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																		&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																		|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
																
															if(gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
																if(savePRGINVDATEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
																	savePRGINVDATEList.add((GSTR2) gstr2);
																}
															}else if(!gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
																if(savePRGINVVALUEList.size() < 1) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
																	savePRGINVVALUEList.add((GSTR2) gstr2);
																}
															}else {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRGList.add((PurchaseRegister) purchaseRegister);
															}
															
															savePGSTR2List.add((GSTR2) gstr2);
															savePPRList.add(purchaseRegister);
														}
													}
											} else if ((gstrimpg.getStin().trim()).equals((gstr2.getImpGoods().get(0).getStin().trim()))
														&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
												Double alldDiff = 0d;
												if (allowedDiff == 0d) {
													alldDiff = 1d;
												} else {
													alldDiff = allowedDiff;
												}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))
														&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
															if(ignoreInvoiceMatch) {
																List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros((gstrimpg.getBoeNum().toString()).trim()));
																List<Character> purinvd = convertStringToCharList(removeLeadingZeros((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim()));
																if (purinvd.containsAll(gstrinvd)|| gstrinvd.containsAll(purinvd)) {
																	if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo) || purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {
																			if(savePRPList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				pmatchingid.add(gstr2.getId().toString());
																				savePRPList.add((GSTR2) gstr2);
																				savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																			}
																		}
																	}else {

																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {
																			if(savePRGINVNOList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																				savePRGINVNOList.add((GSTR2) gstr2);
																			}
																		}
																	}
																}else {
																	
																	if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {	
																			if(savePRPList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				pmatchingid.add(gstr2.getId().toString());
																				savePRPList.add((GSTR2) gstr2);
																				savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																			}
																		}
																	}else{
																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {
																			if(savePRGINVNOList.size() < 1) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
																				savePRGINVNOList.add((GSTR2)gstr2);
																			}
																		}
																	}
																}
																savePPRList.add((PurchaseRegister) purchaseRegister);
															}else if(gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	if(savePRPList.size() < 1) {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	pmatchingid.add(gstr2.getId().toString());
																	savePRPList.add((GSTR2) gstr2);
																	savePPRProbableList.add((PurchaseRegister) purchaseRegister);
																	}
																}
																savePGSTR2List.add((GSTR2) gstr2);
																savePPRList.add(purchaseRegister);
															}else {
																if (isEmpty(gstr2.getMatchingStatus()) || gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	savePGSTR2List.add(gstr2);
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	savePPRList.add((PurchaseRegister) purchaseRegister);
																}
															}
													}
												} else if (((gstrimpg.getBoeNum().toString()).trim()).equals((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim())&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
													Double alldDiff = 0d;
													if (allowedDiff == 0d) {
														alldDiff = 1d;
													} else {
														alldDiff = allowedDiff;
													}
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))
														&& (isNotEmpty(gstr2.getTotalamount())	&& isNotEmpty(purchaseRegister.getTotalamount())
																&& ((((gstr2.getTotalamount() - purchaseRegister.getTotalamount()) <= allowedDiff)
																&& (gstr2.getTotalamount()	- purchaseRegister.getTotalamount()) >= 0)
																|| (((purchaseRegister.getTotalamount()- gstr2.getTotalamount()) <= allowedDiff)
																&& (purchaseRegister.getTotalamount() - gstr2.getTotalamount()) >= 0)))) {
														
														if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
														}else {
															if(savePRGINVNOList.size() < 1) {
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
																savePRGGSTNOList.add((GSTR2) gstr2);
															}
															savePPRList.add((PurchaseRegister) purchaseRegister);
															savePGSTR2List.add(gstr2);
														}
														}
													}
												}
											}
										}
									}
								}
							}else{
								logger.info(CLASSNAME + " reconcileRemainingRecords for loop break");
								break;
							}
						
						}
					if(isNotEmpty(savePPRRList) && savePPRRList.size() > 0) {
						gstr2aInvoic.removeAll(savePPRRList);
					}
					if(isNotEmpty(savePPRGList) && savePPRGList.size() > 1) {
						savePPRGList.remove(0);
						removematchingid(savePPRGList);
					}
				}
			}
			saveBulkPR(savePPRList);
			saveBulkGSTR2(savePGSTR2List);
			removegstr2id(pmatchingid,clientId);
			if(isNotEmpty(savePPRProbableList) && savePPRProbableList.size() > 0) {
				for(PurchaseRegister pr : savePPRProbableList) {
					if(isNotEmpty(pr.getMatchingId()) && isNotEmpty(pr.getMatchingStatus()) && MasterGSTConstants.GST_STATUS_PROBABLEMATCHED.equalsIgnoreCase(pr.getMatchingStatus())) {
						GSTR2 gstr2 = gstr2Repository.findOne(pr.getMatchingId());
						if(isNotEmpty(gstr2)) {
							if(isNotEmpty(gstr2.getMatchingStatus()) && MasterGSTConstants.GST_STATUS_MISMATCHED.equalsIgnoreCase(gstr2.getMatchingStatus())) {
								gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
								gstr2Repository.save(gstr2);
							}
						}
					}
				}
			}
		}


	@Override
	@Transactional
	public List<GSTReturnSummary> getGSTReturnsSummary() {
		final String method = "getGSTReturnsSummary::";
		logger.debug(CLASSNAME + method + BEGIN);
		return getGSTReturnsSummary(null);
	}

	@Override
	@Transactional
	public List<GSTReturnSummary> getGSTReturnsSummary(Date date) {
		final String method = "getGSTReturnsSummary(final Date date)::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<GSTReturnSummary> lGSTReturnsSummury = Lists.newArrayList();
		Calendar cal = Calendar.getInstance();
		if (isNotEmpty(date)) {
			cal.setTime(date);
		}
		int month = cal.get(Calendar.MONTH) + 1;
		int year = cal.get(Calendar.YEAR);
		cal.set(year, month, 1);
		date = new java.util.Date(cal.getTimeInMillis());
		String[] returntypes = { GSTR1, GSTR2, MasterGSTConstants.GSTR3, GSTR4, MasterGSTConstants.GSTR5,
				MasterGSTConstants.GSTR6, MasterGSTConstants.GSTR7, MasterGSTConstants.GSTR8, MasterGSTConstants.GSTR9,
				MasterGSTConstants.GSTR10, GSTR3B };
		for (String returntype : returntypes) {
			lGSTReturnsSummury.add(getGSTReturnSummury(returntype, new SimpleDateFormat("MMM").format(date), year));
		}
		logger.debug(CLASSNAME + method + END);
		return lGSTReturnsSummury;
	}

	@Override
	@Transactional
	public List<GSTReturnSummary> getGSTReturnsSummary(List<String> returntypes, Date date) {
		final String method = "getGSTReturnsSummary::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<GSTReturnSummary> lGSTReturnsSummury = Lists.newArrayList();
		Calendar cal = Calendar.getInstance();
		if (isNotEmpty(date)) {
			cal.setTime(date);
		}
		int month = cal.get(Calendar.MONTH) + 1;
		int year = cal.get(Calendar.YEAR);
		cal.set(year, month, 1);
		date = new java.util.Date(cal.getTimeInMillis());
		for (String returntype : returntypes) {
			lGSTReturnsSummury.add(getGSTReturnSummury(returntype, new SimpleDateFormat("MMM").format(date), year));
		}
		if (lGSTReturnsSummury.size() < 3) {
			for (GSTReturnSummary returnSummary : lGSTReturnsSummury) {
				returnSummary.setActive("true");
			}
		}
		logger.debug(CLASSNAME + method + END);
		return lGSTReturnsSummury;
	}
	
	private void updateGSTR3BData(GSTR3BDetails gstr3bDetails, boolean isITC) {
		if(isEmpty(gstr3bDetails.getIamt())) {
			gstr3bDetails.setIamt(0d);
		}
		if(isEmpty(gstr3bDetails.getCamt())) {
			gstr3bDetails.setCamt(0d);
		}
		if(isEmpty(gstr3bDetails.getSamt())) {
			gstr3bDetails.setSamt(0d);
		}
		if(isEmpty(gstr3bDetails.getCsamt())) {
			gstr3bDetails.setCsamt(0d);
		}
		if(!isITC && isEmpty(gstr3bDetails.getTxval())) {
			gstr3bDetails.setTxval(0d);
		}
	}

	@Override
	@Transactional
	public Response fetchUploadStatus(final String userid, final String usertype, String clientid, String returntype,
			int month, int year, List<String> invoiceList,String hsnSum) {
		final String method = "fetchUploadStatus::";
		logger.debug(CLASSNAME + method + BEGIN);

		if (year <= 0) {
			Calendar cal = Calendar.getInstance();
			year = cal.get(Calendar.YEAR);
			month = cal.get(Calendar.MONTH);
		}
		Client client = findById(clientid);
		String gstn = client.getGstnnumber();
		String clientPos = getStateCode(client.getStatename());
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		Base gstInvoice = null;
		List<? extends InvoiceParent> invoices = Lists.newArrayList();
		if (returntype.equals(GSTR3B)) {
			gstInvoice = getSuppliesInvoice(clientid, retPeriod);
			if (isNotEmpty(gstInvoice) && isEmpty(((GSTR3B) gstInvoice).getGstin())) {
				((GSTR3B) gstInvoice).setGstin(client.getGstnnumber());
			} else if (isNotEmpty(gstInvoice)) {
				GSTR3B gstr3b = (GSTR3B) gstInvoice;
				if(isNotEmpty(gstr3b.getInterSup())) {
					if(isNotEmpty(gstr3b.getInterSup().getCompDetails())) {
						for(GSTR3BDetails gstr3bDetails : gstr3b.getInterSup().getCompDetails()) {
							if(isNotEmpty(gstr3bDetails.getPos())) {
								String pos = getStateCode(gstr3bDetails.getPos());
								if(isNotEmpty(pos)) {
									gstr3bDetails.setPos(pos);
									updateGSTR3BData(gstr3bDetails, false);
								}
							}
						}
					}
					if(isEmpty(gstr3b.getInterSup().getCompDetails())) {
						List<GSTR3BDetails> list=Lists.newArrayList();
						GSTR3BDetails gstr3bDetails = new GSTR3BDetails();
						gstr3bDetails.setPos(clientPos);
						updateGSTR3BData(gstr3bDetails, false);
						list.add(gstr3bDetails);
						gstr3b.getInterSup().setCompDetails(list);
					}
					if(isNotEmpty(gstr3b.getInterSup().getUinDetails())) {
						for(GSTR3BDetails gstr3bDetails : gstr3b.getInterSup().getUinDetails()) {
							if(isNotEmpty(gstr3bDetails.getPos())) {
								String pos = getStateCode(gstr3bDetails.getPos());
								if(isNotEmpty(pos)) {
									gstr3bDetails.setPos(pos);
									updateGSTR3BData(gstr3bDetails, false);
								}
							}
						}
					}
					if(isEmpty(gstr3b.getInterSup().getUinDetails())) {
						List<GSTR3BDetails> list=Lists.newArrayList();
						GSTR3BDetails gstr3bDetails = new GSTR3BDetails();
						gstr3bDetails.setPos(clientPos);
						updateGSTR3BData(gstr3bDetails, false);
						list.add(gstr3bDetails);
						gstr3b.getInterSup().setUinDetails(list);
					}
					if(isNotEmpty(gstr3b.getInterSup().getUnregDetails())) {
						for(GSTR3BDetails gstr3bDetails : gstr3b.getInterSup().getUnregDetails()) {
							if(isNotEmpty(gstr3bDetails.getPos())) {
								String pos = getStateCode(gstr3bDetails.getPos());
								if(isNotEmpty(pos)) {
									gstr3bDetails.setPos(pos);
									updateGSTR3BData(gstr3bDetails, false);
								}
							}
						}
					}
					if(isEmpty(gstr3b.getInterSup().getUnregDetails())) {
						List<GSTR3BDetails> list=Lists.newArrayList();
						GSTR3BDetails gstr3bDetails = new GSTR3BDetails();
						gstr3bDetails.setPos(clientPos);
						updateGSTR3BData(gstr3bDetails, false);
						list.add(gstr3bDetails);
						gstr3b.getInterSup().setUnregDetails(list);
					}
				}
				if(isNotEmpty(gstr3b.getIntrLtfee())) {
					if(isNotEmpty(gstr3b.getIntrLtfee().getIntrDetails())) {
						if(isEmpty(gstr3b.getIntrLtfee().getIntrDetails().getIamt())
								&& isEmpty(gstr3b.getIntrLtfee().getIntrDetails().getCamt())) {
							GSTR3BDetails details = new GSTR3BDetails();
							details.setIamt(0d);
							details.setCamt(0d);
							details.setSamt(0d);
							details.setCsamt(0d);
							gstr3b.getIntrLtfee().setIntrDetails(details);
						}
					}
				} else {
					GSTR3BDetails details = new GSTR3BDetails();
					details.setIamt(0d);
					details.setCamt(0d);
					details.setSamt(0d);
					details.setCsamt(0d);
					gstr3b.setIntrLtfee(new GSTR3BInterestDetails());
					gstr3b.getIntrLtfee().setIntrDetails(details);
				}
				if(isNotEmpty(gstr3b.getInwardSup())) {
					if(isNotEmpty(gstr3b.getInwardSup().getIsupDetails())) {
						List<GSTR3BDetails> list = Lists.newArrayList();
						for(GSTR3BDetails gstr3bDetails : gstr3b.getInwardSup().getIsupDetails()) {
							if(isNotEmpty(gstr3bDetails.getInter()) || isNotEmpty(gstr3bDetails.getIntra())) {
								list.add(gstr3bDetails);
							}
						}
						gstr3b.getInwardSup().setIsupDetails(list);
					}
				}
				if(isNotEmpty(gstr3b.getItcElg())) {
					if(isNotEmpty(gstr3b.getItcElg().getItcNet())) {
						if(isEmpty(gstr3b.getItcElg().getItcNet().getIamt()) 
								&& isEmpty(gstr3b.getItcElg().getItcNet().getCamt())) {
							gstr3b.getItcElg().setItcNet(new GSTR3BDetails());
						} else {
							updateGSTR3BData(gstr3b.getItcElg().getItcNet(), true);
						}
					}
					if(isNotEmpty(gstr3b.getItcElg().getItcAvl())) {
						List<GSTR3BDetails> list = Lists.newArrayList();
						for(GSTR3BDetails gstr3bDetails : gstr3b.getItcElg().getItcAvl()) {
							if (isNotEmpty(gstr3bDetails.getIamt()) || isNotEmpty(gstr3bDetails.getCamt())) {
								updateGSTR3BData(gstr3bDetails, true);
								list.add(gstr3bDetails);
							}
						}
						gstr3b.getItcElg().setItcAvl(list);
					}
					if(isNotEmpty(gstr3b.getItcElg().getItcInelg())) {
						List<GSTR3BDetails> list = Lists.newArrayList();
						for(GSTR3BDetails gstr3bDetails : gstr3b.getItcElg().getItcInelg()) {
							if (isNotEmpty(gstr3bDetails.getIamt()) || isNotEmpty(gstr3bDetails.getCamt())) {
								updateGSTR3BData(gstr3bDetails, true);
								list.add(gstr3bDetails);
							}
						}
						gstr3b.getItcElg().setItcInelg(list);
					}
					if(isNotEmpty(gstr3b.getItcElg().getItcRev())) {
						List<GSTR3BDetails> list = Lists.newArrayList();
						for(GSTR3BDetails gstr3bDetails : gstr3b.getItcElg().getItcRev()) {
							if (isNotEmpty(gstr3bDetails.getIamt()) || isNotEmpty(gstr3bDetails.getCamt())) {
								updateGSTR3BData(gstr3bDetails, true);
								list.add(gstr3bDetails);
							}
						}
						gstr3b.getItcElg().setItcRev(list);
					}
				}
				if(isNotEmpty(gstr3b.getSupDetails())) {
					GSTR3BDetails isupRev = null;
					if(isNotEmpty(gstr3b.getSupDetails().getIsupRev())) {
						if(isNotEmpty(gstr3b.getSupDetails().getIsupRev().getTxval())) {
							isupRev = gstr3b.getSupDetails().getIsupRev();
							updateGSTR3BData(isupRev, false);
						}
					}
					if(isEmpty(isupRev)) {
						isupRev = new GSTR3BDetails();
						isupRev.setTxval(0d);
						isupRev.setIamt(0d);
						isupRev.setCamt(0d);
						isupRev.setSamt(0d);
						isupRev.setCsamt(0d);
					}
					GSTR3BDetails osupDet = null;
					if(isNotEmpty(gstr3b.getSupDetails().getOsupDet())) {
						if(isNotEmpty(gstr3b.getSupDetails().getOsupDet().getTxval())) {
							osupDet = gstr3b.getSupDetails().getOsupDet();
							updateGSTR3BData(osupDet, false);
						}
					}
					if(isEmpty(osupDet)) {
						osupDet = new GSTR3BDetails();
						osupDet.setTxval(0d);
						osupDet.setIamt(0d);
						osupDet.setCamt(0d);
						osupDet.setSamt(0d);
						osupDet.setCsamt(0d);
					}
					GSTR3BDetails osupNilExmp = null;
					if(isNotEmpty(gstr3b.getSupDetails().getOsupNilExmp())) {
						if(isNotEmpty(gstr3b.getSupDetails().getOsupNilExmp().getTxval())) {
							osupNilExmp = gstr3b.getSupDetails().getOsupNilExmp();
							updateGSTR3BData(osupNilExmp, false);
						}
					}
					if(isEmpty(osupNilExmp)) {
						osupNilExmp = new GSTR3BDetails();
						osupNilExmp.setTxval(0d);
						osupNilExmp.setIamt(0d);
						osupNilExmp.setCamt(0d);
						osupNilExmp.setSamt(0d);
						osupNilExmp.setCsamt(0d);
					}
					GSTR3BDetails osupNongst = null;
					if(isNotEmpty(gstr3b.getSupDetails().getOsupNongst())) {
						if(isNotEmpty(gstr3b.getSupDetails().getOsupNongst().getTxval())) {
							osupNongst = gstr3b.getSupDetails().getOsupNongst();
							updateGSTR3BData(osupNongst, false);
						}
					}
					if(isEmpty(osupNongst)) {
						osupNongst = new GSTR3BDetails();
						osupNongst.setTxval(0d);
						osupNongst.setIamt(0d);
						osupNongst.setCamt(0d);
						osupNongst.setSamt(0d);
						osupNongst.setCsamt(0d);
					}
					GSTR3BDetails osupZero = null;
					if(isNotEmpty(gstr3b.getSupDetails().getOsupZero())) {
						if(isNotEmpty(gstr3b.getSupDetails().getOsupZero().getTxval())) {
							osupZero = gstr3b.getSupDetails().getOsupZero();
							updateGSTR3BData(osupZero, false);
						}
					}
					if(isEmpty(osupZero)) {
						osupZero = new GSTR3BDetails();
						osupZero.setTxval(0d);
						osupZero.setIamt(0d);
						osupZero.setCamt(0d);
						osupZero.setSamt(0d);
						osupZero.setCsamt(0d);
					}
					GSTR3BSupplyDetails gstr3bSupplyDetails = new GSTR3BSupplyDetails();
					if(isNotEmpty(isupRev)) {
						gstr3bSupplyDetails.setIsupRev(isupRev);
					}
					if(isNotEmpty(osupDet)) {
						gstr3bSupplyDetails.setOsupDet(osupDet);
					}
					if(isNotEmpty(osupNilExmp)) {
						gstr3bSupplyDetails.setOsupNilExmp(osupNilExmp);
					}
					if(isNotEmpty(osupNongst)) {
						gstr3bSupplyDetails.setOsupNongst(osupNongst);
					}
					if(isNotEmpty(osupZero)) {
						gstr3bSupplyDetails.setOsupZero(osupZero);
					}
					gstr3b.setSupDetails(gstr3bSupplyDetails);
				}
			}
		} else {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				//String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				if(month == 1 || month == 2 || month == 3) {
					strMonth = "03";
				} else if(month == 4 || month == 5 || month == 6) {
					strMonth = "06";
				} else if(month == 7 || month == 8 || month == 9) {
					strMonth = "09";
				} else if(month == 10 || month == 11 || month == 12) {
					strMonth = "12";
				}
				retPeriod = strMonth + year;
			}
			if (isEmpty(invoiceList)) {
				if(isNotEmpty(client) && isNotEmpty(client.getPrevPendingInv()) && "previousMonthsPendingInv".equalsIgnoreCase(client.getPrevPendingInv())) {
					invoices = getOldInvoices(clientid, returntype, month, year);
				}else {
				invoices = getInvoices(null, client, returntype, month, year, MasterGSTConstants.GST_STATUS_SUCCESS);
				}
			} else {
				logger.debug(CLASSNAME + method + " Selected Invoices {}", invoiceList);
				invoices = getSelectedInvoices(invoiceList, returntype);
				if(isNotEmpty(invoices)) {
					boolean addUploadedInvs = false;
					for(InvoiceParent inv : invoices) {
						if(isNotEmpty(inv.getInvtype()) && (inv.getInvtype().equals(B2C) || (inv.getInvtype().equals(MasterGSTConstants.CDNUR) && isNotEmpty(inv.getCdnur()) && isNotEmpty(inv.getCdnur().get(0)) && isNotEmpty(inv.getCdnur().get(0).getTyp()) && "B2CS".equalsIgnoreCase(inv.getCdnur().get(0).getTyp()) ))) {
							if(isNotEmpty(inv.getGstStatus()) && (inv.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS) || inv.getGstStatus().equals("In Progress"))) {
								invoices.remove(inv);
							}
							addUploadedInvs = true;
							break;
						}
					}
					if(addUploadedInvs) {
						List<? extends InvoiceParent> savedInvs = getSpecificInvoices(client, returntype, month, year, B2C, MasterGSTConstants.GST_STATUS_SUCCESS);
						List<? extends InvoiceParent> savedCdnurInvs = getSpecificInvoices(client, returntype, month, year, MasterGSTConstants.CDNUR, MasterGSTConstants.GST_STATUS_SUCCESS);
						
						if(isNotEmpty(savedInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
						if(isNotEmpty(savedCdnurInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedCdnurInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
					}
					boolean addNilUploadedInvs = false;
					for (InvoiceParent inv : invoices) {
						if (isNotEmpty(inv.getInvtype()) && (inv.getInvtype().equals(NIL) || (inv.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) && isNotEmpty(inv.getNil()) && isNotEmpty(inv.getNil().getInv()) && inv.getNil().getInv().size()>0)|| (inv.getInvtype().equals(MasterGSTConstants.CDNUR) && isNotEmpty(inv.getNil()) && isNotEmpty(inv.getNil().getInv()) && inv.getNil().getInv().size()>0))) {
							if(isNotEmpty(inv.getGstStatus()) && (inv.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS) || inv.getGstStatus().equals("In Progress"))) {
								invoices.remove(inv);
							}
							addNilUploadedInvs = true;
							break;
						}
					}
					if (addNilUploadedInvs) {
						List<? extends InvoiceParent> savedInvs = getSpecificInvoices(client, returntype, month, year, NIL, MasterGSTConstants.GST_STATUS_SUCCESS);
						List<? extends InvoiceParent> savedCdnurInvs = getSpecificInvoicesForNilSuppliesFromCDN(client, returntype, month, year, MasterGSTConstants.GST_STATUS_SUCCESS);
						if (isNotEmpty(savedInvs)) {
							if (returntype.equals(GSTR1)) {
								for (InvoiceParent savedInv : savedInvs) {
									((List<GSTR1>) invoices).add((GSTR1) savedInv);
								}
							}
						}
						if(isNotEmpty(savedCdnurInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedCdnurInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
					}
					
					boolean addAdvUploadedInvs = false;
					for (InvoiceParent inv : invoices) {
						if (isNotEmpty(inv.getInvtype()) && inv.getInvtype().equals(ADVANCES)) {
							if(isNotEmpty(inv.getGstStatus()) && (inv.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS) || inv.getGstStatus().equals("In Progress"))) {
								invoices.remove(inv);
							}
							addAdvUploadedInvs = true;
							break;
						}
					}
					if (addAdvUploadedInvs) {
						List<? extends InvoiceParent> savedAdvanceInvs = getSpecificInvoices(client, returntype, month, year, ADVANCES, MasterGSTConstants.GST_STATUS_SUCCESS);
						if(isNotEmpty(savedAdvanceInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedAdvanceInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
					}
					boolean addAdvaUploadedInvs = false;
					for (InvoiceParent inv : invoices) {
						if (isNotEmpty(inv.getInvtype()) && (inv.getInvtype().equals(ATA))) {
							if(isNotEmpty(inv.getGstStatus()) && (inv.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS) || inv.getGstStatus().equals(MasterGSTConstants.STATUS_INELIGIBLE) || inv.getGstStatus().equals("In Progress"))) {
								invoices.remove(inv);
							}
							addAdvaUploadedInvs = true;
							break;
						}
					}
					if (addAdvaUploadedInvs) {
						List<? extends InvoiceParent> savedAdvanceAmdInvs = getSpecificInvoices(client, returntype, month, year, ATA, MasterGSTConstants.GST_STATUS_SUCCESS);
						if(isNotEmpty(savedAdvanceAmdInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedAdvanceAmdInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
					}
					boolean addAdvAdjUploadedInvs = false;
					for (InvoiceParent inv : invoices) {
						if (isNotEmpty(inv.getInvtype()) && inv.getInvtype().equals(ATPAID)) {
							if(isNotEmpty(inv.getGstStatus()) && (inv.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS) || inv.getGstStatus().equals("In Progress"))) {
								invoices.remove(inv);
							}
							addAdvAdjUploadedInvs = true;
							break;
						}
					}
					if (addAdvAdjUploadedInvs) {
						List<? extends InvoiceParent> savedAdvanceInvs = getSpecificInvoices(client, returntype, month, year, ATPAID, MasterGSTConstants.GST_STATUS_SUCCESS);
						if(isNotEmpty(savedAdvanceInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedAdvanceInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
					}
					boolean addAdvAdjaUploadedInvs = false;
					for (InvoiceParent inv : invoices) {
						if (isNotEmpty(inv.getInvtype()) && inv.getInvtype().equals(TXPA)) {
							if(isNotEmpty(inv.getGstStatus()) && (inv.getGstStatus().equals(MasterGSTConstants.GST_STATUS_SUCCESS) || inv.getGstStatus().equals("In Progress"))) {
								invoices.remove(inv);
							}
							addAdvAdjaUploadedInvs = true;
							break;
						}
					}
					if (addAdvAdjaUploadedInvs) {
						List<? extends InvoiceParent> savedAdvanceInvs = getSpecificInvoices(client, returntype, month, year, TXPA, MasterGSTConstants.GST_STATUS_SUCCESS);
						if(isNotEmpty(savedAdvanceInvs)) {
							if(returntype.equals(GSTR1)) {
								for(InvoiceParent savedInv : savedAdvanceInvs) {
									((List<GSTR1>)invoices).add((GSTR1)savedInv);
								}
							}
						}
					}
				}
				logger.debug(CLASSNAME + method + " invoices {}", invoices);
			}
			if (isNotEmpty(invoices)) {
				gstInvoice = getGSTRReturnInvoice(invoices, client, returntype, month, year,hsnSum);
				logger.debug(CLASSNAME + method + " gstInvoice {}", gstInvoice);
				if (returntype.equals(ANX1)) {
					Anx1 anx1 = ((Anx1) gstInvoice);
					if (isNotEmpty(anx1.getAnxb2b())) {
						retPeriod = B2B;
					} else if (isNotEmpty(anx1.getB2c())) {
						retPeriod = B2C;
					}
				} else {
				retPeriod = ((InvoiceParent) gstInvoice).getFp();
				}
			} else if (returntype.equals(MasterGSTConstants.GSTR8)) {
				//String fp = month < 10 ? "0" + month + year : month + "" + year;
				gstInvoice = gstr8Repository.findByClientidAndFp(clientid, retPeriod);
				((GSTR8)gstInvoice).setGstin(client.getGstnnumber());
			} else if (returntype.equals(MasterGSTConstants.GSTR9)) {
				gstInvoice = getAnnualInvoice(clientid, "03" + year);
				((GSTR9)gstInvoice).setGstin(client.getGstnnumber());
			}
		}
		if (isNotEmpty(gstInvoice)) {
			try {
				Response saveResponse = iHubConsumerService.saveReturns(gstInvoice, client.getStatename(),client.getGstname(), gstn, retPeriod, returntype, true);
				if (isNotEmpty(saveResponse.getStatuscd())	&& saveResponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					String refId = saveResponse.getData().getReferenceId();
					Response gstnResponse = iHubConsumerService.returnStatus(refId, client.getStatename(),	client.getGstname(), gstn, retPeriod, true);
					int i = 0;
					while ((i < 5) && (isNotEmpty(gstnResponse) && isNotEmpty(gstnResponse.getData())
							&& isNotEmpty(gstnResponse.getData().getStatusCd())
							&& gstnResponse.getData().getStatusCd().equals(MasterGSTConstants.GST_RETURN_CODE_IP))) {
						gstnResponse = iHubConsumerService.returnStatus(refId, client.getStatename(),
								client.getGstname(), gstn, retPeriod, false);
						i++;
					}
					List<String> invList = Lists.newArrayList();
					for (InvoiceParent invItem : invoices) {
						invList.add(invItem.getId().toString());
					}
					invoices = getSelectedInvoices(invList, returntype);
					if (isNotEmpty(gstnResponse) && isNotEmpty(gstnResponse.getData())
							&& isNotEmpty(gstnResponse.getData().getStatusCd())
							&& gstnResponse.getData().getStatusCd().equals(MasterGSTConstants.GST_RETURN_CODE_PE)
							&& isNotEmpty(gstnResponse.getData().getErrorReport())) {
						if (returntype.equals(GSTR3B)) {
							if (isNotEmpty(gstnResponse.getData().getErrorReport().getErrorMsg())) {
								((GSTR3B) gstInvoice).setGstStatus(gstnResponse.getData().getErrorReport().getErrorMsg());
							} else {
								((GSTR3B) gstInvoice).setGstStatus(MasterGSTConstants.GST_RETURN_CODE_PE);
							}
							saveSuppliesInvoice((GSTR3B) gstInvoice, returntype);
						} else {
							if("hsn".equalsIgnoreCase(hsnSum)) {
								InvoiceParentSupport retInvoice = gstnResponse.getData().getErrorReport();
								saveGSTErrors(invoices, retInvoice, returntype);
							}
						}
					} else if (isNotEmpty(gstnResponse) && isNotEmpty(gstnResponse.getData())
							&& isNotEmpty(gstnResponse.getData().getStatusCd())
							&& gstnResponse.getData().getStatusCd().equals(MasterGSTConstants.GST_RETURN_CODE_P)) {
						if (returntype.equals(GSTR3B)) {
							((GSTR3B) gstInvoice).setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
							((GSTR3B) gstInvoice).setGstRefId(refId);
							// Call Get GSTR3B Details to know tax payable, liability id, late fee, which
							// will be now auto populates in tax payable section
							Response responseDetails = iHubConsumerService.returnSummary(client, client.getGstnnumber(),
									retPeriod, userid, GSTR3B, false);
							if(isEmpty(responseDetails.getError()) && isNotEmpty(responseDetails.getData())) {
								if(isNotEmpty(responseDetails.getData().getIntrLtfee())
										&& isNotEmpty(responseDetails.getData().getIntrLtfee().getLatefeeDetails())) {
									((GSTR3B) gstInvoice).getIntrLtfee().setLatefeeDetails(
											responseDetails.getData().getIntrLtfee().getLatefeeDetails());
								}
								if(isNotEmpty(responseDetails.getData().getTaxPymt())) {
									((GSTR3B) gstInvoice).setOffLiab(new GSTR3BOffsetLiability());
									if(isNotEmpty(responseDetails.getData().getTaxPymt().getPdcash())) {
										((GSTR3B) gstInvoice).getOffLiab()
												.setPdcash(responseDetails.getData().getTaxPymt().getPdcash());
									}
									if(isNotEmpty(responseDetails.getData().getTaxPymt().getPditc())) {
										((GSTR3B) gstInvoice).getOffLiab()
												.setPditc(responseDetails.getData().getTaxPymt().getPditc());
									}
									if(isNotEmpty(responseDetails.getData().getTaxPymt().getTaxPayable())) {
										((GSTR3B) gstInvoice).getOffLiab()
												.setTaxPayable(responseDetails.getData().getTaxPymt().getTaxPayable());
									}
								}
								LedgerResponse ledgerDetails = iHubConsumerService.getCashITCBalanceDetails(client,
										client.getGstnnumber(), retPeriod, userid, false);
								if (isEmpty(ledgerDetails.getError()) && isNotEmpty(ledgerDetails)
										&& isNotEmpty(ledgerDetails.getData())) {
									if(isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable())) {
										if(isNotEmpty(ledgerDetails.getData().getCashBal())) {
											if(isNotEmpty(ledgerDetails.getData().getCashBal().getIgstTotBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getIgst())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getIgst()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getIgst()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getIgst()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getIgst().getTx()
															+ ledgerDetails.getData().getCashBal().getIgstTotBal());
											}
											if(isNotEmpty(ledgerDetails.getData().getCashBal().getCgstTotBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getCgst())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCgst()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCgst()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCgst()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getCgst().getTx()
															+ ledgerDetails.getData().getCashBal().getCgstTotBal());
											}
											if(isNotEmpty(ledgerDetails.getData().getCashBal().getSgstTotBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getSgst())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getSgst()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getSgst()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getSgst()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getSgst().getTx()
															+ ledgerDetails.getData().getCashBal().getSgstTotBal());
											}
											if(isNotEmpty(ledgerDetails.getData().getCashBal().getCessTotBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getCess())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCess()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCess()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCess()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getCess().getTx()
															+ ledgerDetails.getData().getCashBal().getCessTotBal());
											}
										}
										if(isNotEmpty(ledgerDetails.getData().getItcBal())) {
											if(isNotEmpty(ledgerDetails.getData().getItcBal().getIgstBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getIgst())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getIgst()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getIgst()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getIgst()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getIgst().getTx()
															+ ledgerDetails.getData().getItcBal().getIgstBal());
											}
											if(isNotEmpty(ledgerDetails.getData().getItcBal().getCgstBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getCgst())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCgst()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCgst()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCgst()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getCgst().getTx()
															+ ledgerDetails.getData().getItcBal().getCgstBal());
											}
											if(isNotEmpty(ledgerDetails.getData().getItcBal().getSgstBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getSgst())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getSgst()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getSgst()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getSgst()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getSgst().getTx()
															+ ledgerDetails.getData().getItcBal().getSgstBal());
											}
											if(isNotEmpty(ledgerDetails.getData().getItcBal().getCessBal())
													&& isNotEmpty(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable()
															.get(0).getCess())) {
												if (((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCess()
														.getTx() == null) {
													((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCess()
															.setTx(0d);
												}
												((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0).getCess()
														.setTx(((GSTR3B) gstInvoice).getOffLiab().getTaxPayable().get(0)
																.getCess().getTx()
															+ ledgerDetails.getData().getItcBal().getCessBal());
											}
										}
									}
								}
							}
							saveSuppliesInvoice((GSTR3B) gstInvoice, returntype);
						} else {
							if("hsn".equalsIgnoreCase(hsnSum)) {
								for (InvoiceParent invoice : invoices) {
									invoice.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
									invoice.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
									invoice.setGstRefId(refId);
									invoice.setSrctype("MGSTWEB");
									invoice.setFp(retPeriod);
								}
								saveInvoices(invoices, returntype);
							}
						}
					} else if (isNotEmpty(gstnResponse)) {
						String message = "";
						if (isNotEmpty(gstnResponse.getData()) && isNotEmpty(gstnResponse.getData().getErrorReport())
								&& isNotEmpty(gstnResponse.getData().getErrorReport().getErrorMsg())) {
							message = gstnResponse.getData().getErrorReport().getErrorMsg();
						} else if (isNotEmpty(gstnResponse.getError())
								&& isNotEmpty(gstnResponse.getError().getMessage())) {
							message = gstnResponse.getError().getMessage();
						} else if (isNotEmpty(gstnResponse.getStatusdesc())) {
							message = gstnResponse.getStatusdesc();
							if (isNotEmpty(gstnResponse.getData().getStatusCd()) && gstnResponse.getData().getStatusCd()
									.equals(MasterGSTConstants.GST_RETURN_CODE_IP)) {
								message = "In Progress";
							}
							if(message.equalsIgnoreCase("GSTR request succeeds")) {
								message = "In Progress";
							}
						}
						if (returntype.equals(GSTR3B)) {
							((GSTR3B) gstInvoice).setGstStatus(message);
							saveSuppliesInvoice((GSTR3B) gstInvoice, returntype);
						} else {
							if("hsn".equalsIgnoreCase(hsnSum)) {
								for (InvoiceParent invoice : invoices) {
									invoice.setGstStatus(message);
									if(message.equalsIgnoreCase("In Progress")) {
										invoice.setGstRefId(refId);
									}
									invoice.setSrctype("MGSTWEB");
									invoice.setFp(retPeriod);
								}
								saveInvoices(invoices, returntype);
							}
						}
					}
					String usrid = userid(userid,clientid);
					SubscriptionDetails subscriptionDetails = subscriptionService.getSubscriptionData(usrid);
					if(isNotEmpty(subscriptionDetails)) {
						if(isNotEmpty(usertype) && usertype.equals(MasterGSTConstants.SUVIDHA_CENTERS) 
								&& isNotEmpty(subscriptionDetails.getUserid())
								&& !userid.equals(subscriptionDetails.getUserid())) {
							subscriptionDetails.setId(new ObjectId());
							subscriptionDetails.setUserid(userid);
						}
						if(isNotEmpty(subscriptionDetails.getProcessedInvoices())) {
							subscriptionDetails.setProcessedInvoices(subscriptionDetails.getProcessedInvoices() + invoices.size());
						} else {
							subscriptionDetails.setProcessedInvoices(invoices.size());
						}
						subscriptionService.updateSubscriptionData(subscriptionDetails);
					}
					return gstnResponse;
				}
				return saveResponse;
			} catch(Exception e) {
				Response response = new Response();
				response.setStatuscd("0");
				response.setStatusdesc(e.getMessage());
				return response;
			}
		}
		Response emptyResponse = new Response();
		emptyResponse.setStatuscd("1");
		ResponseData responseData = new ResponseData();
		responseData.setStatusCd(MasterGSTConstants.GST_RETURN_CODE_P);
		emptyResponse.setData(responseData);
		return emptyResponse;
	}
	@Override
	public void consolidatedItemRate(GSTRInvoiceDetails invoiceDetails) {
		if(isNotEmpty(invoiceDetails) && isNotEmpty(invoiceDetails.getItms())) {
			Map<Double, GSTRItems> itemMap=Maps.newHashMap();
			for(GSTRItems item : invoiceDetails.getItms()) {
				if(isNotEmpty(item.getItem()) && isNotEmpty(item.getItem().getRt())) {
					if(itemMap.keySet().contains(item.getItem().getRt())) {
						if(isNotEmpty(item.getItem().getTxval())) {
							if(isNotEmpty(itemMap.get(item.getItem().getRt()).getItem().getTxval())) {
								itemMap.get(item.getItem().getRt()).getItem().setTxval(item.getItem().getTxval()
										+ itemMap.get(item.getItem().getRt()).getItem().getTxval());
							} else {
								itemMap.get(item.getItem().getRt()).getItem().setTxval(item.getItem().getTxval());
							}
						}
						if(isNotEmpty(item.getItem().getIamt())) {
							if(isNotEmpty(itemMap.get(item.getItem().getRt()).getItem().getIamt())) {
								itemMap.get(item.getItem().getRt()).getItem().setIamt(item.getItem().getIamt()
										+ itemMap.get(item.getItem().getRt()).getItem().getIamt());
							} else {
								itemMap.get(item.getItem().getRt()).getItem().setIamt(item.getItem().getIamt());
							}
						}
						if(isNotEmpty(item.getItem().getCamt())) {
							if(isNotEmpty(itemMap.get(item.getItem().getRt()).getItem().getCamt())) {
								itemMap.get(item.getItem().getRt()).getItem().setCamt(item.getItem().getCamt()
										+ itemMap.get(item.getItem().getRt()).getItem().getCamt());
							} else {
								itemMap.get(item.getItem().getRt()).getItem().setCamt(item.getItem().getCamt());
							}
						}
						if(isNotEmpty(item.getItem().getSamt())) {
							if(isNotEmpty(itemMap.get(item.getItem().getRt()).getItem().getSamt())) {
								itemMap.get(item.getItem().getRt()).getItem().setSamt(item.getItem().getSamt()
										+ itemMap.get(item.getItem().getRt()).getItem().getSamt());
							} else {
								itemMap.get(item.getItem().getRt()).getItem().setSamt(item.getItem().getSamt());
							}
						}
						if(isNotEmpty(item.getItem().getCsamt())) {
							if(isNotEmpty(itemMap.get(item.getItem().getRt()).getItem().getCsamt())) {
								itemMap.get(item.getItem().getRt()).getItem().setCsamt(item.getItem().getCsamt()
										+ itemMap.get(item.getItem().getRt()).getItem().getCsamt());
							} else {
								itemMap.get(item.getItem().getRt()).getItem().setCsamt(item.getItem().getCsamt());
							}
						}
					} else {
						itemMap.put(item.getItem().getRt(), item);
					}
				}
			}
			List<GSTRItems> gstrItems = Lists.newArrayList();
			int index = 1;
			for(GSTRItems item : itemMap.values()) {
				item.setNum(index++);
				gstrItems.add(item);
			}
			invoiceDetails.setItms(gstrItems);
		}
	}
	
	private void consolidatedExpItemRate(GSTRExportDetails invoiceDetails) {
		if(isNotEmpty(invoiceDetails) && isNotEmpty(invoiceDetails.getItms())) {
			Map<Double, GSTRItemDetails> itemMap=Maps.newHashMap();
			for(GSTRItemDetails item : invoiceDetails.getItms()) {
				if(isNotEmpty(item) && isNotEmpty(item.getRt())) {
					if(itemMap.keySet().contains(item.getRt())) {
						if(isNotEmpty(item.getTxval())) {
							if(isNotEmpty(itemMap.get(item.getRt()).getTxval())) {
								itemMap.get(item.getRt()).setTxval(item.getTxval()
										+ itemMap.get(item.getRt()).getTxval());
							} else {
								itemMap.get(item.getRt()).setTxval(item.getTxval());
							}
						}
						if(isNotEmpty(item.getIamt())) {
							if(isNotEmpty(itemMap.get(item.getRt()).getIamt())) {
								itemMap.get(item.getRt()).setIamt(item.getIamt()
										+ itemMap.get(item.getRt()).getIamt());
							} else {
								itemMap.get(item.getRt()).setIamt(item.getIamt());
							}
						}
						if(isNotEmpty(item.getCamt())) {
							if(isNotEmpty(itemMap.get(item.getRt()).getCamt())) {
								itemMap.get(item.getRt()).setCamt(item.getCamt()
										+ itemMap.get(item.getRt()).getCamt());
							} else {
								itemMap.get(item.getRt()).setCamt(item.getCamt());
							}
						}
						if(isNotEmpty(item.getSamt())) {
							if(isNotEmpty(itemMap.get(item.getRt()).getSamt())) {
								itemMap.get(item.getRt()).setSamt(item.getSamt()
										+ itemMap.get(item.getRt()).getSamt());
							} else {
								itemMap.get(item.getRt()).setSamt(item.getSamt());
							}
						}
						if(isNotEmpty(item.getCsamt())) {
							if(isNotEmpty(itemMap.get(item.getRt()).getCsamt())) {
								itemMap.get(item.getRt()).setCsamt(item.getCsamt()
										+ itemMap.get(item.getRt()).getCsamt());
							} else {
								itemMap.get(item.getRt()).setCsamt(item.getCsamt());
							}
						}
					} else {
						itemMap.put(item.getRt(), item);
					}
				}
			}
			List<GSTRItemDetails> gstrItems = Lists.newArrayList();
			for(GSTRItemDetails item : itemMap.values()) {
				gstrItems.add(item);
			}
			invoiceDetails.setItms(gstrItems);
		}
	}
	
	@Override
	@Transactional
	public GSTR1DocumentIssue getDocumentIssue(final String documentId) {
		final String method = "getDocumentIssue::";
		logger.debug(CLASSNAME + method + BEGIN);
		return gstr1DocumentIssueRepository.findOne(documentId);
	}
	
	@Override
	@Transactional(readOnly = true)
	public GSTR1DocumentIssue getDocumentIssue(final String clientid, final String returnPeriod) {
		final String method = "getDocumentIssue::";
		logger.debug(CLASSNAME + method + BEGIN);
		return gstr1DocumentIssueRepository.findByClientidAndReturnPeriod(clientid, returnPeriod);
	}
	
	@Override
	@Transactional
	public GSTR1DocumentIssue saveDocumentIssue(final GSTR1DocumentIssue docIssue) {
		final String method = "saveDocumentIssue::";
		logger.debug(CLASSNAME + method + BEGIN);
		return gstr1DocumentIssueRepository.save(docIssue);
	}
	
	public InvoiceParent getGSTRDeleteReturnInvoice(InvoiceParent invoiceParent, final Client client,
			final String returntype) {
		final String method = "getGSTRDeleteReturnInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + " invoiceParent {}", invoiceParent);
		SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String gstn = client.getGstnnumber();
		String retPeriod = invoiceParent.getFp();
		int imonth = Integer.parseInt(retPeriod.substring(0, 1));
		int iyear = Integer.parseInt(retPeriod.substring(2)) - 1;
		String strYear = "";
		if (imonth < 4) {
			if (iyear == 2016 || iyear == 2017) {
				if (imonth < 4) {
					strYear = "APR2017-JUN2017";
				} else {
					strYear = "2017-2018";
				}
			} else {
				iyear = iyear - 1;
				strYear = iyear + "-" + (iyear + 1);
			}
		} else {
			strYear = iyear + "-" + (iyear + 1);
		}
		Double turnOver = 0d;
		Double curtgt = 0d;
		if(isNotEmpty(client) && isNotEmpty(client.getTurnovergoptions())) {
			//String strYear = tYear+"";
			for(TurnoverOptions turnoverOptions : client.getTurnovergoptions()) {
				if(isNotEmpty(turnoverOptions)) {
					if(strYear.equals(turnoverOptions.getYear()) ) {
						turnOver = turnoverOptions.getTurnover();
					}
					if("APR2017-JUN2017".equals(turnoverOptions.getYear())) {
						curtgt = turnoverOptions.getTurnover();
					}
				}
			}
		}
		InvoiceParent invoice = new InvoiceParent();
		if (returntype.equals(GSTR1)) {
			invoice = new GSTR1();
		} else if (returntype.equals(GSTR1A)) {
			invoice = new GSTR1A();
		} else if (returntype.equals(GSTR2)) {
			invoice = new GSTR2();
		} else if (returntype.equals(PURCHASE_REGISTER)) {
			invoice = new PurchaseRegister();
		} else if (returntype.equals(GSTR4)) {
			invoice = new GSTR4();
		} else if (returntype.equals(GSTR6)) {
			invoice = new GSTR6();
		} else if (returntype.equals(ANX1)) {
			invoice = new Anx1();
		}
		invoice.setFp(retPeriod);
		invoice.setGt(turnOver);
		invoice.setCurGt(curtgt);
		invoice.setGstin(gstn);
		if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(MasterGSTConstants.B2B)) {
			for (GSTRB2B gstrb2bInvoice : invoiceParent.getB2b()) {
				for(GSTRInvoiceDetails inv : gstrb2bInvoice.getInv()) {
					inv.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
					if(isNotEmpty(inv.getChksum())) {
						inv.setChksum(null);
					}
					if(isNotEmpty(inv.getUpdby())) {
						inv.setUpdby(null);
					}
					if(isNotEmpty(inv.getCflag())) {
						inv.setCflag(null);
					}
				}
			}
			invoice.setB2b(invoiceParent.getB2b());
		} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(MasterGSTConstants.B2CL)) {
			for (GSTRB2CL gstrb2clInvoice : invoiceParent.getB2cl()) {
				for(GSTRInvoiceDetails inv : gstrb2clInvoice.getInv()) {
					inv.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
					if(isNotEmpty(inv.getChksum())) {
						inv.setChksum(null);
					}
					if(isNotEmpty(inv.getUpdby())) {
						inv.setUpdby(null);
					}
					if(isNotEmpty(inv.getCflag())) {
						inv.setCflag(null);
					}
				}
			}
			invoice.setB2cl(invoiceParent.getB2cl());
		} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(MasterGSTConstants.B2C)) {
			if (isNotEmpty(invoiceParent.getB2cs())) {
				for(GSTRB2CS gstrb2cs : invoiceParent.getB2cs()) {
					gstrb2cs.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
				}
			}
			invoice.setB2cs(invoiceParent.getB2cs());
		} else if (isNotEmpty(invoiceParent.getInvtype())
				&& invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)) {
			if(isNotEmpty(invoiceParent.getB2b())) {
				invoiceParent.setB2b(Lists.newArrayList());
			}
			for (GSTRExports exp : invoiceParent.getExp()) {
				for(GSTRExportDetails invoiceDetails : exp.getInv()) {
					if(isNotEmpty(invoiceDetails.getIdt())) {
						String ntdt = simpleDateFormat.format(invoiceDetails.getIdt());
						ntdt = ntdt+"T18:30:000Z";
						try {
							invoiceDetails.setIdt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(isNotEmpty(invoiceDetails.getSbdt())) {
						String sbdt = simpleDateFormat.format(invoiceDetails.getSbdt());
						sbdt = sbdt+"T18:30:000Z";
						try {
							invoiceDetails.setSbdt(simpleDateFormat1.parse(sbdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					invoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
				}
			}
			invoice.setExp(invoiceParent.getExp());
		} else if (isNotEmpty(invoiceParent.getInvtype())
				&& invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)) {
			List<GSTRAdvanceTax> at = null;
			if (returntype.equals(GSTR1)) {
				at = ((GSTR1) invoiceParent).getAt();
			} else if (returntype.equals(GSTR2)) {
				at = ((GSTR2) invoiceParent).getTxi();
			} else if (returntype.equals(PURCHASE_REGISTER)) {
				at = ((PurchaseRegister) invoiceParent).getTxi();
			} else if (returntype.equals(GSTR4)) {
				at = ((GSTR4) invoiceParent).getAt();
			}
			if (isNotEmpty(at)) {
				if(isNotEmpty(invoiceParent.getB2b())) {
					invoiceParent.setB2b(Lists.newArrayList());
				}
				for(GSTRAdvanceTax gstrAdvanceTax : at) { 
					gstrAdvanceTax.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
				}
			}
			((GSTR1) invoice).setAt(at);
		} else if (isNotEmpty(invoiceParent.getInvtype())
				&& invoiceParent.getInvtype().equals(MasterGSTConstants.ATPAID)) {
			if (isNotEmpty(invoiceParent.getTxpd())) {
				if(isNotEmpty(invoiceParent.getB2b())) {
					invoiceParent.setB2b(Lists.newArrayList());
				}
				for(GSTRAdvanceTax gstrAdvanceTax : invoiceParent.getTxpd()) { 
					gstrAdvanceTax.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
				}
			}
			invoice.setTxpd(invoiceParent.getTxpd());
		} else if (isNotEmpty(invoiceParent.getInvtype())
				&& invoiceParent.getInvtype().equals(MasterGSTConstants.NIL)) {
			if (isNotEmpty(invoiceParent.getNil()) && isNotEmpty(invoiceParent.getNil().getInv())) {
				if(isNotEmpty(invoiceParent.getB2b())) {
					invoiceParent.setB2b(Lists.newArrayList());
				}
				invoiceParent.getNil().setFlag(MasterGSTConstants.GST_FLAG_DELETE);
			}
			invoice.setNil(invoiceParent.getNil());
		} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(CDNUR)) {
			if (isNotEmpty(invoiceParent.getCdnur())) {
				if(isNotEmpty(invoiceParent.getB2b())) {
					invoiceParent.setB2b(Lists.newArrayList());
				}
				
				GSTRInvoiceDetails cdnur = new GSTRInvoiceDetails();
				
				if(isNotEmpty(invoiceParent.getCdnur()) && isNotEmpty(invoiceParent.getCdnur().get(0))) {
					if(isNotEmpty(invoiceParent.getCdnur().get(0).getItms())) {
						cdnur.setItms(invoiceParent.getCdnur().get(0).getItms());
					}
					if(isNotEmpty(invoiceParent.getCdnur().get(0).getVal())) {
						cdnur.setVal(invoiceParent.getCdnur().get(0).getVal());
					}
					if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtty())) {
						cdnur.setNtty(invoiceParent.getCdnur().get(0).getNtty());
					}
					if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtNum())) {
						cdnur.setNtNum(invoiceParent.getCdnur().get(0).getNtNum());
					}
					if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtDt())) {
						String ntdt = simpleDateFormat.format(invoiceParent.getCdnur().get(0).getNtDt());
						ntdt = ntdt+"T18:30:000Z";
						try {
							cdnur.setNtDt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					String typ = "";
					if(isNotEmpty(invoiceParent.getCdnur().get(0).getTyp())) {
						typ = invoiceParent.getCdnur().get(0).getTyp();
						cdnur.setTyp(typ);
					}
					if(isNotEmpty(typ) && typ.equalsIgnoreCase("B2CL")) {
						if(isEmpty(invoiceParent.getCdnur().get(0).getPos())) {
							String stateTin = getStateCode(invoiceParent.getStatename());
							cdnur.setPos(stateTin);
						}else {
							cdnur.setPos(invoiceParent.getCdnur().get(0).getPos());
						}
					}
				}
				List<GSTRInvoiceDetails> cdnurList = Lists.newArrayList();
				cdnurList.add(cdnur);
				
				for(GSTRInvoiceDetails invoiceDetails : cdnurList) {
					invoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
					if(isNotEmpty(invoiceDetails.getChksum())) {
						invoiceDetails.setChksum(null);
					}
					if(isNotEmpty(invoiceDetails.getUpdby())) {
						invoiceDetails.setUpdby(null);
					}
					if(isNotEmpty(invoiceDetails.getCflag())) {
						invoiceDetails.setCflag(null);
					}
				}
				invoice.setCdnur(cdnurList);
			}else {
				invoice.setCdnur(invoiceParent.getCdnur());
			}
		} else if (isNotEmpty(invoiceParent.getInvtype())
				&& invoiceParent.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
			List<GSTRCreditDebitNotes> notes = null;
			if (returntype.equals(GSTR1)) {
				notes = ((GSTR1) invoiceParent).getCdnr();
			} else if (returntype.equals(GSTR2)) {
				notes = ((GSTR2) invoiceParent).getCdn();
			} else if (returntype.equals(PURCHASE_REGISTER)) {
				notes = ((PurchaseRegister) invoiceParent).getCdn();
			} else if (returntype.equals(GSTR4)) {
				notes = ((GSTR4) invoiceParent).getCdnr();
			} else if (returntype.equals(GSTR6)) {
				notes = ((GSTR6) invoiceParent).getCdn();
			}
			List<GSTRCreditDebitNotes> cdnr = Lists.newArrayList();
			if (isNotEmpty(notes)) {
				if(isNotEmpty(invoiceParent.getB2b())) {
					invoiceParent.setB2b(Lists.newArrayList());
				}
				for (GSTRCreditDebitNotes gstrcdnrInvoice : notes) {
					GSTRCreditDebitNotes gstrcdnrInvoice1 = new GSTRCreditDebitNotes();
					String ctin = gstrcdnrInvoice.getCtin();
					gstrcdnrInvoice1.setCtin(ctin);
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isEmpty(gstrcdnrInvoice.getNt().get(0).getInvTyp())) {
						gstrcdnrInvoice1.getNt().get(0).setInvTyp("R");
					}else {
						gstrcdnrInvoice1.getNt().get(0).setInvTyp(gstrcdnrInvoice.getNt().get(0).getInvTyp());
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isEmpty(gstrcdnrInvoice.getNt().get(0).getRchrg())) {
						gstrcdnrInvoice1.getNt().get(0).setRchrg("N");
					}else {
						gstrcdnrInvoice1.getNt().get(0).setRchrg(gstrcdnrInvoice.getNt().get(0).getRchrg());
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isEmpty(gstrcdnrInvoice.getNt().get(0).getPos())) {
						String stateTin = getStateCode(invoiceParent.getStatename());
						gstrcdnrInvoice1.getNt().get(0).setPos(stateTin);
					}else {
						gstrcdnrInvoice1.getNt().get(0).setPos(gstrcdnrInvoice.getNt().get(0).getPos());
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtNum())) {
						gstrcdnrInvoice1.getNt().get(0).setNtNum(gstrcdnrInvoice.getNt().get(0).getNtNum());
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtDt())) {
						String ntdt = simpleDateFormat.format(gstrcdnrInvoice.getNt().get(0).getNtDt());
						ntdt = ntdt+"T18:30:000Z";
						try {
							gstrcdnrInvoice1.getNt().get(0).setNtDt(simpleDateFormat1.parse(ntdt));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtty())) {
						gstrcdnrInvoice1.getNt().get(0).setNtty(gstrcdnrInvoice.getNt().get(0).getNtty());
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getVal())) {
						gstrcdnrInvoice1.getNt().get(0).setVal(gstrcdnrInvoice.getNt().get(0).getVal());
					}
					if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getItms())) {
						gstrcdnrInvoice1.getNt().get(0).setItms(gstrcdnrInvoice.getNt().get(0).getItms());
					}
					for(GSTRInvoiceDetails invoiceDetails : gstrcdnrInvoice1.getNt()) {
						invoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_DELETE);
						if(isNotEmpty(invoiceDetails.getChksum())) {
							invoiceDetails.setChksum(null);
						}
						if(isNotEmpty(invoiceDetails.getUpdby())) {
							invoiceDetails.setUpdby(null);
						}
						if(isNotEmpty(invoiceDetails.getCflag())) {
							invoiceDetails.setCflag(null);
						}
					}
					cdnr.add(gstrcdnrInvoice1);
				}
			}
			((GSTR1)invoice).setCdnr(cdnr);
		}
		logger.debug(CLASSNAME + method + END);
		return invoice;
	}

	
	
	private InvoiceParent hsnUploadSupport(Client client,String returntype,int iMonth,int iYear){
		final String method = "hsnUploadSupport::";
		int tYear = iYear-1;
		String strYear="";
		if(iMonth < 4) {
			if(tYear == 2016 || tYear == 2017) {
				if(iMonth < 4) {
					strYear="APR2017-JUN2017";
				}else {
					strYear="2017-2018";
				}
			}else {
				tYear = tYear-1;
				strYear=tYear+"-"+(tYear+1);
			}
		}else {
			strYear=tYear+"-"+(tYear+1);
		}
		
		String month = iMonth < 10 ? "0" + iMonth : iMonth + "";
		InvoiceParent invoice = new InvoiceParent();
		if (returntype.equals(GSTR1)) {
			invoice = new GSTR1();
		} else if (returntype.equals(GSTR1A)) {
			invoice = new GSTR1A();
		} else if (returntype.equals(GSTR2)) {
			invoice = new GSTR2();
		} else if (returntype.equals(PURCHASE_REGISTER)) {
			invoice = new PurchaseRegister();
		} else if (returntype.equals(GSTR4)) {
			invoice = new GSTR4();
		} else if (returntype.equals(GSTR6)) {
			invoice = new GSTR6();
		} else if (returntype.equals(ANX1)) {
			invoice = new Anx1();
		}
		invoice.setGstin(client.getGstnnumber());
		if (isEmpty(invoice.getFp())) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(iMonth == 1 || iMonth == 2 || iMonth == 3) {
					yr = (iYear-1)+"-"+(iYear);
				}else {
					yr = iYear+"-"+(iYear+1);
				}
				//String yr=iYear+"-"+(iYear+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				String strMonth = iMonth+"";
				if(iMonth == 1 || iMonth == 2 || iMonth == 3) {
					strMonth = "03";
				} else if(iMonth == 4 || iMonth == 5 || iMonth == 6) {
					strMonth = "06";
				} else if(iMonth == 7 || iMonth == 8 || iMonth == 9) {
					strMonth = "09";
				} else if(iMonth == 10 || iMonth == 11 || iMonth == 12) {
					strMonth = "12";
				}
				invoice.setFp(strMonth + iYear);
			} else {
				invoice.setFp(month + iYear);
			}
		}
		
		Double turnOver = 0d;
		Double curtgt = 0d;
		if(isNotEmpty(client) && isNotEmpty(client.getTurnovergoptions())) {
			//String strYear = tYear+"";
			for(TurnoverOptions turnoverOptions : client.getTurnovergoptions()) {
				if(isNotEmpty(turnoverOptions)) {
					if(strYear.equals(turnoverOptions.getYear()) ) {
						turnOver = turnoverOptions.getTurnover();
					}
					if("APR2017-JUN2017".equals(turnoverOptions.getYear())) {
						curtgt = turnoverOptions.getTurnover();
					}
				}
			}
		}
		
		
		logger.debug(CLASSNAME + method + " mahindra {}", turnOver);
		invoice.setGt(turnOver);
		invoice.setCurGt(curtgt);
		//logger.debug(CLASSNAME + method + " invoices {}", invoices);
		return invoice;
	}
	@Override
	@Transactional
	public InvoiceParent getGSTRReturnInvoice(List<? extends InvoiceParent> invoices, final Client client,
			final String returntype, final int iMonth, final int iYear,final String hsnSum) {
		final String method = "getGSTRReturnInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:sss'Z'");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
	String month = iMonth < 10 ? "0" + iMonth : iMonth + "";
	List<String> yrcode = Lists.newArrayList();
	List<String> monthcode = Lists.newArrayList();
	monthcode.add("04");
	yrcode.add("2021-2022");
	String yearCode=Utility.getYearCode(iMonth, iYear);
		InvoiceParent invoice = hsnUploadSupport(client,returntype,iMonth,iYear);
		if("hsn".equalsIgnoreCase(hsnSum)) {
			Map<String,List<GSTRB2CS>> b2csmap = Maps.newHashMap();
			Map<String,GSTRNilInvoices> nilmap = Maps.newHashMap();
			Map<String,List<GSTRAdvanceTax>> advmap = Maps.newHashMap();
			Map<String,List<GSTRAdvanceTax>> advadjmap = Maps.newHashMap();
			for (InvoiceParent invoiceParent : invoices) {
				if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(B2B)) {
					if (returntype.equals(ANX1)) {
						((Anx1) invoice).setAnxb2b(Lists.newArrayList());
						AnxDocs anxDocs = new AnxDocs();
						anxDocs.setCtin(invoiceParent.getB2b().get(0).getCtin());
						anxDocs.setPos(getStateCode(invoiceParent.getStatename()));
						anxDocs.setDocs(Lists.newArrayList());
						AnxDetails details = new AnxDetails();
						details.setPos(getStateCode(invoiceParent.getStatename()));
						details.setDoc(new AnxDoc());
						details.getDoc().setNum(invoiceParent.getInvoiceno());
						details.getDoc().setDt(simpleDateFormat.format(invoice.getDateofinvoice()));
						details.getDoc().setVal(invoiceParent.getTotaltaxableamount());
						details.setItems(Lists.newArrayList());
						anxDocs.getDocs().add(details);
						for (Item item : invoiceParent.getItems()) {
							AnxItems anxItem = new AnxItems();
							anxItem.setIgst(item.getIgstamount());
							anxItem.setCgst(item.getCgstamount());
							anxItem.setSgst(item.getSgstamount());
							anxItem.setCess(item.getCessamount());
							anxItem.setHsn(item.getHsn());
							anxItem.setRate(item.getRate());
							anxItem.setTxval(item.getTaxablevalue());
							details.getItems().add(anxItem);
						}
						((Anx1) invoice).getAnxb2b().add(anxDocs);
					} else {
					for (GSTRB2B gstrb2bInvoice : invoiceParent.getB2b()) {
						String ctin = gstrb2bInvoice.getCtin();
						boolean present = false;
						for (GSTRB2B eInvs : invoice.getB2b()) {
							if (isNotEmpty(gstrb2bInvoice.getCtin()) && isNotEmpty(gstrb2bInvoice.getInv())	&& eInvs.getCtin().equals(ctin)) {
								present = true;
								eInvs.getInv().addAll(gstrb2bInvoice.getInv());
							}
						}
						if (!present) {
							// gstrb2bInvoice.setErrorMsg("");
							invoice.getB2b().add(gstrb2bInvoice);
						}
						for (GSTRB2B eInvs : invoice.getB2b()) {
							for(GSTRInvoiceDetails invoiceDetails : eInvs.getInv()) {
								if(isNotEmpty(invoiceDetails.getChksum())) {
									invoiceDetails.setChksum(null);
								}
								if(isNotEmpty(invoiceDetails.getUpdby())) {
									invoiceDetails.setUpdby(null);
								}
								if(isNotEmpty(invoiceDetails.getCflag())) {
									invoiceDetails.setCflag(null);
								}
								if(isNotEmpty(invoiceDetails.getInvTyp())) {
									if("SEWPC".equalsIgnoreCase(invoiceDetails.getInvTyp())) {
										invoiceDetails.setInvTyp("SEWP");
									}
								}
								consolidatedItemRate(invoiceDetails);
							}
						}
					}
					}
				}else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(B2BA)) {
					for (GSTRB2B gstrb2bInvoice : ((GSTR1) invoiceParent).getB2ba()) {
						String ctin = gstrb2bInvoice.getCtin();
						boolean present = false;
						for (GSTRB2B eInvs : ((GSTR1) invoice).getB2ba()) {
							if (isNotEmpty(gstrb2bInvoice.getCtin()) && isNotEmpty(gstrb2bInvoice.getInv())	&& eInvs.getCtin().equals(ctin)) {
								present = true;
								eInvs.getInv().addAll(gstrb2bInvoice.getInv());
							}
						}
						if (!present) {
							// gstrb2bInvoice.setErrorMsg("");
							((GSTR1) invoice).getB2ba().add(gstrb2bInvoice);
						}
						for (GSTRB2B eInvs : ((GSTR1) invoice).getB2ba()) {
							for(GSTRInvoiceDetails invoiceDetails : eInvs.getInv()) {
								if(isNotEmpty(invoiceDetails.getInvTyp())) {
									if("SEWPC".equalsIgnoreCase(invoiceDetails.getInvTyp())) {
										invoiceDetails.setInvTyp("SEWP");
									}
								}
								consolidatedItemRate(invoiceDetails);
							}
						}
					}
				} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(B2CL)) {
					if(isNotEmpty(invoiceParent.getB2cl())){
						/*if(isNotEmpty(invoice.getB2b())) {
							invoice.setB2b(Lists.newArrayList());
						}*/
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						for (GSTRB2CL gstrb2clInvoice : invoiceParent.getB2cl()) {
							String pos = gstrb2clInvoice.getPos();
							boolean present = false;
							for (GSTRB2CL eInvs : invoice.getB2cl()) {
								if (isNotEmpty(gstrb2clInvoice.getPos()) && isNotEmpty(gstrb2clInvoice.getInv())
										&& eInvs.getPos().equals(pos)) {
									present = true;
									eInvs.getInv().addAll(gstrb2clInvoice.getInv());
								}
							}
							if (!present) {
								// gstrb2clInvoice.setErrorMsg("");
								invoice.getB2cl().add(gstrb2clInvoice);
							}
						}
						for (GSTRB2CL gstrb2clInvoice : invoiceParent.getB2cl()) {
							for(GSTRInvoiceDetails invoiceDetails : gstrb2clInvoice.getInv()) {
								if(isNotEmpty(invoiceDetails.getChksum())) {
									invoiceDetails.setChksum(null);
								}
								if(isNotEmpty(invoiceDetails.getUpdby())) {
									invoiceDetails.setUpdby(null);
								}
								if(isNotEmpty(invoiceDetails.getCflag())) {
									invoiceDetails.setCflag(null);
								}
								consolidatedItemRate(invoiceDetails);
							}
						}
					}
				}else if(isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(B2CSA))) {
					//payload logic
					if (isNotEmpty(((GSTR1)invoiceParent).getB2csa())) {
						/*if(isNotEmpty(invoice.getB2b())) {
							invoice.setB2b(Lists.newArrayList());
						}*/
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						for (GSTRB2CSA gstrb2csaInvoice : ((GSTR1) invoiceParent).getB2csa()) {
							String pos = gstrb2csaInvoice.getPos();
							boolean present = false;
							for (GSTRB2CSA eInvs : ((GSTR1) invoice).getB2csa()) {
								if (isNotEmpty(gstrb2csaInvoice.getPos()) && isNotEmpty(gstrb2csaInvoice.getItms())
										&& eInvs.getPos().equals(pos)) {
									present = true;
									eInvs.getItms().addAll(gstrb2csaInvoice.getItms());
								}
							}
							if (!present) {
								// gstrb2clInvoice.setErrorMsg("");
								((GSTR1) invoice).getB2csa().add(gstrb2csaInvoice);
							}
						}
						for (GSTRB2CSA gstrb2clInvoice : ((GSTR1) invoiceParent).getB2csa()) {
							clientUtils.consolidatedB2csaItemRate(gstrb2clInvoice);
							//for(GSTRItemDetails invoiceDetails : gstrb2clInvoice.getItms()) {}
						}
					}
				//} else if(isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(B2C))) {
				}else if(isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(B2C) || (invoiceParent.getInvtype().equals(MasterGSTConstants.CDNUR) && isNotEmpty(invoiceParent.getCdnur()) && isNotEmpty(invoiceParent.getCdnur().get(0)) && isNotEmpty(invoiceParent.getCdnur().get(0).getTyp()) && "B2CS".equalsIgnoreCase(invoiceParent.getCdnur().get(0).getTyp()) ))) {
					if (isNotEmpty(invoiceParent.getB2cs())) {
						/*if(isNotEmpty(invoice.getB2b())) {
							invoice.setB2b(Lists.newArrayList());
						}*/
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						if(isNotEmpty(invoice.getB2cs())) {
							
							List<GSTRB2CS> newInvs = Lists.newArrayList();
							String b2cskey="";
							for(GSTRB2CS eb2cs : invoice.getB2cs()) {
								for(GSTRB2CS b2cs : invoiceParent.getB2cs()) {
									if(isNotEmpty(b2cs.getPos()) && isNotEmpty(b2cs.getRt())) {
										b2cskey = b2cs.getPos()+"-"+b2cs.getRt();
									if (isNotEmpty(eb2cs.getPos()) && isNotEmpty(b2cs.getPos()) && isNotEmpty(eb2cs.getRt())
											&& isNotEmpty(b2cs.getRt()) && eb2cs.getPos().equals(b2cs.getPos())
											&& eb2cs.getRt().equals(b2cs.getRt())) {
										if(isNotEmpty(b2cs.getTxval())) {
											if(isNotEmpty(eb2cs.getTxval())) {
												eb2cs.setTxval(eb2cs.getTxval()+b2cs.getTxval());
											} else {
												eb2cs.setTxval(b2cs.getTxval());
											}
										}
										if(isNotEmpty(b2cs.getIamt())) {
											if(isNotEmpty(eb2cs.getIamt())) {
												eb2cs.setIamt(eb2cs.getIamt()+b2cs.getIamt());
											} else {
												eb2cs.setIamt(b2cs.getIamt());
											}
										}
										if(isNotEmpty(b2cs.getCamt())) {
											if(isNotEmpty(eb2cs.getCamt())) {
												eb2cs.setCamt(eb2cs.getCamt()+b2cs.getCamt());
											} else {
												eb2cs.setCamt(b2cs.getCamt());
											}
										}
										if(isNotEmpty(b2cs.getSamt())) {
											if(isNotEmpty(eb2cs.getSamt())) {
												eb2cs.setSamt(eb2cs.getSamt()+b2cs.getSamt());
											} else {
												eb2cs.setSamt(b2cs.getSamt());
											}
										}
										if(isNotEmpty(b2cs.getCsamt())) {
											if(isNotEmpty(eb2cs.getCsamt())) {
												eb2cs.setCsamt(eb2cs.getCsamt()+b2cs.getCsamt());
											} else {
												eb2cs.setCsamt(b2cs.getCsamt());
											}
										}
									} else {
										if(!b2csmap.containsKey(b2cskey)) {
											newInvs.add(b2cs);
											b2csmap.put(b2cskey, newInvs);
										}
									}
								}
								}
							}
							invoice.getB2cs().addAll(newInvs);
						} else {
							String b2cskey="";
							invoice.setB2cs(Lists.newArrayList());
							List<GSTRB2CS> newInvs = Lists.newArrayList();
							List<String> b2cskeys = Lists.newArrayList();
							Map<String,GSTRB2CS> newb2csmap = Maps.newHashMap();
							for (GSTRB2CS b2cs : invoiceParent.getB2cs()) {
								boolean present = false;
								b2cskey = b2cs.getPos()+"-"+b2cs.getRt();
								if(!newb2csmap.containsKey(b2cskey)) {
									newb2csmap.put(b2cskey, b2cs);
									b2cskeys.add(b2cskey);
								}else {
									GSTRB2CS b2c = newb2csmap.get(b2cskey);
									if (isNotEmpty(b2cs.getTxval())) {
										if (isNotEmpty(b2c.getTxval())) {
											b2c.setTxval(b2c.getTxval() + b2cs.getTxval());
										} else {
											b2c.setTxval(b2cs.getTxval());
										}
									}
									if (isNotEmpty(b2cs.getIamt())) {
										if (isNotEmpty(b2c.getIamt())) {
											b2c.setIamt(b2c.getIamt() + b2cs.getIamt());
										} else {
											b2c.setIamt(b2cs.getIamt());
										}
									}
									if (isNotEmpty(b2cs.getCamt())) {
										if (isNotEmpty(b2c.getCamt())) {
											b2c.setCamt(b2c.getCamt() + b2cs.getCamt());
										} else {
											b2c.setCamt(b2cs.getCamt());
										}
									}
									if (isNotEmpty(b2cs.getSamt())) {
										if (isNotEmpty(b2c.getSamt())) {
											b2c.setSamt(b2c.getSamt() + b2cs.getSamt());
										} else {
											b2c.setSamt(b2cs.getSamt());
										}
									}
									if (isNotEmpty(b2cs.getCsamt())) {
										if (isNotEmpty(b2c.getCsamt())) {
											b2c.setCsamt(b2c.getCsamt() + b2cs.getCsamt());
										} else {
											b2c.setCsamt(b2cs.getCsamt());
										}
									}
									newb2csmap.put(b2cskey, b2c);
								}
							}
							for(String key : b2cskeys) {
								GSTRB2CS b2c = newb2csmap.get(key);
								newInvs.add(b2c);
								List<GSTRB2CS> b2cs = Lists.newArrayList();
								b2cs.add(b2c);
								b2csmap.put(key, b2cs);
							}
							invoice.setB2cs(newInvs);
						}
					}
					if (isNotEmpty(invoiceParent.getCdnur()) && isNotEmpty(invoiceParent.getCdnur().get(0))) {
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						String cdnurtype = "C";
						int sftr = -1;
						if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtty())) {
							cdnurtype = invoiceParent.getCdnur().get(0).getNtty();
						}
						if(isNotEmpty(cdnurtype) && cdnurtype.equalsIgnoreCase("D")) {
							sftr = 1;
						}
						String cdnrStateName = "";
						if(isNotEmpty(invoiceParent.getStatename())) {
							if(invoiceParent.getStatename().contains("-")) {
								String[] nm = invoiceParent.getStatename().split("-");
								cdnrStateName = nm[0];
							}
						}
						if(isNotEmpty(invoice.getB2cs())) {
							List<GSTRB2CS> newInvs = Lists.newArrayList();
							String b2cskey="";
							for(GSTRB2CS eb2cs : invoice.getB2cs()) {
								for(GSTRItems cdnur : invoiceParent.getCdnur().get(0).getItms()) {
									if(isNotEmpty(cdnur.getItem())) {
										if(isNotEmpty(cdnrStateName) && isNotEmpty(cdnur.getItem().getRt())) {
											b2cskey = cdnrStateName+"-"+cdnur.getItem().getRt();
											
											if (isNotEmpty(eb2cs.getPos()) && isNotEmpty(cdnrStateName) && isNotEmpty(eb2cs.getRt())
													&& isNotEmpty(cdnur.getItem().getRt()) && eb2cs.getPos().equals(cdnrStateName)
													&& eb2cs.getRt().equals(cdnur.getItem().getRt())) {
												if(isNotEmpty(cdnur.getItem().getTxval())) {
													if(isNotEmpty(eb2cs.getTxval())) {
														if(cdnur.getItem().getTxval() > 0d) {
															eb2cs.setTxval(eb2cs.getTxval()+(cdnur.getItem().getTxval()*sftr));
														}else {
															eb2cs.setTxval(eb2cs.getTxval()+cdnur.getItem().getTxval());
														}
													} else {
														if(cdnur.getItem().getTxval() > 0d) {
															eb2cs.setTxval(cdnur.getItem().getTxval()*sftr);
														}else {
															eb2cs.setTxval(cdnur.getItem().getTxval());
														}
													}
												}
												if(isNotEmpty(cdnur.getItem().getIamt())) {
													if(isNotEmpty(eb2cs.getIamt())) {
														if(cdnur.getItem().getIamt() > 0d) {
															eb2cs.setIamt(eb2cs.getIamt()+(cdnur.getItem().getIamt()*sftr));
														}else {
															eb2cs.setIamt(eb2cs.getIamt()+cdnur.getItem().getIamt());
														}
													} else {
														if(cdnur.getItem().getIamt() > 0d) {
															eb2cs.setIamt(cdnur.getItem().getIamt()*sftr);
														}else {
															eb2cs.setIamt(cdnur.getItem().getIamt());
														}
													}
												}
												if(isNotEmpty(cdnur.getItem().getCamt())) {
													if(isNotEmpty(eb2cs.getCamt())) {
														if(cdnur.getItem().getCamt() > 0d) {
															eb2cs.setCamt(eb2cs.getCamt()+(cdnur.getItem().getCamt()*sftr));
														}else {
															eb2cs.setCamt(eb2cs.getCamt()+cdnur.getItem().getCamt());
														}
													} else {
														if(cdnur.getItem().getCamt() > 0d) {
															eb2cs.setCamt(cdnur.getItem().getCamt()*sftr);
														}else {
															eb2cs.setCamt(cdnur.getItem().getCamt());
														}
													}
												}
												if(isNotEmpty(cdnur.getItem().getSamt())) {
													if(isNotEmpty(eb2cs.getSamt())) {
														if(cdnur.getItem().getSamt() > 0d) {
															eb2cs.setSamt(eb2cs.getSamt()+(cdnur.getItem().getSamt()*sftr));
														}else {
															eb2cs.setSamt(eb2cs.getSamt()+cdnur.getItem().getSamt());
														}
													} else {
														if(cdnur.getItem().getSamt() > 0d) {
															eb2cs.setSamt(cdnur.getItem().getSamt()*sftr);
														}else {
															eb2cs.setSamt(cdnur.getItem().getSamt());
														}
													}
												}
												if(isNotEmpty(cdnur.getItem().getCsamt())) {
													if(isNotEmpty(eb2cs.getCsamt())) {
														if(cdnur.getItem().getCsamt() > 0d) {
															eb2cs.setCsamt(eb2cs.getCsamt()+(cdnur.getItem().getCsamt()*sftr));
														}else {
															eb2cs.setCsamt(eb2cs.getCsamt()+cdnur.getItem().getCsamt());
														}
													} else {
														if(cdnur.getItem().getCsamt() > 0d) {
															eb2cs.setCsamt(cdnur.getItem().getCsamt()*sftr);
														}else {
															eb2cs.setCsamt(cdnur.getItem().getCsamt());
														}
													}
												}
											}else {
												if(!b2csmap.containsKey(b2cskey)) {
													GSTRB2CS b2cs = new GSTRB2CS();
													b2cs.setPos(cdnrStateName);
													if(isNotEmpty(cdnur.getItem().getTxval())) {
														if(cdnur.getItem().getTxval() > 0d) {
															b2cs.setTxval(cdnur.getItem().getTxval()*sftr);
														}else {
															b2cs.setTxval(cdnur.getItem().getTxval());
														}
													}
													if(isNotEmpty(cdnur.getItem().getIamt())) {
														if(cdnur.getItem().getIamt() > 0d) {
															b2cs.setIamt(cdnur.getItem().getIamt()*sftr);
														}else {
															b2cs.setIamt(cdnur.getItem().getIamt());
														}
													}
													if(isNotEmpty(cdnur.getItem().getCamt())) {
														if(cdnur.getItem().getCamt() > 0d) {
															b2cs.setCamt(cdnur.getItem().getCamt()*sftr);
														}else {
															b2cs.setCamt(cdnur.getItem().getCamt());
														}
													}
													if(isNotEmpty(cdnur.getItem().getSamt())) {
														if(cdnur.getItem().getSamt() > 0d) {
															b2cs.setSamt(cdnur.getItem().getSamt()*sftr);
														}else {
															b2cs.setSamt(cdnur.getItem().getSamt());
														}
													}
													if(isNotEmpty(cdnur.getItem().getCsamt())) {
														if(cdnur.getItem().getCsamt() > 0d) {
															b2cs.setCsamt(cdnur.getItem().getCsamt()*sftr);
														}else {
															b2cs.setCsamt(cdnur.getItem().getCsamt());
														}
													}
													if(isNotEmpty(cdnur.getItem().getRt())) {
														b2cs.setRt(cdnur.getItem().getRt());
													}
													b2cs.setTyp("OE");
													if(isNotEmpty(client.getStatename()) && isNotEmpty(invoiceParent.getStatename()) && client.getStatename().equalsIgnoreCase(invoiceParent.getStatename())) {
														b2cs.setSplyTy("INTRA");
													}else {
														b2cs.setSplyTy("INTER");
													}
													newInvs.add(b2cs);
													b2csmap.put(b2cskey, newInvs);
												}
											}
										}
									}
								}
							}
							invoice.getB2cs().addAll(newInvs);
						} else {
							String b2cskey="";
							invoice.setB2cs(Lists.newArrayList());
							List<GSTRB2CS> newInvs = Lists.newArrayList();
							List<String> b2cskeys = Lists.newArrayList();
							Map<String,GSTRB2CS> newb2csmap = Maps.newHashMap();
							for(GSTRItems cdnur : invoiceParent.getCdnur().get(0).getItms()) {
								if(isNotEmpty(cdnur.getItem())) {
									boolean present = false;
									if(isNotEmpty(cdnrStateName) && isNotEmpty(cdnur.getItem().getRt())) {
										b2cskey = cdnrStateName+"-"+cdnur.getItem().getRt();
									}
									if(!newb2csmap.containsKey(b2cskey)) {
										GSTRB2CS b2cs = new GSTRB2CS();
										b2cs.setPos(cdnrStateName);
										if(isNotEmpty(cdnur.getItem().getTxval())) {
											if(cdnur.getItem().getTxval() > 0d) {
												b2cs.setTxval(cdnur.getItem().getTxval()*sftr);
											}else {
												b2cs.setTxval(cdnur.getItem().getTxval());
											}
										}
										if(isNotEmpty(cdnur.getItem().getIamt())) {
											if(cdnur.getItem().getIamt() > 0d) {
												b2cs.setIamt(cdnur.getItem().getIamt()*sftr);
											}else {
												b2cs.setIamt(cdnur.getItem().getIamt());
											}
										}
										if(isNotEmpty(cdnur.getItem().getCamt())) {
											if(cdnur.getItem().getCamt() > 0d) {
												b2cs.setCamt(cdnur.getItem().getCamt()*sftr);
											}else {
												b2cs.setCamt(cdnur.getItem().getCamt());
											}
										}
										if(isNotEmpty(cdnur.getItem().getSamt())) {
											if(cdnur.getItem().getSamt() > 0d) {
												b2cs.setSamt(cdnur.getItem().getSamt()*sftr);
											}else {
												b2cs.setSamt(cdnur.getItem().getSamt());
											}
										}
										if(isNotEmpty(cdnur.getItem().getCsamt())) {
											if(cdnur.getItem().getCsamt() > 0d) {
												b2cs.setCsamt(cdnur.getItem().getCsamt()*sftr);
											}else {
												b2cs.setCsamt(cdnur.getItem().getCsamt());
											}
										}
										if(isNotEmpty(cdnur.getItem().getRt())) {
											b2cs.setRt(cdnur.getItem().getRt());
										}
										b2cs.setTyp("OE");
										if(isNotEmpty(client.getStatename()) && isNotEmpty(invoiceParent.getStatename()) && client.getStatename().equalsIgnoreCase(invoiceParent.getStatename())) {
											b2cs.setSplyTy("INTRA");
										}else {
											b2cs.setSplyTy("INTER");
										}
										newb2csmap.put(b2cskey, b2cs);
										b2cskeys.add(b2cskey);
									}else {
										GSTRB2CS b2c = newb2csmap.get(b2cskey);
										if(isNotEmpty(cdnur.getItem().getTxval())) {
											if(isNotEmpty(b2c.getTxval())) {
												if(cdnur.getItem().getTxval() > 0d) {
													b2c.setTxval(b2c.getTxval()+(cdnur.getItem().getTxval()*sftr));
												}else {
													b2c.setTxval(b2c.getTxval()+cdnur.getItem().getTxval());
												}
											} else {
												if(cdnur.getItem().getTxval() > 0d) {
													b2c.setTxval(cdnur.getItem().getTxval()*sftr);
												}else {
													b2c.setTxval(cdnur.getItem().getTxval());
												}
											}
										}
										if(isNotEmpty(cdnur.getItem().getIamt())) {
											if(isNotEmpty(b2c.getIamt())) {
												if(cdnur.getItem().getIamt() > 0d) {
													b2c.setIamt(b2c.getIamt()+(cdnur.getItem().getIamt()*sftr));
												}else {
													b2c.setIamt(b2c.getIamt()+cdnur.getItem().getIamt());
												}
											} else {
												if(cdnur.getItem().getIamt() > 0d) {
													b2c.setIamt(cdnur.getItem().getIamt()*sftr);
												}else {
													b2c.setIamt(cdnur.getItem().getIamt());
												}
											}
										}
										if(isNotEmpty(cdnur.getItem().getCamt())) {
											if(isNotEmpty(b2c.getCamt())) {
												if(cdnur.getItem().getCamt() > 0d) {
													b2c.setCamt(b2c.getCamt()+(cdnur.getItem().getCamt()*sftr));
												}else {
													b2c.setCamt(b2c.getCamt()+cdnur.getItem().getCamt());
												}
											} else {
												if(cdnur.getItem().getCamt() > 0d) {
													b2c.setCamt(cdnur.getItem().getCamt()*sftr);
												}else {
													b2c.setCamt(cdnur.getItem().getCamt());
												}
											}
										}
										if(isNotEmpty(cdnur.getItem().getSamt())) {
											if(isNotEmpty(b2c.getSamt())) {
												if(cdnur.getItem().getSamt() > 0d) {
													b2c.setSamt(b2c.getSamt()+(cdnur.getItem().getSamt()*sftr));
												}else {
													b2c.setSamt(b2c.getSamt()+cdnur.getItem().getSamt());
												}
											} else {
												if(cdnur.getItem().getSamt() > 0d) {
													b2c.setSamt(cdnur.getItem().getSamt()*sftr);
												}else {
													b2c.setSamt(cdnur.getItem().getSamt());
												}
											}
										}
										if(isNotEmpty(cdnur.getItem().getCsamt())) {
											if(isNotEmpty(b2c.getCsamt())) {
												if(cdnur.getItem().getCsamt() > 0d) {
													b2c.setCsamt(b2c.getCsamt()+(cdnur.getItem().getCsamt()*sftr));
												}else {
													b2c.setCsamt(b2c.getCsamt()+cdnur.getItem().getCsamt());
												}
											} else {
												if(cdnur.getItem().getCsamt() > 0d) {
													b2c.setCsamt(cdnur.getItem().getCsamt()*sftr);
												}else {
													b2c.setCsamt(cdnur.getItem().getCsamt());
												}
											}
										}
										newb2csmap.put(b2cskey, b2c);
									}
								}
							}	
							for(String key : b2cskeys) {
								GSTRB2CS b2c = newb2csmap.get(key);
								newInvs.add(b2c);
								List<GSTRB2CS> b2cs = Lists.newArrayList();
								b2cs.add(b2c);
								b2csmap.put(key, b2cs);
							}
							invoice.setB2cs(newInvs);
						}
					}
				} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(EXPORTS)) {
					if(isNotEmpty(invoiceParent.getExp())){
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						for (GSTRExports exp : invoiceParent.getExp()) {
							String ntdt = simpleDateFormat.format(exp.getInv().get(0).getIdt());
							ntdt = ntdt+"T18:30:000Z";
							try {
								exp.getInv().get(0).setIdt(simpleDateFormat1.parse(ntdt));
							} catch (ParseException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							if(isNotEmpty(exp.getInv().get(0).getSbdt())) {
								String sbdt = simpleDateFormat.format(exp.getInv().get(0).getSbdt());
								sbdt = sbdt+"T18:30:000Z";
								try {
									exp.getInv().get(0).setSbdt(simpleDateFormat1.parse(sbdt));
								} catch (ParseException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
							boolean present = false;
							for (GSTRExports extngExp : invoice.getExp()) {
								if (isNotEmpty(exp.getInv()) && isNotEmpty(exp.getExpTyp())	&& exp.getExpTyp().equals(extngExp.getExpTyp())) {
									extngExp.getInv().addAll(exp.getInv());
									present = true;
									break;
								}
							}
							if (!present) {
								// exp.setErrorMsg("");
								invoice.getExp().add(exp);
							}
						}
						for (GSTRExports invoiceDetails : invoice.getExp()) {
							for (GSTRExportDetails expinvoiceDetails : invoiceDetails.getInv()) {
									
									consolidatedExpItemRate(expinvoiceDetails);
							}
						}
					}
				}else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(EXPA)) {
					if(isNotEmpty(((GSTR1) invoiceParent).getExpa())){
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						for (GSTRExports exp : ((GSTR1) invoiceParent).getExpa()) {
							String ntdt = simpleDateFormat.format(exp.getInv().get(0).getIdt());
							ntdt = ntdt+"T18:30:000Z";
							try {
								exp.getInv().get(0).setIdt(simpleDateFormat1.parse(ntdt));
							} catch (ParseException e) {
								e.printStackTrace();
							}
							if(isNotEmpty(exp.getInv().get(0).getSbdt())) {
								String sbdt = simpleDateFormat.format(exp.getInv().get(0).getSbdt());
								sbdt = sbdt+"T18:30:000Z";
								try {
									exp.getInv().get(0).setSbdt(simpleDateFormat1.parse(sbdt));
								} catch (ParseException e) {
									e.printStackTrace();
								}
							}
							boolean present = false;
							for (GSTRExports extngExp : ((GSTR1) invoice).getExpa()) {
								if (isNotEmpty(exp.getInv()) && isNotEmpty(exp.getExpTyp())	&& exp.getExpTyp().equals(extngExp.getExpTyp())) {
									extngExp.getInv().addAll(exp.getInv());
									present = true;
									break;
								}
							}
							if (!present) {
								// exp.setErrorMsg("");
								((GSTR1) invoice).getExpa().add(exp);
							}
						}
						for (GSTRExports invoiceDetails : ((GSTR1) invoice).getExpa()) {
							for (GSTRExportDetails expinvoiceDetails : invoiceDetails.getInv()) {
								consolidatedExpItemRate(expinvoiceDetails);
							}
						}
					}
				} else if (isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES) || invoiceParent.getInvtype().equals(ATA))) {
					List<GSTRAdvanceTax> at = null;
					List<GSTRAdvanceTax> eAt = null;
					if (returntype.equals(GSTR1)) {
						if(invoiceParent.getInvtype().equals(ATA)) {
							at = ((GSTR1) invoiceParent).getAta();
							eAt = ((GSTR1) invoice).getAta();
						}else {
							at = ((GSTR1) invoiceParent).getAt();
							eAt = ((GSTR1) invoice).getAt();
						}
					} else if (returntype.equals(GSTR2)) {
						at = ((GSTR2) invoiceParent).getTxi();
						eAt = ((GSTR2) invoice).getTxi();
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						at = ((PurchaseRegister) invoiceParent).getTxi();
						eAt = ((PurchaseRegister) invoice).getTxi();
					} else if (returntype.equals(GSTR4)) {
						at = ((GSTR4) invoiceParent).getAt();
						eAt = ((GSTR4) invoice).getAt();
					}
					if (isNotEmpty(at)) {
						/*if(isNotEmpty(invoice.getB2b())) {
							invoice.setB2b(Lists.newArrayList());
						}*/
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						if(isNotEmpty(eAt)) {
							List<GSTRAdvanceTax> newInvs = Lists.newArrayList();
							Map<String,List<GSTRItemDetails>> advItemmap = Maps.newHashMap();
							String b2cskey="";
							List<String> advkeys = Lists.newArrayList();
							Map<String,List<GSTRAdvanceTax>> advAdvmmap = Maps.newHashMap();
							for(GSTRAdvanceTax eb2cs : eAt) {
								for(GSTRAdvanceTax b2cs : at) {
									if(isNotEmpty(b2cs.getPos()) && isNotEmpty(b2cs.getSplyTy())) {
										b2cskey = b2cs.getPos()+"-"+b2cs.getSplyTy();
										if(!advmap.containsKey(b2cskey)) {
											advkeys.add(b2cskey);
										}
										if (isNotEmpty(eb2cs.getPos()) && isNotEmpty(b2cs.getPos()) && isNotEmpty(eb2cs.getSplyTy())
												&& isNotEmpty(b2cs.getSplyTy()) && eb2cs.getPos().equals(b2cs.getPos())
												&& eb2cs.getSplyTy().equals(b2cs.getSplyTy())) {
											List<GSTRItemDetails> newitms = Lists.newArrayList();
											for(GSTRItemDetails item : eb2cs.getItms()) {
												String advkey = "";
												
												for(GSTRItemDetails items : b2cs.getItms()) {
													if(isNotEmpty(b2cs.getPos()) && isNotEmpty(b2cs.getSplyTy()) && isNotEmpty(items.getRt())) {
														advkey = b2cs.getPos()+"-"+b2cs.getSplyTy()+"-"+items.getRt();
														if (isNotEmpty(eb2cs.getPos()) && isNotEmpty(b2cs.getPos()) && isNotEmpty(eb2cs.getSplyTy())
																&& isNotEmpty(b2cs.getSplyTy()) && isNotEmpty(items.getRt())
																&& isNotEmpty(item.getRt()) && eb2cs.getPos().equals(b2cs.getPos())
																&& eb2cs.getSplyTy().equals(b2cs.getSplyTy())
																&& item.getRt().equals(items.getRt())) {
															if(isNotEmpty(items.getAdvAmt())) {
																if(isNotEmpty(item.getAdvAmt())) {
																	item.setAdvAmt(item.getAdvAmt()+items.getAdvAmt());
																} else {
																	item.setAdvAmt(items.getAdvAmt());
																}
															}
															if(isNotEmpty(items.getCamt())) {
																if(isNotEmpty(item.getCamt())) {
																	item.setCamt(item.getCamt()+items.getCamt());
																} else {
																	item.setCamt(items.getCamt());
																}
															}
															if(isNotEmpty(items.getSamt())) {
																if(isNotEmpty(item.getSamt())) {
																	item.setSamt(item.getSamt()+items.getSamt());
																} else {
																	item.setSamt(items.getSamt());
																}
															}
															if(isNotEmpty(items.getIamt())) {
																if(isNotEmpty(item.getIamt())) {
																	item.setIamt(item.getIamt()+items.getIamt());
																} else {
																	item.setIamt(items.getIamt());
																}
															}
															if(isNotEmpty(items.getCsamt())) {
																if(isNotEmpty(item.getCsamt())) {
																	item.setCsamt(item.getCsamt()+items.getCsamt());
																} else {
																	item.setCsamt(items.getCsamt());
																}
															}
														}else {
															if(!advItemmap.containsKey(advkey)) {
																newitms.add(items);
																advItemmap.put(advkey, newitms);
																
															}
														}
													}
												}
											}
											eb2cs.getItms().addAll(newitms);
											newInvs.add(eb2cs);
											advAdvmmap.put(b2cskey, newInvs);
											advmap.put(b2cskey, newInvs);
										}else {
											if(!advmap.containsKey(b2cskey)) {
											String b2cskeyss="";
											List<String> b2cskeys = Lists.newArrayList();
												List<GSTRItemDetails> newItem = Lists.newArrayList();
												Map<String,GSTRItemDetails> newitemMap = Maps.newHashMap();
												for(GSTRItemDetails itmdet : b2cs.getItms()) {
													b2cskeyss = b2cs.getPos()+"-"+b2cs.getSplyTy()+"-"+itmdet.getRt();
													if(!newitemMap.containsKey(b2cskeyss)) {
														newitemMap.put(b2cskeyss, itmdet);
														b2cskeys.add(b2cskeyss);
													}else {
														GSTRItemDetails itm = newitemMap.get(b2cskey);
														if(isNotEmpty(itmdet.getAdvAmt())) {
															if(isNotEmpty(itm.getAdvAmt())) {
																itm.setAdvAmt(itm.getAdvAmt()+itmdet.getAdvAmt());
															} else {
																itm.setAdvAmt(itmdet.getAdvAmt());
															}
														}
														if(isNotEmpty(itmdet.getCamt())) {
															if(isNotEmpty(itm.getCamt())) {
																itm.setCamt(itm.getCamt()+itmdet.getCamt());
															} else {
																itm.setCamt(itmdet.getCamt());
															}
														}
														if(isNotEmpty(itmdet.getSamt())) {
															if(isNotEmpty(itm.getSamt())) {
																itm.setSamt(itm.getSamt()+itmdet.getSamt());
															} else {
																itm.setSamt(itmdet.getSamt());
															}
														}
														if(isNotEmpty(itmdet.getIamt())) {
															if(isNotEmpty(itm.getIamt())) {
																itm.setIamt(itm.getIamt()+itmdet.getIamt());
															} else {
																itm.setIamt(itmdet.getIamt());
															}
														}
														if(isNotEmpty(itmdet.getCsamt())) {
															if(isNotEmpty(itm.getCsamt())) {
																itm.setCsamt(itm.getCsamt()+itmdet.getCsamt());
															} else {
																itm.setCsamt(itmdet.getCsamt());
															}
														}
														newitemMap.put(b2cskey, itm);
													}
												}
												for(String key : b2cskeys) {
													GSTRItemDetails b2c = newitemMap.get(key);
													newItem.add(b2c);
												}
												b2cs.setItms(newItem);
												newInvs.add(b2cs);
												advAdvmmap.put(b2cskey, newInvs);
												advmap.put(b2cskey, newInvs);
											}
										}
									}
								}
							}
							for(String key : advkeys) {
								List<GSTRAdvanceTax> atinvs = advmap.get(key);
								if(invoiceParent.getInvtype().equals(ATA)) {
									((GSTR1) invoice).getAta().addAll(atinvs);
								}else {
									((GSTR1) invoice).getAt().addAll(atinvs);
								}
							}
						} else {
							String b2cskey="";
							String b2cskeyds="";
							List<String> b2cskeys = Lists.newArrayList();
							for(GSTRAdvanceTax att : at) {
								b2cskeyds = att.getPos()+"-"+att.getSplyTy();
								List<GSTRItemDetails> newItem = Lists.newArrayList();
								Map<String,GSTRItemDetails> newitemMap = Maps.newHashMap();
								for(GSTRItemDetails itmdet : att.getItms()) {
									b2cskey = att.getPos()+"-"+att.getSplyTy()+"-"+itmdet.getRt();
									if(!newitemMap.containsKey(b2cskey)) {
										newitemMap.put(b2cskey, itmdet);
										b2cskeys.add(b2cskey);
									}else {
										GSTRItemDetails itm = newitemMap.get(b2cskey);
										if(isNotEmpty(itmdet.getAdvAmt())) {
											if(isNotEmpty(itm.getAdvAmt())) {
												itm.setAdvAmt(itm.getAdvAmt()+itmdet.getAdvAmt());
											} else {
												itm.setAdvAmt(itmdet.getAdvAmt());
											}
										}
										if(isNotEmpty(itmdet.getCamt())) {
											if(isNotEmpty(itm.getCamt())) {
												itm.setCamt(itm.getCamt()+itmdet.getCamt());
											} else {
												itm.setCamt(itmdet.getCamt());
											}
										}
										if(isNotEmpty(itmdet.getSamt())) {
											if(isNotEmpty(itm.getSamt())) {
												itm.setSamt(itm.getSamt()+itmdet.getSamt());
											} else {
												itm.setSamt(itmdet.getSamt());
											}
										}
										if(isNotEmpty(itmdet.getIamt())) {
											if(isNotEmpty(itm.getIamt())) {
												itm.setIamt(itm.getIamt()+itmdet.getIamt());
											} else {
												itm.setIamt(itmdet.getIamt());
											}
										}
										if(isNotEmpty(itmdet.getCsamt())) {
											if(isNotEmpty(itm.getCsamt())) {
												itm.setCsamt(itm.getCsamt()+itmdet.getCsamt());
											} else {
												itm.setCsamt(itmdet.getCsamt());
											}
										}
										newitemMap.put(b2cskey, itm);
									}
								}
								for(String key : b2cskeys) {
									GSTRItemDetails b2c = newitemMap.get(key);
									newItem.add(b2c);
								}
								att.setItms(newItem);
							}
							advmap.put(b2cskeyds, at);
							if(invoiceParent.getInvtype().equals(ATA)) {
								((GSTR1) invoice).setAta(at);
							}else {
								((GSTR1) invoice).setAt(at);
							}
						}
					}
				} else if (isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(ATPAID) || invoiceParent.getInvtype().equals(TXPA))) {
				
					
					List<GSTRAdvanceTax> at = null;
					List<GSTRAdvanceTax> eAt = null;
					if(invoiceParent.getInvtype().equals(TXPA)) {
						at = invoiceParent.getTxpda();
						eAt = invoice.getTxpda();
					}else {
						at = invoiceParent.getTxpd();
						eAt = invoice.getTxpd();
					}
					
					if (isNotEmpty(at)) {
						/*if(isNotEmpty(invoice.getB2b())) {
							invoice.setB2b(Lists.newArrayList());
						}*/
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						if(isNotEmpty(eAt)) {
							List<GSTRAdvanceTax> newInvs = Lists.newArrayList();
							Map<String,List<GSTRItemDetails>> advItemmap = Maps.newHashMap();
							String b2cskey="";
							List<String> advkeys = Lists.newArrayList();
							Map<String,List<GSTRAdvanceTax>> advAdvmmap = Maps.newHashMap();
							for(GSTRAdvanceTax eb2cs : eAt) {
								for(GSTRAdvanceTax b2cs : at) {
									if(isNotEmpty(b2cs.getPos()) && isNotEmpty(b2cs.getSplyTy())) {
										b2cskey = b2cs.getPos()+"-"+b2cs.getSplyTy();
										if(!advadjmap.containsKey(b2cskey)) {
											advkeys.add(b2cskey);
										}
										if (isNotEmpty(eb2cs.getPos()) && isNotEmpty(b2cs.getPos()) && isNotEmpty(eb2cs.getSplyTy())
												&& isNotEmpty(b2cs.getSplyTy()) && eb2cs.getPos().equals(b2cs.getPos())
												&& eb2cs.getSplyTy().equals(b2cs.getSplyTy())) {
											List<GSTRItemDetails> newitms = Lists.newArrayList();
											for(GSTRItemDetails item : eb2cs.getItms()) {
												String advkey = "";
												
												for(GSTRItemDetails items : b2cs.getItms()) {
													if(isNotEmpty(b2cs.getPos()) && isNotEmpty(b2cs.getSplyTy()) && isNotEmpty(items.getRt())) {
														advkey = b2cs.getPos()+"-"+b2cs.getSplyTy()+"-"+items.getRt();
														if (isNotEmpty(eb2cs.getPos()) && isNotEmpty(b2cs.getPos()) && isNotEmpty(eb2cs.getSplyTy())
																&& isNotEmpty(b2cs.getSplyTy()) && isNotEmpty(items.getRt())
																&& isNotEmpty(item.getRt()) && eb2cs.getPos().equals(b2cs.getPos())
																&& eb2cs.getSplyTy().equals(b2cs.getSplyTy())
																&& item.getRt().equals(items.getRt())) {
															if(isNotEmpty(items.getAdvAmt())) {
																if(isNotEmpty(item.getAdvAmt())) {
																	item.setAdvAmt(item.getAdvAmt()+items.getAdvAmt());
																} else {
																	item.setAdvAmt(items.getAdvAmt());
																}
															}
															if(isNotEmpty(items.getCamt())) {
																if(isNotEmpty(item.getCamt())) {
																	item.setCamt(item.getCamt()+items.getCamt());
																} else {
																	item.setCamt(items.getCamt());
																}
															}
															if(isNotEmpty(items.getSamt())) {
																if(isNotEmpty(item.getSamt())) {
																	item.setSamt(item.getSamt()+items.getSamt());
																} else {
																	item.setSamt(items.getSamt());
																}
															}
															if(isNotEmpty(items.getIamt())) {
																if(isNotEmpty(item.getIamt())) {
																	item.setIamt(item.getIamt()+items.getIamt());
																} else {
																	item.setIamt(items.getIamt());
																}
															}
															if(isNotEmpty(items.getCsamt())) {
																if(isNotEmpty(item.getCsamt())) {
																	item.setCsamt(item.getCsamt()+items.getCsamt());
																} else {
																	item.setCsamt(items.getCsamt());
																}
															}
														}else {
															if(!advItemmap.containsKey(advkey)) {
																newitms.add(items);
																advItemmap.put(advkey, newitms);
																
															}
														}
													}
												}
											}
											eb2cs.getItms().addAll(newitms);
											newInvs.add(eb2cs);
											advAdvmmap.put(b2cskey, newInvs);
											advadjmap.put(b2cskey, newInvs);
										}else {
											if(!advadjmap.containsKey(b2cskey)) {
											String b2cskeyss="";
											List<String> b2cskeys = Lists.newArrayList();
												List<GSTRItemDetails> newItem = Lists.newArrayList();
												Map<String,GSTRItemDetails> newitemMap = Maps.newHashMap();
												for(GSTRItemDetails itmdet : b2cs.getItms()) {
													b2cskeyss = b2cs.getPos()+"-"+b2cs.getSplyTy()+"-"+itmdet.getRt();
													if(!newitemMap.containsKey(b2cskeyss)) {
														newitemMap.put(b2cskeyss, itmdet);
														b2cskeys.add(b2cskeyss);
													}else {
														GSTRItemDetails itm = newitemMap.get(b2cskey);
														if(isNotEmpty(itmdet.getAdvAmt())) {
															if(isNotEmpty(itm.getAdvAmt())) {
																itm.setAdvAmt(itm.getAdvAmt()+itmdet.getAdvAmt());
															} else {
																itm.setAdvAmt(itmdet.getAdvAmt());
															}
														}
														if(isNotEmpty(itmdet.getCamt())) {
															if(isNotEmpty(itm.getCamt())) {
																itm.setCamt(itm.getCamt()+itmdet.getCamt());
															} else {
																itm.setCamt(itmdet.getCamt());
															}
														}
														if(isNotEmpty(itmdet.getSamt())) {
															if(isNotEmpty(itm.getSamt())) {
																itm.setSamt(itm.getSamt()+itmdet.getSamt());
															} else {
																itm.setSamt(itmdet.getSamt());
															}
														}
														if(isNotEmpty(itmdet.getIamt())) {
															if(isNotEmpty(itm.getIamt())) {
																itm.setIamt(itm.getIamt()+itmdet.getIamt());
															} else {
																itm.setIamt(itmdet.getIamt());
															}
														}
														if(isNotEmpty(itmdet.getCsamt())) {
															if(isNotEmpty(itm.getCsamt())) {
																itm.setCsamt(itm.getCsamt()+itmdet.getCsamt());
															} else {
																itm.setCsamt(itmdet.getCsamt());
															}
														}
														newitemMap.put(b2cskey, itm);
													}
												}
												for(String key : b2cskeys) {
													GSTRItemDetails b2c = newitemMap.get(key);
													newItem.add(b2c);
												}
												b2cs.setItms(newItem);
												newInvs.add(b2cs);
												advAdvmmap.put(b2cskey, newInvs);
												advadjmap.put(b2cskey, newInvs);
											}
										}
									}
								}
							}
							for(String key : advkeys) {
								List<GSTRAdvanceTax> atinvs = advadjmap.get(key);
								if(invoiceParent.getInvtype().equals(TXPA)) {
									invoice.getTxpda().addAll(atinvs);
								}else {
									invoice.getTxpd().addAll(atinvs);
								}
							}
						} else {
							String b2cskey="";
							String b2cskeyds="";
							List<String> b2cskeys = Lists.newArrayList();
							for(GSTRAdvanceTax att : at) {
								b2cskeyds = att.getPos()+"-"+att.getSplyTy();
								List<GSTRItemDetails> newItem = Lists.newArrayList();
								Map<String,GSTRItemDetails> newitemMap = Maps.newHashMap();
								for(GSTRItemDetails itmdet : att.getItms()) {
									b2cskey = att.getPos()+"-"+att.getSplyTy()+"-"+itmdet.getRt();
									if(!newitemMap.containsKey(b2cskey)) {
										newitemMap.put(b2cskey, itmdet);
										b2cskeys.add(b2cskey);
									}else {
										GSTRItemDetails itm = newitemMap.get(b2cskey);
										if(isNotEmpty(itmdet.getAdvAmt())) {
											if(isNotEmpty(itm.getAdvAmt())) {
												itm.setAdvAmt(itm.getAdvAmt()+itmdet.getAdvAmt());
											} else {
												itm.setAdvAmt(itmdet.getAdvAmt());
											}
										}
										if(isNotEmpty(itmdet.getCamt())) {
											if(isNotEmpty(itm.getCamt())) {
												itm.setCamt(itm.getCamt()+itmdet.getCamt());
											} else {
												itm.setCamt(itmdet.getCamt());
											}
										}
										if(isNotEmpty(itmdet.getSamt())) {
											if(isNotEmpty(itm.getSamt())) {
												itm.setSamt(itm.getSamt()+itmdet.getSamt());
											} else {
												itm.setSamt(itmdet.getSamt());
											}
										}
										if(isNotEmpty(itmdet.getIamt())) {
											if(isNotEmpty(itm.getIamt())) {
												itm.setIamt(itm.getIamt()+itmdet.getIamt());
											} else {
												itm.setIamt(itmdet.getIamt());
											}
										}
										if(isNotEmpty(itmdet.getCsamt())) {
											if(isNotEmpty(itm.getCsamt())) {
												itm.setCsamt(itm.getCsamt()+itmdet.getCsamt());
											} else {
												itm.setCsamt(itmdet.getCsamt());
											}
										}
										newitemMap.put(b2cskey, itm);
									}
								}
								for(String key : b2cskeys) {
									GSTRItemDetails b2c = newitemMap.get(key);
									newItem.add(b2c);
								}
								att.setItms(newItem);
							}
							advadjmap.put(b2cskeyds, at);
							if(invoiceParent.getInvtype().equals(TXPA)) {
								invoice.setTxpda(at);
							}else {
								invoice.setTxpd(at);
							}
						}
					}
				//} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(NIL)) {
				} else	if (isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(NIL) || (invoiceParent.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) && isNotEmpty(invoiceParent.getNil()) && isNotEmpty(invoiceParent.getNil().getInv()) && invoiceParent.getNil().getInv().size()>0) || (invoiceParent.getInvtype().equals(MasterGSTConstants.CDNUR) && isNotEmpty(invoiceParent.getNil()) && isNotEmpty(invoiceParent.getNil().getInv()) && invoiceParent.getNil().getInv().size()>0))) {
					if(isNotEmpty(invoiceParent.getNil())){
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						if(isNotEmpty(invoice.getNil()) && isNotEmpty(invoice.getNil().getInv())) {
							List<GSTRNilItems> newInvs = Lists.newArrayList();
							String nilkey="";
							for(GSTRNilItems enil: invoice.getNil().getInv()) {
								for(GSTRNilItems nil: invoiceParent.getNil().getInv()) {
									if(isNotEmpty(nil.getSplyType())) {
									nilkey = nil.getSplyType();
									if(isNotEmpty(enil.getSplyType()) && isNotEmpty(nil.getSplyType()) && enil.getSplyType().equals(nil.getSplyType())) {
										if(isNotEmpty(nil.getNilAmt())) {
											if(isNotEmpty(enil.getNilAmt())) {
												enil.setNilAmt(enil.getNilAmt() + nil.getNilAmt());
											}else {
												enil.setNilAmt(nil.getNilAmt());
											}
										}
										if(isNotEmpty(nil.getExptAmt())) {
											if(isNotEmpty(enil.getExptAmt())) {
												enil.setExptAmt(enil.getExptAmt() + nil.getExptAmt());
											} else {
												enil.setExptAmt(nil.getExptAmt());
											}
										}
										if(isNotEmpty(nil.getNgsupAmt())) {
											if(isNotEmpty(enil.getNgsupAmt())) {
												enil.setNgsupAmt(enil.getNgsupAmt() + nil.getNgsupAmt());
											}else {
												enil.setNgsupAmt(nil.getNgsupAmt());
											}
										}
									}else {
										if(!nilmap.containsKey(nilkey)) {
											newInvs.add(nil);
											nilmap.put(nil.getSplyType(), invoiceParent.getNil());
										}
									}
								}
								}
							}
							invoice.getNil().getInv().addAll(newInvs);
						}else {
							invoice.setNil(invoiceParent.getNil());
							nilmap.put(invoiceParent.getNil().getInv().get(0).getSplyType(), invoiceParent.getNil());
						}
						
						if(invoiceParent.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) && isNotEmpty(((GSTR1) invoiceParent).getCdnr()) && isNotEmpty(((GSTR1) invoiceParent).getCdnr().get(0)) && isNotEmpty(((GSTR1) invoiceParent).getCdnr().get(0).getNt()) && isNotEmpty(((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0)) && isNotEmpty(((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getItms())) {
							List<GSTRCreditDebitNotes> notes = null;
							List<GSTRCreditDebitNotes> eNotes = null;
							if (returntype.equals(GSTR1)) {
								if(invoiceParent.getInvtype().equals(CDNA)) {
									notes = ((GSTR1) invoiceParent).getCdnra();
									eNotes = ((GSTR1) invoice).getCdnra();	
								}else {
									notes = ((GSTR1) invoiceParent).getCdnr();
									eNotes = ((GSTR1) invoice).getCdnr();
								}
							} else if (returntype.equals(GSTR1A)) {
								notes = ((GSTR1A) invoiceParent).getCdnr();
								eNotes = ((GSTR1A) invoice).getCdnr();
							} else if (returntype.equals(GSTR2)) {
								notes = ((GSTR2) invoiceParent).getCdn();
								eNotes = ((GSTR2) invoice).getCdn();
							} else if (returntype.equals(PURCHASE_REGISTER)) {
								notes = ((PurchaseRegister) invoiceParent).getCdn();
								eNotes = ((PurchaseRegister) invoice).getCdn();
							} else if (returntype.equals(GSTR4)) {
								notes = ((GSTR4) invoiceParent).getCdnr();
								eNotes = ((GSTR4) invoice).getCdnr();
							} else if (returntype.equals(GSTR6)) {
								notes = ((GSTR6) invoiceParent).getCdn();
								eNotes = ((GSTR6) invoice).getCdn();
							}
							if (isNotEmpty(notes)) {
								if(isNotEmpty(invoiceParent.getB2b())) {
									invoiceParent.setB2b(Lists.newArrayList());
								}
								for (GSTRCreditDebitNotes gstrcdnrInvoice : notes) {
									GSTRCreditDebitNotes gstrcdnrInvoice1 = new GSTRCreditDebitNotes();
									String ctin = gstrcdnrInvoice.getCtin();
									gstrcdnrInvoice1.setCtin(ctin);
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0))) {
										if(isEmpty(gstrcdnrInvoice.getNt().get(0).getInvTyp())) {
											gstrcdnrInvoice1.getNt().get(0).setInvTyp("R");
										}else {
											if("SEWPC".equalsIgnoreCase(gstrcdnrInvoice.getNt().get(0).getInvTyp())) {
												gstrcdnrInvoice1.getNt().get(0).setInvTyp("SEWP");
											}else {
												gstrcdnrInvoice1.getNt().get(0).setInvTyp(gstrcdnrInvoice.getNt().get(0).getInvTyp());
											}
											
										}
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0))) {
										if(isEmpty(gstrcdnrInvoice.getNt().get(0).getRchrg())){
											gstrcdnrInvoice1.getNt().get(0).setRchrg("N");
										}else {
											gstrcdnrInvoice1.getNt().get(0).setRchrg(gstrcdnrInvoice.getNt().get(0).getRchrg());
										}
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0))) {
										if(isEmpty(gstrcdnrInvoice.getNt().get(0).getPos())) {
											String stateTin = getStateCode(invoiceParent.getStatename());
											gstrcdnrInvoice1.getNt().get(0).setPos(stateTin);
										}else {
											gstrcdnrInvoice1.getNt().get(0).setPos(gstrcdnrInvoice.getNt().get(0).getPos());
										}
									}
									if(invoiceParent.getInvtype().equals(CDNA)) {
										if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getOntNum())) {
											gstrcdnrInvoice1.getNt().get(0).setOntNum(gstrcdnrInvoice.getNt().get(0).getOntNum());
										}
										if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getOntDt())) {
											gstrcdnrInvoice1.getNt().get(0).setOntDt(gstrcdnrInvoice.getNt().get(0).getOntDt());
										}
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtNum())) {
										gstrcdnrInvoice1.getNt().get(0).setNtNum(gstrcdnrInvoice.getNt().get(0).getNtNum());
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtDt())) {
										gstrcdnrInvoice1.getNt().get(0).setNtDt(gstrcdnrInvoice.getNt().get(0).getNtDt());
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtty())) {
										gstrcdnrInvoice1.getNt().get(0).setNtty(gstrcdnrInvoice.getNt().get(0).getNtty());
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getVal())) {
										gstrcdnrInvoice1.getNt().get(0).setVal(gstrcdnrInvoice.getNt().get(0).getVal());
									}
									if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getItms())) {
										gstrcdnrInvoice1.getNt().get(0).setItms(gstrcdnrInvoice.getNt().get(0).getItms());
									}
									boolean present = false;
									if (isNotEmpty(eNotes)) {
										for (GSTRCreditDebitNotes eInvs : eNotes) {
											if (isNotEmpty(ctin) && isNotEmpty(gstrcdnrInvoice1.getNt())
													&& isNotEmpty(eInvs.getCtin()) && eInvs.getCtin().equals(ctin)) {
												present = true;
												eInvs.getNt().addAll(gstrcdnrInvoice1.getNt());
											}
										}
									}
									if (!present) {
										// gstrcdnrInvoice.setErrorMsg("");
										if (returntype.equals(GSTR1)) {
											if(invoiceParent.getInvtype().equals(CDNA)) {
												((GSTR1) invoice).getCdnra().add(gstrcdnrInvoice1);
											}else {
												((GSTR1) invoice).getCdnr().add(gstrcdnrInvoice1);
											}
										} else if (returntype.equals(GSTR1A)) {
											((GSTR1A) invoice).getCdnr().add(gstrcdnrInvoice);
										} else if (returntype.equals(GSTR2)) {
											((GSTR2) invoice).getCdn().add(gstrcdnrInvoice);
										} else if (returntype.equals(PURCHASE_REGISTER)) {
											((PurchaseRegister) invoice).getCdn().add(gstrcdnrInvoice);
										} else if (returntype.equals(GSTR4)) {
											((GSTR4) invoice).getCdnr().add(gstrcdnrInvoice);
										} else if (returntype.equals(GSTR6)) {
											((GSTR6) invoice).getCdn().add(gstrcdnrInvoice);
										}
									}
								}
								List<GSTRCreditDebitNotes> cnotes = null;
								if(invoiceParent.getInvtype().equals(CDNA)) {
									cnotes  = ((GSTR1) invoice).getCdnra();
								}else {
									cnotes  = ((GSTR1) invoice).getCdnr();
								}
								for (GSTRCreditDebitNotes eInvs : cnotes) {
									for(GSTRInvoiceDetails invoiceDetails : eInvs.getNt()) {
										if(isNotEmpty(invoiceDetails.getChksum())) {
											invoiceDetails.setChksum(null);
										}
										if(isNotEmpty(invoiceDetails.getUpdby())) {
											invoiceDetails.setUpdby(null);
										}
										if(isNotEmpty(invoiceDetails.getCflag())) {
											invoiceDetails.setCflag(null);
										}
										consolidatedItemRate(invoiceDetails);
									}
								}
							}
						}else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(CDNUR) && isNotEmpty(invoiceParent.getCdnur()) && isNotEmpty(invoiceParent.getCdnur().get(0)) && isNotEmpty(invoiceParent.getCdnur().get(0).getItms()) && invoiceParent.getCdnur().get(0).getItms().size()>0) {
							if (isNotEmpty(invoiceParent.getCdnur())) {
								if(isNotEmpty(invoiceParent.getB2b())) {
									invoiceParent.setB2b(Lists.newArrayList());
								}
								
								GSTRInvoiceDetails cdnur = new GSTRInvoiceDetails();
								
								if(isNotEmpty(invoiceParent.getCdnur()) && isNotEmpty(invoiceParent.getCdnur().get(0))) {
									if(isNotEmpty(invoiceParent.getCdnur().get(0).getItms())) {
										cdnur.setItms(invoiceParent.getCdnur().get(0).getItms());
									}
									if(isNotEmpty(invoiceParent.getCdnur().get(0).getVal())) {
										cdnur.setVal(invoiceParent.getCdnur().get(0).getVal());
									}
									if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtty())) {
										cdnur.setNtty(invoiceParent.getCdnur().get(0).getNtty());
									}
									if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtNum())) {
										cdnur.setNtNum(invoiceParent.getCdnur().get(0).getNtNum());
									}
									if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtDt())) {
										cdnur.setNtDt(invoiceParent.getCdnur().get(0).getNtDt());
									}
									String typ = "";
									if(isNotEmpty(invoiceParent.getCdnur().get(0).getTyp())) {
										typ = invoiceParent.getCdnur().get(0).getTyp();
										cdnur.setTyp(typ);
									}
									if(isNotEmpty(typ) && typ.equalsIgnoreCase("B2CL")) {
										if(isEmpty(invoiceParent.getCdnur().get(0).getPos())) {
											String stateTin = getStateCode(invoiceParent.getStatename());
											cdnur.setPos(stateTin);
										}else {
											cdnur.setPos(invoiceParent.getCdnur().get(0).getPos());
										}
									}
								}
								List<GSTRInvoiceDetails> cdnurList = Lists.newArrayList();
								cdnurList.add(cdnur);
								if (isEmpty(invoice.getCdnur())) {
									invoice.setCdnur(cdnurList);
								} else {
									invoice.getCdnur().addAll(cdnurList);
								}
								for (GSTRInvoiceDetails invoiceDetails : invoice.getCdnur()) {
									if(isNotEmpty(invoiceDetails.getChksum())) {
										invoiceDetails.setChksum(null);
									}
									if(isNotEmpty(invoiceDetails.getUpdby())) {
										invoiceDetails.setUpdby(null);
									}
									if(isNotEmpty(invoiceDetails.getCflag())) {
										invoiceDetails.setCflag(null);
									}
									consolidatedItemRate(invoiceDetails);
								}
							}
						}
					}
				} else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(CDNUR)) {
					if (isNotEmpty(invoiceParent.getCdnur())) {
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						
						GSTRInvoiceDetails cdnur = new GSTRInvoiceDetails();
						
						if(isNotEmpty(invoiceParent.getCdnur()) && isNotEmpty(invoiceParent.getCdnur().get(0))) {
							if(isNotEmpty(invoiceParent.getCdnur().get(0).getItms())) {
								cdnur.setItms(invoiceParent.getCdnur().get(0).getItms());
							}
							if(isNotEmpty(invoiceParent.getCdnur().get(0).getVal())) {
								cdnur.setVal(invoiceParent.getCdnur().get(0).getVal());
							}
							if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtty())) {
								cdnur.setNtty(invoiceParent.getCdnur().get(0).getNtty());
							}
							if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtNum())) {
								cdnur.setNtNum(invoiceParent.getCdnur().get(0).getNtNum());
							}
							if(isNotEmpty(invoiceParent.getCdnur().get(0).getNtDt())) {
								cdnur.setNtDt(invoiceParent.getCdnur().get(0).getNtDt());
							}
							String typ = "";
							if(isNotEmpty(invoiceParent.getCdnur().get(0).getTyp())) {
								typ = invoiceParent.getCdnur().get(0).getTyp();
								cdnur.setTyp(typ);
							}
							if(isNotEmpty(typ) && typ.equalsIgnoreCase("B2CL")) {
								if(isEmpty(invoiceParent.getCdnur().get(0).getPos())) {
									String stateTin = getStateCode(invoiceParent.getStatename());
									cdnur.setPos(stateTin);
								}else {
									cdnur.setPos(invoiceParent.getCdnur().get(0).getPos());
								}
							}
						}
						List<GSTRInvoiceDetails> cdnurList = Lists.newArrayList();
						cdnurList.add(cdnur);
						if (isEmpty(invoice.getCdnur())) {
							invoice.setCdnur(cdnurList);
						} else {
							invoice.getCdnur().addAll(cdnurList);
						}
						for (GSTRInvoiceDetails invoiceDetails : invoice.getCdnur()) {
							if(isNotEmpty(invoiceDetails.getChksum())) {
								invoiceDetails.setChksum(null);
							}
							if(isNotEmpty(invoiceDetails.getUpdby())) {
								invoiceDetails.setUpdby(null);
							}
							if(isNotEmpty(invoiceDetails.getCflag())) {
								invoiceDetails.setCflag(null);
							}
							consolidatedItemRate(invoiceDetails);
						}
					}
				}else if (isNotEmpty(invoiceParent.getInvtype()) && invoiceParent.getInvtype().equals(CDNURA)) {
					if (isNotEmpty(((GSTR1) invoiceParent).getCdnura())) {
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						GSTRInvoiceDetails cdnur = new GSTRInvoiceDetails();
						if(isNotEmpty(((GSTR1) invoiceParent).getCdnura()) && isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0))) {
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getItms())) {
								cdnur.setItms(((GSTR1) invoiceParent).getCdnura().get(0).getItms());
							}
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getVal())) {
								cdnur.setVal(((GSTR1) invoiceParent).getCdnura().get(0).getVal());
							}
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getOntNum())) {
								cdnur.setOntNum(((GSTR1) invoiceParent).getCdnura().get(0).getOntNum());
							}
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getOntDt())) {
								cdnur.setOntDt(((GSTR1) invoiceParent).getCdnura().get(0).getOntDt());
							}
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getNtty())) {
								cdnur.setNtty(((GSTR1) invoiceParent).getCdnura().get(0).getNtty());
							}
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getNtNum())) {
								cdnur.setNtNum(((GSTR1) invoiceParent).getCdnura().get(0).getNtNum());
							}
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getNtDt())) {
								cdnur.setNtDt(((GSTR1) invoiceParent).getCdnura().get(0).getNtDt());
							}
							String typ = "";
							if(isNotEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getTyp())) {
								typ = ((GSTR1) invoiceParent).getCdnura().get(0).getTyp();
								cdnur.setTyp(typ);
							}
							if(isNotEmpty(typ) && typ.equalsIgnoreCase("B2CL")) {
								if(isEmpty(((GSTR1) invoiceParent).getCdnura().get(0).getPos())) {
									String stateTin = getStateCode(invoiceParent.getStatename());
									cdnur.setPos(stateTin);
								}
							}
						}
						List<GSTRInvoiceDetails> cdnuraList = Lists.newArrayList();
						cdnuraList.add(cdnur);
						if (isEmpty(((GSTR1) invoice).getCdnura())) {
							((GSTR1) invoice).setCdnura(cdnuraList);
						} else {
							((GSTR1) invoice).getCdnura().addAll(cdnuraList);
						}
						for (GSTRInvoiceDetails invoiceDetails : ((GSTR1) invoice).getCdnura()) {
							if(isNotEmpty(invoiceDetails.getChksum())) {
								invoiceDetails.setChksum(null);
							}
							if(isNotEmpty(invoiceDetails.getUpdby())) {
								invoiceDetails.setUpdby(null);
							}
							if(isNotEmpty(invoiceDetails.getCflag())) {
								invoiceDetails.setCflag(null);
							}
							consolidatedItemRate(invoiceDetails);
						}
					}
				} else if (isNotEmpty(invoiceParent.getInvtype()) && (invoiceParent.getInvtype().equals(CREDIT_DEBIT_NOTES) || invoiceParent.getInvtype().equals(CDNA))) {
					List<GSTRCreditDebitNotes> notes = null;
					List<GSTRCreditDebitNotes> eNotes = null;
					if (returntype.equals(GSTR1)) {
						if(invoiceParent.getInvtype().equals(CDNA)) {
							notes = ((GSTR1) invoiceParent).getCdnra();
							eNotes = ((GSTR1) invoice).getCdnra();	
						}else {
							notes = ((GSTR1) invoiceParent).getCdnr();
							eNotes = ((GSTR1) invoice).getCdnr();
						}
					} else if (returntype.equals(GSTR1A)) {
						notes = ((GSTR1A) invoiceParent).getCdnr();
						eNotes = ((GSTR1A) invoice).getCdnr();
					} else if (returntype.equals(GSTR2)) {
						notes = ((GSTR2) invoiceParent).getCdn();
						eNotes = ((GSTR2) invoice).getCdn();
					} else if (returntype.equals(PURCHASE_REGISTER)) {
						notes = ((PurchaseRegister) invoiceParent).getCdn();
						eNotes = ((PurchaseRegister) invoice).getCdn();
					} else if (returntype.equals(GSTR4)) {
						notes = ((GSTR4) invoiceParent).getCdnr();
						eNotes = ((GSTR4) invoice).getCdnr();
					} else if (returntype.equals(GSTR6)) {
						notes = ((GSTR6) invoiceParent).getCdn();
						eNotes = ((GSTR6) invoice).getCdn();
					}
					if (isNotEmpty(notes)) {
						if(isNotEmpty(invoiceParent.getB2b())) {
							invoiceParent.setB2b(Lists.newArrayList());
						}
						for (GSTRCreditDebitNotes gstrcdnrInvoice : notes) {
							GSTRCreditDebitNotes gstrcdnrInvoice1 = new GSTRCreditDebitNotes();
							String ctin = gstrcdnrInvoice.getCtin();
							gstrcdnrInvoice1.setCtin(ctin);
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0))) {
								if(isEmpty(gstrcdnrInvoice.getNt().get(0).getInvTyp())) {
									gstrcdnrInvoice1.getNt().get(0).setInvTyp("R");
								}else {
									if("SEWPC".equalsIgnoreCase(gstrcdnrInvoice.getNt().get(0).getInvTyp())) {
										gstrcdnrInvoice1.getNt().get(0).setInvTyp("SEWP");
									}else {
										gstrcdnrInvoice1.getNt().get(0).setInvTyp(gstrcdnrInvoice.getNt().get(0).getInvTyp());
									}
									
								}
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0))) {
								if(isEmpty(gstrcdnrInvoice.getNt().get(0).getRchrg())){
									gstrcdnrInvoice1.getNt().get(0).setRchrg("N");
								}else {
									gstrcdnrInvoice1.getNt().get(0).setRchrg(gstrcdnrInvoice.getNt().get(0).getRchrg());
								}
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0))) {
								if(isEmpty(gstrcdnrInvoice.getNt().get(0).getPos())) {
									String stateTin = getStateCode(invoiceParent.getStatename());
									gstrcdnrInvoice1.getNt().get(0).setPos(stateTin);
								}else {
									gstrcdnrInvoice1.getNt().get(0).setPos(gstrcdnrInvoice.getNt().get(0).getPos());
								}
							}
							if(invoiceParent.getInvtype().equals(CDNA)) {
								if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getOntNum())) {
									gstrcdnrInvoice1.getNt().get(0).setOntNum(gstrcdnrInvoice.getNt().get(0).getOntNum());
								}
								if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getOntDt())) {
									gstrcdnrInvoice1.getNt().get(0).setOntDt(gstrcdnrInvoice.getNt().get(0).getOntDt());
								}
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtNum())) {
								gstrcdnrInvoice1.getNt().get(0).setNtNum(gstrcdnrInvoice.getNt().get(0).getNtNum());
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtDt())) {
								gstrcdnrInvoice1.getNt().get(0).setNtDt(gstrcdnrInvoice.getNt().get(0).getNtDt());
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getNtty())) {
								gstrcdnrInvoice1.getNt().get(0).setNtty(gstrcdnrInvoice.getNt().get(0).getNtty());
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getVal())) {
								gstrcdnrInvoice1.getNt().get(0).setVal(gstrcdnrInvoice.getNt().get(0).getVal());
							}
							if(isNotEmpty(gstrcdnrInvoice.getNt()) && isNotEmpty(gstrcdnrInvoice.getNt().get(0)) && isNotEmpty(gstrcdnrInvoice.getNt().get(0).getItms())) {
								gstrcdnrInvoice1.getNt().get(0).setItms(gstrcdnrInvoice.getNt().get(0).getItms());
							}
							boolean present = false;
							if (isNotEmpty(eNotes)) {
								for (GSTRCreditDebitNotes eInvs : eNotes) {
									if (isNotEmpty(ctin) && isNotEmpty(gstrcdnrInvoice1.getNt())
											&& isNotEmpty(eInvs.getCtin()) && eInvs.getCtin().equals(ctin)) {
										present = true;
										eInvs.getNt().addAll(gstrcdnrInvoice1.getNt());
									}
								}
							}
							if (!present) {
								// gstrcdnrInvoice.setErrorMsg("");
								if (returntype.equals(GSTR1)) {
									if(invoiceParent.getInvtype().equals(CDNA)) {
										((GSTR1) invoice).getCdnra().add(gstrcdnrInvoice1);
									}else {
										((GSTR1) invoice).getCdnr().add(gstrcdnrInvoice1);
									}
								} else if (returntype.equals(GSTR1A)) {
									((GSTR1A) invoice).getCdnr().add(gstrcdnrInvoice);
								} else if (returntype.equals(GSTR2)) {
									((GSTR2) invoice).getCdn().add(gstrcdnrInvoice);
								} else if (returntype.equals(PURCHASE_REGISTER)) {
									((PurchaseRegister) invoice).getCdn().add(gstrcdnrInvoice);
								} else if (returntype.equals(GSTR4)) {
									((GSTR4) invoice).getCdnr().add(gstrcdnrInvoice);
								} else if (returntype.equals(GSTR6)) {
									((GSTR6) invoice).getCdn().add(gstrcdnrInvoice);
								}
							}
						}
						List<GSTRCreditDebitNotes> cnotes = null;
						if(invoiceParent.getInvtype().equals(CDNA)) {
							cnotes  = ((GSTR1) invoice).getCdnra();
						}else {
							cnotes  = ((GSTR1) invoice).getCdnr();
						}
						for (GSTRCreditDebitNotes eInvs : cnotes) {
							for(GSTRInvoiceDetails invoiceDetails : eInvs.getNt()) {
								if(isNotEmpty(invoiceDetails.getChksum())) {
									invoiceDetails.setChksum(null);
								}
								if(isNotEmpty(invoiceDetails.getUpdby())) {
									invoiceDetails.setUpdby(null);
								}
								if(isNotEmpty(invoiceDetails.getCflag())) {
									invoiceDetails.setCflag(null);
								}
								consolidatedItemRate(invoiceDetails);
							}
						}
					}
				}
			}
		}
		logger.debug(CLASSNAME + method + " Updated GST Invoice : {}", invoice);
		List<HSNData> hsnDataList = Lists.newArrayList();
		Map<String, String> hsnMap = configService.getHSNMap();
		Map<String, String> sacMap = configService.getSACMap();
		List<UQCConfig> uqcList = configService.getUQCs();
		List<String> fpList = Lists.newArrayList();
		if(iMonth == 1 || iMonth == 2 || iMonth == 3) {
			fpList.add("01"+iYear);
			fpList.add("02"+iYear);
			fpList.add("03"+iYear);
		} else if(iMonth == 4 || iMonth == 5 || iMonth == 6) {
			fpList.add("04"+iYear);
			fpList.add("05"+iYear);
			fpList.add("06"+iYear);
		} else if(iMonth == 7 || iMonth == 8 || iMonth == 9) {
			fpList.add("07"+iYear);
			fpList.add("08"+iYear);
			fpList.add("09"+iYear);
		} else if(iMonth == 10 || iMonth == 11 || iMonth == 12) {
			fpList.add("10"+iYear);
			fpList.add("11"+iYear);
			fpList.add("12"+iYear);
		}
		List<? extends InvoiceParent> savedInvoices = Lists.newArrayList();
		List<String> gstStatus = Lists.newArrayList();
		gstStatus.add(MasterGSTConstants.GST_STATUS_SUCCESS);
		gstStatus.add("In Progress");
		if (returntype.equals(GSTR1)) {
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				savedInvoices = gstr1Repository.findByClientidAndGstStatusInAndFpIn(client.getId().toString(),
						gstStatus, fpList);
			} else {
				savedInvoices = gstr1Repository.findByClientidAndFpAndGstStatusIn(client.getId().toString(),
						invoice.getFp(), gstStatus);
			}
		} else if (returntype.equals(GSTR2)) {
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				savedInvoices = gstr2Repository.findByClientidAndGstStatusAndFpIn(client.getId().toString(),
						MasterGSTConstants.GST_STATUS_SUCCESS, fpList);
			} else {
				savedInvoices = gstr2Repository.findByClientidAndFpAndGstStatus(client.getId().toString(),
						invoice.getFp(), MasterGSTConstants.GST_STATUS_SUCCESS);
			}
		} else if (returntype.equals(GSTR4)) {
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				savedInvoices = gstr4Repository.findByClientidAndGstStatusAndFpIn(client.getId().toString(),
						MasterGSTConstants.GST_STATUS_SUCCESS, fpList);
			} else {
				savedInvoices = gstr4Repository.findByClientidAndFpAndGstStatus(client.getId().toString(),
						invoice.getFp(), MasterGSTConstants.GST_STATUS_SUCCESS);
			}
		} else if (returntype.equals(GSTR5)) {
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				savedInvoices = gstr5Repository.findByClientidAndGstStatusAndFpIn(client.getId().toString(),
						MasterGSTConstants.GST_STATUS_SUCCESS, fpList);
			} else {
				savedInvoices = gstr5Repository.findByClientidAndFpAndGstStatus(client.getId().toString(),
						invoice.getFp(), MasterGSTConstants.GST_STATUS_SUCCESS);
			}
		} else if (returntype.equals(GSTR6)) {
			if (isNotEmpty(client.getFilingOption())
					&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
				savedInvoices = gstr6Repository.findByClientidAndGstStatusAndFpIn(client.getId().toString(),
						MasterGSTConstants.GST_STATUS_SUCCESS, fpList);
			} else {
				savedInvoices = gstr6Repository.findByClientidAndFpAndGstStatus(client.getId().toString(),
						invoice.getFp(), MasterGSTConstants.GST_STATUS_SUCCESS);
			}
		}
		
		if (!returntype.equals(GSTR1A)) {
			List<String> processedInvoices = Lists.newArrayList();
			for (InvoiceParent invoiceParent : invoices) {
				if(yrcode.contains(yearCode) && !monthcode.contains(month)) {
					populateNewHSNList(hsnDataList, invoiceParent, hsnMap, sacMap, uqcList, returntype);
				}else {
					populateHSNList(hsnDataList, invoiceParent, hsnMap, sacMap, uqcList, returntype);
				}
				processedInvoices.add(invoiceParent.getId().toString());
			}
			if(isNotEmpty(savedInvoices)) {
				for (InvoiceParent invoiceParent : savedInvoices) {
					if(!processedInvoices.contains(invoiceParent.getId().toString())) {
						if(yrcode.contains(yearCode) && !monthcode.contains(month)) {
							populateNewHSNList(hsnDataList, invoiceParent, hsnMap, sacMap, uqcList, returntype);
						}else {
							populateHSNList(hsnDataList, invoiceParent, hsnMap, sacMap, uqcList, returntype);
						}
						processedInvoices.add(invoiceParent.getId().toString());
					}
				}
			}
			HSNSummary hsn = new HSNSummary();
			String hsnscFp = month + iYear;
			HSNDetails hsndetails = hsnSummaryRepository.findByClientidAndReturnPeriodAndReturnType(client.getId().toString(),hsnscFp,returntype);
			if(isNotEmpty(hsndetails) && hsndetails.getHsnData().size()>0) {
				if(yrcode.contains(yearCode) && !monthcode.contains(month)) {
					if(isNotEmpty(hsndetails.getImporttype()) && !"Tally".equalsIgnoreCase(hsndetails.getImporttype())) {
						Map<String,HSNData> data = Maps.newHashMap();
						List<String> hsnlist = Lists.newArrayList();
						for(HSNData hsndata : hsndetails.getHsnData()) {
							if(isNotEmpty(data)) {
								HSNData hsndt = data.get(hsndata.getHsnSc()+hsndata.getUqc()+hsndata.getRt());
								if(isNotEmpty(hsndt)) {
									if(isNotEmpty(hsndata.getTxval())) {
										hsndt.setTxval(hsndt.getTxval()+Double.parseDouble(df2.format(hsndata.getTxval())));
									}
									if(isNotEmpty(hsndata.getVal())) {
										hsndt.setVal(0d);
									}
									if(isNotEmpty(hsndata.getIamt())) {
										hsndt.setIamt(hsndt.getIamt()+Double.parseDouble(df2.format(hsndata.getIamt())));
									}
									if(isNotEmpty(hsndata.getCamt())) {
										hsndt.setCamt(hsndt.getCamt()+Double.parseDouble(df2.format(hsndata.getCamt())));
									}
									if(isNotEmpty(hsndata.getSamt())) {
										hsndt.setSamt(hsndt.getSamt()+Double.parseDouble(df2.format(hsndata.getSamt())));
									}
									if(isNotEmpty(hsndata.getCsamt())) {
										hsndt.setCsamt(hsndt.getCsamt()+Double.parseDouble(df2.format(hsndata.getCsamt())));
									}
									data.put(hsndata.getHsnSc()+hsndata.getUqc()+hsndata.getRt(), hsndt);
								}else {
									if(isNotEmpty(hsndata.getTxval())) {
										hsndata.setTxval(Double.parseDouble(df2.format(hsndata.getTxval())));
									}
									if(isNotEmpty(hsndata.getVal())) {
										hsndata.setVal(0d);
									}
									if(isNotEmpty(hsndata.getIamt())) {
										hsndata.setIamt(Double.parseDouble(df2.format(hsndata.getIamt())));
									}
									if(isNotEmpty(hsndata.getCamt())) {
										hsndata.setCamt(Double.parseDouble(df2.format(hsndata.getCamt())));
									}
									if(isNotEmpty(hsndata.getSamt())) {
										hsndata.setSamt(Double.parseDouble(df2.format(hsndata.getSamt())));
									}
									if(isNotEmpty(hsndata.getCsamt())) {
										hsndata.setCsamt(Double.parseDouble(df2.format(hsndata.getCsamt())));
									}
									hsnlist.add(hsndata.getHsnSc()+hsndata.getUqc()+hsndata.getRt());
									data.put(hsndata.getHsnSc()+hsndata.getUqc()+hsndata.getRt(), hsndata);
								}
							}else {
								if(isNotEmpty(hsndata.getTxval())) {
									hsndata.setTxval(Double.parseDouble(df2.format(hsndata.getTxval())));
								}
								if(isNotEmpty(hsndata.getVal())) {
									hsndata.setVal(0d);
								}
								if(isNotEmpty(hsndata.getIamt())) {
									hsndata.setIamt(Double.parseDouble(df2.format(hsndata.getIamt())));
								}
								if(isNotEmpty(hsndata.getCamt())) {
									hsndata.setCamt(Double.parseDouble(df2.format(hsndata.getCamt())));
								}
								if(isNotEmpty(hsndata.getSamt())) {
									hsndata.setSamt(Double.parseDouble(df2.format(hsndata.getSamt())));
								}
								if(isNotEmpty(hsndata.getCsamt())) {
									hsndata.setCsamt(Double.parseDouble(df2.format(hsndata.getCsamt())));
								}
								hsnlist.add(hsndata.getHsnSc()+hsndata.getUqc()+hsndata.getRt());
								data.put(hsndata.getHsnSc()+hsndata.getUqc()+hsndata.getRt(), hsndata);
							}
						}
						List<HSNData> consolidatedhsnlist = Lists.newArrayList();
						for(String hsnkey : hsnlist) {
							consolidatedhsnlist.add(data.get(hsnkey));
						}
						hsn.setData(consolidatedhsnlist);
					}else {
						List<HSNData> hsnDataListt = Lists.newArrayList();
						hsn.setData(hsnDataListt);
					}
				}else {
					for(HSNData hsndata : hsndetails.getHsnData()) {
						if(isNotEmpty(hsndata.getTxval())) {
							hsndata.setTxval(Double.parseDouble(df2.format(hsndata.getTxval())));
						}
						if(isNotEmpty(hsndata.getVal())) {
							hsndata.setVal(Double.parseDouble(df2.format(hsndata.getVal())));
						}
						if(isNotEmpty(hsndata.getIamt())) {
							hsndata.setIamt(Double.parseDouble(df2.format(hsndata.getIamt())));
						}
						if(isNotEmpty(hsndata.getCamt())) {
							hsndata.setCamt(Double.parseDouble(df2.format(hsndata.getCamt())));
						}
						if(isNotEmpty(hsndata.getSamt())) {
							hsndata.setSamt(Double.parseDouble(df2.format(hsndata.getSamt())));
						}
						if(isNotEmpty(hsndata.getCsamt())) {
							hsndata.setCsamt(Double.parseDouble(df2.format(hsndata.getCsamt())));
						}
					}
					hsn.setData(hsndetails.getHsnData());
				}
			}else {
				for(HSNData hsndata : hsnDataList) {
					if(isNotEmpty(hsndata.getTxval())) {
						hsndata.setTxval(Double.parseDouble(df2.format(hsndata.getTxval())));
					}
					if(isNotEmpty(hsndata.getVal())) {
						hsndata.setVal(Double.parseDouble(df2.format(hsndata.getVal())));
					}
					if(isNotEmpty(hsndata.getIamt())) {
						hsndata.setIamt(Double.parseDouble(df2.format(hsndata.getIamt())));
					}
					if(isNotEmpty(hsndata.getCamt())) {
						hsndata.setCamt(Double.parseDouble(df2.format(hsndata.getCamt())));
					}
					if(isNotEmpty(hsndata.getSamt())) {
						hsndata.setSamt(Double.parseDouble(df2.format(hsndata.getSamt())));
					}
					if(isNotEmpty(hsndata.getCsamt())) {
						hsndata.setCsamt(Double.parseDouble(df2.format(hsndata.getCsamt())));
					}
				}
			hsn.setData(hsnDataList);
			}
			/* String retPeriod = invoice.getFp();
			int imonth = Integer.parseInt(retPeriod.substring(0, 1));
			int iyear = Integer.parseInt(retPeriod.substring(2)) - 1;
			String strYear = "";
			if (imonth < 4) {
				if (iyear == 2016 || iyear == 2017) {
					if (imonth < 4) {
						strYear = "APR2017-JUN2017";
					} else {
						strYear = "2017-2018";
					}
				} else {
					iyear = iyear - 1;
					strYear = iyear + "-" + (iyear + 1);
				}
			} else {
				strYear = iyear + "-" + (iyear + 1);
			}
			String filingoption = MasterGSTConstants.FILING_OPTION_MONTHLY;
			if(isNotEmpty(client) && isNotEmpty(client.getFilingOption())) {
				filingoption = client.getFilingOption();
			}
			if(isNotEmpty(client) && isNotEmpty(client.getFilingoptions())) {
				//String strYear = tYear+"";
				for(FilingOptions filingOptions : client.getFilingoptions()) {
					if(isNotEmpty(filingOptions)) {
						if(strYear.equals(filingOptions.getYear()) ) {
							filingoption = filingOptions.getOption();
						}
						if("APR2017-JUN2017".equals(filingOptions.getYear())) {
							filingoption = filingOptions.getOption();
						}
					}
				}
			}
			List<String> qmonthcode = Lists.newArrayList();
			qmonthcode.add("03");
			qmonthcode.add("06");
			qmonthcode.add("09");
			qmonthcode.add("12");
			if(filingoption.equalsIgnoreCase(MasterGSTConstants.FILING_OPTION_MONTHLY)) {
				invoice.setHsn(hsn);
			}else if(filingoption.equalsIgnoreCase(MasterGSTConstants.FILING_OPTION_QUARTERLY) && qmonthcode.contains(month)) {
				invoice.setHsn(hsn);
			}*/
			invoice.setHsn(hsn);
		}
		logger.debug(CLASSNAME + method + END);
		return invoice;
	}
	
	public void updateCategory(String returnType, int month, int year) {
		List<InvoiceParent> modifiedList = Lists.newArrayList();
		List<? extends InvoiceParent> invoices = null;
		Map<String, String> hsnMap = configService.getHSNMap();
		Map<String, String> sacMap = configService.getSACMap();
		Calendar cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		Date stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month + 1, 0, 23, 59, 59);
		Date endDate = new java.util.Date(cal.getTimeInMillis());
		if (returnType.equals(GSTR1)) {
			invoices = gstr1Repository.findByDateofinvoiceBetween(stDate, endDate);
		}
		if(isEmpty(invoices)) {
			return;
		}
		for(InvoiceParent invoiceParent : invoices) {
			for (Item item : invoiceParent.getItems()) {
				String description = null;
				String code = item.getHsn();
				if (isEmpty(item.getCategory()) && isNotEmpty(code)) {
					if(code.contains(" : ")) {
						String hsncode[]= code.split(" : ");
						code = hsncode[0];
						description = hsncode[1];
					} 
					if (hsnMap.containsKey(code)) {
						item.setCategory(MasterGSTConstants.GOODS);
						modifiedList.add(invoiceParent);
						description = hsnMap.get(code);
					} else if (hsnMap.containsValue(code)) {
						for (String key : hsnMap.keySet()) {
							if (hsnMap.get(key).equals(code)) {
								code = key;
								description = hsnMap.get(key);
								item.setCategory(MasterGSTConstants.GOODS);
								modifiedList.add(invoiceParent);
								break;
							}
						}
					} else if (sacMap.containsKey(code)) {
						item.setCategory(MasterGSTConstants.SERVICES);
						modifiedList.add(invoiceParent);
						description = sacMap.get(code);
					} else if (sacMap.containsValue(code)) {
						for (String key : sacMap.keySet()) {
							if (sacMap.get(key).equals(code)) {
								code = key;
								description = sacMap.get(key);
								item.setCategory(MasterGSTConstants.SERVICES);
								modifiedList.add(invoiceParent);
								break;
							}
						}
					}
					if (isEmpty(description)) {
						for (String key : hsnMap.keySet()) {
							if (hsnMap.get(key).endsWith(" : " + code)) {
								code = key;
								description = hsnMap.get(key);
								item.setCategory(MasterGSTConstants.GOODS);
								modifiedList.add(invoiceParent);
								break;
							}
						}
					}
					if (isEmpty(description)) {
						for (String key : sacMap.keySet()) {
							if (sacMap.get(key).endsWith(" : " + code)) {
								code = key;
								description = sacMap.get(key);
								item.setCategory(MasterGSTConstants.SERVICES);
								modifiedList.add(invoiceParent);
								break;
							}
						}
					}
				}
			}
		}
		if(isNotEmpty(modifiedList)) {
			saveInvoices(modifiedList, returnType);
		}
	}
	
	public void populateHSNList(List<HSNData> hsnDataList, InvoiceParent invoiceParent, Map<String, String> hsnMap,
			Map<String, String> sacMap, List<UQCConfig> uqcList, final String returnType) {
		if (isNotEmpty(invoiceParent.getItems())) {
			for (Item item : invoiceParent.getItems()) {
				String description = null;
				String uqc = "OTH";
				
				String code = item.getHsn();
				if (isNotEmpty(code)) {
					if(code.contains(" : ")) {
						String hsncode[]= code.split(" : ");
						code = hsncode[0];
						description = hsncode[1];
					} else {
						if (hsnMap.containsKey(code)) {
							String hsndet = hsnMap.get(code);
							if(hsndet.contains(" : ")) {
								String hsncode[]= hsndet.split(" : ");
								description = hsncode[1];
							}else {
								description = hsndet;
							}
						} else if (hsnMap.containsValue(code)) {
							for (String key : hsnMap.keySet()) {
								if (hsnMap.get(key).equals(code)) {
									code = key;
									String hsndet = hsnMap.get(key);
									if(hsndet.contains(" : ")) {
										String hsncode[]= hsndet.split(" : ");
										description = hsncode[1];
									}else {
										description = hsndet;
									}
									break;
								}
							}
						} else if (sacMap.containsKey(code)) {
							String sacdet = sacMap.get(code);
							if(sacdet.contains(" : ")) {
								String saccode[]= sacdet.split(" : ");
								description = saccode[1];
							}else {
								description = sacdet;
							}
						} else if (sacMap.containsValue(code)) {
							for (String key : sacMap.keySet()) {
								if (sacMap.get(key).equals(code)) {
									code = key;
									String sacdet = sacMap.get(key);
									if(sacdet.contains(" : ")) {
										String saccode[]= sacdet.split(" : ");
										description = saccode[1];
									}else {
										description = sacdet;
									}
									break;
								}
							}
						}
						if (isEmpty(description)) {
							for (String key : hsnMap.keySet()) {
								if (hsnMap.get(key).endsWith(" : " + code)) {
									code = key;
									String hsndet = hsnMap.get(key);
									if(hsndet.contains(" : ")) {
										String hsncode[]= hsndet.split(" : ");
										description = hsncode[1];
									}else {
										description = hsndet;
									}
									break;
								}
							}
						}
						if (isEmpty(description)) {
							for (String key : sacMap.keySet()) {
								if (sacMap.get(key).endsWith(" : " + code)) {
									code = key;
									String sacdet = sacMap.get(key);
									if(sacdet.contains(" : ")) {
										String saccode[]= sacdet.split(" : ");
										description = saccode[1];
									}else {
										description = sacdet;
									}
									break;
								}
							}
						}
					}
				}
				if (isNotEmpty(description)) {
					if (description.length() > 30) {
						description = description.substring(0, 27) + "..";
					}
				}
				boolean present = false;
				if (!hsnDataList.isEmpty()) {
					for (HSNData hsnData : hsnDataList) {
						if (hsnData.getHsnSc().equals(code)) {
							if (isEmpty(invoiceParent.getInvtype())
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2B)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2C)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2CL)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.ATPAID)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.NIL)) {
								if (isNotEmpty(item.getQuantity())) {
									hsnData.setQty(hsnData.getQty() + item.getQuantity());
								}
								if (isNotEmpty(item.getTotal())) {
									hsnData.setVal(hsnData.getVal() + item.getTotal());
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
								}
								if (isNotEmpty(item.getIgstamount())) {
									hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
								}
								if (isNotEmpty(item.getCgstamount())) {
									hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
								}
								if (isNotEmpty(item.getSgstamount())) {
									hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
								}
								if (isNotEmpty(item.getCessamount())) {
									hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
								}
							} else {
								
								if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnr())) {
									if(isNotEmpty(((GSTR1)invoiceParent).getCdnr().get(0).getNt()) 
											&& isNotEmpty(
													((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty())
											&& ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty()
													.equals("C")) {
										/*
										 * if (isNotEmpty(item.getQuantity())) { hsnData.setQty(hsnData.getQty() -
										 * item.getQuantity()); }
										 */
										if (isNotEmpty(item.getTotal())) {
											hsnData.setVal(hsnData.getVal() - item.getTotal());
										}
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(hsnData.getTxval() - item.getTaxablevalue());
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(hsnData.getIamt() - item.getIgstamount());
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(hsnData.getCamt() - item.getCgstamount());
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(hsnData.getSamt() - item.getSgstamount());
										}
										if (isNotEmpty(item.getCessamount())) {
										
												hsnData.setCsamt(hsnData.getCsamt() - item.getCessamount());
										
										}
										
									} else {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(hsnData.getQty() + item.getQuantity());
										}
										if (isNotEmpty(item.getTotal())) {
											hsnData.setVal(hsnData.getVal() + item.getTotal());
										}
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
										}
										if (isNotEmpty(item.getCessamount())) {
											hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
										}
									}
								}else if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnur())){
									if(isNotEmpty(((GSTR1)invoiceParent).getCdnur()) 
											&& isNotEmpty(((GSTR1)invoiceParent).getCdnur().get(0).getNtty()) 
											&& ((GSTR1)invoiceParent).getCdnur().get(0).getNtty().equals("C")) {
										/*
										 * if (isNotEmpty(item.getQuantity())) { hsnData.setQty(hsnData.getQty() -
										 * item.getQuantity()); }
										 */
										if (isNotEmpty(item.getTotal())) {
											hsnData.setVal(hsnData.getVal() - item.getTotal());
										}
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(hsnData.getTxval() - item.getTaxablevalue());
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(hsnData.getIamt() - item.getIgstamount());
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(hsnData.getCamt() - item.getCgstamount());
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(hsnData.getSamt() - item.getSgstamount());
										}
										if (isNotEmpty(item.getCessamount())) {
										
												hsnData.setCsamt(hsnData.getCsamt() - item.getCessamount());
										
										}
										
									} else {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(hsnData.getQty() + item.getQuantity());
										}
										if (isNotEmpty(item.getTotal())) {
											hsnData.setVal(hsnData.getVal() + item.getTotal());
										}
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
										}
										if (isNotEmpty(item.getCessamount())) {
											hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
										}
									}
								} else {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(hsnData.getQty() + item.getQuantity());
									}
									if (isNotEmpty(item.getTotal())) {
										hsnData.setVal(hsnData.getVal() + item.getTotal());
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
									}
									if (isNotEmpty(item.getIgstamount())) {
										hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
									}
									if (isNotEmpty(item.getCgstamount())) {
										hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
									}
									if (isNotEmpty(item.getSgstamount())) {
										hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
									}
									if (isNotEmpty(item.getCessamount())) {
										hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
									}
								}
							}
							if (isNotEmpty(item.getUqc())) {
								boolean uqcPresent = false;
								for (UQCConfig uqcObj : uqcList) {
									if (uqcObj.getName().equalsIgnoreCase(item.getUqc().trim())) {
										hsnData.setUqc(uqcObj.getCode());
										uqcPresent = true;
										break;
									}
								}
								if (!uqcPresent) {
									hsnData.setUqc(item.getUqc().toUpperCase());
								}
							} else {
								hsnData.setUqc(uqc);
							}
							present = true;
							break;
						}
					}
				}
				if (!present) {
					if (isNotEmpty(code)) {
						HSNData hsnData = new HSNData();
						if(code.contains(" : ")){
							String hsncode[]= code.split(" : ");
							String desc = null;
							if (hsncode[1].length() > 30) {
								desc = hsncode[1].substring(0, 27) + "..";
							}
							hsnData.setHsnSc(hsncode[0]);
							hsnData.setDesc(desc);
						}else{
							hsnData.setHsnSc(code);
							if (isNotEmpty(description)) {
								hsnData.setDesc(description);
							}
						}
						hsnData.setNum(hsnDataList.size() + 1);
						if (isEmpty(invoiceParent.getInvtype())
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2B)
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2C)
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2CL)
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.ATPAID)
								|| invoiceParent.getInvtype().equals(MasterGSTConstants.NIL)) {
							if (isNotEmpty(item.getQuantity())) {
								hsnData.setQty(item.getQuantity());
							} else {
								hsnData.setQty(0d);
							}
							if (isNotEmpty(item.getTotal())) {
								hsnData.setVal(item.getTotal());
							} else {
								hsnData.setVal(0d);
							}
							if (isNotEmpty(item.getTaxablevalue())) {
								hsnData.setTxval(item.getTaxablevalue());
							} else {
								hsnData.setTxval(0d);
							}
							if (isNotEmpty(item.getIgstamount())) {
								hsnData.setIamt(item.getIgstamount());
							} else {
								hsnData.setIamt(0d);
							}
							if (isNotEmpty(item.getCgstamount())) {
								hsnData.setCamt(item.getCgstamount());
							} else {
								hsnData.setCamt(0d);
							}
							if (isNotEmpty(item.getSgstamount())) {
								hsnData.setSamt(item.getSgstamount());
							} else {
								hsnData.setSamt(0d);
							}
							if (isNotEmpty(item.getCessamount())) {
								hsnData.setCsamt(item.getCessamount());
							} else {
								hsnData.setCsamt(0d);
							}
						} else {
							if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnr())) {
								if(isNotEmpty(((GSTR1)invoiceParent).getCdnr().get(0).getNt()) 
										&& isNotEmpty(((GSTR1)invoiceParent).getCdnr().get(0).getNt().get(0).getNtty()) 
										&& ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty()
												.equals("C")) {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(item.getQuantity());
									} else {
										hsnData.setQty(0d);
									}
									if (isNotEmpty(item.getTotal()) && item.getTotal() > 0d) {
										hsnData.setVal(item.getTotal()*-1);
									} else {
										hsnData.setVal(0d);
									}
									if (isNotEmpty(item.getTaxablevalue()) && item.getTaxablevalue() > 0d) {
										hsnData.setTxval(item.getTaxablevalue()*-1);
									} else {
										hsnData.setTxval(0d);
									}
									if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0d) {
										hsnData.setIamt(item.getIgstamount()*-1);
									} else {
										hsnData.setIamt(0d);
									}
									if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() > 0d) {
										hsnData.setCamt(item.getCgstamount()*-1);
									} else {
										hsnData.setCamt(0d);
									}
									if (isNotEmpty(item.getSgstamount()) && item.getSgstamount() > 0d) {
										hsnData.setSamt(item.getSgstamount()*-1);
									} else {
										hsnData.setSamt(0d);
									}
									if (isNotEmpty(item.getCessamount()) && item.getCessamount() > 0d) {
											hsnData.setCsamt(item.getCessamount()*-1);
									} else {
										hsnData.setCsamt(0d);
									}
								} else {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(item.getQuantity());
									} else {
										hsnData.setQty(0d);
									}
									if (isNotEmpty(item.getTotal())) {
										hsnData.setVal(item.getTotal());
									} else {
										hsnData.setVal(0d);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										hsnData.setTxval(item.getTaxablevalue());
									} else {
										hsnData.setTxval(0d);
									}
									if (isNotEmpty(item.getIgstamount())) {
										hsnData.setIamt(item.getIgstamount());
									} else {
										hsnData.setIamt(0d);
									}
									if (isNotEmpty(item.getCgstamount())) {
										hsnData.setCamt(item.getCgstamount());
									} else {
										hsnData.setCamt(0d);
									}
									if (isNotEmpty(item.getSgstamount())) {
										hsnData.setSamt(item.getSgstamount());
									} else {
										hsnData.setSamt(0d);
									}
									if (isNotEmpty(item.getCessamount())) {
										hsnData.setCsamt(item.getCessamount());
									} else {
										hsnData.setCsamt(0d);
									}
								}
							}else if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnur())){
								if(isNotEmpty(((GSTR1)invoiceParent).getCdnur()) 
										&& isNotEmpty(((GSTR1)invoiceParent).getCdnur().get(0).getNtty()) 
										&& ((GSTR1)invoiceParent).getCdnur().get(0).getNtty().equals("C")) {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(item.getQuantity());
									} else {
										hsnData.setQty(0d);
									}
									if (isNotEmpty(item.getTotal()) && item.getTotal() > 0d) {
										hsnData.setVal(item.getTotal()*-1);
									} else {
										hsnData.setVal(0d);
									}
									if (isNotEmpty(item.getTaxablevalue()) && item.getTaxablevalue() > 0d) {
										hsnData.setTxval(item.getTaxablevalue()*-1);
									} else {
										hsnData.setTxval(0d);
									}
									if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0d) {
										hsnData.setIamt(item.getIgstamount()*-1);
									} else {
										hsnData.setIamt(0d);
									}
									if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() > 0d) {
										hsnData.setCamt(item.getCgstamount()*-1);
									} else {
										hsnData.setCamt(0d);
									}
									if (isNotEmpty(item.getSgstamount()) && item.getSgstamount() > 0d) {
										hsnData.setSamt(item.getSgstamount()*-1);
									} else {
										hsnData.setSamt(0d);
									}
									if (isNotEmpty(item.getCessamount()) && item.getCessamount() > 0d) {
										hsnData.setCsamt(item.getCessamount()*-1);
									} else {
										hsnData.setCsamt(0d);
									}
								} else {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(item.getQuantity());
									} else {
										hsnData.setQty(0d);
									}
									if (isNotEmpty(item.getTotal())) {
										hsnData.setVal(item.getTotal());
									} else {
										hsnData.setVal(0d);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										hsnData.setTxval(item.getTaxablevalue());
									} else {
										hsnData.setTxval(0d);
									}
									if (isNotEmpty(item.getIgstamount())) {
										hsnData.setIamt(item.getIgstamount());
									} else {
										hsnData.setIamt(0d);
									}
									if (isNotEmpty(item.getCgstamount())) {
										hsnData.setCamt(item.getCgstamount());
									} else {
										hsnData.setCamt(0d);
									}
									if (isNotEmpty(item.getSgstamount())) {
										hsnData.setSamt(item.getSgstamount());
									} else {
										hsnData.setSamt(0d);
									}
									if (isNotEmpty(item.getCessamount())) {
										hsnData.setCsamt(item.getCessamount());
									} else {
										hsnData.setCsamt(0d);
									}
								}
							} else {
								if (isNotEmpty(item.getQuantity())) {
									hsnData.setQty(item.getQuantity());
								} else {
									hsnData.setQty(0d);
								}
								if (isNotEmpty(item.getTotal())) {
									hsnData.setVal(item.getTotal());
								} else {
									hsnData.setVal(0d);
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									hsnData.setTxval(item.getTaxablevalue());
								} else {
									hsnData.setTxval(0d);
								}
								if (isNotEmpty(item.getIgstamount())) {
									hsnData.setIamt(item.getIgstamount());
								} else {
									hsnData.setIamt(0d);
								}
								if (isNotEmpty(item.getCgstamount())) {
									hsnData.setCamt(item.getCgstamount());
								} else {
									hsnData.setCamt(0d);
								}
								if (isNotEmpty(item.getSgstamount())) {
									hsnData.setSamt(item.getSgstamount());
								} else {
									hsnData.setSamt(0d);
								}
								if (isNotEmpty(item.getCessamount())) {
									hsnData.setCsamt(item.getCessamount());
								} else {
									hsnData.setCsamt(0d);
								}
							}
						}
						if (isNotEmpty(item.getUqc())) {
							boolean uqcPresent = false;
							for (UQCConfig uqcObj : uqcList) {
								if (uqcObj.getName().equalsIgnoreCase(item.getUqc().trim())) {
									hsnData.setUqc(uqcObj.getCode());
									uqcPresent = true;
									break;
								}
							}
							if (!uqcPresent) {
								hsnData.setUqc(item.getUqc().toUpperCase());
							}
						} else {
							hsnData.setUqc(uqc);
						}
						hsnDataList.add(hsnData);
					}
				}
			}
		}
	}
	
	@Override
	@Transactional
	public GSTR3B populateGSTR3BDetails(Client client, int month, int year) {
		final String method = "populateGSTR3BDetails ::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		GSTR3B gstr3b = new GSTR3B();
		gstr3b.setClientid(client.getId().toString());
		gstr3b.setRetPeriod(retPeriod);
		gstr3b.setGstin(client.getGstnnumber());
		gstr3b.setDateofinvoice(Calendar.getInstance().getTime());
		Page<? extends InvoiceParent> gstr1List = getInvoices(null, client.getId().toString(), GSTR1);
		Page<? extends InvoiceParent> purchasesList = getInvoices(null, client.getId().toString(), PURCHASE_REGISTER);
		if(isEmpty(gstr3b.getSupDetails())) {
			gstr3b.setSupDetails(new GSTR3BSupplyDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet())) {
			gstr3b.getSupDetails().setOsupDet(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getTxval())) {
			gstr3b.getSupDetails().getOsupDet().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getIamt())) {
			gstr3b.getSupDetails().getOsupDet().setIamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getCamt())) {
			gstr3b.getSupDetails().getOsupDet().setCamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getSamt())) {
			gstr3b.getSupDetails().getOsupDet().setSamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getCsamt())) {
			gstr3b.getSupDetails().getOsupDet().setCsamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero())) {
			gstr3b.getSupDetails().setOsupZero(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero().getTxval())) {
			gstr3b.getSupDetails().getOsupZero().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero().getIamt())) {
			gstr3b.getSupDetails().getOsupZero().setIamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero().getCsamt())) {
			gstr3b.getSupDetails().getOsupZero().setCsamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupNilExmp())) {
			gstr3b.getSupDetails().setOsupNilExmp(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupNilExmp().getTxval())) {
			gstr3b.getSupDetails().getOsupNilExmp().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev())) {
			gstr3b.getSupDetails().setIsupRev(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getTxval())) {
			gstr3b.getSupDetails().getIsupRev().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
			gstr3b.getSupDetails().getIsupRev().setIamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getCamt())) {
			gstr3b.getSupDetails().getIsupRev().setCamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getSamt())) {
			gstr3b.getSupDetails().getIsupRev().setSamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getCsamt())) {
			gstr3b.getSupDetails().getIsupRev().setCsamt(0d);
		}
		if(isEmpty(gstr3b.getItcElg())) {
			gstr3b.setItcElg(new GSTR3BITCDetails());
		}
		if (isEmpty(gstr3b.getItcElg().getItcAvl()) || gstr3b.getItcElg().getItcAvl().size() < 3) {
			gstr3b.getItcElg().setItcAvl(Lists.newArrayList());
			GSTR3BDetails impg = new GSTR3BDetails();
			impg.setTy("IMPG");
			impg.setIamt(0d);
			impg.setCamt(0d);
			impg.setSamt(0d);
			impg.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(impg);
			GSTR3BDetails imps = new GSTR3BDetails();
			imps.setTy("IMPS");
			imps.setIamt(0d);
			imps.setCamt(0d);
			imps.setSamt(0d);
			imps.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(imps);
			GSTR3BDetails isrc = new GSTR3BDetails();
			isrc.setTy("ISRC");
			isrc.setIamt(0d);
			isrc.setCamt(0d);
			isrc.setSamt(0d);
			isrc.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(isrc);
		}
		if(isNotEmpty(gstr1List)) {
			for(InvoiceParent gstr1 : gstr1List) {
				if(isNotEmpty(gstr1.getGstStatus())
						&& gstr1.getGstStatus().equals(MasterGSTConstants.GST_STATUS_CANCEL)) {
					continue;
				}
				if (isNotEmpty(gstr1.getInvtype()) && (gstr1.getInvtype().equals(MasterGSTConstants.B2B)
								|| gstr1.getInvtype().equals(MasterGSTConstants.B2C)
								|| gstr1.getInvtype().equals(MasterGSTConstants.ADVANCES)
								|| gstr1.getInvtype().equals(MasterGSTConstants.EXPORTS)
								|| gstr1.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES))) {
					if(isNotEmpty(gstr1.getItems())) {
						for(Item item : gstr1.getItems()) {
							if(isEmpty(gstr1.getTotaltax())) {
								if(isNotEmpty(item.getTaxablevalue())) {
									gstr3b.getSupDetails().getOsupZero().setTxval(
											gstr3b.getSupDetails().getOsupZero().getTxval() + item.getTaxablevalue());
								}
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getSupDetails().getOsupZero().setIamt(
											gstr3b.getSupDetails().getOsupZero().getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getSupDetails().getOsupZero().setCsamt(
											gstr3b.getSupDetails().getOsupZero().getCsamt() + item.getCessamount());
								}
							} else if (gstr1.getInvtype().equals(MasterGSTConstants.B2B) && isNotEmpty(gstr1.getB2b())
									&& isNotEmpty(gstr1.getB2b().get(0).getInv())
									&& isNotEmpty(gstr1.getB2b().get(0).getInv().get(0).getInvTyp())
									&& gstr1.getB2b().get(0).getInv().get(0).getInvTyp().equals("R")) {
								if(isNotEmpty(item.getTaxablevalue())) {
									gstr3b.getSupDetails().getIsupRev().setTxval(
											gstr3b.getSupDetails().getIsupRev().getTxval() + item.getTaxablevalue());
								}
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setIamt(
											gstr3b.getSupDetails().getIsupRev().getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setCamt(
											gstr3b.getSupDetails().getIsupRev().getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setSamt(
											gstr3b.getSupDetails().getIsupRev().getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getSupDetails().getIsupRev().setCsamt(
											gstr3b.getSupDetails().getIsupRev().getCsamt() + item.getCessamount());
								}
							} else if(gstr1.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
								if(isNotEmpty(((GSTR1)gstr1).getCdnr())) {
									for(GSTRCreditDebitNotes notes : ((GSTR1)gstr1).getCdnr()) {
										if(isNotEmpty(notes.getNt())) {
											for(GSTRInvoiceDetails details : notes.getNt()) {
												if(isNotEmpty(details.getNtty()) && details.getNtty().equals("C")) {
													if(isNotEmpty(item.getTaxablevalue())) {
														gstr3b.getSupDetails().getOsupDet()
																.setTxval(gstr3b.getSupDetails().getOsupDet().getTxval()
																		- item.getTaxablevalue());
													}
													if(isNotEmpty(item.getIgstamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setIamt(gstr3b.getSupDetails().getOsupDet().getIamt()
																		- item.getIgstamount());
													}
													if(isNotEmpty(item.getCgstamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setCamt(gstr3b.getSupDetails().getOsupDet().getCamt()
																		- item.getCgstamount());
													}
													if(isNotEmpty(item.getSgstamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setSamt(gstr3b.getSupDetails().getOsupDet().getSamt()
																		- item.getSgstamount());
													}
													if(isNotEmpty(item.getCessamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setCsamt(gstr3b.getSupDetails().getOsupDet().getCsamt()
																		- item.getCessamount());
													}
												} else {
													if(isNotEmpty(item.getTaxablevalue())) {
														gstr3b.getSupDetails().getOsupDet()
																.setTxval(gstr3b.getSupDetails().getOsupDet().getTxval()
																		+ item.getTaxablevalue());
													}
													if(isNotEmpty(item.getIgstamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setIamt(gstr3b.getSupDetails().getOsupDet().getIamt()
																		+ item.getIgstamount());
													}
													if(isNotEmpty(item.getCgstamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setCamt(gstr3b.getSupDetails().getOsupDet().getCamt()
																		+ item.getCgstamount());
													}
													if(isNotEmpty(item.getSgstamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setSamt(gstr3b.getSupDetails().getOsupDet().getSamt()
																		+ item.getSgstamount());
													}
													if(isNotEmpty(item.getCessamount())) {
														gstr3b.getSupDetails().getOsupDet()
																.setCsamt(gstr3b.getSupDetails().getOsupDet().getCsamt()
																		+ item.getCessamount());
													}
												}
											}
										}
									}
								}
							} else {
								if(isNotEmpty(item.getTaxablevalue())) {
									gstr3b.getSupDetails().getOsupDet().setTxval(
											gstr3b.getSupDetails().getOsupDet().getTxval() + item.getTaxablevalue());
								}
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getSupDetails().getOsupDet().setIamt(
											gstr3b.getSupDetails().getOsupDet().getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getSupDetails().getOsupDet().setCamt(
											gstr3b.getSupDetails().getOsupDet().getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getSupDetails().getOsupDet().setSamt(
											gstr3b.getSupDetails().getOsupDet().getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getSupDetails().getOsupDet().setCsamt(
											gstr3b.getSupDetails().getOsupDet().getCsamt() + item.getCessamount());
								}
							}
						}
					}
				} else if (isNotEmpty(gstr1.getInvtype()) && (gstr1.getInvtype().equals(MasterGSTConstants.NIL))) {
					if(isNotEmpty(gstr1.getItems())) {
						for(Item item : gstr1.getItems()) {
							if(isNotEmpty(item.getTaxablevalue())) {
								gstr3b.getSupDetails().getOsupNilExmp().setTxval(
										gstr3b.getSupDetails().getOsupNilExmp().getTxval() + item.getTaxablevalue());
							}
						}
					}
				}
				
			}
		}
		if(isNotEmpty(purchasesList)) {
			for(InvoiceParent purchase : purchasesList) {
				if(isNotEmpty(purchase.getItems())) {
					for(Item item : purchase.getItems()) {
						if(purchase.getInvtype().equals(MasterGSTConstants.IMP_GOODS)) {
							if(isNotEmpty(item.getIgstavltax())) {
								gstr3b.getItcElg().getItcAvl().get(0).setIamt(
										gstr3b.getItcElg().getItcAvl().get(0).getIamt() + item.getIgstavltax());
							}
							if(isNotEmpty(item.getCessavltax())) {
								gstr3b.getItcElg().getItcAvl().get(0).setCsamt(
										gstr3b.getItcElg().getItcAvl().get(0).getCsamt() + item.getCessavltax());
							}
						} else if(purchase.getInvtype().equals(MasterGSTConstants.IMP_SERVICES)) {
							if(isNotEmpty(item.getIgstavltax())) {
								gstr3b.getItcElg().getItcAvl().get(1).setIamt(
										gstr3b.getItcElg().getItcAvl().get(1).getIamt() + item.getIgstavltax());
							}
							if(isNotEmpty(item.getCessavltax())) {
								gstr3b.getItcElg().getItcAvl().get(1).setCsamt(
										gstr3b.getItcElg().getItcAvl().get(1).getCsamt() + item.getCessavltax());
							}
						} else if (purchase.getInvtype().equals(MasterGSTConstants.B2B) && isNotEmpty(purchase.getB2b())
								&& isNotEmpty(purchase.getB2b().get(0).getInv())
								&& isNotEmpty(purchase.getB2b().get(0).getInv().get(0).getInvTyp())
								&& purchase.getB2b().get(0).getInv().get(0).getInvTyp().equals("R")) {
							if(isNotEmpty(item.getTaxablevalue())) {
								gstr3b.getSupDetails().getIsupRev().setTxval(
										gstr3b.getSupDetails().getIsupRev().getTxval() + item.getTaxablevalue());
							}
							if(isNotEmpty(item.getIgstamount())) {
								gstr3b.getSupDetails().getIsupRev()
										.setIamt(gstr3b.getSupDetails().getIsupRev().getIamt() + item.getIgstamount());
							}
							if(isNotEmpty(item.getCgstamount())) {
								gstr3b.getSupDetails().getIsupRev()
										.setCamt(gstr3b.getSupDetails().getIsupRev().getCamt() + item.getCgstamount());
							}
							if(isNotEmpty(item.getSgstamount())) {
								gstr3b.getSupDetails().getIsupRev()
										.setSamt(gstr3b.getSupDetails().getIsupRev().getSamt() + item.getSgstamount());
							}
							if(isNotEmpty(item.getCessamount())) {
								gstr3b.getSupDetails().getIsupRev().setCsamt(
										gstr3b.getSupDetails().getIsupRev().getCsamt() + item.getCessamount());
							}
							if(isNotEmpty(item.getIgstavltax())) {
								gstr3b.getItcElg().getItcAvl().get(2).setIamt(
										gstr3b.getItcElg().getItcAvl().get(2).getIamt() + item.getIgstavltax());
							}
							if(isNotEmpty(item.getCgstavltax())) {
								gstr3b.getItcElg().getItcAvl().get(2).setCamt(
										gstr3b.getItcElg().getItcAvl().get(2).getCamt() + item.getCgstavltax());
							}
							if(isNotEmpty(item.getSgstavltax())) {
								gstr3b.getItcElg().getItcAvl().get(2).setSamt(
										gstr3b.getItcElg().getItcAvl().get(2).getSamt() + item.getSgstavltax());
							}
							if(isNotEmpty(item.getCessavltax())) {
								gstr3b.getItcElg().getItcAvl().get(2).setCsamt(
										gstr3b.getItcElg().getItcAvl().get(2).getCsamt() + item.getCessavltax());
							}
						} else {
							
						}
					}
				}
			}
		}
		logger.debug(CLASSNAME + method + END);
		return gstr3b;
	}
	
	@Override
	@Transactional
	public GSTR3B populateGSTR3BDetailss(Client client, int month, int year) {
		final String method = "populateGSTR3BDetails ::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		gstr3BRepository.deleteByClientidAndRetPeriod(client.getId().toString(),retPeriod);
		boolean nilLateFeeFlag=false;
		boolean lateFeeFlag=false;
		GSTR3B gstr3b = new GSTR3B();
		gstr3b.setClientid(client.getId().toString());
		gstr3b.setRetPeriod(retPeriod);
		gstr3b.setGstin(client.getGstnnumber());
		gstr3b.setDateofinvoice(Calendar.getInstance().getTime());
		Page<? extends InvoiceParent> gstr1List = getInvoices(null, client.getId().toString(), GSTR1,month, year);
				
		Page<? extends InvoiceParent> purchasesList = getInvoices(null, client.getId().toString(), PURCHASE_REGISTER, month, year);
		Page<? extends InvoiceParent> itcClaimedInvoicesList = getMonthlyInvoiceBasedOnClientidAndDateofitcClaimed(null,
				client.getId().toString(), PURCHASE_REGISTER, month, year);
		if(isEmpty(gstr3b.getInterSup())) {
			gstr3b.setInterSup(new GSTR3BInterSupplyDetails());
		}
		if(isEmpty(gstr3b.getSupDetails())) {
			gstr3b.setSupDetails(new GSTR3BSupplyDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet())) {
			gstr3b.getSupDetails().setOsupDet(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getTxval())) {
			gstr3b.getSupDetails().getOsupDet().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getIamt())) {
			gstr3b.getSupDetails().getOsupDet().setIamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getCamt())) {
			gstr3b.getSupDetails().getOsupDet().setCamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getSamt())) {
			gstr3b.getSupDetails().getOsupDet().setSamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupDet().getCsamt())) {
			gstr3b.getSupDetails().getOsupDet().setCsamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero())) {
			gstr3b.getSupDetails().setOsupZero(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero().getTxval())) {
			gstr3b.getSupDetails().getOsupZero().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero().getIamt())) {
			gstr3b.getSupDetails().getOsupZero().setIamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupZero().getCsamt())) {
			gstr3b.getSupDetails().getOsupZero().setCsamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupNilExmp())) {
			gstr3b.getSupDetails().setOsupNilExmp(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupNilExmp().getTxval())) {
			gstr3b.getSupDetails().getOsupNilExmp().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupNongst())) {
			gstr3b.getSupDetails().setOsupNongst(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getOsupNongst().getTxval())) {
			gstr3b.getSupDetails().getOsupNongst().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev())) {
			gstr3b.getSupDetails().setIsupRev(new GSTR3BDetails());
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getTxval())) {
			gstr3b.getSupDetails().getIsupRev().setTxval(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
			gstr3b.getSupDetails().getIsupRev().setIamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getCamt())) {
			gstr3b.getSupDetails().getIsupRev().setCamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getSamt())) {
			gstr3b.getSupDetails().getIsupRev().setSamt(0d);
		}
		if(isEmpty(gstr3b.getSupDetails().getIsupRev().getCsamt())) {
			gstr3b.getSupDetails().getIsupRev().setCsamt(0d);
		}
		if(isEmpty(gstr3b.getItcElg())) {
			gstr3b.setItcElg(new GSTR3BITCDetails());
		}
		if (isEmpty(gstr3b.getItcElg().getItcAvl()) || gstr3b.getItcElg().getItcAvl().size() < 5) {
			gstr3b.getItcElg().setItcAvl(Lists.newArrayList());
			GSTR3BDetails impg = new GSTR3BDetails();
			impg.setTy("IMPG");
			impg.setIamt(0d);
			impg.setCamt(0d);
			impg.setSamt(0d);
			impg.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(impg);
			GSTR3BDetails imps = new GSTR3BDetails();
			imps.setTy("IMPS");
			imps.setIamt(0d);
			imps.setCamt(0d);
			imps.setSamt(0d);
			imps.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(imps);
			GSTR3BDetails isrc = new GSTR3BDetails();
			isrc.setTy("ISRC");
			isrc.setIamt(0d);
			isrc.setCamt(0d);
			isrc.setSamt(0d);
			isrc.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(isrc);
			GSTR3BDetails isd = new GSTR3BDetails();
			isd.setTy("ISD");
			isd.setIamt(0d);
			isd.setCamt(0d);
			isd.setSamt(0d);
			isd.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(isd);
			GSTR3BDetails otheritc = new GSTR3BDetails();
			otheritc.setTy("OTH");
			otheritc.setIamt(0d);
			otheritc.setCamt(0d);
			otheritc.setSamt(0d);
			otheritc.setCsamt(0d);
			gstr3b.getItcElg().getItcAvl().add(otheritc);
		}
		if (isEmpty(gstr3b.getItcElg().getItcInelg()) || gstr3b.getItcElg().getItcInelg().size() < 2) {
			GSTR3BDetails itcInElgRUL = new GSTR3BDetails();
			itcInElgRUL.setTy("RUL");
			itcInElgRUL.setIamt(0d);
			itcInElgRUL.setCamt(0d);
			itcInElgRUL.setSamt(0d);
			itcInElgRUL.setCsamt(0d);
			gstr3b.getItcElg().getItcInelg().add(itcInElgRUL);
			GSTR3BDetails itcInElgOTH = new GSTR3BDetails();
			itcInElgOTH.setTy("OTH");
			itcInElgOTH.setIamt(0d);
			itcInElgOTH.setCamt(0d);
			itcInElgOTH.setSamt(0d);
			itcInElgOTH.setCsamt(0d);
			gstr3b.getItcElg().getItcInelg().add(itcInElgOTH);
			
		}
		if(isEmpty(gstr3b.getInwardSup().getIsupDetails())) {
			GSTR3BDetails gst = new GSTR3BDetails();
			gst.setTy("GST");
			gst.setInter(0d);
			gst.setIntra(0d);
			gstr3b.getInwardSup().getIsupDetails().add(gst);
			GSTR3BDetails nongst = new GSTR3BDetails();
			nongst.setTy("NONGST");
			nongst.setInter(0d);
			nongst.setIntra(0d);
			gstr3b.getInwardSup().getIsupDetails().add(nongst);
			
		}
		
		if (isEmpty(gstr3b.getItcElg().getItcRev()) || gstr3b.getItcElg().getItcRev().size() < 2) {
			GSTR3BDetails itcRevRUL = new GSTR3BDetails();
			itcRevRUL.setTy("RUL");
			itcRevRUL.setIamt(0d);
			itcRevRUL.setCamt(0d);
			itcRevRUL.setSamt(0d);
			itcRevRUL.setCsamt(0d);
			gstr3b.getItcElg().getItcRev().add(itcRevRUL);
			GSTR3BDetails itcRevOTH = new GSTR3BDetails();
			itcRevOTH.setTy("OTH");
			itcRevOTH.setIamt(0d);
			itcRevOTH.setCamt(0d);
			itcRevOTH.setSamt(0d);
			itcRevOTH.setCsamt(0d);
			gstr3b.getItcElg().getItcRev().add(itcRevOTH);
			
		}
		
		if(isNotEmpty(gstr1List)) {
			Map<String, ResponseData> gstnMap = Maps.newHashMap();
			Map<String,Map<String,Double>> unregisterDetails = new HashMap<String,Map<String,Double>>();
			Map<String,Map<String,Double>> compositeDetails = new HashMap<String,Map<String,Double>>();
			for(InvoiceParent gstr1 : gstr1List) {
				if(isNotEmpty(gstr1.getGstStatus())
						&& gstr1.getGstStatus().equals(MasterGSTConstants.GST_STATUS_CANCEL)) {
					continue;
				}
				if(gstr1.getInvtype().equals(MasterGSTConstants.NIL)) {
					nilLateFeeFlag = true;
				}else {
					lateFeeFlag = true;
				}				

				if (isNotEmpty(gstr1.getInvtype()) && (gstr1.getInvtype().equals(MasterGSTConstants.B2B)
								|| gstr1.getInvtype().equals(MasterGSTConstants.B2C)
								|| gstr1.getInvtype().equals(MasterGSTConstants.B2CL)
								|| gstr1.getInvtype().equals(MasterGSTConstants.ADVANCES)
								|| gstr1.getInvtype().equals(MasterGSTConstants.EXPORTS)
								|| gstr1.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)
								
								|| gstr1.getInvtype().equals(MasterGSTConstants.B2BA)
								|| gstr1.getInvtype().equals(MasterGSTConstants.B2CSA)
								|| gstr1.getInvtype().equals(MasterGSTConstants.B2CLA)
								|| gstr1.getInvtype().equals(MasterGSTConstants.ADVANCES)
								|| gstr1.getInvtype().equals(MasterGSTConstants.EXPA)
								|| gstr1.getInvtype().equals(MasterGSTConstants.CDNA)
								
								|| gstr1.getInvtype().equals(MasterGSTConstants.NIL))) {
					if (gstr1.getInvtype().equals(MasterGSTConstants.B2C)
							|| gstr1.getInvtype().equals(MasterGSTConstants.B2CSA)
							|| gstr1.getInvtype().equals(MasterGSTConstants.B2CL) 
							|| gstr1.getInvtype().equals(MasterGSTConstants.B2CLA)) {
						if(isNotEmpty(client.getStatename()) && isNotEmpty(gstr1.getStatename())) {
							if(!client.getStatename().equals(gstr1.getStatename())) {
								String statename = gstr1.getStatename();
								if(unregisterDetails.containsKey(statename)) {
									Map<String, Double> rtMap = unregisterDetails.get(statename);
									if(isNotEmpty(gstr1.getTotaltaxableamount())) {
										rtMap.put("taxableAmount",
												rtMap.get("taxableAmount") + gstr1.getTotaltaxableamount());
									}
									if(isNotEmpty(gstr1.getTotaltax())) {
										rtMap.put("totalTax", rtMap.get("totalTax")+gstr1.getTotaltax());
									}
									unregisterDetails.put(statename, rtMap);
								}else {
									Map<String, Double> newmap = new HashMap<String, Double>();
									Double taxableamt = 0d;
									Double taxamt = 0d;
									if(isNotEmpty(gstr1.getTotaltaxableamount())) {
										taxableamt = gstr1.getTotaltaxableamount();
									}
									if(isNotEmpty(gstr1.getTotaltax())) {
										taxamt = gstr1.getTotaltax();
									}
									newmap.put("taxableAmount", taxableamt);
									newmap.put("totalTax", taxamt);
									unregisterDetails.put(statename, newmap);
								}
							}
						}
					}
					
					if(gstr1.getInvtype().equals(MasterGSTConstants.B2B) || gstr1.getInvtype().equals(MasterGSTConstants.B2BA)) {
						if(isNotEmpty(client.getStatename()) && isNotEmpty(gstr1.getStatename())) {
							if(!client.getStatename().equals(gstr1.getStatename())) {
								String dealerType = "";
								if(isNotEmpty(gstr1.getDealerType())) {
									dealerType = gstr1.getDealerType();
								}else {
									if (isNotEmpty(gstr1.getB2b()) && isNotEmpty(gstr1.getB2b().get(0).getCtin())
											&& !gstnMap.containsKey(gstr1.getB2b().get(0).getCtin())) {
										Response response = iHubConsumerService
												.publicSearch(gstr1.getB2b().get(0).getCtin());
											if(isNotEmpty(response) && isNotEmpty(response.getStatuscd())&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
												ResponseData data = response.getData();
												gstnMap.put(gstr1.getB2b().get(0).getCtin(), data);
											}
									}
									if (isNotEmpty(gstr1.getB2b().get(0).getCtin()) && gstnMap.containsKey(gstr1.getB2b().get(0).getCtin())) {
										dealerType = gstnMap.get(gstr1.getB2b().get(0).getCtin()).getDty();
									}
								}
								if("Composition".equals(dealerType)) {
									String statename = gstr1.getStatename();
									if(compositeDetails.containsKey(statename)) {
										Map<String, Double> rtMap = compositeDetails.get(statename);
										if(isNotEmpty(gstr1.getTotaltaxableamount())) {
											rtMap.put("taxableAmount",rtMap.get("taxableAmount") + gstr1.getTotaltaxableamount());
										}
										if(isNotEmpty(gstr1.getTotaltax())) {
											rtMap.put("totalTax", rtMap.get("totalTax")+gstr1.getTotaltax());
										}
										compositeDetails.put(statename, rtMap);
									}else {
										Map<String, Double> newmap = new HashMap<String, Double>();
										Double taxableamt = 0d;
										Double taxamt = 0d;
										if(isNotEmpty(gstr1.getTotaltaxableamount())) {
											taxableamt = gstr1.getTotaltaxableamount();
										}
										if(isNotEmpty(gstr1.getTotaltax())) {
											taxamt = gstr1.getTotaltax();
										}
										newmap.put("taxableAmount", taxableamt);
										newmap.put("totalTax", taxamt);
										compositeDetails.put(statename, newmap);
									}
								}
							}
						}
					}
					
					if(isNotEmpty(gstr1.getItems())) {
						for(Item item : gstr1.getItems()) {
							if(isNotEmpty(gstr1.getTotaltax())) {
								if((gstr1.getInvtype().equals(MasterGSTConstants.B2B)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2C)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2CL)
										|| gstr1.getInvtype().equals(MasterGSTConstants.EXPORTS)
										
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2BA)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2CSA)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2CLA)
										|| gstr1.getInvtype().equals(MasterGSTConstants.EXPA)
										
										|| gstr1.getInvtype().equals(MasterGSTConstants.NIL))) {
									if(isNotEmpty(item.getExmepted()) && isNotEmpty(item.getQuantity())) {
										gstr3b.getSupDetails().getOsupNilExmp()
												.setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()
														+ (item.getQuantity() * item.getExmepted()));
									}
								}
								if(gstr1.getInvtype().equals(MasterGSTConstants.B2B) || gstr1.getInvtype().equals(MasterGSTConstants.B2BA)) {
									String reverseChargeType = "";
									if(isNotEmpty(gstr1.getRevchargetype())) {
										reverseChargeType = gstr1.getRevchargetype();
									}else {
										reverseChargeType = "Regular";
									}
									if("Regular".equals(reverseChargeType) || "N".equals(reverseChargeType)) {
										String invType = "";
										if (isNotEmpty(gstr1.getB2b()) && isNotEmpty(gstr1.getB2b().get(0).getInv())
												&& isNotEmpty(gstr1.getB2b().get(0).getInv().get(0).getInvTyp())) {
											invType = gstr1.getB2b().get(0).getInv().get(0).getInvTyp();
										}else {
											invType = "R";
										}
											if("R".equals(invType) || "DE".equals(invType)) {
												if(isNotEmpty(item.getTaxablevalue())) {
												gstr3b.getSupDetails().getOsupDet().setTxval(gstr3b.getSupDetails().getOsupDet().getTxval()+ item.getTaxablevalue());
												}
												if(isNotEmpty(item.getIgstamount())) {
												gstr3b.getSupDetails().getOsupDet().setIamt(gstr3b.getSupDetails().getOsupDet().getIamt()+ item.getIgstamount());
												}
												if(isNotEmpty(item.getSgstamount())) {
												gstr3b.getSupDetails().getOsupDet().setSamt(gstr3b.getSupDetails().getOsupDet().getSamt()+ item.getSgstamount());
												}
												if(isNotEmpty(item.getCgstamount())) {
												gstr3b.getSupDetails().getOsupDet().setCamt(gstr3b.getSupDetails().getOsupDet().getCamt()+ item.getCgstamount());
												}
												if(isNotEmpty(item.getCessamount())) {
												gstr3b.getSupDetails().getOsupDet().setCsamt(gstr3b.getSupDetails().getOsupDet().getCsamt()+ item.getCessamount());
												}
											}else if("SEWP".equals(invType) || "SEWPC".equals(invType) || "SEWOP".equals(invType)) {
												if(isNotEmpty(item.getTaxablevalue())) {
												gstr3b.getSupDetails().getOsupZero().setTxval(gstr3b.getSupDetails().getOsupZero().getTxval()+ item.getTaxablevalue());
												}
												if(isNotEmpty(item.getIgstamount())) {
												gstr3b.getSupDetails().getOsupZero().setIamt(gstr3b.getSupDetails().getOsupZero().getIamt()+ item.getIgstamount());
												}
												if(isNotEmpty(item.getCessamount())) {
												gstr3b.getSupDetails().getOsupZero().setCsamt(gstr3b.getSupDetails().getOsupZero().getCsamt()+ item.getCessamount());
												}
											}else if("CBW".equals(invType)) {
												 if(isNotEmpty(item.getTaxablevalue())) {
												gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()+ item.getTaxablevalue());
												 }
											}
									}else if("Reverse".equals(reverseChargeType) || "Y".equals(reverseChargeType)) {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()+ item.getTaxablevalue());
										 }
									}
								} else if (gstr1.getInvtype().equals(MasterGSTConstants.B2C)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2CL)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2CSA)
										|| gstr1.getInvtype().equals(MasterGSTConstants.B2CLA)) {
									String reverseChargeType = "";
									if(isNotEmpty(gstr1.getRevchargetype())) {
										reverseChargeType = gstr1.getRevchargetype();
									}else {
										reverseChargeType = "Regular";
									}
									if("Regular".equals(reverseChargeType) || "N".equals(reverseChargeType)) {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getOsupDet().setTxval(gstr3b.getSupDetails().getOsupDet().getTxval()+ item.getTaxablevalue());
										}
										if(isNotEmpty(item.getIgstamount())) {
											gstr3b.getSupDetails().getOsupDet().setIamt(gstr3b.getSupDetails().getOsupDet().getIamt()+ item.getIgstamount());
										}
										if(isNotEmpty(item.getSgstamount())) {
											gstr3b.getSupDetails().getOsupDet().setSamt(gstr3b.getSupDetails().getOsupDet().getSamt()+ item.getSgstamount());
										}
										if(isNotEmpty(item.getCgstamount())) {
											gstr3b.getSupDetails().getOsupDet().setCamt(gstr3b.getSupDetails().getOsupDet().getCamt()+ item.getCgstamount());
										}
										if(isNotEmpty(item.getCessamount())) {
											gstr3b.getSupDetails().getOsupDet().setCsamt(gstr3b.getSupDetails().getOsupDet().getCsamt()+ item.getCessamount());
										}
									}else if("Reverse".equals(reverseChargeType) || "Y".equals(reverseChargeType)) {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()+ item.getTaxablevalue());
										 }
									}
								}else if(gstr1.getInvtype().equals(MasterGSTConstants.EXPORTS) || gstr1.getInvtype().equals(MasterGSTConstants.EXPA)) {
									if(isNotEmpty(item.getTaxablevalue())) {
										gstr3b.getSupDetails().getOsupZero().setTxval(gstr3b.getSupDetails().getOsupZero().getTxval()+ item.getTaxablevalue());
									}
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getSupDetails().getOsupZero().setIamt(gstr3b.getSupDetails().getOsupZero().getIamt() + item.getIgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getSupDetails().getOsupZero().setCsamt(gstr3b.getSupDetails().getOsupZero().getCsamt() + item.getCessamount());
									}
								}else if(gstr1.getInvtype().equals(MasterGSTConstants.NIL)) {
									String nilInvType = item.getType();
									if("Nil Rated".equals(nilInvType) || "Exempted".equals(nilInvType)) {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()+ item.getTaxablevalue());
										 }
									}else if("Non-GST".equals(nilInvType)) {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getOsupNongst().setTxval(gstr3b.getSupDetails().getOsupNongst().getTxval()+ item.getTaxablevalue());
										 }
									}
								} else if (gstr1.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)
										|| gstr1.getInvtype().equals(MasterGSTConstants.CDNUR)
										|| gstr1.getInvtype().equals(MasterGSTConstants.CDNA)
										|| gstr1.getInvtype().equals(MasterGSTConstants.CDNURA)) {
									String docType = "";
									String originalInvNo = "";
									String crchrg = "Regular";
									String cinvtype = "R";
									if(isNotEmpty(gstr1.getRevchargetype())) {
										crchrg = gstr1.getRevchargetype();
									}
									if(gstr1.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || gstr1.getInvtype().equals(MasterGSTConstants.CDNA)) {
										docType = ((GSTR1) gstr1).getCdnr().get(0).getNt().get(0).getNtty();
										originalInvNo = ((GSTR1) gstr1).getCdnr().get(0).getNt().get(0).getInum();
										cinvtype = ((GSTR1) gstr1).getCdnr().get(0).getNt().get(0).getInvTyp();
									}else {
										docType = gstr1.getCdnur().get(0).getNtty();
										originalInvNo = gstr1.getCdnur().get(0).getInum();
										cinvtype = gstr1.getCdnur().get(0).getTyp();
									}
									if(isEmpty(cinvtype)) {
										cinvtype = "R";
									}
									if("C".equals(docType)) {	
										if("Regular".equals(crchrg) || "N".equals(crchrg)) {
												if("R".equals(cinvtype) || "DE".equals(cinvtype) || "B2CL".equals(cinvtype)) {
													if(isNotEmpty(item.getTaxablevalue())) {
														gstr3b.getSupDetails().getOsupDet().setTxval(gstr3b.getSupDetails().getOsupDet().getTxval() - item.getTaxablevalue());
													}
													if(isNotEmpty(item.getIgstamount())) {
														gstr3b.getSupDetails().getOsupDet().setIamt(gstr3b.getSupDetails().getOsupDet().getIamt() - item.getIgstamount());
													}
													if(isNotEmpty(item.getSgstamount())) {
														gstr3b.getSupDetails().getOsupDet().setSamt(gstr3b.getSupDetails().getOsupDet().getSamt() - item.getSgstamount());
													}
													if(isNotEmpty(item.getCgstamount())) {
														gstr3b.getSupDetails().getOsupDet().setCamt(gstr3b.getSupDetails().getOsupDet().getCamt() - item.getCgstamount());
													}
													if(isNotEmpty(item.getCessamount())) {
														gstr3b.getSupDetails().getOsupDet().setCsamt(gstr3b.getSupDetails().getOsupDet().getCsamt() - item.getCessamount());
													}
												} else if ("SEWP".equals(cinvtype) || "SEWPC".equals(cinvtype) || "SEWOP".equals(cinvtype) || "EXPWOP".equals(cinvtype) || "EXPWP".equals(cinvtype)) {
													if(isNotEmpty(item.getTaxablevalue())) {
														gstr3b.getSupDetails().getOsupZero().setTxval(gstr3b.getSupDetails().getOsupZero().getTxval() - item.getTaxablevalue());
													}
													if(isNotEmpty(item.getIgstamount())) {
														gstr3b.getSupDetails().getOsupZero().setIamt(gstr3b.getSupDetails().getOsupZero().getIamt()	- item.getIgstamount());
													}
													if(isNotEmpty(item.getCessamount())) {
														gstr3b.getSupDetails().getOsupZero().setCsamt(gstr3b.getSupDetails().getOsupZero().getCsamt() - item.getCessamount());
													}
												}else if("CBW".equals(cinvtype)) {
													 if(isNotEmpty(item.getTaxablevalue())) {
														gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval() - item.getTaxablevalue());
													 }
												}
										}else if("Reverse".equals(crchrg) || "Y".equals(crchrg)) {
											if(isNotEmpty(item.getTaxablevalue())) {
													gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()	- item.getTaxablevalue());
											 }
										}
									}else if("D".equals(docType)) {
										if("Regular".equals(crchrg) || "N".equals(crchrg)) {
											if("R".equals(cinvtype) || "DE".equals(cinvtype) || "B2CL".equals(cinvtype)) {
												if(isNotEmpty(item.getTaxablevalue())) {
													gstr3b.getSupDetails().getOsupDet().setTxval(gstr3b.getSupDetails().getOsupDet().getTxval() + item.getTaxablevalue());
												}
												if(isNotEmpty(item.getIgstamount())) {
													gstr3b.getSupDetails().getOsupDet().setIamt(gstr3b.getSupDetails().getOsupDet().getIamt() + item.getIgstamount());
												}
												if(isNotEmpty(item.getSgstamount())) {
													gstr3b.getSupDetails().getOsupDet().setSamt(gstr3b.getSupDetails().getOsupDet().getSamt() + item.getSgstamount());
												}
												if(isNotEmpty(item.getCgstamount())) {
													gstr3b.getSupDetails().getOsupDet().setCamt(gstr3b.getSupDetails().getOsupDet().getCamt() + item.getCgstamount());
												}
												if(isNotEmpty(item.getCessamount())) {
													gstr3b.getSupDetails().getOsupDet().setCsamt(gstr3b.getSupDetails().getOsupDet().getCsamt() + item.getCessamount());
												}
											} else if ("SEWP".equals(cinvtype) || "SEWPC".equals(cinvtype) || "SEWOP".equals(cinvtype) || "EXPWOP".equals(cinvtype) || "EXPWP".equals(cinvtype)) {
												if(isNotEmpty(item.getTaxablevalue())) {
													gstr3b.getSupDetails().getOsupZero().setTxval(gstr3b.getSupDetails().getOsupZero().getTxval() + item.getTaxablevalue());
												}
												if(isNotEmpty(item.getIgstamount())) {
													gstr3b.getSupDetails().getOsupZero().setIamt(gstr3b.getSupDetails().getOsupZero().getIamt()	+ item.getIgstamount());
												}
												if(isNotEmpty(item.getCessamount())) {
													gstr3b.getSupDetails().getOsupZero().setCsamt(gstr3b.getSupDetails().getOsupZero().getCsamt() + item.getCessamount());
												}
											}else if("CBW".equals(cinvtype)) {
												 if(isNotEmpty(item.getTaxablevalue())) {
													gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval() + item.getTaxablevalue());
												 }
											}
									}else if("Reverse".equals(crchrg) || "Y".equals(crchrg)) {
										if(isNotEmpty(item.getTaxablevalue())) {
												gstr3b.getSupDetails().getOsupNilExmp().setTxval(gstr3b.getSupDetails().getOsupNilExmp().getTxval()	+ item.getTaxablevalue());
										 }
									}
									}
								}
							}
						}
					}
				} 
			}
			List<GSTR3BDetails> unregDetails=Lists.newArrayList();
			Iterator<Map.Entry<String, Map<String, Double>>> entries = unregisterDetails.entrySet().iterator();
			while (entries.hasNext()) {
			    Map.Entry<String, Map<String, Double>> entry = entries.next();
			    Map<String, Double> newentry = entry.getValue();
			    GSTR3BDetails gstr3bdet = new GSTR3BDetails();
			    gstr3bdet.setPos(entry.getKey());
			    gstr3bdet.setTxval(newentry.get("taxableAmount"));
			    gstr3bdet.setIamt(newentry.get("totalTax"));
			    unregDetails.add(gstr3bdet);
			}
			List<GSTR3BDetails> compDetails=Lists.newArrayList();
			Iterator<Map.Entry<String, Map<String, Double>>> compentries = compositeDetails.entrySet().iterator();
			while (compentries.hasNext()) {
			    Map.Entry<String, Map<String, Double>> entry = compentries.next();
			    Map<String, Double> newentry = entry.getValue();
			    GSTR3BDetails gstr3bdet = new GSTR3BDetails();
			    gstr3bdet.setPos(entry.getKey());
			    gstr3bdet.setTxval(newentry.get("taxableAmount"));
			    gstr3bdet.setIamt(newentry.get("totalTax"));
			    compDetails.add(gstr3bdet);
			}
			gstr3b.getInterSup().setUnregDetails(unregDetails);
			gstr3b.getInterSup().setCompDetails(compDetails);
		}
		if(isNotEmpty(purchasesList)) {
			for(InvoiceParent purchase : purchasesList) {
				if(isNotEmpty(purchase.getItems())) {
					for(Item item : purchase.getItems()) {
						if(purchase.getInvtype().equals(MasterGSTConstants.B2B)) {
							String reverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								reverseChargeType = purchase.getRevchargetype();
							}else {
								reverseChargeType = "Regular";
							}
							if("Reverse".equals(reverseChargeType)) {			
								if(isNotEmpty(item.getTaxablevalue())) {
									gstr3b.getSupDetails().getIsupRev().setTxval(gstr3b.getSupDetails().getIsupRev().getTxval() + item.getTaxablevalue());
								}
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setIamt(gstr3b.getSupDetails().getIsupRev().getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setCamt(gstr3b.getSupDetails().getIsupRev().getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setSamt(gstr3b.getSupDetails().getIsupRev().getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getSupDetails().getIsupRev().setCsamt(gstr3b.getSupDetails().getIsupRev().getCsamt() + item.getCessamount());
								}
							}else {
								String clientStatename = client.getStatename();
								String invStatename = purchase.getStatename();
								if(isNotEmpty(item.getTaxablevalue()) && isNotEmpty(item.getTotal()) && (item.getTaxablevalue().equals(item.getTotal()))) {
									if(clientStatename.equals(invStatename)) {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getInwardSup().getIsupDetails().get(0).setIntra(gstr3b.getInwardSup().getIsupDetails().get(0).getIntra()+ item.getTaxablevalue());
										}
									}else {
										if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getInwardSup().getIsupDetails().get(0).setInter(gstr3b.getInwardSup().getIsupDetails().get(0).getInter()+ item.getTaxablevalue());
										}
									}
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.B2BUR)){
							String b2burReverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								b2burReverseChargeType = purchase.getRevchargetype();
							}else {
								b2burReverseChargeType = "Regular";
							}
							if("Reverse".equals(b2burReverseChargeType)) {
								if(isNotEmpty(item.getTaxablevalue())) {
									gstr3b.getSupDetails().getIsupRev().setTxval(gstr3b.getSupDetails().getIsupRev().getTxval() + item.getTaxablevalue());
								}
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setIamt(gstr3b.getSupDetails().getIsupRev().getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setCamt(gstr3b.getSupDetails().getIsupRev().getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setSamt(gstr3b.getSupDetails().getIsupRev().getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getSupDetails().getIsupRev().setCsamt(gstr3b.getSupDetails().getIsupRev().getCsamt() + item.getCessamount());
								}
							}
							
						}else if(purchase.getInvtype().equals(MasterGSTConstants.IMP_SERVICES)) {
							String impReverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								impReverseChargeType = purchase.getRevchargetype();
							}else {
								impReverseChargeType = "Regular";
							}
							String itcType = item.getElg();
							Double elgpercent = 0d;
							if(isNotEmpty(item.getElgpercent())) {
								elgpercent = item.getElgpercent();
							}
							if("Reverse".equals(impReverseChargeType)) {
								if(isNotEmpty(item.getTaxablevalue())) {
									gstr3b.getSupDetails().getIsupRev().setTxval(gstr3b.getSupDetails().getIsupRev().getTxval() + item.getTaxablevalue());
								}
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setIamt(gstr3b.getSupDetails().getIsupRev().getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setCamt(gstr3b.getSupDetails().getIsupRev().getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getSupDetails().getIsupRev().setSamt(gstr3b.getSupDetails().getIsupRev().getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getSupDetails().getIsupRev().setCsamt(gstr3b.getSupDetails().getIsupRev().getCsamt() + item.getCessamount());
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.NIL)) {
							String nilType = item.getType();
							String clientStatename = client.getStatename();
							String invStatename = purchase.getStatename();
							if("Non-GST".equals(nilType)) {
								if(clientStatename.equals(invStatename)) {
									if(isNotEmpty(item.getTaxablevalue())) {
										gstr3b.getInwardSup().getIsupDetails().get(1).setIntra(gstr3b.getInwardSup().getIsupDetails().get(1).getIntra()+ item.getTaxablevalue());
									}
								}else {
									if(isNotEmpty(item.getTaxablevalue())) {
										gstr3b.getInwardSup().getIsupDetails().get(1).setInter(gstr3b.getInwardSup().getIsupDetails().get(1).getInter()+ item.getTaxablevalue());
									}
								}
							}else {
								if(clientStatename.equals(invStatename)) {
									if(isNotEmpty(item.getTaxablevalue())) {
										gstr3b.getInwardSup().getIsupDetails().get(0).setIntra(gstr3b.getInwardSup().getIsupDetails().get(0).getIntra()+ item.getTaxablevalue());
									}
								}else {
									if(isNotEmpty(item.getTaxablevalue())) {
										gstr3b.getInwardSup().getIsupDetails().get(0).setInter(gstr3b.getInwardSup().getIsupDetails().get(0).getInter()+ item.getTaxablevalue());
									}
								}
							}
						} else if (purchase.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)
								|| purchase.getInvtype().equals(MasterGSTConstants.CDNUR)) {
							String docType = "";
							String originalInvNo = "";
							if(purchase.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
								docType = purchase.getCdn().get(0).getNt().get(0).getNtty();
								originalInvNo = purchase.getCdn().get(0).getNt().get(0).getInum();
							}else {
								docType = purchase.getCdnur().get(0).getNtty();
								originalInvNo = purchase.getCdnur().get(0).getInum();
							}
							String reverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								reverseChargeType = purchase.getRevchargetype();
							}else {
								reverseChargeType = "Regular";
							}
							if("C".equals(docType)) {
								if("Reverse".equals(reverseChargeType)) {		
									if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getIsupRev().setTxval(gstr3b.getSupDetails().getIsupRev().getTxval()	- item.getTaxablevalue());
									}
									if(isNotEmpty(item.getIgstamount())) {
											gstr3b.getSupDetails().getIsupRev().setIamt(gstr3b.getSupDetails().getIsupRev().getIamt() - item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
											gstr3b.getSupDetails().getIsupRev().setCamt(gstr3b.getSupDetails().getIsupRev().getCamt() - item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
											gstr3b.getSupDetails().getIsupRev().setSamt(gstr3b.getSupDetails().getIsupRev().getSamt() - item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
											gstr3b.getSupDetails().getIsupRev().setCsamt(gstr3b.getSupDetails().getIsupRev().getCsamt()	- item.getCessamount());
									}
								}
							}else if("D".equals(docType)) {
								if("Reverse".equals(reverseChargeType)) {
									if(isNotEmpty(item.getTaxablevalue())) {
											gstr3b.getSupDetails().getIsupRev().setTxval(gstr3b.getSupDetails().getIsupRev().getTxval()	+ item.getTaxablevalue());
									}
									if(isNotEmpty(item.getIgstamount())) {
											gstr3b.getSupDetails().getIsupRev().setIamt(gstr3b.getSupDetails().getIsupRev().getIamt() + item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
											gstr3b.getSupDetails().getIsupRev().setCamt(gstr3b.getSupDetails().getIsupRev().getCamt() + item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
											gstr3b.getSupDetails().getIsupRev().setSamt(gstr3b.getSupDetails().getIsupRev().getSamt() + item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
											gstr3b.getSupDetails().getIsupRev().setCsamt(gstr3b.getSupDetails().getIsupRev().getCsamt()	+ item.getCessamount());
									}
								}
							}
						}
					}
				}
			}
		}
		if(isNotEmpty(itcClaimedInvoicesList)) {
			for(InvoiceParent purchase : itcClaimedInvoicesList) {
				if(isNotEmpty(purchase.getItems())) {
					for(Item item : purchase.getItems()) {
						if(purchase.getInvtype().equals(MasterGSTConstants.B2B)) {
							String reverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								reverseChargeType = purchase.getRevchargetype();
							}else {
								reverseChargeType = "Regular";
							}
							if ("Regular".equals(reverseChargeType)) {
								
								String elgtype = item.getElg();
								if("no".equals(elgtype)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt()+ item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt()+ item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt()+ item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(elgtype)) {
										Double elgpercent = 0d;
										if(isNotEmpty(item.getElgpercent())) {
											elgpercent = item.getElgpercent();
										}
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setIamt(gstr3b.getItcElg().getItcAvl().get(4).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setCamt(gstr3b.getItcElg().getItcAvl().get(4).getCamt() + item.getCgstavltax());
										}
										if(isNotEmpty(item.getSgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setSamt(gstr3b.getItcElg().getItcAvl().get(4).getSamt() + item.getSgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setCsamt(gstr3b.getItcElg().getItcAvl().get(4).getCsamt()+ item.getCessavltax());
										}
										
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCesstamount);
										}
									}
								}
							}else if("Reverse".equals(reverseChargeType)) {
								String elgtype = item.getElg();
								if("no".equals(elgtype)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt()+ item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt()+ item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt()+ item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(elgtype)) {
										Double elgpercent = 0d;
										if(isNotEmpty(item.getElgpercent())) {
											elgpercent = item.getElgpercent();
										}
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setIamt(gstr3b.getItcElg().getItcAvl().get(2).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setCamt(gstr3b.getItcElg().getItcAvl().get(2).getCamt() + item.getCgstavltax());
										}
										if(isNotEmpty(item.getSgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setSamt(gstr3b.getItcElg().getItcAvl().get(2).getSamt() + item.getSgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setCsamt(gstr3b.getItcElg().getItcAvl().get(2).getCsamt()+ item.getCessavltax());
										}
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCesstamount);
										}
									}
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.B2BUR)){
							String b2burReverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								b2burReverseChargeType = purchase.getRevchargetype();
							}else {
								b2burReverseChargeType = "Regular";
							}
							if("Reverse".equals(b2burReverseChargeType)) {
								String itcType = item.getElg();
								if("no".equals(itcType)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt()+ item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt()+ item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt()+ item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(itcType)) {
										Double elgpercent = 0d;
										if(isNotEmpty(item.getElgpercent())) {
											elgpercent = item.getElgpercent();
										}
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setIamt(gstr3b.getItcElg().getItcAvl().get(2).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setCamt(gstr3b.getItcElg().getItcAvl().get(2).getCamt() + item.getCgstavltax());
										}
										if(isNotEmpty(item.getSgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setSamt(gstr3b.getItcElg().getItcAvl().get(2).getSamt() + item.getSgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(2).setCsamt(gstr3b.getItcElg().getItcAvl().get(2).getCsamt()+ item.getCessavltax());
										}
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCesstamount);
										}
									}
								}
							}else {
								String itcType = item.getElg();
								if("no".equals(itcType)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()	+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(itcType)) {
										Double elgpercent = 0d;
										if(isNotEmpty(item.getElgpercent())) {
											elgpercent = item.getElgpercent();
										}
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setIamt(gstr3b.getItcElg().getItcAvl().get(4).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setCamt(gstr3b.getItcElg().getItcAvl().get(4).getCamt() + item.getCgstavltax());
										}
										if(isNotEmpty(item.getSgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setSamt(
													gstr3b.getItcElg().getItcAvl().get(4).getSamt() + item.getSgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setCsamt(gstr3b.getItcElg().getItcAvl().get(4).getCsamt()	+ item.getCessavltax());
										}
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCesstamount);
										}
									}
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.IMP_GOODS)) {
							String itcType = item.getElg();
							if("no".equals(itcType)) {
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + item.getCessamount());
								}
							}else {
								if(!"pending".equals(itcType)) {
									Double elgpercent = 0d;
									if(isNotEmpty(item.getElgpercent())) {
										elgpercent = item.getElgpercent();
									}
									if(isNotEmpty(item.getIgstavltax())) {
										gstr3b.getItcElg().getItcAvl().get(0).setIamt(gstr3b.getItcElg().getItcAvl().get(0).getIamt() + item.getIgstavltax());
									}
									if(isNotEmpty(item.getCessavltax())) {
										gstr3b.getItcElg().getItcAvl().get(0).setCsamt(gstr3b.getItcElg().getItcAvl().get(0).getCsamt() + item.getCessavltax());
									}
									if(isNotEmpty(item.getIgstamount())) {
										Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
									}
									if(isNotEmpty(item.getCgstamount())) {
										Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
									}
									if(isNotEmpty(item.getSgstamount())) {
										Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
									}
									if(isNotEmpty(item.getCessamount())) {
										Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCesstamount);
									}
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.IMP_SERVICES)) {
							String impReverseChargeType = "";
							if(isNotEmpty(purchase.getRevchargetype())) {
								impReverseChargeType = purchase.getRevchargetype();
							}else {
								impReverseChargeType = "Regular";
							}
							String itcType = item.getElg();
							Double elgpercent = 0d;
							if(isNotEmpty(item.getElgpercent())) {
								elgpercent = item.getElgpercent();
							}
							if("Reverse".equals(impReverseChargeType)) {
								if("no".equals(itcType)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()	+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(itcType)) {
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(1).setIamt(gstr3b.getItcElg().getItcAvl().get(1).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(1).setCsamt(gstr3b.getItcElg().getItcAvl().get(1).getCsamt()	+ item.getCessavltax());
										}
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCessamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCessamount);
										}
									}
								}
							}else {
								if("no".equals(itcType)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()	+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(itcType)) {
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(1).setIamt(gstr3b.getItcElg().getItcAvl().get(1).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(1).setCsamt(gstr3b.getItcElg().getItcAvl().get(1).getCsamt()	+ item.getCessavltax());
										}
										
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCessamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCessamount);
										}
									}
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.ISD)) {
							String itcType = "";
							if(isNotEmpty(item.getIsdType())) {
								itcType = item.getIsdType();
							}
							if ("Ineligible - Credit distributed".equals(itcType) || "Ineligible - Credit distributed as".equals(itcType)) {
								
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + item.getCessamount());
								}
							} else if ("Eligible - Credit distributed".equals(itcType) || "Eligible - Credit distributed as".equals(itcType)) {
								
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getItcElg().getItcAvl().get(3).setIamt(gstr3b.getItcElg().getItcAvl().get(3).getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getItcElg().getItcAvl().get(3).setCamt(gstr3b.getItcElg().getItcAvl().get(3).getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getItcElg().getItcAvl().get(3).setSamt(gstr3b.getItcElg().getItcAvl().get(3).getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getItcElg().getItcAvl().get(3).setCsamt(gstr3b.getItcElg().getItcAvl().get(3).getCsamt() + item.getCessamount());
								}
							}
						}else if(purchase.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)){
							String itcrevtype = "";
							if(isNotEmpty(item.getItcRevtype())) {
								itcrevtype = item.getItcRevtype();
							}
							if("other".equals(itcrevtype)) {
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getItcElg().getItcRev().get(1).setIamt(gstr3b.getItcElg().getItcRev().get(1).getIamt() + item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getItcElg().getItcRev().get(1).setCamt(gstr3b.getItcElg().getItcRev().get(1).getCamt() + item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getItcElg().getItcRev().get(1).setSamt(gstr3b.getItcElg().getItcRev().get(1).getSamt() + item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getItcElg().getItcRev().get(1).setCsamt(gstr3b.getItcElg().getItcRev().get(1).getCsamt() + item.getCessamount());
								}
							}else {
								if(isNotEmpty(item.getIgstamount())) {
									gstr3b.getItcElg().getItcRev().get(0).setIamt(item.getIgstamount());
								}
								if(isNotEmpty(item.getCgstamount())) {
									gstr3b.getItcElg().getItcRev().get(0).setCamt(item.getCgstamount());
								}
								if(isNotEmpty(item.getSgstamount())) {
									gstr3b.getItcElg().getItcRev().get(0).setSamt(item.getSgstamount());
								}
								if(isNotEmpty(item.getCessamount())) {
									gstr3b.getItcElg().getItcRev().get(0).setCsamt(item.getCessamount());
								}
							}
							
						} else if (purchase.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)
								|| purchase.getInvtype().equals(MasterGSTConstants.CDNUR)) {
							String docType = "";
							if(purchase.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
								docType = purchase.getCdn().get(0).getNt().get(0).getNtty();
							}else {
								docType = purchase.getCdnur().get(0).getNtty();
							}
							if("C".equals(docType)) {
									String elgtype = item.getElg();
									if("no".equals(elgtype)) {
										if(isNotEmpty(item.getIgstamount())) {
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() - item.getIgstamount());
										}
										if(isNotEmpty(item.getCgstamount())) {
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() - item.getCgstamount());
										}
										if(isNotEmpty(item.getSgstamount())) {
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() - item.getSgstamount());
										}
										if(isNotEmpty(item.getCessamount())) {
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()	- item.getCessamount());
										}
									}else {
										if(!"pending".equals(elgtype)) {
											Double elgpercent = 0d;
											if(isNotEmpty(item.getElgpercent())) {
												elgpercent = item.getElgpercent();
											}
											/*if(isNotEmpty(item.getIgstavltax())) {
												gstr3b.getItcElg().getItcAvl().get(4).setIamt(gstr3b.getItcElg().getItcAvl().get(4).getIamt() - item.getIgstavltax());
											}
											if(isNotEmpty(item.getCgstavltax())) {
												gstr3b.getItcElg().getItcAvl().get(4).setCamt(gstr3b.getItcElg().getItcAvl().get(4).getCamt() - item.getCgstavltax());
											}
											if(isNotEmpty(item.getSgstavltax())) {
												gstr3b.getItcElg().getItcAvl().get(4).setSamt(gstr3b.getItcElg().getItcAvl().get(4).getSamt() - item.getSgstavltax());
											}
											if(isNotEmpty(item.getCessavltax())) {
												gstr3b.getItcElg().getItcAvl().get(4).setCsamt(gstr3b.getItcElg().getItcAvl().get(4).getCsamt()	- item.getCessavltax());
											}*/
											
											
											if(isNotEmpty(item.getIgstavltax())) {
												gstr3b.getItcElg().getItcRev().get(1).setIamt(gstr3b.getItcElg().getItcRev().get(1).getIamt() + item.getIgstavltax());
											}
											if(isNotEmpty(item.getCgstavltax())) {
												gstr3b.getItcElg().getItcRev().get(1).setCamt(gstr3b.getItcElg().getItcRev().get(1).getCamt() + item.getCgstavltax());
											}
											if(isNotEmpty(item.getSgstavltax())) {
												gstr3b.getItcElg().getItcRev().get(1).setSamt(gstr3b.getItcElg().getItcRev().get(1).getSamt() + item.getSgstavltax());
											}
											if(isNotEmpty(item.getCessavltax())) {
												gstr3b.getItcElg().getItcRev().get(1).setCsamt(gstr3b.getItcElg().getItcRev().get(1).getCsamt() + item.getCessavltax());
											}
											
											
											
											if(isNotEmpty(item.getIgstamount())) {
												Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
												gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() - inelgIgstamount);
											}
											if(isNotEmpty(item.getCgstamount())) {
												Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
												gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() - inelgCgstamount);
											}
											if(isNotEmpty(item.getSgstamount())) {
												Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
												gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() - inelgSgstamount);
											}
											if(isNotEmpty(item.getCessamount())) {
												Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
												gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() - inelgCesstamount);
											}
										}
									}
									
							}else if("D".equals(docType)) {
								String elgtype = item.getElg();
								if("no".equals(elgtype)) {
									if(isNotEmpty(item.getIgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + item.getIgstamount());
									}
									if(isNotEmpty(item.getCgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + item.getCgstamount());
									}
									if(isNotEmpty(item.getSgstamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + item.getSgstamount());
									}
									if(isNotEmpty(item.getCessamount())) {
										gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt()	+ item.getCessamount());
									}
								}else {
									if(!"pending".equals(elgtype)) {
										Double elgpercent = 0d;
										if(isNotEmpty(item.getElgpercent())) {
											elgpercent = item.getElgpercent();
										}
										if(isNotEmpty(item.getIgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setIamt(gstr3b.getItcElg().getItcAvl().get(4).getIamt() + item.getIgstavltax());
										}
										if(isNotEmpty(item.getCgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setCamt(gstr3b.getItcElg().getItcAvl().get(4).getCamt() + item.getCgstavltax());
										}
										if(isNotEmpty(item.getSgstavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setSamt(gstr3b.getItcElg().getItcAvl().get(4).getSamt() + item.getSgstavltax());
										}
										if(isNotEmpty(item.getCessavltax())) {
											gstr3b.getItcElg().getItcAvl().get(4).setCsamt(gstr3b.getItcElg().getItcAvl().get(4).getCsamt()	+ item.getCessavltax());
										}
										
										if(isNotEmpty(item.getIgstamount())) {
											Double inelgIgstamount = (item.getIgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setIamt(gstr3b.getItcElg().getItcInelg().get(1).getIamt() + inelgIgstamount);
										}
										if(isNotEmpty(item.getCgstamount())) {
											Double inelgCgstamount = (item.getCgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCamt(gstr3b.getItcElg().getItcInelg().get(1).getCamt() + inelgCgstamount);
										}
										if(isNotEmpty(item.getSgstamount())) {
											Double inelgSgstamount = (item.getSgstamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setSamt(gstr3b.getItcElg().getItcInelg().get(1).getSamt() + inelgSgstamount);
										}
										if(isNotEmpty(item.getCessamount())) {
											Double inelgCesstamount = (item.getCessamount())*((100 - elgpercent)/100);
											gstr3b.getItcElg().getItcInelg().get(1).setCsamt(gstr3b.getItcElg().getItcInelg().get(1).getCsamt() + inelgCesstamount);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		Double itcelgaiamt = gstr3b.getItcElg().getItcAvl().get(0).getIamt()
				+ gstr3b.getItcElg().getItcAvl().get(1).getIamt() + gstr3b.getItcElg().getItcAvl().get(2).getIamt()
				+ gstr3b.getItcElg().getItcAvl().get(3).getIamt() + gstr3b.getItcElg().getItcAvl().get(4).getIamt();
		Double itcelgacsamt = gstr3b.getItcElg().getItcAvl().get(0).getCsamt()
				+ gstr3b.getItcElg().getItcAvl().get(1).getCsamt() + gstr3b.getItcElg().getItcAvl().get(2).getCsamt()
				+ gstr3b.getItcElg().getItcAvl().get(3).getCsamt() + gstr3b.getItcElg().getItcAvl().get(4).getCsamt();
		Double itcelgacamt = gstr3b.getItcElg().getItcAvl().get(2).getCamt()
				+ gstr3b.getItcElg().getItcAvl().get(3).getCamt() + gstr3b.getItcElg().getItcAvl().get(4).getCamt();
		Double itcelgasamt = gstr3b.getItcElg().getItcAvl().get(2).getSamt()
				+ gstr3b.getItcElg().getItcAvl().get(3).getSamt() + gstr3b.getItcElg().getItcAvl().get(4).getSamt();
		
		gstr3b.getItcElg().getItcNet().setIamt(itcelgaiamt
				- (gstr3b.getItcElg().getItcRev().get(0).getIamt() + gstr3b.getItcElg().getItcRev().get(1).getIamt()));
		gstr3b.getItcElg().getItcNet().setCamt(itcelgacamt
				- (gstr3b.getItcElg().getItcRev().get(0).getCamt() + gstr3b.getItcElg().getItcRev().get(1).getCamt()));
		gstr3b.getItcElg().getItcNet().setSamt(itcelgasamt
				- (gstr3b.getItcElg().getItcRev().get(0).getSamt() + gstr3b.getItcElg().getItcRev().get(1).getSamt()));
		gstr3b.getItcElg().getItcNet().setCsamt(itcelgacsamt - (gstr3b.getItcElg().getItcRev().get(0).getCsamt()
				+ gstr3b.getItcElg().getItcRev().get(1).getCsamt()));
		logger.debug(CLASSNAME + method + END);
		return gstr3b;
	}
	public GSTR3BInterestDetails lateFeeCalculate(boolean nilLateFeeFlag, boolean lateFeeFlag, int month, int year) {
		GSTR3BInterestDetails intrLtfee=new GSTR3BInterestDetails();
		GSTR3BDetails intrDetails=new GSTR3BDetails();
		intrDetails.setCamt(0d);
		intrDetails.setSamt(0d);
		intrLtfee.setIntrDetails(intrDetails);
		return intrLtfee;
	}
	@Override
	@Transactional
	public void updateMismatchRecords(List<MisMatchVO> records, boolean acceptFlag) {
		final String method = "updateMismatchRecords ::";
		logger.debug(CLASSNAME + method + BEGIN);
		// Clear duplicates
		List<String> onlyPurchases = Lists.newArrayList();
		List<String> onlyGSTR2 = Lists.newArrayList();
		if (acceptFlag) { // Implementing accept logic
			if (isNotEmpty(records)) {
				for (MisMatchVO record : records) {
					if (isNotEmpty(record.getPurchaseId()) && isNotEmpty(record.getGstrId())) {
						GSTR2 gstr2 = gstr2Repository.findOne(record.getGstrId());
						if (isNotEmpty(gstr2)) {
							PurchaseRegister purchaseRegister = purchaseRepository.findOne(record.getPurchaseId());
							if (isNotEmpty(purchaseRegister)) {
								try {
									ObjectId id = purchaseRegister.getId();
									String invType = purchaseRegister.getInvtype();
									String fullName = purchaseRegister.getFullname();
									Date createdDate = purchaseRegister.getCreatedDate();
									BeanUtils.copyProperties(purchaseRegister, gstr2);
									purchaseRegister.setId(id);
									purchaseRegister.setInvtype(invType);
									purchaseRegister.setFullname(fullName);
									purchaseRegister.setCreatedDate(createdDate);
									purchaseRegister.setMatchingId(record.getGstrId());
									purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
									Date dt = null;
										dt = (Date)purchaseRegister.getDateofinvoice();
									
									if(isNotEmpty(dt)) {
										int month = dt.getMonth();
										int year = dt.getYear()+1900;
										int quarter = month/3;
										quarter = quarter == 0 ? 4 : quarter;
										String yearCode = quarter == 4 ? (year-1)+"-"+year : (year)+"-"+(year+1);
										month++;
										
										purchaseRegister.setMthCd(""+month);
										purchaseRegister.setYrCd(""+yearCode);
										purchaseRegister.setQrtCd(""+quarter);
									}
									if(isNotEmpty(purchaseRegister.getBillDate())) {
										purchaseRegister.setBillDate(purchaseRegister.getDateofinvoice());
									}else {
										purchaseRegister.setBillDate(purchaseRegister.getDateofinvoice());
									}
									if(NullUtil.isNotEmpty(purchaseRegister.getBillDate())) {
										Date billdt = (Date)purchaseRegister.getBillDate();
										int billmonth = billdt.getMonth();
										int billyear = billdt.getYear()+1900;
										int billquarter = billmonth/3;
										billquarter = billquarter == 0 ? 4 : billquarter;
										String billyearCode = billquarter == 4 ? (billyear-1)+"-"+billyear : (billyear)+"-"+(billyear+1);
										billmonth++;
										purchaseRegister.setTrDatemthCd(""+billmonth);
										purchaseRegister.setTrDateqrtCd(""+billquarter);
										purchaseRegister.setTrDateyrCd(""+billyearCode);
									}
									if(isNotEmpty(purchaseRegister) && isEmpty(purchaseRegister.getDueDate()) && isNotEmpty(purchaseRegister.getDateofinvoice())) {
										purchaseRegister.setDueDate(purchaseRegister.getDateofinvoice());
										purchaseRegister.setTermDays("0");
									}
									if(isNotEmpty(purchaseRegister) && isEmpty(purchaseRegister.getPendingAmount()) && isNotEmpty(purchaseRegister.getTotalamount())) {
										purchaseRegister.setPendingAmount(purchaseRegister.getTotalamount());
										purchaseRegister.setReceivedAmount(0d);
									}
									purchaseRepository.save(purchaseRegister);
									gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
									gstr2Repository.save(gstr2);
								} catch (IllegalAccessException | InvocationTargetException e) {
									logger.error(CLASSNAME + method + "ERROR in BeanUtils copy", e);
								}
							}
						}
					}else if (isNotEmpty(record.getGstrId()) && !onlyGSTR2.contains(record.getGstrId())) {
						onlyGSTR2.add(record.getGstrId());
						GSTR2 gstr2 = gstr2Repository.findOne(record.getGstrId());
						if (isNotEmpty(gstr2)) {
							PurchaseRegister purchaseRegister = new PurchaseRegister();
							try {
								BeanUtils.copyProperties(purchaseRegister, gstr2);
								purchaseRegister.setId(new ObjectId());
								purchaseRegister.setMatchingId(record.getGstrId());
								purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
								Date dt = null;
								dt = (Date)purchaseRegister.getDateofinvoice();
							
								if(isNotEmpty(dt)) {
									int month = dt.getMonth();
									int year = dt.getYear()+1900;
									int quarter = month/3;
									quarter = quarter == 0 ? 4 : quarter;
									String yearCode = quarter == 4 ? (year-1)+"-"+year : (year)+"-"+(year+1);
									month++;
									
									purchaseRegister.setMthCd(""+month);
									purchaseRegister.setYrCd(""+yearCode);
									purchaseRegister.setQrtCd(""+quarter);
								}
								if(isNotEmpty(purchaseRegister.getBillDate())) {
									purchaseRegister.setBillDate(purchaseRegister.getDateofinvoice());
								}else {
									purchaseRegister.setBillDate(purchaseRegister.getDateofinvoice());
								}
								
								if(NullUtil.isNotEmpty(purchaseRegister.getBillDate())) {
									Date billdt = (Date)purchaseRegister.getBillDate();
									int billmonth = billdt.getMonth();
									int billyear = billdt.getYear()+1900;
									int billquarter = billmonth/3;
									billquarter = billquarter == 0 ? 4 : billquarter;
									String billyearCode = billquarter == 4 ? (billyear-1)+"-"+billyear : (billyear)+"-"+(billyear+1);
									billmonth++;
									purchaseRegister.setTrDatemthCd(""+billmonth);
									purchaseRegister.setTrDateqrtCd(""+billquarter);
									purchaseRegister.setTrDateyrCd(""+billyearCode);
								}
								if(isNotEmpty(purchaseRegister) && isEmpty(purchaseRegister.getDueDate()) && isNotEmpty(purchaseRegister.getDateofinvoice())) {
									purchaseRegister.setDueDate(purchaseRegister.getDateofinvoice());
									purchaseRegister.setTermDays("0");
								}
								if(isNotEmpty(purchaseRegister) && isEmpty(purchaseRegister.getPendingAmount()) && isNotEmpty(purchaseRegister.getTotalamount())) {
									purchaseRegister.setPendingAmount(purchaseRegister.getTotalamount());
									purchaseRegister.setReceivedAmount(0d);
								}
								purchaseRepository.save(purchaseRegister);
								gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
								gstr2Repository.save(gstr2);
							} catch (IllegalAccessException | InvocationTargetException e) {
								logger.error(CLASSNAME + method + "ERROR in BeanUtils copy", e);
							}
						}
					}
				}
			}
		} else { // Implementing reject logic
			if (isNotEmpty(records)) {
				for (MisMatchVO record : records) {
					if (isNotEmpty(record.getPurchaseId()) && isNotEmpty(record.getGstrId())) {
						GSTR2 gstr2 = gstr2Repository.findOne(record.getGstrId());
						if (isNotEmpty(gstr2)) {
							PurchaseRegister purchaseRegister = purchaseRepository.findOne(record.getPurchaseId());
							if (isNotEmpty(purchaseRegister)) {
								ObjectId id = gstr2.getId();
								try {
									BeanUtils.copyProperties(gstr2, purchaseRegister);
									gstr2.setId(id);
									gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
									gstr2Repository.save(gstr2);
									purchaseRegister.setMatchingId(record.getGstrId());
									purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
									if(isNotEmpty(purchaseRegister.getBillDate())) {
										purchaseRegister.setBillDate(purchaseRegister.getDateofinvoice());
									}
									if(isEmpty(purchaseRegister.getDueDate()) && isNotEmpty(purchaseRegister.getDateofinvoice())) {
										purchaseRegister.setDueDate(purchaseRegister.getDateofinvoice());
										purchaseRegister.setTermDays("0");
									}
									if(isEmpty(purchaseRegister.getPendingAmount()) && isNotEmpty(purchaseRegister.getTotalamount())) {
										purchaseRegister.setPendingAmount(purchaseRegister.getTotalamount());
										purchaseRegister.setReceivedAmount(0d);
									}
									purchaseRepository.save(purchaseRegister);
								} catch (IllegalAccessException | InvocationTargetException e) {
									logger.error(CLASSNAME + method + "ERROR in BeanUtils copy", e);
								}
							}
						}
					} else if (isNotEmpty(record.getGstrId())) {
						GSTR2 gstr2 = gstr2Repository.findOne(record.getGstrId());
						if (isNotEmpty(gstr2)) {
							if (isNotEmpty(gstr2.getB2b())) {
								for (GSTRB2B gstrb2b : gstr2.getB2b()) {
									if (isNotEmpty(gstrb2b.getInv())) {
										for (GSTRInvoiceDetails gstrInvoiceDetail : gstrb2b.getInv()) {
											gstrInvoiceDetail.setFlag(MasterGSTConstants.GST_FLAG_REJECT);
										}
									}
								}
							} else if (isNotEmpty(gstr2.getCdn())) {
								for (GSTRCreditDebitNotes gstrCreditDebitNote : gstr2.getCdn()) {
									if (isNotEmpty(gstrCreditDebitNote.getNt())) {
										for (GSTRInvoiceDetails gstrInvoiceDetail : gstrCreditDebitNote.getNt()) {
											gstrInvoiceDetail.setFlag(MasterGSTConstants.GST_FLAG_REJECT);
										}
									}
								}
							}
							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
							gstr2Repository.save(gstr2);
						}
					} else if (isNotEmpty(record.getPurchaseId())) { 
						// This case should not happen ideally
						PurchaseRegister purchaseRegister = purchaseRepository.findOne(record.getPurchaseId());
						if (isNotEmpty(purchaseRegister)) {
							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
							if(isNotEmpty(purchaseRegister.getBillDate())) {
								purchaseRegister.setBillDate(purchaseRegister.getDateofinvoice());
							}
							if(isEmpty(purchaseRegister.getDueDate()) && isNotEmpty(purchaseRegister.getDateofinvoice())) {
								purchaseRegister.setDueDate(purchaseRegister.getDateofinvoice());
								purchaseRegister.setTermDays("0");
							}
							if(isEmpty(purchaseRegister.getPendingAmount()) && isNotEmpty(purchaseRegister.getTotalamount())) {
								purchaseRegister.setPendingAmount(purchaseRegister.getTotalamount());
								purchaseRegister.setReceivedAmount(0d);
							}
							purchaseRepository.save(purchaseRegister);
						}
					}
				}
			}
		}
		logger.debug(CLASSNAME + method + END);
	}

	private GSTReturnSummary getGSTReturnSummury(String returntype, String month, int year) {
		GSTReturnSummary gstReturnSummury = new GSTReturnSummary();
		switch (returntype) {
		case GSTR1:
			gstReturnSummury.setReturntype(GSTR1);
			if (month.equals("Jan")) {
				year++;
			}
			String newMonth = month;
			String newDate = "11";
			int newYear = year;
			if (year == 2017) {
				if (month.equals("Jul") || month.equals("Aug") || month.equals("Sep") || month.equals("Oct")) {
					newMonth = "Dec";
					newDate = "31";
				} else if (month.equals("Nov") || month.equals("Dec")) {
					newMonth = "Feb";
					newDate = "15";
					newYear = year + 1;
				}
			} else if (year == 2018) {
				if (month.equals("Jan")) {
					newMonth = "Feb";
					newDate = "15";
				} else if (month.equals("Feb") || month.equals("Mar") || month.equals("Apr")) {
					newMonth = "Apr";
					newDate = "30";
				}
			}
			gstReturnSummury.setDuedate(newDate + " " + newMonth + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Total Tax Value");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Sales Return Filing");
			gstReturnSummury.setActive("true");
			break;
		case GSTR2:
			gstReturnSummury.setReturntype(GSTR2);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("15" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Input Tax Credit");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Purchase Return Filing");
			gstReturnSummury.setActive("true");
			break;
		case MasterGSTConstants.GSTR3:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR3);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("20" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Total Tax Liability");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Monthly Return Filing");
			gstReturnSummury.setActive("false");
			break;
		case GSTR4:
			gstReturnSummury.setReturntype(GSTR4);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("18" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Total Tax Liability");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Quarterly Return Filing");
			gstReturnSummury.setActive("false");
			break;
		case MasterGSTConstants.GSTR5:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR5);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("20" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Total Tax Liability");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Monthly Return Filing");
			gstReturnSummury.setActive("false");
			break;
		case MasterGSTConstants.GSTR6:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR6);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("13" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("ITC Available");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Monthly Return Filing");
			gstReturnSummury.setActive("true");
			break;
		case MasterGSTConstants.GSTR7:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR7);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("10" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("TDS");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Monthly Return Filing");
			gstReturnSummury.setActive("false");
			break;
		case MasterGSTConstants.GSTR8:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR8);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("10" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("TCS");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Monthly Return Filing");
			gstReturnSummury.setActive("false");
			break;
		case MasterGSTConstants.GSTR9:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR9);
			int nextyear = year + 1;
			gstReturnSummury.setDuedate("31 Dec" + " " + nextyear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Net Profit");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Annual Return Filing");
			gstReturnSummury.setActive("true");
			break;
		case MasterGSTConstants.GSTR10:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR10);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("10" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Closing ITC");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Final Return Filing");
			gstReturnSummury.setActive("false");
			break;
		case MasterGSTConstants.GSTR11:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR11);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("28" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("ITC");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setDescription("Relevant Month Filing");
			gstReturnSummury.setActive("false");
			break;
		case MasterGSTConstants.GSTR3B:
			gstReturnSummury.setReturntype(MasterGSTConstants.GSTR3B);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDescription("Monthly Return Filing");
			gstReturnSummury.setDuedate("20" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("Total Tax Liability");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setActive("true");
			break;
		default:
			gstReturnSummury.setReturntype(returntype);
			newYear = year;
			if(month.equals("Jan")){
				newYear = year+1;
			}
			gstReturnSummury.setDuedate("10" + " " + month + " " + newYear);
			gstReturnSummury.setStatus(PENDING);
			gstReturnSummury.setFieldName("");
			gstReturnSummury.setFieldValue(0d);
			gstReturnSummury.setActive("false");
			break;
		}
		return gstReturnSummury;
	}

	@Override
	public Response delSelectedInvoices(String clientid, String returntype, int month, int year,
			List<String> invoiceList) {
		List<? extends InvoiceParent> invoices = Lists.newArrayList();
		invoices = getSelectedInvoices(invoiceList, returntype);
		if (returntype.equals(GSTR1)) {
			gstr1Repository.delete((List<GSTR1>)invoices);
		} else if (returntype.equals(GSTR2) || returntype.equals(MasterGSTConstants.GSTR2A)) {
			gstr2Repository.delete((List<GSTR2>)invoices);
		} else if (returntype.equals(PURCHASE_REGISTER)) {
			purchaseRepository.delete((List<PurchaseRegister>)invoices);
		} else if (returntype.equals(GSTR4)) {
			gstr4Repository.delete((List<GSTR4>)invoices);
		} else if (returntype.equals(GSTR5)) {
			gstr5Repository.delete((List<GSTR5>)invoices);
		} else if (returntype.equals(GSTR6)) {
			gstr6Repository.delete((List<GSTR6>)invoices);
		} else if (returntype.equals(ANX1)) {
			//anx1Repository.delete((List<Anx1>) invoices);
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Map<String, Map<String, List<String>>> getClientFilingStatusReport(final String clientId, final int year,final String excelDwnldOrReport) {
		logger.debug(CLASSNAME + "getFilingStatusReport : " + BEGIN);
		Map<String, Map<String, List<String>>> statusMap = Maps.newHashMap();
		Client client = findById(clientId);
		List<GSTReturnSummary> returnsSummuryList = client.getReturnsSummary();
		if(isNotEmpty(returnsSummuryList)) {
			String rtStart = "04"+year;
			String rtEnd = "03"+(year+1);
			String[] rtArray = { rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year, "10" + year,
					"11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd };
			if(isNotEmpty(excelDwnldOrReport) && ("exceldwnld").equalsIgnoreCase(excelDwnldOrReport)) {
				for (GSTReturnSummary summaryItem : returnsSummuryList) {
					List<ClientStatus> statussList = clientStatusRepository.findByClientIdAndReturnTypeAndReturnPeriodIn(clientId, summaryItem.getReturntype(), Arrays.asList(rtArray));
					int nxtYear = year + 1;
					String fy = year + "-" + String.valueOf(nxtYear).substring(2);
					if (statussList.size() < 12) {
						clientUtils.publicRettrack(clientId, fy);
						break;
					}
				}
			}
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

			List<ClientStatus> statusList = clientStatusRepository.findByClientIdAndReturnPeriodIn(clientId,
					Arrays.asList(rtArray));
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				if(isNotEmpty(summaryItem.getActive()) && summaryItem.getActive().equals("true")) {
					String returnType = summaryItem.getReturntype();
					// Map<String, String> rtMap = Maps.newHashMap();

					Map<String, List<String>> rtMap = Maps.newHashMap();
					if(isNotEmpty(statusList)) {
						for(ClientStatus clientStatus : statusList) {
							
							if(clientStatus.getReturnType().equals(returnType)) {
								// rtMap.put(clientStatus.getReturnPeriod(), clientStatus.getStatus());
								List<String> list1 = Lists.newArrayList();
								list1.add(clientStatus.getStatus());
								list1.add(sdf.format(clientStatus.getDof()));
								if (isNotEmpty(clientStatus.getArn())) {
									list1.add(clientStatus.getArn());
								} else {
									list1.add("-");
								}
								rtMap.put(clientStatus.getReturnPeriod(), list1);
								if (clientStatus.getStatus().equals(MasterGSTConstants.STATUS_FILED)
										|| clientStatus.getStatus().equals(MasterGSTConstants.STATUS_SUBMITTED)) {
									for(String rt : rtArray) {
										if(!rt.equals(clientStatus.getReturnPeriod())) {
											if(!rtMap.containsKey(rt)) {
												List<String> list = Lists.newArrayList();
												list.add(clientStatus.getStatus());
												list.add(sdf.format(clientStatus.getDof()));
												if (isNotEmpty(clientStatus.getArn())) {
													list.add(clientStatus.getArn());
												} else {
													list1.add("-");
												}
												rtMap.put(clientStatus.getReturnPeriod(), list);
												// rtMap.put(rt, clientStatus.getStatus());
											}
										} else {
											break;
										}
									}
								}
							}
						}
					}
					for(String rt : rtArray) {
						
						if(!rtMap.containsKey(rt)) {
							List<String> list2 = Lists.newArrayList();
							list2.add(MasterGSTConstants.PENDING);
							rtMap.put(rt, list2);
						}
					}
					statusMap.put(returnType, rtMap);
				}
			}
		}
		return statusMap;
	}

	@Override
	public List<CountryConfig> getCountriesList() {
		
		return configService.getCountries();
	}
	
	public List<? extends InvoiceParent> getInvoicesByType(final Client client, final String userid,
			final String returnType, String invType, String invoiceConfigType, int month, int year,
			String invnumbercutoff) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				//String yr=year+"-"+(year+1);
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());			
					}
				});
			}
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
				if("Monthly".equals(invnumbercutoff)){
				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
						if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 23, 59, 59);
						} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 23, 59, 59);
						} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 23, 59, 59);
						} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 23, 59, 59);
						}
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
						if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
						} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 23, 59, 59);
						} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 23, 59, 59);
						} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year + 1, 0, 0, 23, 59, 59);
						}
						endDate = new java.util.Date(cal.getTimeInMillis());
					} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					}
				}else{
				if (month == 1 || month == 2 || month == 3) {
					cal.set(year - 1, 2, 31, 0, 0, 0);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, 3, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, 2, 31, 0, 0, 0);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year + 1, 3, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
			User user = userService.findById(userid);
			List<String> invTypes = Lists.newArrayList();
			if(invType.equals(MasterGSTConstants.B2B)){
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CL);
			}else{
				invTypes.add(invType);
			}
			/*
			 * if(isNotEmpty(user) && (isEmpty(user.getIsglobal()) ||
			 * user.getIsglobal().equals("false"))) { CompanyUser companyUser =
			 * profileService.getCompanyUser(user.getEmail()); if(isNotEmpty(companyUser) &&
			 * isNotEmpty(companyUser.getBranch())) { if (returnType.equals(GSTR1)) {
			 * if("ALL".equals(invoiceConfigType)){ return
			 * gstr1Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate); }else{ return
			 * gstr1Repository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(
			 * userid, client.getId().toString(),invTypes, stDate, endDate); } } else if
			 * (returnType.equals(GSTR4)) { if("ALL".equals(invoiceConfigType)){ return
			 * gstr4Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate); }else{ return
			 * gstr4Repository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(
			 * userid, client.getId().toString(), invTypes, stDate, endDate); } } else if
			 * (returnType.equals(GSTR5)) { if("ALL".equals(invoiceConfigType)){ return
			 * gstr5Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate); }else{ return
			 * gstr5Repository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(
			 * userid, client.getId().toString(), invTypes, stDate, endDate); } } else if
			 * (returnType.equals(GSTR6)) { if("ALL".equals(invoiceConfigType)){ return
			 * gstr6Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate); }else{ return
			 * gstr6Repository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(
			 * userid, client.getId().toString(), invTypes, stDate, endDate); } } else
			 * if(returnType.equals(MasterGSTConstants.ESTIMATES)) {
			 * 
			 * if("ALL".equals(invoiceConfigType)){ return
			 * estimatesRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), stDate, endDate); }else{ return
			 * estimatesRepository.
			 * findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), invTypes, stDate, endDate); } }else
			 * if(returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			 * 
			 * if("ALL".equals(invoiceConfigType)){ return
			 * deliverychallanRepository.findByUseridAndClientidAndDateofinvoiceBetween(
			 * userid, client.getId().toString(), stDate, endDate); }else{ return
			 * deliverychallanRepository.
			 * findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), invTypes, stDate, endDate); } }else
			 * if(returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
			 * 
			 * if("ALL".equals(invoiceConfigType)){ return
			 * purchaseOrderRepository.findByUseridAndClientidAndDateofinvoiceBetween(
			 * userid, client.getId().toString(), stDate, endDate); }else{ return
			 * purchaseOrderRepository.
			 * findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), invTypes, stDate, endDate); } } else
			 * if(returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			 * 
			 * if("ALL".equals(invoiceConfigType)){ return
			 * proformainvoicesRepository.findByUseridAndClientidAndDateofinvoiceBetween(
			 * userid, client.getId().toString(), stDate, endDate); }else{ return
			 * proformainvoicesRepository.
			 * findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
			 * client.getId().toString(), invTypes, stDate, endDate); } } //} }
			 */
				if (returnType.equals(GSTR1)) {
					if("ALL".equals(invoiceConfigType)){
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate);
					}else{
				return gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),
						invTypes, stDate, endDate);
					}
				}else if (returnType.equals("Purchase Register")) {
					if("ALL".equals(invoiceConfigType)){
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate);
					}else{
				return purchaseRepository.findByClientidAndRevchargetypeAndDateofinvoiceBetween(client.getId().toString(),"Reverse", stDate, endDate);
					}
				} else if (returnType.equals(GSTR4)) {
					if("ALL".equals(invoiceConfigType)){
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate);
					}else{
				return gstr4Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),
						invTypes, stDate, endDate);
					}
				} else if (returnType.equals(GSTR5)) {
					if("ALL".equals(invoiceConfigType)){
					return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
							endDate);
					}else{
					return gstr5Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),
							invTypes, stDate, endDate);
					}
				} else if (returnType.equals(GSTR6)) {
					if("ALL".equals(invoiceConfigType)){
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate);
					}else{
				return gstr6Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),
						invTypes, stDate, endDate);
					}
				} else if(returnType.equals(MasterGSTConstants.ESTIMATES)) {
					
					if("ALL".equals(invoiceConfigType)){
				return estimatesRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
						client.getId().toString(), stDate, endDate);
					}else{
				return estimatesRepository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
						client.getId().toString(), invTypes, stDate, endDate);
					}
				}else if(returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
						
					if("ALL".equals(invoiceConfigType)){
				return deliverychallanRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
						client.getId().toString(), stDate, endDate);
					}else{
				return deliverychallanRepository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
						client.getId().toString(), invTypes, stDate, endDate);
					}
				}else if(returnType.equals(MasterGSTConstants.PURCHASEORDER)) {
						
					if("ALL".equals(invoiceConfigType)){
				return purchaseOrderRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
						client.getId().toString(), stDate, endDate);
					}else{
				return purchaseOrderRepository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
						client.getId().toString(), invTypes, stDate, endDate);
					}
				} else if(returnType.equals(MasterGSTConstants.PROFORMAINVOICES)) {
						
					if("ALL".equals(invoiceConfigType)){
				return proformainvoicesRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
						client.getId().toString(), stDate, endDate);
					}else{
				return proformainvoicesRepository.findByUseridAndClientidAndInvtypeInAndDateofinvoiceBetween(userid,
						client.getId().toString(), invTypes, stDate, endDate);
				}
			} 
		}
		return Lists.newArrayList();
	}
	
	public String invoiceNumberformat(CompanyInvoices invoiceConfig,String financialYear, int month){
		
		String startInvNo = "";
		String sInvNo = "";
		if(isNotEmpty(invoiceConfig.getPrefix())) {
			startInvNo += invoiceConfig.getPrefix().toUpperCase();
		}
		if (isNotEmpty(invoiceConfig.getAllowMonth()) && invoiceConfig.getAllowMonth().equals("true")) {
			if(isNotEmpty(invoiceConfig.getFormatMonth())){
				if(invoiceConfig.getFormatMonth().equals("02")){
					startInvNo += (month < 10 ? "0" + month : month);	
				}else if(invoiceConfig.getFormatMonth().equals("02/")){
					startInvNo += (month < 10 ? "0" + month+"/" : month+"/");
				}else if(invoiceConfig.getFormatMonth().equals("02-")){
					startInvNo += (month < 10 ? "0" + month+"-" : month+"-");
				}else if(invoiceConfig.getFormatMonth().equals("FEB")){
					String monthString = getMonthName(month);
					startInvNo += monthString;
				}else if(invoiceConfig.getFormatMonth().equals("FEB/")){
					String monthString = getMonthName(month)+"/";
					startInvNo += monthString;
				}else if(invoiceConfig.getFormatMonth().equals("FEB-")){
					String monthString = getMonthName(month)+"-";
					startInvNo += monthString;
				}
			}else{
				startInvNo += (month < 10 ? "0" + month : month);
			}
		}
		if (isNotEmpty(invoiceConfig.getAllowYear()) && invoiceConfig.getAllowYear().equals("true")) {
			String[] years = financialYear.split("-");
			int year;
			if(month > 3){
				year = Integer.parseInt(years[0]);
			}else{
				year = Integer.parseInt(years[1]);
			}
			if(isNotEmpty(invoiceConfig.getFormatYear())){
				if(invoiceConfig.getFormatYear().equals("19")){
					startInvNo += (Integer.valueOf(year).toString().substring(2));
				}else if(invoiceConfig.getFormatYear().equals("19/")){
					startInvNo += (Integer.valueOf(year).toString().substring(2))+"/";
				}else if(invoiceConfig.getFormatYear().equals("19-")){
					startInvNo += (Integer.valueOf(year).toString().substring(2))+"-";
				}else if(invoiceConfig.getFormatYear().equals("2019")){
					startInvNo += (Integer.valueOf(year).toString());
				}else if(invoiceConfig.getFormatYear().equals("2019/")){
					startInvNo += (Integer.valueOf(year).toString())+"/";
				}else if(invoiceConfig.getFormatYear().equals("2019-")){
					startInvNo += (Integer.valueOf(year).toString())+"-";
				}else if(invoiceConfig.getFormatYear().equals("19-20")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
								+ (Integer.valueOf(year).toString().substring(2));
					}else{
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
								+ (Integer.valueOf(year + 1).toString().substring(2));
					}
				}else if(invoiceConfig.getFormatYear().equals("19-20-")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
								+ (Integer.valueOf(year).toString().substring(2)) + "-";
					}else{
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				}else if(invoiceConfig.getFormatYear().equals("19-20/")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
								+ (Integer.valueOf(year).toString().substring(2)) + "/";
					}else{
						startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				}else if(invoiceConfig.getFormatYear().equals("1920")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2))
								+ (Integer.valueOf(year).toString().substring(2));
					}else{
						startInvNo += (Integer.valueOf(year).toString().substring(2))
								+ (Integer.valueOf(year + 1).toString().substring(2));
					}
				}else if(invoiceConfig.getFormatYear().equals("1920-")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2))
								+ (Integer.valueOf(year).toString().substring(2)) + "-";
					}else{
						startInvNo += (Integer.valueOf(year).toString().substring(2))
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				}else if(invoiceConfig.getFormatYear().equals("1920/")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString().substring(2))
								+ (Integer.valueOf(year).toString().substring(2)) + "/";
					}else{
						startInvNo += (Integer.valueOf(year).toString().substring(2))
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				}else if(invoiceConfig.getFormatYear().equals("2019-20")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString()) + "-"
								+ (Integer.valueOf(year).toString().substring(2));
					}else{
						startInvNo += (Integer.valueOf(year).toString()) + "-"
								+ (Integer.valueOf(year + 1).toString().substring(2));
					}
				}else if(invoiceConfig.getFormatYear().equals("2019-20-")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString()) + "-"
								+ (Integer.valueOf(year).toString().substring(2)) + "-";
					}else{
						startInvNo += (Integer.valueOf(year).toString()) + "-"
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				}else if(invoiceConfig.getFormatYear().equals("2019-20/")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString()) + "-"
								+ (Integer.valueOf(year).toString().substring(2)) + "/";
					}else{
						startInvNo += (Integer.valueOf(year).toString()) + "-"
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				}else if(invoiceConfig.getFormatYear().equals("201920")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString())
								+ (Integer.valueOf(year).toString().substring(2));
					}else{
						startInvNo += (Integer.valueOf(year).toString())
								+ (Integer.valueOf(year + 1).toString().substring(2));
					}
				}else if(invoiceConfig.getFormatYear().equals("201920-")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString())
								+ (Integer.valueOf(year).toString().substring(2)) + "-";
					}else{
						startInvNo += (Integer.valueOf(year).toString())
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
					}
				}else if(invoiceConfig.getFormatYear().equals("201920/")){
					if(month <= 3){
						startInvNo += (Integer.valueOf(year - 1).toString())
								+ (Integer.valueOf(year).toString().substring(2)) + "/";
					}else{
						startInvNo += (Integer.valueOf(year).toString())
								+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
					}
				}
			}else {
				startInvNo += (Integer.valueOf(year).toString());
			}
		}
		
		return startInvNo;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getMonthlyInvoices(Pageable pageable, final Client client, final String userid,
			final String returnType, int month, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(year, month - 1, 0, 23, 59, 59);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			
			User user = userService.findById(userid);
			if(isNotEmpty(user) && (isEmpty(user.getIsglobal()) || user.getIsglobal().equals("false"))) {
				/*
				 * CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
				 * if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getBranch())) {
				 */
					if (returnType.equals(GSTR1)) {
					return gstr1Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
							client.getId().toString(), stDate, endDate, pageable);
					} else if (returnType.equals(GSTR2)) {
					return gstr2Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
							client.getId().toString(), stDate, endDate, pageable);
					} else if (returnType.equals(PURCHASE_REGISTER)) {
					return purchaseRepository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
							client.getId().toString(), stDate, endDate, pageable);
					} else if (returnType.equals(GSTR4)) {
					return gstr4Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
							client.getId().toString(), stDate, endDate, pageable);
					} else if (returnType.equals(GSTR5)) {
					return gstr5Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
							client.getId().toString(), stDate, endDate, pageable);
					} else if (returnType.equals(GSTR6)) {
					return gstr6Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
							client.getId().toString(), stDate, endDate, pageable);
					} else if (returnType.equals("Unclaimed")) {
					return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
							client.getId().toString(), stDate, endDate, pageable);
				} else if (returnType.equals(ANX1)) {
					//return anx1Repository.findByUseridAndClientidAndDateofinvoiceBetween(userid,
						//	client.getId().toString(), stDate, endDate, pageable);
					}
				//}
			}
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getMonthlyInvoicesmatchingStatusisNull(Pageable pageable, final Client client,
			final String userid, final String returnType, int month, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(year, month - 1, 0, 23, 59, 59);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.B2BA);
			invTypes.add(MasterGSTConstants.CDNA);
			invTypes.add(MasterGSTConstants.ISD);
			invTypes.add(MasterGSTConstants.IMP_GOODS);
			if (returnType.equals(GSTR1)) {
				return gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusIsNull(
						client.getId().toString(), invTypes, stDate, endDate, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusIsNull(
						client.getId().toString(), invTypes, stDate, endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			}
		}
		return null;
	}
	
	@Override
	@Transactional
	public Payments saveRecordPayments(Payments payments) {
		Payments paymentInfo =recordPaymentsRepository.save(payments);
		
		populateAccountingNumbers(paymentInfo);
		return paymentInfo;
	}
	
	
	public void populateAccountingNumbers(Payments payments) {
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		if (isNotEmpty(payments) && isNotEmpty(payments.getPaymentDate())) {
			Calendar cal = Calendar.getInstance();
			try {
				cal.setTime(sdf.parse(payments.getPaymentDate()));
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			int month = cal.get(Calendar.MONTH) + 1;
			int year = cal.get(Calendar.YEAR);
			String submissionYear = (year - 1) + "-" + (year);
			if (month > 3) {
				submissionYear = year + "-" + (year + 1);
			}
			
			String returntype=payments.getReturntype();
			String invtype=null;
			if(returntype.equalsIgnoreCase("GSTR1")) {
				invtype ="Receipts";
			}else if(returntype.equalsIgnoreCase("GSTR2") || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)) {
				invtype ="Payments";
			}else if(returntype.equalsIgnoreCase("Vouchers")) {
				invtype ="Vouchers";
			}else if(returntype.equalsIgnoreCase("Contra")) {
				invtype ="Contra";
			}

			CompanyInvoices invoiceConfig = profileService.getInvoiceConfigDetails(payments.getClientid(), submissionYear, invtype, returntype);
			if (isNotEmpty(invoiceConfig)
					&& (isEmpty(invoiceConfig.getPrefix()) || (isNotEmpty(invoiceConfig.getPrefix()) && payments.getVoucherNumber().startsWith(invoiceConfig.getPrefix())))) {
				String startInvNo = "";
				String endInvNo = "";
				String invPrefix = "";
				String actualNo = payments.getVoucherNumber();
				if (isNotEmpty(invoiceConfig.getPrefix())) {
					startInvNo += invoiceConfig.getPrefix().toUpperCase();
					endInvNo += invoiceConfig.getPrefix().toUpperCase();
					invPrefix += invoiceConfig.getPrefix().toUpperCase();
					actualNo = actualNo.replaceFirst(invoiceConfig.getPrefix(), "");
				}
				if (isNotEmpty(invoiceConfig.getAllowMonth()) && invoiceConfig.getAllowMonth().equals("true")) {

					if (isNotEmpty(invoiceConfig.getFormatMonth())) {
						if (invoiceConfig.getFormatMonth().equals("02")) {
							invPrefix += (month < 10 ? "0" + month : month);
							startInvNo += (month < 10 ? "0" + month : month);
							endInvNo += (month < 10 ? "0" + month : month);
							actualNo = actualNo.replaceFirst(
									(month < 10 ? "0" + month : Integer.valueOf(month).toString()), "");
						} else if (invoiceConfig.getFormatMonth().equals("02/")) {
							invPrefix += (month < 10 ? "0" + month + "/" : month + "/");
							startInvNo += (month < 10 ? "0" + month + "/" : month + "/");
							endInvNo += (month < 10 ? "0" + month + "/" : month + "/");
							actualNo = actualNo.replaceFirst(
									(month < 10 ? "0" + month : Integer.valueOf(month).toString()) + "/", "");
						} else if (invoiceConfig.getFormatMonth().equals("02-")) {
							invPrefix += (month < 10 ? "0" + month + "-" : month + "-");
							startInvNo += (month < 10 ? "0" + month + "-" : month + "-");
							endInvNo += (month < 10 ? "0" + month + "-" : month + "-");
							actualNo = actualNo.replaceFirst(
									(month < 10 ? "0" + month : Integer.valueOf(month).toString()) + "-", "");
						} else if (invoiceConfig.getFormatMonth().equals("FEB")) {
							String monthString = getMonthName(month);
							invPrefix += monthString;
							startInvNo += monthString;
							endInvNo += monthString;
							actualNo = actualNo.replaceFirst(monthString, "");
						} else if (invoiceConfig.getFormatMonth().equals("FEB/")) {
							String monthString = getMonthName(month) + "/";
							invPrefix += monthString;
							startInvNo += monthString;
							endInvNo += monthString;
							actualNo = actualNo.replaceFirst(monthString, "");
						} else if (invoiceConfig.getFormatMonth().equals("FEB-")) {
							String monthString = getMonthName(month) + "-";
							invPrefix += monthString;
							startInvNo += monthString;
							endInvNo += monthString;
							actualNo = actualNo.replaceFirst(monthString, "");
						}
					} else {
						invPrefix += (month < 10 ? "0" + month : month);
						startInvNo += (month < 10 ? "0" + month : month);
						endInvNo += (month < 10 ? "0" + month : month);
						actualNo = actualNo
								.replaceFirst((month < 10 ? "0" + month : Integer.valueOf(month).toString()), "");
					}
				}
				if (isNotEmpty(invoiceConfig.getAllowYear()) && invoiceConfig.getAllowYear().equals("true")) {

					if (isNotEmpty(invoiceConfig.getFormatYear())) {
						if (invoiceConfig.getFormatYear().equals("19")) {
							invPrefix += (Integer.valueOf(year).toString().substring(2));
							startInvNo += (Integer.valueOf(year).toString().substring(2));
							endInvNo += (Integer.valueOf(year).toString().substring(2));
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)), "");
						} else if (invoiceConfig.getFormatYear().equals("19/")) {
							invPrefix += (Integer.valueOf(year).toString().substring(2)) + "/";
							startInvNo += (Integer.valueOf(year).toString().substring(2)) + "/";
							endInvNo += (Integer.valueOf(year).toString().substring(2)) + "/";
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "/",
									"");
						} else if (invoiceConfig.getFormatYear().equals("19-")) {
							invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-";
							startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-";
							endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-";
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2)) + "-",
									"");
						} else if (invoiceConfig.getFormatYear().equals("2019")) {
							invPrefix += (Integer.valueOf(year).toString());
							startInvNo += (Integer.valueOf(year).toString());
							endInvNo += (Integer.valueOf(year).toString());
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()), "");
						} else if (invoiceConfig.getFormatYear().equals("2019/")) {
							invPrefix += (Integer.valueOf(year).toString()) + "/";
							startInvNo += (Integer.valueOf(year).toString()) + "/";
							endInvNo += (Integer.valueOf(year).toString()) + "/";
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "/", "");
						} else if (invoiceConfig.getFormatYear().equals("2019-")) {
							invPrefix += (Integer.valueOf(year).toString()) + "-";
							startInvNo += (Integer.valueOf(year).toString()) + "-";
							endInvNo += (Integer.valueOf(year).toString()) + "-";
							actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-", "");
						} else if (invoiceConfig.getFormatYear().equals("19-20")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2));
								startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2));
								endInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2))
										+ "-" + (Integer.valueOf(year).toString().substring(2)), "");
							} else {
								invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2));
								startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2));
								endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2))
										+ "-" + (Integer.valueOf(year + 1).toString().substring(2)), "");
							}
						} else if (invoiceConfig.getFormatYear().equals("19-20-")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2))
										+ "-" + (Integer.valueOf(year).toString().substring(2)) + "-", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2))
										+ "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("19-20/")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year - 1).toString().substring(2)) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2))
										+ "-" + (Integer.valueOf(year).toString().substring(2)) + "/", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year).toString().substring(2)) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2))
										+ "-" + (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("1920")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2));
								startInvNo += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2));
								endInvNo += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)), "");
							} else {
								invPrefix += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2));
								startInvNo += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2));
								endInvNo += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)), "");
							}
						} else if (invoiceConfig.getFormatYear().equals("1920-")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "-", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("1920/")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString().substring(2))
										+ (Integer.valueOf(year).toString().substring(2)) + "/", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString().substring(2))
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("2019-20")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2));
								startInvNo += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2));
								endInvNo += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)), "");
							} else {
								invPrefix += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2));
								startInvNo += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2));
								endInvNo += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)), "");
							}
						} else if (invoiceConfig.getFormatYear().equals("2019-20-")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "-", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("2019-20/")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString()) + "-"
										+ (Integer.valueOf(year).toString().substring(2)) + "/", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()) + "-"
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("201920")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2));
								startInvNo += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2));
								endInvNo += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)), "");
							} else {
								invPrefix += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2));
								startInvNo += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2));
								endInvNo += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2));
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)), "");
							}
						} else if (invoiceConfig.getFormatYear().equals("201920-")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "-", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								startInvNo += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								endInvNo += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "-", "");
							}
						} else if (invoiceConfig.getFormatYear().equals("201920/")) {
							if (month <= 3) {
								invPrefix += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year - 1).toString())
										+ (Integer.valueOf(year).toString().substring(2)) + "/", "");
							} else {
								invPrefix += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								startInvNo += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								endInvNo += (Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/";
								actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString())
										+ (Integer.valueOf(year + 1).toString().substring(2)) + "/", "");
							}
						}
					} else {
						invPrefix += (Integer.valueOf(year).toString());
						startInvNo += (Integer.valueOf(year).toString());
						endInvNo += (Integer.valueOf(year).toString());
						actualNo = actualNo.replaceFirst((Integer.valueOf(year).toString()), "");
					}

					// actualNo = actualNo.replaceFirst(invoiceConfig.getFormatYear(), "");
				}
				
				String ssinvno = startInvNo;
				if (isNotEmpty(invoiceConfig.getStartInvoiceNo())) {
					startInvNo += invoiceConfig.getStartInvoiceNo();
				}
				if (isNotEmpty(invoiceConfig.getEndInvoiceNo())) {
					endInvNo += invoiceConfig.getEndInvoiceNo();
				}
				if (payments.getVoucherNumber().startsWith(ssinvno)) {
				
					ClientAddlInfo clientInfo = clientAddlInfoRepository
							.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(
									payments.getClientid(), returntype, invtype, submissionYear, month);
					if (isEmpty(clientInfo)) {
						clientInfo = clientAddlInfoRepository
								.findByClientIdAndReturnTypeAndInvoiceTypeAndFinancialYearAndMonth(
										payments.getClientid(), returntype, "ALL", submissionYear, month);
					}
					if (isEmpty(clientInfo)) {
						clientInfo = new ClientAddlInfo();
						clientInfo.setClientId(payments.getClientid());
						clientInfo.setReturnType(returntype);
						clientInfo.setFinancialYear(submissionYear);
						clientInfo.setMonth(month);
						try {
							Integer invNo = Integer.parseInt(actualNo);
							invNo++;
							clientInfo.setInvoiceNo(invPrefix + invNo);
							if (isNotEmpty(invoiceConfig.getInvoiceType()) && !invoiceConfig.equals("ALL")) {
								clientInfo.setInvoiceType(invoiceConfig.getInvoiceType());
							}
							clientAddlInfoRepository.save(clientInfo);
						} catch (Exception e) {
						}
					} else {
						if (clientInfo.getInvoiceNo()
								.compareTo(payments.getVoucherNumber()) <= 0) {
							try {
								Integer invNo = Integer.parseInt(actualNo);
								invNo++;
								clientInfo.setInvoiceNo(invPrefix + invNo);
								if (isNotEmpty(invoiceConfig.getInvoiceType()) && !invoiceConfig.equals("ALL")) {
									clientInfo.setInvoiceType(invoiceConfig.getInvoiceType());
								}
								clientAddlInfoRepository.save(clientInfo);
							} catch (Exception e) {
							}
						}
					}
					
				}
			}
		}

	}
	
	@Override
	public InvoiceParent recordPaymentDetais(String id, String returntype) {
		//logger.info(CLASSNAME + "recordPaymentDetais : returntype");
		if (isNotEmpty(returntype)) {
		   if (returntype.equals(GSTR1) || returntype.equals("SalesRegister")) {
		      return gstr1Repository.findOne(id);
			} else if (returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER)
					|| returntype.equals("PurchaseRegister")) {
			  return purchaseRepository.findOne(id);
		}
	}
		return null;
	}
	
	@Override
	public InvoiceParent recordPaymentDetails(String invoiceNumber,String clientid,String fp,String returntype) {
		//logger.info(CLASSNAME + "recordPaymentDetais : returntype");
		if (isNotEmpty(returntype)) {
		   if (returntype.equals(GSTR1) || returntype.equals("SalesRegister")) {
				return gstr1Repository.findByClientidAndInvtypeAndFpAndInvoiceno(clientid, MasterGSTConstants.ATPAID,
						fp, invoiceNumber);
			} else if (returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER)
					|| returntype.equals("PurchaseRegister")) {
				return purchaseRepository.findByClientidAndInvtypeAndFpAndInvoiceno(clientid, MasterGSTConstants.ATPAID,
						fp, invoiceNumber);
			}
			
	}
		return null;
	}
	
	@Override
	@Transactional
	public List<Payments> recordPaymentsHistory(String clientid,String invoiceNumber) {
		
		return recordPaymentsRepository.findByClientidAndInvoiceid(clientid, invoiceNumber);
				//recordPaymentsRepository.findByClientidAndInvoiceNumber(clientid, invoiceNumber);
	}

@Override
	public List<Payments> allrecordpayments(String clientid, String invoiceNumber) {
		
		return recordPaymentsRepository.findByClientidAndInvoiceNumber(clientid, invoiceNumber);
	}

	@Override
	public List<Payments> findByClientid(String clientid) {
		
		return recordPaymentsRepository.findByClientid(clientid);
	}

@Override
	public boolean invoiceNumberCheckInEdit(String invoiceno, String returnType, String clientid, Date d1, Date d2,
			boolean edit) {
	boolean invnocheck = false;
	if(returnType.equals(MasterGSTConstants.GSTR1)){
			List<GSTR1> invoice = gstr1Repository.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceno,
					d1, d2);
		if(edit){
			if(isNotEmpty(invoice) && invoice.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(invoice)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
	}
	if(returnType.equals(MasterGSTConstants.GSTR4)){
			List<GSTR4> invoice = gstr4Repository.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceno,
					d1, d2);
		if(edit){
			if(isNotEmpty(invoice) && invoice.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(invoice)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
	}
	if(returnType.equals(MasterGSTConstants.GSTR5)){
			List<GSTR5> invoice = gstr5Repository.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceno,
					d1, d2);
			if (edit) {
				if (isNotEmpty(invoice) && invoice.size() >= 1) {
					invnocheck = true;
				} else {
					invnocheck = false;
				}
			} else {
				if (isNotEmpty(invoice)) {
					invnocheck = true;
				} else {
					invnocheck = false;
				}
			}
		}
		if (returnType.equals(ANX1)) {
			/*
			 * List<Anx1> invoice =
			 * anx1Repository.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid,
			 * invoiceno, d1, d2); if(edit){ if(isNotEmpty(invoice) && invoice.size() >= 1){
			 * invnocheck = true; }else{ invnocheck = false; } }else{
			 * if(isNotEmpty(invoice)){ invnocheck = true; }else{ invnocheck = false; } }
			 */
	}
	if(returnType.equals(MasterGSTConstants.ESTIMATES)){
			List<Estimates> invoice = estimatesRepository.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid,
					invoiceno, d1, d2);
		if(edit){
			if(isNotEmpty(invoice) && invoice.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(invoice)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
	}
	if(returnType.equals(MasterGSTConstants.DELIVERYCHALLANS)){
			List<DeliveryChallan> invoice = deliverychallanRepository
					.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceno, d1, d2);
		if(edit){
			if(isNotEmpty(invoice) && invoice.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(invoice)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
	}
	if(returnType.equals(MasterGSTConstants.PURCHASEORDER)){
			List<PurchaseOrder> invoice = purchaseOrderRepository
					.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceno, d1, d2);
		if(edit){
			if(isNotEmpty(invoice) && invoice.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(invoice)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
	}
	
	if(returnType.equals(MasterGSTConstants.PROFORMAINVOICES)){
			List<ProformaInvoices> invoice = proformainvoicesRepository
					.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceno, d1, d2);
		if(edit){
			if(isNotEmpty(invoice) && invoice.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(invoice)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
	}
	
	return invnocheck;
	
}

	@Override
	public boolean purchaseInvoiceNoCheck1(String clientid, String invoiceid, String companyDBID, Date d1, Date d2,
			boolean edit) {
		
		List<PurchaseRegister> purchaseRegister = purchaseRepository
				.findByClientidAndInvoicenoAndCompanyDBIdAndDateofinvoiceBetween(clientid, invoiceid, companyDBID, d1,
						d2);
		
		boolean invnocheck=false;
		
		if(edit){
			if(isNotEmpty(purchaseRegister) && purchaseRegister.size() >= 1){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}else{
			if(isNotEmpty(purchaseRegister)){
				invnocheck = true;
			}else{
				invnocheck = false;
			}
		}
		
		// return
		// purchaseRepository.findByClientidAndInvoicenoAndCompanyDBIdAndDateofinvoiceBetween(clientid,invoiceid,
		// companyDBID, d1, d2);
		return invnocheck;
	}
	
	@Override
	public boolean purchaseInvoiceNoCheck(String clientid, String invoiceid, String returntype, String gstin, Date d1,
			Date d2, boolean edit) {
		
		boolean invnocheck=false;
		if(returntype.equals(MasterGSTConstants.GSTR6)) {
		
			List<GSTR6> gstr6 = gstr6Repository.findByClientidAndInvoicenoAndDateofinvoiceBetween(clientid, invoiceid,
					d1, d2);
			if(edit){
				if(isNotEmpty(gstr6) && gstr6.size() >= 1){
					invnocheck = true;
				}else{
					invnocheck = false;
				}
			}else{
				if(isNotEmpty(gstr6)){
					invnocheck = true;
				}else{
					invnocheck = false;
				}
			}
		}else {
			
			List<PurchaseRegister> purchaseRegister = purchaseRepository
					.findByClientidAndInvoicenoAndB2b_CtinAndDateofinvoiceBetween(clientid, invoiceid, gstin, d1, d2);
			
			if(edit){
				if(isNotEmpty(purchaseRegister) && purchaseRegister.size() >= 1){
					invnocheck = true;
				}else{
					invnocheck = false;
				}
			}else{
				if(isNotEmpty(purchaseRegister)){
					invnocheck = true;
				}else{
					invnocheck = false;
				}
			}			
		}
	
		// return
		// purchaseRepository.findByClientidAndInvoicenoAndCompanyDBIdAndDateofinvoiceBetween(clientid,invoiceid,
		// companyDBID, d1, d2);
		return invnocheck;
	}

	@Override
	public List<? extends InvoiceParent> getSearchedInvoiceData(String returntype, Date startDate, Date endDate,
			String clientid, String searchQuery) {
		List<String> list = new ArrayList<String>();
		list.add(MasterGSTConstants.B2B);
		list.add(MasterGSTConstants.B2C);
		list.add(MasterGSTConstants.B2CL);
		list.add(MasterGSTConstants.EXPORTS);
		if(returntype.equals(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equals(MasterGSTConstants.GSTR2)){
			list.add(MasterGSTConstants.B2BUR);
		}
		logger.debug(CLASSNAME + "getSearchedInvoiceData : Begin");
		Query query = new Query();
		query.with(new Sort(Sort.Direction.ASC, "invoiceno"));
		query.addCriteria(Criteria.where("clientid").is(clientid));
		query.addCriteria(Criteria.where("invtype").in(list));
		query.addCriteria(Criteria.where("dateofinvoice").gte(startDate).lte(endDate));
		query.addCriteria(Criteria.where("invoiceno")
				.regex(Pattern.compile(searchQuery, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE)));
		if(returntype.equals(MasterGSTConstants.GSTR4)){
			return mongoTemplate.find(query, GSTR4.class, "gstr4");
		}else if(returntype.equals(MasterGSTConstants.GSTR5)){
			return mongoTemplate.find(query, GSTR5.class, "gstr5");
		}else if(returntype.equals(MasterGSTConstants.GSTR6)){
			return mongoTemplate.find(query, GSTR6.class, "gstr6");
		} else if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)
				|| returntype.equals(MasterGSTConstants.GSTR2)) {
			return mongoTemplate.find(query, PurchaseRegister.class, "purchaseregister");
		}
		
		return mongoTemplate.find(query, GSTR1.class, "gstr1");
		
	}
	
	@Override
	public List<? extends InvoiceParent> getSearchedInvoiceData(String returntype, String invoicetype, Date startDate,
			Date endDate, String clientid,String billedtoname, String searchQuery) {
		List<String> list = new ArrayList<String>();
		if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
			list.add(MasterGSTConstants.B2B);
			list.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			list.add(MasterGSTConstants.CDNUR);
			list.add(MasterGSTConstants.EXPORTS);
		}else if(returntype.equals(MasterGSTConstants.GSTR6) && (invoicetype.equalsIgnoreCase(MasterGSTConstants.ISDCN) || invoicetype.equalsIgnoreCase(MasterGSTConstants.ISDDN))) {
			list.add(MasterGSTConstants.ISD);
		}else if(returntype.equals(MasterGSTConstants.GSTR6)) {
			list.add(MasterGSTConstants.B2B);
		} else {
			list.add(MasterGSTConstants.B2B);
			list.add(MasterGSTConstants.B2C);
			list.add(MasterGSTConstants.B2CL);
			list.add(MasterGSTConstants.EXPORTS);
			if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)	|| returntype.equals(MasterGSTConstants.GSTR2)) {
				list.add(MasterGSTConstants.B2BUR);
			}
			if(invoicetype.equals(MasterGSTConstants.ATPAID)) {
				list.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				list.add(MasterGSTConstants.CDNUR);
			}
			if(invoicetype.equalsIgnoreCase(MasterGSTConstants.ISDCN) || invoicetype.equalsIgnoreCase(MasterGSTConstants.ISDDN)) {
				list.add(MasterGSTConstants.ISD);
			}
		}
		logger.debug(CLASSNAME + "getSearchedInvoiceData : Begin");
		Query query = new Query();
		query.with(new Sort(Sort.Direction.ASC, "invoiceno"));
		query.limit(52);
		query.addCriteria(Criteria.where("clientid").is(clientid));
		query.addCriteria(Criteria.where("invtype").in(list));
		query.addCriteria(Criteria.where("dateofinvoice").gte(startDate).lte(endDate));
		query.addCriteria(Criteria.where("invoiceno").regex(Pattern.compile(searchQuery, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE)));
		
		if(returntype.equals(GSTR1) && (MasterGSTConstants.CDNUR.equals(invoicetype) || MasterGSTConstants.CDNA.equals(invoicetype) || MasterGSTConstants.CREDIT_DEBIT_NOTES.equals(invoicetype) ||  MasterGSTConstants.ATPAID.equals(invoicetype))) {
			query.addCriteria(Criteria.where("paymentStatus").nin(Arrays.asList("Paid")));
			if(isNotEmpty(billedtoname)) {
				query.addCriteria(Criteria.where("billedtoname")
						.regex(Pattern.compile(billedtoname, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE)));				
			}
		}
		if(returntype.equals(MasterGSTConstants.GSTR4)){
			return mongoTemplate.find(query, GSTR4.class, "gstr4");
		}else if(returntype.equals(MasterGSTConstants.GSTR5)){
			return mongoTemplate.find(query, GSTR5.class, "gstr5");
		}else if(returntype.equals(MasterGSTConstants.GSTR6) || invoicetype.equalsIgnoreCase(MasterGSTConstants.ISDCN) || invoicetype.equalsIgnoreCase(MasterGSTConstants.ISDDN)){
			return mongoTemplate.find(query, GSTR6.class, "gstr6");
		} else if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)
				|| returntype.equals(MasterGSTConstants.GSTR2)) {
			return mongoTemplate.find(query, PurchaseRegister.class, "purchaseregister");
		}
		
		return mongoTemplate.find(query, GSTR1.class, "gstr1");
		
	}
	
	@Override
	public List<? extends InvoiceParent> getSearchedAdvReceiptInvoiceData(String returntype, String invoicetype,
			Date startDate, Date endDate, String clientid, String searchQuery) {
		List<String> list = new ArrayList<String>();
		list.add(MasterGSTConstants.ADVANCES);
		logger.debug(CLASSNAME + "getSearchedAdvReceiptInvoiceData : Begin");
		Query query = new Query();
		Criteria criteria = new Criteria();
		query.with(new Sort(Sort.Direction.ASC, "invoiceno"));
		query.addCriteria(Criteria.where("clientid").is(clientid));
		query.addCriteria(Criteria.where("invtype").in(list));
		criteria = new Criteria().orOperator(Criteria.where("advRemainingAmount").exists(false),
				Criteria.where("advRemainingAmount").gt(0d));
		query.addCriteria(criteria);
		query.addCriteria(Criteria.where("dateofinvoice").gte(startDate).lte(endDate));
		query.addCriteria(Criteria.where("invoiceno")
				.regex(Pattern.compile(searchQuery, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE)));
		if(returntype.equals(MasterGSTConstants.GSTR4)){
			return mongoTemplate.find(query, GSTR4.class, "gstr4");
		}else if(returntype.equals(MasterGSTConstants.GSTR5)){
			return mongoTemplate.find(query, GSTR5.class, "gstr5");
		}else if(returntype.equals(MasterGSTConstants.GSTR6)){
			return mongoTemplate.find(query, GSTR6.class, "gstr6");
		} else if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)
				|| returntype.equals(MasterGSTConstants.GSTR2) || returntype.equals("PurchaseRegister")) {
			return mongoTemplate.find(query, PurchaseRegister.class, "purchaseregister");
		}
		
		return mongoTemplate.find(query, GSTR1.class, "gstr1");
		
	}
	
	@Override
	@Transactional
	public Messages saveMessages(Messages messages) {
		return messagesRepository.save(messages) ;
	}

	@Override
	public List<Client> getClientDataByGroupName(List<String> groupnames) {

		return clientRepository.findByGroupNameIn(groupnames);
	}

	@Override
	public Page<? extends InvoiceParent> getAdminGroupReportInvoicesMonthly(Pageable pageable, String returntype,
			List<String> clientids, int month, int year) {

		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();

		cal.set(year, month - 1, 0, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			returntype = "GSTR1";
		}
		if(returntype.contentEquals(MasterGSTConstants.GSTR1)) {
			
			String strMonth =  month<10 ? "0"+month : month+"";
		String retPeriod = strMonth+year;
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.B2BA);
			invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2CL);
			invTypes.add(MasterGSTConstants.B2CLA);
		invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.CDNURA);
		invTypes.add(MasterGSTConstants.B2C);
			invTypes.add(MasterGSTConstants.B2CSA);
		invTypes.add(MasterGSTConstants.EXPORTS);
			invTypes.add(MasterGSTConstants.EXPA);
			List<GSTR1> gstr1 = gstr1Repository.findByClientidInAndInvtypeInAndDateofinvoiceBetween(clientids, invTypes,
					stDate, endDate);
		
		List<String> otherinvTypes = new ArrayList<String>();
		otherinvTypes.add(MasterGSTConstants.ADVANCES);
		otherinvTypes.add(MasterGSTConstants.NIL);
		otherinvTypes.add(MasterGSTConstants.ATPAID);
			List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidInAndInvtypeInAndFp(clientids, otherinvTypes,
					retPeriod);
		
		List<GSTR1> allinvoices = Lists.newArrayList();
		allinvoices.addAll(gstr1);
		allinvoices.addAll(gstr1nilltxpat);
		Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
		return invoices;
			// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
			// stDate, endDate, pageable);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2)) {
			return purchaseRepository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else {
			String strMonth =  month<10 ? "0"+month : month+"";
			String retPeriod = strMonth+year;
			List<String> fpLst=Arrays.asList(retPeriod);
			
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
			return gstr2Repository.findByClientidInAndIsAmendmentAndFpInAndInvtypeIn(clientids, true, fpLst, invTypes,
					pageable);
		}
	}
	
	@Override
	public Page<? extends InvoiceParent> getGSTR1AdminGroupReportInvoicesMonthly(Pageable pageable, String returntype,
			List<String> clientids, int month, int year) {

		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();

		cal.set(year, month - 1, 0, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		if(returntype.contentEquals(MasterGSTConstants.GSTR1)) {
			
			String strMonth =  month<10 ? "0"+month : month+"";
		String retPeriod = strMonth+year;
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.B2BA);
			invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2CL);
			invTypes.add(MasterGSTConstants.B2CLA);
		invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.CDNURA);
		invTypes.add(MasterGSTConstants.B2C);
			invTypes.add(MasterGSTConstants.B2CSA);
		invTypes.add(MasterGSTConstants.EXPORTS);
			invTypes.add(MasterGSTConstants.EXPA);
			List<GSTR1> gstr1 = gstr1Repository
					.findByClientidInAndInvtypeInAndDateofinvoiceBetweenAndGovtInvoiceStatusIsNotNull(clientids,
							invTypes, stDate, endDate);
		
		List<String> otherinvTypes = new ArrayList<String>();
		otherinvTypes.add(MasterGSTConstants.ADVANCES);
		otherinvTypes.add(MasterGSTConstants.NIL);
		otherinvTypes.add(MasterGSTConstants.ATPAID);
			List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidInAndInvtypeInAndFpAndGovtInvoiceStatusIsNotNull(
					clientids, otherinvTypes, retPeriod);
			
		List<GSTR1> allinvoices = Lists.newArrayList();
		allinvoices.addAll(gstr1);
		allinvoices.addAll(gstr1nilltxpat);
		Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
		return invoices;
			// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
			// stDate, endDate, pageable);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2)) {
			return purchaseRepository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else {
			String strMonth =  month<10 ? "0"+month : month+"";
			String retPeriod = strMonth+year;
			List<String> fpLst=Arrays.asList(retPeriod);
			
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
			return gstr2Repository.findByClientidInAndIsAmendmentAndFpInAndInvtypeIn(clientids, true, fpLst, invTypes,
					pageable);
		}
	}

	@Override
	public Page<? extends InvoiceParent> getAdminGroupReportInvoicesYearly(Pageable pageable, String returntype,
			List<String> clientids, int year) {

		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, 2, 31, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year + 1, 3, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());

		// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
		// stDate, endDate, pageable);
		if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			returntype = GSTR1;
		}
		if(returntype.contentEquals(MasterGSTConstants.GSTR1)) {
			String rtStart = "04"+year;
			String rtEnd = "03"+(year+1);
			List<String> fpLst = Arrays.asList(rtStart, "05"+year, "06"+year, "07"+year, "08"+year, "09"+year, 
					"10"+year, "11"+year, "12"+year, "01"+(year+1), "02"+(year+1), rtEnd);
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.B2BA);
			invTypes.add(MasterGSTConstants.CDNA);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.B2CL);
			invTypes.add(MasterGSTConstants.B2CLA);
			invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.CDNURA);
			invTypes.add(MasterGSTConstants.B2C);
			invTypes.add(MasterGSTConstants.B2CSA);
			invTypes.add(MasterGSTConstants.EXPORTS);
			invTypes.add(MasterGSTConstants.EXPA);
			List<GSTR1> gstr1 = gstr1Repository.findByClientidInAndInvtypeInAndDateofinvoiceBetween(clientids, invTypes,
					stDate, endDate);
			
			List<String> otherinvTypes = new ArrayList<String>();
			otherinvTypes.add(MasterGSTConstants.ADVANCES);
			otherinvTypes.add(MasterGSTConstants.NIL);
			otherinvTypes.add(MasterGSTConstants.ATPAID);
			List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidInAndInvtypeInAndFpIn(clientids, otherinvTypes,
					fpLst);
			
			List<GSTR1> allinvoices = Lists.newArrayList();
			allinvoices.addAll(gstr1);
			allinvoices.addAll(gstr1nilltxpat);
			Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
			return invoices;
			// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
			// stDate, endDate, pageable);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2)) {
			return purchaseRepository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else {
			String rtStart = "04"+year;
			String rtEnd = "03"+(year+1);
			List<String> fpLst = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year,
					"10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd);
			
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
			return gstr2Repository.findByClientidInAndIsAmendmentAndFpInAndInvtypeIn(clientids, true, fpLst, invTypes,
					pageable);
		}
	}
	
	@Override
	public Page<? extends InvoiceParent> getGSTR1AdminGroupReportInvoicesYearly(Pageable pageable, String returntype,
			List<String> clientids, int year) {

		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, 2, 31, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year + 1, 3, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());

		// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
		// stDate, endDate, pageable);
	
		if(returntype.contentEquals(MasterGSTConstants.GSTR1)) {
			String rtStart = "04"+year;
			String rtEnd = "03"+(year+1);
			List<String> fpLst = Arrays.asList(rtStart, "05"+year, "06"+year, "07"+year, "08"+year, "09"+year, 
					"10"+year, "11"+year, "12"+year, "01"+(year+1), "02"+(year+1), rtEnd);
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.B2BA);
			invTypes.add(MasterGSTConstants.CDNA);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.B2CL);
			invTypes.add(MasterGSTConstants.B2CLA);
			invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.CDNURA);
			invTypes.add(MasterGSTConstants.B2C);
			invTypes.add(MasterGSTConstants.B2CSA);
			invTypes.add(MasterGSTConstants.EXPORTS);
			invTypes.add(MasterGSTConstants.EXPA);
			List<GSTR1> gstr1 = gstr1Repository
					.findByClientidInAndInvtypeInAndDateofinvoiceBetweenAndGovtInvoiceStatusIsNotNull(clientids,
							invTypes, stDate, endDate);
			
			List<String> otherinvTypes = new ArrayList<String>();
			otherinvTypes.add(MasterGSTConstants.ADVANCES);
			otherinvTypes.add(MasterGSTConstants.NIL);
			otherinvTypes.add(MasterGSTConstants.ATPAID);
			List<GSTR1> gstr1nilltxpat = gstr1Repository
					.findByClientidInAndInvtypeInAndFpInAndGovtInvoiceStatusIsNotNull(clientids, otherinvTypes, fpLst);
			
			List<GSTR1> allinvoices = Lists.newArrayList();
			allinvoices.addAll(gstr1);
			allinvoices.addAll(gstr1nilltxpat);
			Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
			return invoices;
			// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
			// stDate, endDate, pageable);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2)) {
			return purchaseRepository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else {
			String rtStart = "04"+year;
			String rtEnd = "03"+(year+1);
			List<String> fpLst = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year,
					"10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd);
			
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
			return gstr2Repository.findByClientidInAndIsAmendmentAndFpInAndInvtypeIn(clientids, true, fpLst, invTypes,
					pageable);
		}
	}

	@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getAdminGroupReportInvoicesCustom(Pageable pageable, String returntype,
			List<String> clientids, String fromtime, String totime) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1, Integer.parseInt(fromtimes[0]) - 1,
				23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23, 59,
				59);
		endDate = new java.util.Date(cal.getTimeInMillis());

		// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
		// stDate, endDate, pageable);
		if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			returntype = "GSTR1";
		}
		if(returntype.contentEquals(MasterGSTConstants.GSTR1)) {
			return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2)) {
			return purchaseRepository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
			
			return gstr2Repository.findByClientidInAndIsAmendmentAndInvtypeInAndDateofinvoiceBetween(clientids, true,
					invTypes, stDate, endDate, pageable);
		}
	}
	
	@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getGSTR1AdminGroupReportInvoicesCustom(Pageable pageable, String returntype,
			List<String> clientids, String fromtime, String totime) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1, Integer.parseInt(fromtimes[0]) - 1,
				23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23, 59,
				59);
		endDate = new java.util.Date(cal.getTimeInMillis());

		// return gstr1Repository.findByClientidInAndDateofinvoiceBetween(clientids,
		// stDate, endDate, pageable);
	
		if(returntype.contentEquals(MasterGSTConstants.GSTR1)) {
			return gstr1Repository.findByClientidInAndDateofinvoiceBetweenAndGovtInvoiceStatusIgnoreCase(clientids,
					stDate, endDate, pageable, MasterGSTConstants.SUCCESS);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2)) {
			return purchaseRepository.findByClientidInAndDateofinvoiceBetween(clientids, stDate, endDate, pageable);
		}else {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
			
			return gstr2Repository.findByClientidInAndIsAmendmentAndInvtypeInAndDateofinvoiceBetween(clientids, true,
					invTypes, stDate, endDate, pageable);
		}
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getMatchedAndPresentMonthfyinvs(String clientid,Date d1, Date d2) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		return purchaseRepository.findByClientidAndInvtypeInAndMatchingStatusIsNotNullAndDateofinvoiceBetween(clientid,
				invTypes, d1, d2, pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getPresentMonthfyinvsMatchingIdisNull(String clientid,Date d1, Date d2) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		return purchaseRepository.findByClientidAndInvtypeInAndMatchingStatusIsNullAndDateofinvoiceBetween(clientid,
				invTypes, d1, d2, pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getPresentMonthfyinvsMatchingIdisNotNull(String clientid,Date d1, Date d2) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add("Not In GSTR2A");
		//matchingstatus.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED_PREVIOUS_MONTH);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
		return purchaseRepository.findByClientidAndInvtypeInAndMatchingStatusInAndDateofinvoiceBetween(clientid,
				invTypes, matchingstatus, d1, d2, pageable);
	}

	@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getPresentMonthfyinvsMannualMatchingIdisNotNull(String clientid, Date d1,
			Date d2) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);

		return purchaseRepository.findByClientidAndInvtypeInAndMatchingStatusInAndMannualMatchInvoicesAndDateofinvoiceBetween(clientid,
				invTypes, matchingstatus,"Single", d1, d2, pageable);
	}

	@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getgstr2MatchingIdsMannualInvoices(String clientid, List<String> matchingids) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		return purchaseRepository.findByClientidAndInvtypeInAndMannualMatchInvoicesAndMatchingIdIn(clientid, invTypes,"Single", matchingids, pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getgstr2MatchingIdsInvoices(String clientid,List<String> matchingids) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
			return purchaseRepository.findByClientidAndInvtypeInAndMatchingIdIn(clientid,invTypes, matchingids, pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getPresentretperiodgstr2MatchingStatusisNotNull(String clientid,
			List<String> fp) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add("Not In Purchases");
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED_PREVIOUS_MONTH);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
		return gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusInAndIsAmendmentAndFpIn(clientid, invTypes,
				matchingstatus, true, fp, pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getPresentretperiodgstr2MatchingStatusisNull(String clientid,
			List<String> fp) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		return gstr2Repository.findByClientidAndInvtypeInAndIsAmendmentAndMatchingStatusIsNullAndFpIn(clientid,
				invTypes, true, fp, pageable);
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getPresentretperiodgstr2MatchingStatus(String clientid, List<String> fp) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add("Not In Purchases");
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED_PREVIOUS_MONTH);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_GST_NO_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICE_DATE_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICE_VALUE_MISMATCHED);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_INVOICENO_MISMATCHED);
		return gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusInAndIsAmendmentAndFpIn(clientid, invTypes,
				matchingstatus, true, fp, pageable);
		// return
		// gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusAndFp(clientid,invTypes,"Not
		// In Purchases", fp, pageable);
	}

	@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getPresentretperiodgstr2MannualMatchingStatus(String clientid,
			List<String> fp) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);
		return gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusInAndMannualMatchInvoicesAndIsAmendmentAndFpIn(clientid, invTypes,
				matchingstatus, "Single", true, fp, pageable);
		// return
		// gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusAndFp(clientid,invTypes,"Not
		// In Purchases", fp, pageable);
	}
	
	@Override
	@Transactional
	public void updateGSTR2AReturnData_2A(final String invType, final String clientid, final String fp, final int month,
			final int year) {
		logger.debug(CLASSNAME + "updateGSTR2ReturnData : Begin");
		List<GSTR2> gstr2DwnldList = Lists.newArrayList();
		Pageable pageable = new PageRequest(0, 2, Sort.Direction.DESC, "createdDate");
		Map<String, ResponseData> gstnMap = Maps.newHashMap();
		if (invType.equals(B2B)) {
			
			List<GSTR2> gstr2List1 = gstr2Repository.findByClientidAndFpAndInvtype(clientid, fp, invType);
			for(GSTR2   gstr2: gstr2List1) {
				
				if(isEmpty(gstr2.getBilledtoname())) {
				if(isNotEmpty(gstr2.getB2b()) && !gstnMap.containsKey(gstr2.getB2b().get(0).getCtin())) {
						Page<GSTINPublicData> page = gstinPublicDataRepository.findByGstin(gstr2.getB2b().get(0).getCtin(), pageable);
					if(isNotEmpty(page) && isNotEmpty(page.getContent())) {
						GSTINPublicData publicData = page.getContent().get(0);
						ResponseData data = new ResponseData();
						if(isNotEmpty(publicData.getTradeNam())) {
							data.setTradeNam(publicData.getTradeNam());
						}else {
							data.setTradeNam(publicData.getLgnm());
						}
						data.setPradr(publicData.getPradr());
						gstnMap.put(gstr2.getB2b().get(0).getCtin(), data);
					} else {
						Response response = iHubConsumerService.publicSearch(gstr2.getB2b().get(0).getCtin());
						if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
								&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
							ResponseData data = response.getData(); 
							if(isNotEmpty(data.getTradeNam())) {
								data.setTradeNam(data.getTradeNam());
							}else {
								data.setTradeNam(data.getLgnm());
							}
							gstnMap.put(gstr2.getB2b().get(0).getCtin(), data);
						}
					}
				}
					if (isNotEmpty(gstr2.getB2b().get(0).getCtin())
							&& gstnMap.containsKey(gstr2.getB2b().get(0).getCtin())) {
					gstr2.setBilledtoname(gstnMap.get(gstr2.getB2b().get(0).getCtin()).getTradeNam());
				}
				gstr2DwnldList.add(gstr2);
				}	
			
			}
			
		}
    if (invType.equals(CREDIT_DEBIT_NOTES)) {
			
			List<GSTR2> gstr2List1 = gstr2Repository.findByClientidAndFpAndInvtype(clientid, fp, invType);
			for(GSTR2   gstr2: gstr2List1) {
				
				if(isEmpty(gstr2.getBilledtoname())) {
					if(isNotEmpty(gstr2.getCdn()) && !gstnMap.containsKey(gstr2.getCdn().get(0).getCtin())) {
						Page<GSTINPublicData> page = gstinPublicDataRepository
								.findByGstin(gstr2.getCdn().get(0).getCtin(), pageable);
						if(isNotEmpty(page) && isNotEmpty(page.getContent())) {
							GSTINPublicData publicData = page.getContent().get(0);
							ResponseData data = new ResponseData();
							if(isNotEmpty(publicData.getTradeNam())) {
								data.setTradeNam(publicData.getTradeNam());
							}else {
								data.setTradeNam(publicData.getLgnm());
							}
							data.setPradr(publicData.getPradr());
							gstnMap.put(gstr2.getCdn().get(0).getCtin(), data);
						} else {
							Response response = iHubConsumerService.publicSearch(gstr2.getCdn().get(0).getCtin());
							if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) 
									&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								ResponseData data = response.getData(); 
								if(isNotEmpty(data.getTradeNam())) {
									data.setTradeNam(data.getTradeNam());
								}else {
									data.setTradeNam(data.getLgnm());
								}
								gstnMap.put(gstr2.getCdn().get(0).getCtin(), data);
							}
						}
					}
					if (isNotEmpty(gstr2.getCdn().get(0).getCtin())
							&& gstnMap.containsKey(gstr2.getCdn().get(0).getCtin())) {
						gstr2.setBilledtoname(gstnMap.get(gstr2.getCdn().get(0).getCtin()).getTradeNam());
					}
					gstr2DwnldList.add(gstr2);
				}
				
			}
			
		}
   		gstr2Repository.save(gstr2DwnldList);
		logger.debug(CLASSNAME + "updateGSTR2ReturnData : End");
	}
	
	@Override
	public List<Payments> findByClientid(String clientid, String returntype) {
		List<String> returntypes = Lists.newArrayList(); 
		if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
			returntypes.add("GSTR1");
			returntypes.add("SalesRegister");
		}else {
			returntypes.add("GSTR2");
			returntypes.add("PurchaseRegister");
			returntypes.add("Purchase Register");
		}
		
		return recordPaymentsRepository.findByClientidAndReturntypeIn(clientid, returntypes);
	}
	
	@Override
	public Page<? extends InvoiceParent> getGSTR2A_VS_GSTR2YearlyInvoices(Pageable pageable, String clientid,
			String returntype, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		
		//List<String> invoicetypes=Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.CREDIT_DEBIT_NOTES,MasterGSTConstants.IMP_GOODS);
		List<String> invoicetypes=Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.CREDIT_DEBIT_NOTES);
		
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, 2, 31, 0, 0, 0);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year + 1, 3, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		
		if(MasterGSTConstants.PURCHASE_REGISTER.equalsIgnoreCase(returntype)) {
			
			return purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid, invoicetypes, stDate,
					endDate, pageable);
		}else if(MasterGSTConstants.GSTR2.equalsIgnoreCase(returntype)){
			return gstr2Repository.findByClientidAndInvtypeInAndIsAmendmentAndDateofinvoiceBetween(clientid,
					invoicetypes, true, stDate, endDate, pageable);

		}
		return null;	
	}
	
	@Override
	public Page<? extends InvoiceParent> getGSTR2A_VS_GSTR2CustomInvoices(Pageable pageable, String clientid,
			String returntype, String totime, String fromtime) {
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		
		//List<String> invtypes=Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.CREDIT_DEBIT_NOTES,MasterGSTConstants.IMP_GOODS);
		List<String> invtypes=Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.CREDIT_DEBIT_NOTES);
		if (isNotEmpty(returntype)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,
					Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
			cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,
					59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			if (returntype.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid, invtypes, stDate,
						endDate, pageable);
			} else if (returntype.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndInvtypeInAndIsAmendmentAndDateofinvoiceBetween(clientid,
						invtypes, true, stDate, endDate, pageable);
			}
		}
		return null;
	}
	
	@Override
	public Page<Payments> getAdminGroupReportPaymentsMonthly(Pageable pageable, String returntype,
			List<String> clientids, int month, int year) {

		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();

		cal.set(year, month - 1, 0, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		List<String> returntypes = Lists.newArrayList(); 
		if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
			returntypes.add("GSTR1");
			returntypes.add("SalesRegister");
		}else {
			returntypes.add("GSTR2");
			returntypes.add("PurchaseRegister");
		}
		return recordPaymentsRepository.findByClientidInAndReturntypeInAndCreatedDateBetween(clientids, returntypes,
				stDate, endDate, pageable);
	}
	
	@Override
	public Page<Payments> getAdminGroupReportPaymentsYearly(Pageable pageable, String returntype,
			List<String> clientids, int year) {

		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();

		cal.set(year, 2, 31, 0, 0, 0);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year + 1, 3, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		List<String> returntypes = Lists.newArrayList(); 
		if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
			returntypes.add("GSTR1");
			returntypes.add("SalesRegister");
		}else {
			returntypes.add("GSTR2");
			returntypes.add("PurchaseRegister");
		}
		return recordPaymentsRepository.findByClientidInAndReturntypeInAndCreatedDateBetween(clientids, returntypes,
				stDate, endDate, pageable);
	}

	@Override
	public Page<Payments> getAdminGroupReportPaymentsCustom(Pageable pageable, String returntype,
			List<String> clientids, String fromtime, String totime) {
		
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}

		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1, Integer.parseInt(fromtimes[0]) - 1,
				23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23, 59,
				59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		List<String> returntypes = Lists.newArrayList(); 
		if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
			returntypes.add("GSTR1");
			returntypes.add("SalesRegister");
		}else {
			returntypes.add("GSTR2");
			returntypes.add("PurchaseRegister");
		}
		return recordPaymentsRepository.findByClientidInAndReturntypeInAndCreatedDateBetween(clientids, returntypes,
				stDate, endDate, pageable);
	}
	
		public List<Payments> findByInvoiceid(String invoiceid, String returntype) {
			List<String> returntypes = Lists.newArrayList();
			if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
				returntypes.add("GSTR1");
				returntypes.add("SalesRegister");
			}else {
				returntypes.add("GSTR2");
				returntypes.add("PurchaseRegister");
			}
		return recordPaymentsRepository.findByInvoiceidAndReturntypeIn(invoiceid,returntypes);	
	}
	
	@Override
	public Page<? extends InvoiceParent> getGSTR2_GSTR3B_VS_GSTR2AInvoices(Pageable pageable, final String clientid,
			final String returnType, int month, int year) {
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		
		List<String> invtypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
				MasterGSTConstants.ISD,MasterGSTConstants.IMP_GOODS);
		
		if (isNotEmpty(returnType)) {
			Calendar cal = Calendar.getInstance();
			
			cal.set(year, month - 1, 1, 0, 0, 0);
			Date stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			Date endDate = new java.util.Date(cal.getTimeInMillis());
			if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(clientid, invtypes, stDate,
						endDate, pageable);
			} 
		}
		return null;
	}
	
	@Override
	public Page<? extends InvoiceParent> getInvoiceBasedOnClientidAndFP(Pageable pageable, String clientid,
			String returntype, String fp) {
		
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		
		if (isNotEmpty(returntype)) {
			if(MasterGSTConstants.GSTR1.equalsIgnoreCase(returntype)) {
				return gstr1Repository.findByClientidAndFp(clientid, fp, pageable);
			}else if(MasterGSTConstants.GSTR2.equalsIgnoreCase(returntype)){			
				return gstr2Repository.findByClientidAndFp(clientid, fp, pageable);
			}else {			
				return purchaseRepository.findByClientidAndFp(clientid, fp, pageable);
			}
		}
		
		return null;
		
	}

	@Override
	public Page<? extends InvoiceParent> getMonthlyInvoiceBasedOnClientidAndDateofitcClaimed(Pageable pageable,
			String clientid, String returntype, int month, int year) {
		
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		
		if (isNotEmpty(returntype)) {
			Calendar cal = Calendar.getInstance();
			
			cal.set(year, month - 1, 0, 23, 59, 59);
			Date stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			Date endDate = new java.util.Date(cal.getTimeInMillis());
			if (returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER)) {
				List<String> invtype = Arrays.asList(MasterGSTConstants.ADVANCES, MasterGSTConstants.ATPAID,
						MasterGSTConstants.NIL, MasterGSTConstants.ITC_REVERSAL);
				return purchaseRepository.findByClientidAndDateofitcClaimedBetweenAndInvtypeNotInAndItems_ElgIsNotNull(pageable, clientid,stDate, endDate, invtype);
			} 
		}
		return null;
	}
	@Override
	public Page<? extends InvoiceParent> getItcInvoices(String clientid, String returntype, String itcinvtype, Date stDate,Date endDate, int start, int length, String searchVal) {
		
		if (isNotEmpty(returntype)) {
			if (returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER)) {
				List<String> invtype = Arrays.asList(MasterGSTConstants.ADVANCES, MasterGSTConstants.ATPAID, MasterGSTConstants.NIL, MasterGSTConstants.ITC_REVERSAL);
				return purchageRegisterDao.findByItcinvoices(clientid, itcinvtype, stDate, endDate, invtype, start, length, searchVal);
			} 
		}
		return null;
	}
	
	@Override
	public TotalInvoiceAmount getItcTotalInvoicesAmounts(String clientid, String returntype, String itcinvtype, Date stDate, Date endDate, String searchVal) {
		List<String> invtypes = Arrays.asList(MasterGSTConstants.ADVANCES, MasterGSTConstants.ATPAID, MasterGSTConstants.NIL, MasterGSTConstants.ITC_REVERSAL);
		return purchageRegisterDao.getItcTotalInvoicesAmounts(clientid, invtypes, itcinvtype, stDate, endDate, searchVal);
	}
	
	
	
	@Override
	public Page<? extends InvoiceParent> getYearlyInvoices(Pageable pageable, String clientid, String returntype,
			int year) {
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		
		String rtStart = "04"+year;
		String rtEnd = "03"+(year+1);
		List<String> fpLst = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year, "09" + year,
				"10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1), rtEnd);
		
		if(MasterGSTConstants.GSTR2A.equalsIgnoreCase(returntype)) {
			
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			return gstr2Repository.findByClientidAndIsAmendmentAndFpInAndInvtypeIn(clientid, true, fpLst, invTypes,
					pageable);
		}
		
		return null;
	}
	
	@Override
	public Map<String, Map<String, Map<String, String>>> getAllSupplierStatusBasedOnClientid(String clientid,
			int year) {
		
		String rtStart = "04"+year;
		String rtEnd = "03"+(year+1);		
		List<String> rtArray=Arrays.asList(rtStart, "05"+year, "06"+year, "07"+year, "08"+year, "09"+year, 
				"10"+year, "11"+year, "12"+year, "01"+(year+1), "02"+(year+1), rtEnd);
		Map<String,Map<String,Map<String,String>>> supplier_reportMap=new HashMap<String,Map<String,Map<String,String>>>();
		
		List<CompanySuppliers> cmpySupplierLst=companySuppliersRepository.findByClientid(clientid);
		List<String> returnArr=Arrays.asList(MasterGSTConstants.GSTR1,MasterGSTConstants.GSTR3B);
		int nxtYear=year+1;
		String fy=year+"-"+String.valueOf(nxtYear).substring(2);
		if(isNotEmpty(cmpySupplierLst)) {
			cmpySupplierLst.forEach(supplier->{
				for(String returntype:returnArr){
					List<SupplierStatus> statussList = supplierStatusRepository
							.findBySupplieridAndReturntypeAndReturnperiodIn(supplier.getId().toString(), returntype,
									rtArray);
					
					if(isNotEmpty(supplier.getGstnnumber())) {
						if(statussList.size()<12) {
							clientUtils.supplierRettrack(clientid, supplier.getId().toString(), supplier.getName(),
									supplier.getGstnnumber(), fy);
							break;
						}
					}
				}
			});
		}
		
		Map<String,Map<String,String>> reportMap=new HashMap<String,Map<String,String>>();
		
		if(isNotEmpty(cmpySupplierLst)) {
			for(CompanySuppliers cmpysuppliers:cmpySupplierLst){
				if(isNotEmpty(cmpysuppliers.getGstnnumber())) {
					Map<String,String> rtMap_GSTR1=new HashMap<String,String>();
					List<SupplierStatus> gstr1_supplier = supplierStatusRepository
							.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(),
									MasterGSTConstants.GSTR1, rtArray);
					if(isNotEmpty(gstr1_supplier)) {
						for(SupplierStatus supplier:gstr1_supplier) {
							
							rtMap_GSTR1.put("GSTR1" + supplier.getReturnperiod() + supplier.getSupplierid(),
									supplier.getStatus());
							if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
								for (String rt : rtArray) {
									if (!rt.equals(supplier.getReturnperiod())) {
										if (!rtMap_GSTR1.containsKey("GSTR1"+rt+supplier.getSupplierid())) {
											rtMap_GSTR1.put("GSTR1" + rt + supplier.getSupplierid(),
													MasterGSTConstants.PENDING);
										}
									}
								}
							}						
						}
						reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
					}else {
						for (String rt : rtArray) {
							rtMap_GSTR1.put("GSTR1" + rt + cmpysuppliers.getId().toString(),
									MasterGSTConstants.PENDING);
						}
						reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
					}
					
					List<SupplierStatus> gstr3b_supplier = supplierStatusRepository
							.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(),
									MasterGSTConstants.GSTR3B, rtArray);
					Map<String,String> rtMap_GSTR3B=new HashMap<String,String>();
					if(isNotEmpty(gstr3b_supplier)) {
						for(SupplierStatus supplier:gstr3b_supplier) {
							rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(),
									supplier.getStatus());
							if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
								for (String rt : rtArray) {
									if (!rt.equals(supplier.getReturnperiod())) {
										if (!rtMap_GSTR3B.containsKey("GSTR3"+rt+supplier.getSupplierid())) {
											rtMap_GSTR3B.put("GSTR3" + rt + supplier.getSupplierid(),
													MasterGSTConstants.PENDING);
										}
									}
								}
							}						
						}
						reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
					}else {
						for (String rt : rtArray) {
							rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(),
									MasterGSTConstants.PENDING);
						}
						reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
					}
					supplier_reportMap.put(cmpysuppliers.getName()+"-"+cmpysuppliers.getGstnnumber(),reportMap);
				}
			}
			//System.out.println(reportMap);
		}
		return supplier_reportMap;
	}
	
	@Override
	public List<SupplierStatus> getSupplierStatusByMonthwise(String supplierid, String returnperiod, String returntype) {
		
		return supplierStatusRepository.findBySupplieridAndReturnperiodAndReturntype(supplierid, returnperiod, returntype);
	}

	@Override
	public OtherConfigurations saveOtherConfigurations(OtherConfigurations otherform) {
		otherConfigurationRepository.deleteByClientid(otherform.getClientid());
		return otherConfigurationRepository.save(otherform);
	}

	@Override
	public OtherConfigurations getOtherConfig(String clientId) {
		
		return otherConfigurationRepository.findByClientid(clientId);
	}
	
	@Override
	public void deletePayment(String paymentid, String clientId, String voucherNumber, String invoiceNumber,
			String returntype) {
		recordPaymentsRepository.delete(paymentid);
		if("GSTR1".equals(returntype)) {
			returntype = "Payment Receipt";
		}else {
			returntype = "Payment";
		}
		AccountingJournal journal = accountingJournalRepository.findByInvoiceNumberAndClientIdAndReturnType(voucherNumber, clientId, returntype);
		if(isNotEmpty(journal)) {
			accountingJournalRepository.delete(journal);
		}
	}
	
	@Override
	@Transactional(readOnly=true)
	public Page<? extends InvoiceParent> getMultiMonthReport(Pageable pageable, Client client, String userid,
			String returnType, int year) {
		
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
				cal.set(year, 2, 31, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
			cal.set(year + 1, 3, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			if (returnType.equals(GSTR1)) {
				String rtStart = "04"+year;
				String rtEnd = "03"+(year+1);
				List<String> fpLst = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year,
						"09" + year, "10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1),
						rtEnd);
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				
				//List<GSTR1> gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndGovtInvoiceStatusIgnoreCase(client.getId().toString(), invTypes, stDate, endDate, MasterGSTConstants.SUCCESS);
				List<GSTR1> gstr1 = gstr1Repository.findByClientidAndInvtypeInAndFpInAndGovtInvoiceStatusIgnoreCase(client.getId().toString(), invTypes, fpLst, MasterGSTConstants.SUCCESS);
				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				
				List<GSTR1> gstr1nilltxpat = gstr1Repository
						.findByClientidAndInvtypeInAndFpInAndGovtInvoiceStatusIgnoreCase(client.getId().toString(),
								otherinvTypes, fpLst, MasterGSTConstants.SUCCESS);
				
				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return
				// gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR2A)) {
				String rtStart = "04"+year;
				String rtEnd = "03"+(year+1);		
				List<String> rtArray = Arrays.asList(rtStart, "05" + year, "06" + year, "07" + year, "08" + year,
						"09" + year, "10" + year, "11" + year, "12" + year, "01" + (year + 1), "02" + (year + 1),
						rtEnd);
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				return gstr2Repository.findByClientidAndIsAmendmentAndFpInAndInvtypeIn(client.getId().toString(), true,
						rtArray, invTypes, pageable);
			}else if (returnType.equals(PURCHASE_REGISTER)) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(ANX1)) {
				//return anx1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
					//	pageable);
			}
		}
		return null;
	}
		
	@Override
	public Map<String, Object> getMultiMonthReport(Pageable pageable, Client client, String id, String returntype, int month, int year, int start, int length, String searchVal, InvoiceFilter filter) {
		logger.debug(CLASSNAME + "getMultiMonthReport : Begin");
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		String yearCode=Utility.getYearCode(month, year);
		Page<? extends InvoiceParent> invoices = null;
		TotalInvoiceAmount totalInvoiceAmount = null;
		
		if (isNotEmpty(returntype)) {
			if (returntype.equals(GSTR1)) {
				
				//List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.B2BA ,MasterGSTConstants.CDNA,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.B2CL ,MasterGSTConstants.B2CLA,MasterGSTConstants.CDNUR ,MasterGSTConstants.CDNURA ,MasterGSTConstants.B2C ,MasterGSTConstants.B2CSA,
				//MasterGSTConstants.EXPORTS ,MasterGSTConstants.EXPA ,MasterGSTConstants.ADVANCES,MasterGSTConstants.NIL,MasterGSTConstants.ATPAID);
				
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				invTypes.add(MasterGSTConstants.ADVANCES);
				invTypes.add(MasterGSTConstants.NIL);
				invTypes.add(MasterGSTConstants.ATPAID);
				invTypes.add(MasterGSTConstants.ATA);
				invTypes.add(MasterGSTConstants.TXPA);
				
				invoices = gstr1Dao.getMultimonthInvoices(client.getId().toString(), invTypes, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = gstr1Dao.getMultimonthTotalInvoicesAmounts(client.getId().toString(), invTypes, yearCode, searchVal, filter);
			}else if(MasterGSTConstants.GSTR2A.equalsIgnoreCase(returntype)) {
				
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				invoices = gstr2Dao.getMultimonthInvoices(client.getId().toString(), invTypes, yearCode,  start, length, searchVal, filter);
				totalInvoiceAmount = gstr2Dao.getMultimonthTotalInvoicesAmounts(client.getId().toString(), invTypes, yearCode, searchVal, filter);
			}else if(MasterGSTConstants.GSTR2B.equalsIgnoreCase(returntype)) {
				
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD,MasterGSTConstants.ISDA, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				invoices = gstr2bDao.getMultimonthInvoices(client.getId().toString(), invTypes, year,  start, length, searchVal, filter);
				totalInvoiceAmount = gstr2bDao.getMultimonthTotalInvoicesAmounts(client.getId().toString(), invTypes, year, searchVal, filter);
			}
			
		}
		Map<String, Object> invoicesMap = new HashMap<String, Object>();
		invoicesMap.put("invoices",invoices);
		invoicesMap.put("invoicesAmount",totalInvoiceAmount);
		return invoicesMap;
	}
	
	@Override
	public Map<String, Object> getMultimonthInvoicesSupport(Client client, String returntype, int month, int year) {
		
		Map<String, Object> supportObj = new HashMap<>();
		List<String> billToNames = null;
		if (isNotEmpty(returntype)) {
			String yearCd = Utility.getYearCode(month, year); 
			if (returntype.equals(GSTR1)) {
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.B2BA ,MasterGSTConstants.CDNA,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.B2CL ,MasterGSTConstants.B2CLA,MasterGSTConstants.CDNUR ,MasterGSTConstants.CDNURA ,MasterGSTConstants.B2C ,MasterGSTConstants.B2CSA,
						MasterGSTConstants.EXPORTS ,MasterGSTConstants.EXPA ,MasterGSTConstants.ADVANCES,MasterGSTConstants.NIL,MasterGSTConstants.ATPAID);				
				billToNames = gstr1Dao.getMultimonthBillToNames(client.getId().toString(), invTypes, yearCd);
			} else if (returntype.equals(GSTR2)) {
				
			} else if(MasterGSTConstants.GSTR2A.equalsIgnoreCase(returntype)) {
				
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				billToNames = gstr2Dao.getMultimonthBillToNames(client.getId().toString(), invTypes, yearCd);
			}else if (returntype.equals(GSTR2B)) {
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				billToNames = gstr2bDao.getMultimonthBillToNames(client.getId().toString(), invTypes, year);
			}
		}
		
		supportObj.put("billToNames",billToNames);
		return supportObj;
	}
	
	private  boolean isScientificNotation(String numberString) {

	    // Validate number
	    try {
	        new BigDecimal(numberString);
	    } catch (NumberFormatException e) {
	        return false;
	    }

	    // Check for scientific notation
	    return numberString.toUpperCase().contains("E") && numberString.charAt(1)=='.';   
	}
	
	public String userid(String id,String clientid) {

		String userid = id;
		User user = userService.findById(userid);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(NullUtil.isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.size() > 0){
				if(clntids.contains(clientid)){
					ClientUserMapping clntusermapping = clientUserMappingRepository
							.findByClientidAndCreatedByIsNotNull(clientid);
					if(isNotEmpty(clntusermapping) && isNotEmpty(clntusermapping.getCreatedBy())) {
						userid = clntusermapping.getCreatedBy();
					}else {
						userid = user.getParentid();
					}
				}
				}else {
					userid = user.getParentid();
				}
			}
		}

		return userid;
	}
	
	/**
	 * below method get the value in quarterly
	 *
	 */
	@Override
	@Transactional(readOnly = true)
	public Page<? extends InvoiceParent> getComaprisionReportQuaterlyInvoices(Pageable pageable, final Client client,
			final String userid, final String returnType, final String reports, int month, int year) {
		logger.debug(CLASSNAME + "getComaprisionReportQuaterlyInvoices : Begin");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		if (isNotEmpty(returnType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			if (returnType.equals("Unclaimed")) {
				if (year <= 2018) {
					cal.set(2017, 6, 0, 23, 59, 59);
				} else {
					if (month > 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					}
				}
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_YEARLY)) {
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year - 1, 3, 0, 23, 59, 59);
					} else {
						cal.set(year, 3, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else {
						cal.set(year + 1, 3, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else if ((!returnType.equals(MasterGSTConstants.GSTR2)
						&& !returnType.equals(MasterGSTConstants.PURCHASE_REGISTER))
						&& isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
					if ("reports".equals(reports)) {
						cal.set(year, month - 1, 0, 23, 59, 59);
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();

						// quarterly report month add in +2
						int mnth = month + 2;
						cal.set(year, mnth, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					} else {
						if (month == 1 || month == 2 || month == 3) {
							cal.set(year, 0, 0, 23, 59, 59);
						} else if (month == 4 || month == 5 || month == 6) {
							cal.set(year, 3, 0, 23, 59, 59);
						} else if (month == 7 || month == 8 || month == 9) {
							cal.set(year, 6, 0, 23, 59, 59);
						} else if (month == 10 || month == 11 || month == 12) {
							cal.set(year, 9, 0, 23, 59, 59);
						}
						stDate = new java.util.Date(cal.getTimeInMillis());
						cal = Calendar.getInstance();
						if (month == 1 || month == 2 || month == 3) {
							cal.set(year, 3, 0, 23, 59, 59);
						} else if (month == 4 || month == 5 || month == 6) {
							cal.set(year, 6, 0, 23, 59, 59);
						} else if (month == 7 || month == 8 || month == 9) {
							cal.set(year, 9, 0, 23, 59, 59);
						} else if (month == 10 || month == 11 || month == 12) {
							cal.set(year + 1, 0, 0, 23, 59, 59);
						}
						endDate = new java.util.Date(cal.getTimeInMillis());
					}
				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
			}
			if (returnType.equals(GSTR1)) {
				String strMonth = month < 10 ? "0" + month : month + "";
				String retPeriod = strMonth + year;
				List<String> invTypes = new ArrayList<String>();
				invTypes.add(MasterGSTConstants.B2B);
				invTypes.add(MasterGSTConstants.B2BA);
				invTypes.add(MasterGSTConstants.CDNA);
				invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				invTypes.add(MasterGSTConstants.B2CL);
				invTypes.add(MasterGSTConstants.B2CLA);
				invTypes.add(MasterGSTConstants.CDNUR);
				invTypes.add(MasterGSTConstants.CDNURA);
				invTypes.add(MasterGSTConstants.B2C);
				invTypes.add(MasterGSTConstants.B2CSA);
				invTypes.add(MasterGSTConstants.EXPORTS);
				invTypes.add(MasterGSTConstants.EXPA);
				List<GSTR1> gstr1 = Lists.newArrayList();
				// List<GSTR1> gstr1 =
				// gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),invTypes,
				// stDate, endDate);

				OtherConfigurations otherconfig = otherConfigurationRepository
						.findByClientid(client.getId().toString());
				Boolean fpidate = false;
				if (isNotEmpty(otherconfig)) {
					fpidate = otherconfig.isEnableinvoiceview();
				}
				if ("reports".equals(reports)) {
					gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(client.getId().toString(),
							invTypes, stDate, endDate);
				} else {
					if (isEmpty(otherconfig) || !fpidate) {
						gstr1 = gstr1Repository.findByClientidAndInvtypeInAndDateofinvoiceBetween(
								client.getId().toString(), invTypes, stDate, endDate);
					} else {
						gstr1 = gstr1Repository.findByClientidAndInvtypeInAndFp(client.getId().toString(), invTypes,
								retPeriod);
					}
				}

				List<String> otherinvTypes = new ArrayList<String>();
				otherinvTypes.add(MasterGSTConstants.ADVANCES);
				otherinvTypes.add(MasterGSTConstants.NIL);
				otherinvTypes.add(MasterGSTConstants.ATPAID);
				List<GSTR1> gstr1nilltxpat = gstr1Repository.findByClientidAndInvtypeInAndFp(client.getId().toString(),
						otherinvTypes, retPeriod);

				List<GSTR1> allinvoices = Lists.newArrayList();
				allinvoices.addAll(gstr1);
				allinvoices.addAll(gstr1nilltxpat);
				Page<? extends InvoiceParent> invoices = new PageImpl<>(allinvoices);
				return invoices;
				// return
				// gstr1Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
				// stDate, endDate, pageable);
			} else if (returnType.equals(GSTR2)) {
				return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth = month < 10 ? "0" + month : month + "";
				String retPeriod = strMonth + year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS);
				return gstr2Repository.findByClientidAndFpAndIsAmendmentAndInvtypeIn(client.getId().toString(),
						retPeriod, true, invTypes, pageable);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				// return
				// purchaseRepository.findByClientidAndBillDateBetween(client.getId().toString(),
				// stDate, endDate, pageable);
				OtherConfigurations otherconfig = otherConfigurationRepository
						.findByClientid(client.getId().toString());
				Boolean billdate = false;
				if (isNotEmpty(otherconfig)) {
					billdate = otherconfig.isEnableTransDate();
				}
				if (isEmpty(otherconfig) || !billdate) {
					return purchaseRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
							endDate, pageable);
				} else {
					return purchaseRepository.findByClientidAndBillDateBetween(client.getId().toString(), stDate,
							endDate, pageable);
				}
			} else if (returnType.equals(GSTR4)) {
				return gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR5)) {
				return gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals(GSTR6)) {
				return gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate,
						pageable);
			} else if (returnType.equals("Unclaimed")) {
				return purchaseRepository.findByClientidAndDateofinvoiceBetweenAndItems_ElgIsNull(
						client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				return deliverychallanRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
						stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				return proformainvoicesRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(),
						stDate, endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				return estimatesRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			} else if (returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				return purchaseOrderRepository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate,
						endDate, pageable);
			}
		}
		return null;
	}

	@Override
	public EwayBillConfigurations saveEwayBillConfigurations(EwayBillConfigurations ebillform) {
		ewayBillConfigurationRepository.deleteByClientid(ebillform.getClientid());

		return ewayBillConfigurationRepository.save(ebillform);
	}

	@Override
	public EwayBillConfigurations getEwayBillConfig(String clientId) {

		return ewayBillConfigurationRepository.findByClientid(clientId);
	}

	@Override
	@Transactional
	public void updateMannualRecords(List<MisMatchVO> records, String returntype, String invoiceid) {
		final String method = "updateMismatchRecords ::";
		logger.debug(CLASSNAME + method + BEGIN);
		if (returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)) {
			if (isNotEmpty(records)) {
				String mannualmatchInvoice = "Single";
				if(records.size()>1) {
					mannualmatchInvoice = "multiple";
				}
				for (MisMatchVO record : records) {
					if (isNotEmpty(record.getPurchaseId())) {
						PurchaseRegister purchaseRegister = purchaseRepository.findOne(invoiceid);
						purchaseRegister.setMannualMatchInvoices("Single");
						GSTR2 gstr2 = gstr2Repository.findOne(record.getPurchaseId());
						if (isNotEmpty(gstr2)) {
							purchaseRegister.setMatchingId(gstr2.getId().toString());
							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);
							purchaseRepository.save(purchaseRegister);
							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);
							gstr2.setMatchingId(invoiceid);
							gstr2.setMannualMatchInvoices(mannualmatchInvoice);
							gstr2Repository.save(gstr2);
						}
					}
				}
			}
		} else {
			if (isNotEmpty(records)) {
				String mannualmatchInvoice = "Single";
				if(records.size()>1) {
					mannualmatchInvoice = "multiple";
				}
				for (MisMatchVO record : records) {
					if (isNotEmpty(record.getPurchaseId())) {
						PurchaseRegister purchaseRegister = purchaseRepository.findOne(record.getPurchaseId());
						GSTR2 gstr2 = gstr2Repository.findOne(invoiceid);
						gstr2.setMannualMatchInvoices("Single");
						if (isNotEmpty(purchaseRegister)) {
							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);
							gstr2.setMatchingId(purchaseRegister.getId().toString());
							gstr2Repository.save(gstr2);
							purchaseRegister.setMatchingId(invoiceid);
							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);
							purchaseRegister.setMannualMatchInvoices(mannualmatchInvoice);
							purchaseRepository.save(purchaseRegister);
						}
					}
				}
			}
		}

		logger.debug(CLASSNAME + method + END);
	}

	public void saveJournalInvoice(InvoiceParent invoiceForJournal, String clientid, String returntype,	boolean isIntraState) {
		if (isNotEmpty(invoiceForJournal)) {
			if ("Sales Register".equalsIgnoreCase(returntype) || "SalesRegister".equalsIgnoreCase(returntype) || "GSTR1".equalsIgnoreCase(returntype)) {
				String dealertype = "";
				if (isNotEmpty(invoiceForJournal.getDealerType())) {
					dealertype = invoiceForJournal.getDealerType();
				}
				AccountingJournal journal = accountingJournalRepository.findByInvoiceId(invoiceForJournal.getId().toString());
				List<AccountingJournal> journals = accountingJournalRepository.findByClientId(clientid);
				String journalnumber = "1";
				if (isNotEmpty(journals)) {
					journalnumber = journals.size() + 1 + "";
				}
				if (isEmpty(journal)) {
					journal = new AccountingJournal();
				}
				if (isNotEmpty(invoiceForJournal.getDateofinvoice())) {
					journal.setDateofinvoice(invoiceForJournal.getDateofinvoice());
					Calendar cal = Calendar.getInstance();
					cal.setTime(invoiceForJournal.getDateofinvoice());
					int month = cal.get(Calendar.MONTH) + 1;
					int year = cal.get(Calendar.YEAR);
					String strMonth = month < 10 ? "0" + month : month + "";
					journal.setInvoiceMonth(strMonth + year);
				}
				if(isNotEmpty(invoiceForJournal.getMthCd())) {
					journal.setMthCd(invoiceForJournal.getMthCd());
				}
				if(isNotEmpty(invoiceForJournal.getYrCd())) {
					journal.setYrCd(invoiceForJournal.getYrCd());
				}
				if(isNotEmpty(invoiceForJournal.getQrtCd())) {
					journal.setQrtCd(invoiceForJournal.getQrtCd());
				}
				if(isNotEmpty(invoiceForJournal.getRoundOffAmount())) {
					journal.setRoundOffAmount(invoiceForJournal.getRoundOffAmount());
				}else {
					journal.setRoundOffAmount(0d);
				}
				
				if (isNotEmpty(invoiceForJournal.getUserid())) {
					journal.setUserId(invoiceForJournal.getUserid());
				}
				if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
					if(isNotEmpty(invoiceForJournal.getAdvPCustname())) {
						journal.setVendorName(invoiceForJournal.getAdvPCustname());
					}else {
						journal.setVendorName(AccountConstants.OTHER_DEBTORS);							
					}
				}else { 
					if (isNotEmpty(invoiceForJournal.getVendorName())) {
						if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())
								&& isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getInvoiceEcomGSTIN() + " - "
									+ invoiceForJournal.getVendorName() + ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())) {
							String ecomname = invoiceForJournal.getInvoiceEcomGSTIN() + "("
									+ invoiceForJournal.getVendorName() + ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getVendorName() + ")";
							journal.setVendorName(ecomname);
						} else {
							journal.setVendorName(invoiceForJournal.getVendorName());
						}
					} else if (isNotEmpty(invoiceForJournal.getBilledtoname())) {
						if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())
								&& isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getInvoiceEcomGSTIN() + " - " + invoiceForJournal.getBilledtoname()
									+ ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())) {
							String ecomname = invoiceForJournal.getInvoiceEcomGSTIN() + "("
									+ invoiceForJournal.getBilledtoname() + ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getBilledtoname() + ")";
							journal.setVendorName(ecomname);
						} else {
							journal.setVendorName(invoiceForJournal.getBilledtoname());
						}
					} else {
						if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())
								&& isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getInvoiceEcomGSTIN() + " - " + AccountConstants.OTHER_DEBTORS +")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())) {
							String ecomname = invoiceForJournal.getInvoiceEcomGSTIN() + "("+AccountConstants.OTHER_DEBTORS+")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("+AccountConstants.OTHER_DEBTORS+")";
							journal.setVendorName(ecomname);
						} else {
							journal.setVendorName(AccountConstants.OTHER_DEBTORS);
						}
					}
				}

				if (isNotEmpty(invoiceForJournal.getClientid())) {
					journal.setClientId(invoiceForJournal.getClientid());
				}
				if (isNotEmpty(invoiceForJournal.getInvtype())) {
					journal.setInvoiceType(invoiceForJournal.getInvtype());
					if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(invoiceForJournal.getInvtype())) {
						if (isNotEmpty(((GSTR1) invoiceForJournal).getCdnr().get(0).getNt().get(0).getNtty())) {
							String docType = ((GSTR1) invoiceForJournal).getCdnr().get(0).getNt().get(0).getNtty();
							journal.setCreditDebitNoteType(docType);
						}
						String invtype = invoiceForJournal.getB2b().get(0).getInv().get(0).getInvTyp();
						if(isNotEmpty(invtype) && invtype.equals("SEWPC")) {
							journal.setInvType("SEWPC");
						}else if(isNotEmpty(invtype) && invtype.equals("SEWP")) {
							journal.setInvType("SEWP");
						}else {
							journal.setInvType(" ");
						}
					} else if (MasterGSTConstants.CDNUR.equalsIgnoreCase(invoiceForJournal.getInvtype())) {
						if (isNotEmpty(((GSTR1) invoiceForJournal).getCdnur().get(0).getNtty())) {
							String docType = invoiceForJournal.getCdnur().get(0).getNtty();
							journal.setCreditDebitNoteType(docType);
						}
						if (isNotEmpty(((GSTR1) invoiceForJournal).getCdnur().get(0).getTyp())) {
							if("EXPWP".equalsIgnoreCase(((GSTR1) invoiceForJournal).getCdnur().get(0).getTyp())) {
								journal.setInvType("EXPWP");
							}
						}
					}
					if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
						if(isNotEmpty(invoiceForJournal.getAdvPCustname())) {
							journal.setLedgerName(invoiceForJournal.getAdvPCustname());
						}else {
							journal.setLedgerName(AccountConstants.OTHER_DEBTORS);							
						}
					}else {
						if (isEmpty(invoiceForJournal.getLedgerName())) {
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
								journal.setLedgerName("Cash");
							} else {
								journal.setLedgerName("Sales");
							}
						} else {
							journal.setLedgerName(invoiceForJournal.getLedgerName());
						}
					}

				}
				journal.setInvoiceId(invoiceForJournal.getId().toString());
				journal.setReturnType(returntype);
				journal.setInvoiceNumber(invoiceForJournal.getInvoiceno());
				if (isEmpty(journal.getJournalNumber())) {
					journal.setJournalNumber(journalnumber);
				}
				Double taxableAmount = 0d;
				Double totalAmount = 0d;
				Double igstAmount = 0d;
				Double cgstAmount = 0d;
				Double sgstAmount = 0d;
				Double cessAmount = 0d;
				Double exemptedAmount = 0d;
				Map<String,Item> ledgerNamemMap = Maps.newHashMap();
				List<String> ledgerkeys = Lists.newArrayList();
				if (isNotEmpty(invoiceForJournal.getItems())) {
					for (Item item : invoiceForJournal.getItems()) {
						String ledgerName = "";
						if(isNotEmpty(item.getLedgerName())) {
							ledgerName = item.getLedgerName().trim();
							
							ProfileLedger ledger = ledgerRepository.findByClientidAndLedgerNameIgnoreCase(clientid, ledgerName);
							if(isEmpty(ledger)) {
								ledger = new ProfileLedger();
								ledger.setClientid(clientid);
								ledger.setGrpsubgrpName(AccountConstants.SALES);
								ledger.setLedgerName(item.getLedgerName());
								ledger.setLedgerpath(AccountConstants.SALES_DEFAULT_PATH);
								ledger.setLedgerOpeningBalance(0);
								ledgerRepository.save(ledger);
							}
						}else {
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
								ledgerName = "Cash";
							}else {
								ledgerName = "Sales";
							}
						}
						
						if(!ledgerNamemMap.containsKey(ledgerName)) {
							item.setLedgerName(ledgerName);
							ledgerNamemMap.put(ledgerName, item);
							ledgerkeys.add(ledgerName);
						}else {
							Item itm = ledgerNamemMap.get(ledgerName);
							if(isNotEmpty(itm.getIgstamount())) {
								if(isNotEmpty(item.getIgstamount())) {
									itm.setIgstamount(itm.getIgstamount() + item.getIgstamount());
								}
							}else {
								if(isNotEmpty(item.getIgstamount())) {
									itm.setIgstamount(item.getIgstamount());
								}
							}
							if(isNotEmpty(itm.getCgstamount())) {
								if(isNotEmpty(item.getCgstamount())) {
									itm.setCgstamount(itm.getCgstamount() + item.getCgstamount());
								}
							}else {
								if(isNotEmpty(item.getCgstamount())) {
									itm.setCgstamount(item.getCgstamount());
								}
							}
							if(isNotEmpty(itm.getSgstamount())) {
								if(isNotEmpty(item.getSgstamount())) {
									itm.setSgstamount(itm.getSgstamount() + item.getSgstamount());
								}
							}else {
								if(isNotEmpty(item.getSgstamount())) {
									itm.setSgstamount(item.getSgstamount());
								}
							}
							if(isNotEmpty(itm.getCessamount())) {
								if(isNotEmpty(item.getCessamount())) {
									itm.setCessamount(itm.getCessamount() + item.getCessamount());
								}
							}else {
								if(isNotEmpty(item.getCessamount())) {
									itm.setCessamount(item.getCessamount());
								}
							}
							if(isNotEmpty(itm.getExmepted())) {
								if (isNotEmpty(item.getExmepted())) {
									Double qty = item.getQuantity() == null ? 1 : item.getQuantity();
									itm.setExmepted(itm.getExmepted() + (item.getExmepted()*qty));
								}
							}else {
								if(isNotEmpty(item.getExmepted())) {
									Double qty = item.getQuantity() == null ? 1 : item.getQuantity();
									itm.setExmepted(item.getExmepted()*qty);
								}
							}
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
								if(isNotEmpty(itm.getTaxablevalue())) {
									if (isNotEmpty(item.getAdvadjustedAmount())) {
										itm.setTaxablevalue(itm.getTaxablevalue() + item.getAdvadjustedAmount());
									}
								}else {
									if (isNotEmpty(item.getAdvadjustedAmount())) {
										itm.setTaxablevalue(item.getAdvadjustedAmount());
									}
								}
							}else {
								if(isNotEmpty(itm.getTaxablevalue())) {
									if(isNotEmpty(item.getTaxablevalue())) {
										itm.setTaxablevalue(itm.getTaxablevalue() + item.getTaxablevalue());
									}
								}else {
									if(isNotEmpty(item.getTaxablevalue())) {
										itm.setTaxablevalue(item.getTaxablevalue());
									}
								}
							}
							if(isNotEmpty(itm.getTotal())) {
								if(isNotEmpty(item.getTotal())) {
									itm.setTotal(itm.getTotal() + item.getTotal());
								}
							}else {
								if(isNotEmpty(item.getTotal())) {
									itm.setTotal(item.getTotal());
								}
							}
							ledgerNamemMap.put(ledgerName, itm);
						}
						
						if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
							if (isNotEmpty(item.getAdvadjustedAmount())) {
								taxableAmount = taxableAmount + item.getAdvadjustedAmount();
							}
						}else if(invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
							if (isNotEmpty(item.getRateperitem())) {
								taxableAmount = taxableAmount + item.getRateperitem();
							}
						} else {
							if (isNotEmpty(item.getTaxablevalue())) {
								taxableAmount = taxableAmount + item.getTaxablevalue();
							}
						}
						if (isNotEmpty(item.getTotal())) {
							totalAmount = totalAmount + item.getTotal();
						}
						if (isNotEmpty(item.getIgstamount())) {
							igstAmount = igstAmount + item.getIgstamount();
						}
						if (isNotEmpty(item.getSgstamount())) {
							sgstAmount = sgstAmount + item.getSgstamount();
						}
						if (isNotEmpty(item.getCgstamount())) {
							cgstAmount = cgstAmount + item.getCgstamount();
						}
						if (isNotEmpty(item.getCessamount())) {
							cessAmount = cessAmount + item.getCessamount();
						}
						if (isNotEmpty(item.getExmepted())) {
							Double qty = item.getQuantity() == null ? 1 : item.getQuantity();
							exemptedAmount = exemptedAmount + (item.getExmepted()*qty);
						}
					}
				}
				String revchargetype = "";
				if (isNotEmpty(invoiceForJournal.getRevchargetype())) {
					revchargetype = invoiceForJournal.getRevchargetype();
				}

				if ("Reverse".equalsIgnoreCase(revchargetype)) {
					if (isNotEmpty(invoiceForJournal.getTcstdsAmount())) {
						journal.setTdsamount(invoiceForJournal.getTcstdsAmount());
						journal.setCustomerorSupplierAccount(taxableAmount - invoiceForJournal.getTcstdsAmount());
					} else {
						journal.setTdsamount(0d);
						journal.setCustomerorSupplierAccount(taxableAmount);
					}
					journal.setSalesorPurchases(taxableAmount);
					journal.setRcmorinterorintra("RCM");
					journal.setIgstamount(0d);
					journal.setSgstamount(0d);
					journal.setCgstamount(0d);
					journal.setCessAmount(0d);
					journal.setExemptedamount(exemptedAmount);
				} else {
					if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.NIL)) {
						if (isNotEmpty(invoiceForJournal.getTcstdsAmount())) {
							journal.setTdsamount(invoiceForJournal.getTcstdsAmount());
							journal.setCustomerorSupplierAccount(taxableAmount - invoiceForJournal.getTcstdsAmount());
						} else {
							journal.setTdsamount(0d);
							journal.setCustomerorSupplierAccount(taxableAmount);
						}
						journal.setSalesorPurchases(taxableAmount);
						journal.setRcmorinterorintra("RCM");
						journal.setIgstamount(0d);
						journal.setSgstamount(0d);
						journal.setCgstamount(0d);
						journal.setCessAmount(0d);
						journal.setExemptedamount(exemptedAmount);
					} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.EXPORTS)) {
						String exptype = invoiceForJournal.getExp().get(0).getExpTyp();
						journal.setSalesorPurchases(taxableAmount);
						if ("Composition".equals(dealertype)) {
							journal.setRcmorinterorintra("RCM");
							journal.setIgstamount(0d);
							journal.setSgstamount(0d);
							journal.setCgstamount(0d);
							journal.setCessAmount(0d);
							journal.setExemptedamount(exemptedAmount);
						} else {
							if (exptype.equals("WOPAY")) {
								journal.setRcmorinterorintra("RCM");
								journal.setIgstamount(0d);
								journal.setSgstamount(0d);
								journal.setCgstamount(0d);
								journal.setCessAmount(0d);
								journal.setExemptedamount(exemptedAmount);
							} else if(exptype.equals("WPAY")){
								journal.setRcmorinterorintra("Inter");
								journal.setIgstamount(igstAmount);
								journal.setSgstamount(sgstAmount);
								journal.setCgstamount(cgstAmount);
								journal.setCessAmount(cessAmount);
								journal.setExemptedamount(exemptedAmount);
							}else {
								if (isIntraState) {
									journal.setRcmorinterorintra("Intra");
								} else {
									journal.setRcmorinterorintra("Inter");
								}
								journal.setIgstamount(igstAmount);
								journal.setSgstamount(sgstAmount);
								journal.setCgstamount(cgstAmount);
								journal.setCessAmount(cessAmount);
								journal.setExemptedamount(exemptedAmount);
							}
						}
						if (isNotEmpty(invoiceForJournal.getTcstdsAmount())) {
							journal.setTdsamount(invoiceForJournal.getTcstdsAmount());
							journal.setCustomerorSupplierAccount(totalAmount - invoiceForJournal.getTcstdsAmount());
						} else {
							journal.setTdsamount(0d);
							journal.setCustomerorSupplierAccount(totalAmount);
						}
					} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2B)
							|| invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2C)
							|| invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2CL)) {
						String invtype = invoiceForJournal.getB2b().get(0).getInv().get(0).getInvTyp();
						journal.setSalesorPurchases(taxableAmount);
						if(isNotEmpty(invtype) && invtype.equals("SEWPC")) {
							journal.setInvType("SEWPC");
						}else {
							journal.setInvType(" ");
						}
						if ("Composition".equals(dealertype)) {
							journal.setRcmorinterorintra("RCM");
							journal.setIgstamount(0d);
							journal.setSgstamount(0d);
							journal.setCgstamount(0d);
							journal.setCessAmount(0d);
							journal.setExemptedamount(exemptedAmount);
						} else {
							if (invtype.equals("SEWOP")) {
								journal.setRcmorinterorintra("RCM");
								journal.setIgstamount(0d);
								journal.setSgstamount(0d);
								journal.setCgstamount(0d);
								journal.setCessAmount(0d);
								journal.setExemptedamount(exemptedAmount);
							} else if(invtype.equals("CBW") || invtype.equals("SEWP") || invtype.equals("SEWPC")){
								journal.setRcmorinterorintra("Inter");
								journal.setIgstamount(igstAmount);
								journal.setSgstamount(sgstAmount);
								journal.setCgstamount(cgstAmount);
								journal.setCessAmount(cessAmount);
								journal.setExemptedamount(exemptedAmount);
							}else {
								if (isIntraState) {
									journal.setRcmorinterorintra("Intra");
								} else {
									journal.setRcmorinterorintra("Inter");
								}
								journal.setIgstamount(igstAmount);
								journal.setSgstamount(sgstAmount);
								journal.setCgstamount(cgstAmount);
								journal.setCessAmount(cessAmount);
								journal.setExemptedamount(exemptedAmount);
							}
						}
						if (isNotEmpty(invoiceForJournal.getTcstdsAmount())) {
							journal.setTdsamount(invoiceForJournal.getTcstdsAmount());
							journal.setCustomerorSupplierAccount(totalAmount - invoiceForJournal.getTcstdsAmount());
						} else {
							journal.setTdsamount(0d);
							journal.setCustomerorSupplierAccount(totalAmount);
						}
					} else {
						if ("Composition".equals(dealertype)) {
							journal.setRcmorinterorintra("RCM");
							journal.setIgstamount(0d);
							journal.setSgstamount(0d);
							journal.setCgstamount(0d);
							journal.setCessAmount(0d);
							journal.setExemptedamount(exemptedAmount);
						} else {
							if (isIntraState) {
								journal.setRcmorinterorintra("Intra");
							} else {
								journal.setRcmorinterorintra("Inter");
							}
							journal.setIgstamount(igstAmount);
							journal.setSgstamount(sgstAmount);
							journal.setCgstamount(cgstAmount);
							journal.setCessAmount(cessAmount);
							journal.setExemptedamount(exemptedAmount);
						}
						journal.setSalesorPurchases(taxableAmount);
						if (isNotEmpty(invoiceForJournal.getTcstdsAmount())) {
							journal.setTdsamount(invoiceForJournal.getTcstdsAmount());
							journal.setCustomerorSupplierAccount(totalAmount - invoiceForJournal.getTcstdsAmount());
						} else {
							journal.setTdsamount(0d);
							journal.setCustomerorSupplierAccount(totalAmount);
						}
					}
				}
				List<Item> itemlist = Lists.newArrayList();
				for(String key : ledgerkeys) {
					Item itm = ledgerNamemMap.get(key);
					itemlist.add(itm);
				}
				journal.setItems(itemlist);
				
				double totalCredit = 0.0;
				double totalDebit = 0.0;
				if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
					totalDebit += journal.getSalesorPurchases() == null ? 0.0 : journal.getSalesorPurchases();
					totalDebit += journal.getSgstamount() == null ? 0.0 : journal.getSgstamount();
					totalDebit += journal.getCgstamount() == null ? 0.0 : journal.getCgstamount();
					totalDebit += journal.getIgstamount() == null ? 0.0 : journal.getIgstamount();
					totalDebit += journal.getCessAmount() == null ? 0.0 : journal.getCessAmount();
					totalDebit += journal.getTdsamount() == null ? 0.0 : journal.getTdsamount();
				}else {
					totalDebit += journal.getCustomerorSupplierAccount() == null ? 0.0 : journal.getCustomerorSupplierAccount();
					totalDebit += journal.getTdsamount() == null ? 0.0 : (journal.getTdsamount()*2);
				}
				totalDebit += journal.getRoundOffAmount() == null ? 0.0 : journal.getRoundOffAmount();
				
				
				totalCredit += journal.getSalesorPurchases() == null ? 0.0 : journal.getSalesorPurchases();
				totalCredit += journal.getSgstamount() == null ? 0.0 : journal.getSgstamount();
				totalCredit += journal.getCgstamount() == null ? 0.0 : journal.getCgstamount();
				totalCredit += journal.getIgstamount() == null ? 0.0 : journal.getIgstamount();
				totalCredit += journal.getCessAmount() == null ? 0.0 : journal.getCessAmount();
				totalCredit += journal.getTdsamount() == null ? 0.0 : journal.getTdsamount();
				totalCredit += journal.getRoundOffAmount() == null ? 0.0 : journal.getRoundOffAmount();
				totalCredit += journal.getExemptedamount() == null ? 0.0 : journal.getExemptedamount();
				
				journal.setCreditTotal(Math.abs(totalCredit));
				journal.setDebitTotal(Math.abs(totalDebit));
				if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
					
					journal.setSalesorPurchases(taxableAmount);
				}
				accountingJournalRepository.save(journal);
			} else {
				AccountingJournal journal = accountingJournalRepository.findByInvoiceId(invoiceForJournal.getId().toString());
				List<AccountingJournal> journals = accountingJournalRepository.findByClientId(clientid);
				String journalnumber = "1";
				if (isNotEmpty(journals)) {
					journalnumber = (journals.size() + 1) + "";
				}
				if (isEmpty(journal)) {
					journal = new AccountingJournal();
				}
				if(isNotEmpty(invoiceForJournal.getRoundOffAmount())) {
					journal.setRoundOffAmount(invoiceForJournal.getRoundOffAmount());
				}else {
					journal.setRoundOffAmount(0d);
				}
				if(invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES) || invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
					if (isNotEmpty(invoiceForJournal.getDateofinvoice())) {
						journal.setDateofinvoice(invoiceForJournal.getDateofinvoice());
						Calendar cal = Calendar.getInstance();
						cal.setTime(invoiceForJournal.getDateofinvoice());
						int months = cal.get(Calendar.MONTH) + 1;
						int years = cal.get(Calendar.YEAR);
						String strMonths = months < 10 ? "0" + months : months + "";
						journal.setInvoiceMonth(strMonths + years);
						
						if(isNotEmpty(invoiceForJournal.getMthCd())) {
							journal.setMthCd(invoiceForJournal.getMthCd());
						}
						if(isNotEmpty(invoiceForJournal.getYrCd())) {
							journal.setYrCd(invoiceForJournal.getYrCd());
						}
						if(isNotEmpty(invoiceForJournal.getQrtCd())) {
							journal.setQrtCd(invoiceForJournal.getQrtCd());
						}
					}
				}else {
					if (isNotEmpty(invoiceForJournal.getBillDate())) {
						journal.setDateofinvoice(invoiceForJournal.getBillDate());
						Calendar cal = Calendar.getInstance();
						cal.setTime(invoiceForJournal.getBillDate());
						int months = cal.get(Calendar.MONTH) + 1;
						int years = cal.get(Calendar.YEAR);
						String strMonths = months < 10 ? "0" + months : months + "";
						journal.setInvoiceMonth(strMonths + years);
						if(isNotEmpty(invoiceForJournal.getTrDatemthCd())) {
							journal.setMthCd(invoiceForJournal.getTrDatemthCd());
						}
						if(isNotEmpty(invoiceForJournal.getTrDateyrCd())) {
							journal.setYrCd(invoiceForJournal.getTrDateyrCd());
						}
						if(isNotEmpty(invoiceForJournal.getTrDateqrtCd())) {
							journal.setQrtCd(invoiceForJournal.getTrDateqrtCd());
						}
					} else if (isNotEmpty(invoiceForJournal.getDateofinvoice())) {
						journal.setDateofinvoice(invoiceForJournal.getDateofinvoice());
						Calendar cal = Calendar.getInstance();
						cal.setTime(invoiceForJournal.getDateofinvoice());
						int months = cal.get(Calendar.MONTH) + 1;
						int years = cal.get(Calendar.YEAR);
						String strMonths = months < 10 ? "0" + months : months + "";
						journal.setInvoiceMonth(strMonths + years);
						
						if(isNotEmpty(invoiceForJournal.getMthCd())) {
							journal.setMthCd(invoiceForJournal.getMthCd());
						}
						if(isNotEmpty(invoiceForJournal.getYrCd())) {
							journal.setYrCd(invoiceForJournal.getYrCd());
						}
						if(isNotEmpty(invoiceForJournal.getQrtCd())) {
							journal.setQrtCd(invoiceForJournal.getQrtCd());
						}
					}
				}
				if (isNotEmpty(invoiceForJournal.getUserid())) {
					journal.setUserId(invoiceForJournal.getUserid());
				}
				if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
					if(isNotEmpty(invoiceForJournal.getAdvPCustname())) {
						journal.setLedgerName(invoiceForJournal.getAdvPCustname());
					}else {
						journal.setLedgerName("Other Creditors");							
					}
				}else {
					if (isNotEmpty(invoiceForJournal.getLedgerName())) {
						journal.setLedgerName(invoiceForJournal.getLedgerName());
					}
				}
				if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
					if(isNotEmpty(invoiceForJournal.getAdvPCustname())) {
						journal.setVendorName(invoiceForJournal.getAdvPCustname());
					}else {
						journal.setVendorName("Other Creditors");							
					}
				}else {
					if (isNotEmpty(invoiceForJournal.getVendorName())) {
						if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())
								&& isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getInvoiceEcomGSTIN() + " - "
									+ invoiceForJournal.getVendorName() + ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())) {
							String ecomname = invoiceForJournal.getInvoiceEcomGSTIN() + "("
									+ invoiceForJournal.getVendorName() + ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getVendorName() + ")";
							journal.setVendorName(ecomname);
						} else {
							journal.setVendorName(invoiceForJournal.getVendorName());
						}
					} else if (isNotEmpty(invoiceForJournal.getBilledtoname())) {
						if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())
								&& isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getInvoiceEcomGSTIN() + " - " + invoiceForJournal.getBilledtoname()
									+ ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())) {
							String ecomname = invoiceForJournal.getInvoiceEcomGSTIN() + "("
									+ invoiceForJournal.getBilledtoname() + ")";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getBilledtoname() + ")";
							journal.setVendorName(ecomname);
						} else {
							journal.setVendorName(invoiceForJournal.getBilledtoname());
						}
					} else {
						if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())
								&& isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "("
									+ invoiceForJournal.getInvoiceEcomGSTIN() + " - " + "Other Creditors)";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomGSTIN())) {
							String ecomname = invoiceForJournal.getInvoiceEcomGSTIN() + "(Other Creditors)";
							journal.setVendorName(ecomname);
						} else if (isNotEmpty(invoiceForJournal.getInvoiceEcomOperator())) {
							String ecomname = invoiceForJournal.getInvoiceEcomOperator() + "(Other Creditors)";
							journal.setVendorName(ecomname);
						} else {
							journal.setVendorName("Other Creditors");
						}
					}
				}
				if (isNotEmpty(invoiceForJournal.getClientid())) {
					journal.setClientId(invoiceForJournal.getClientid());
				}
				if (isNotEmpty(invoiceForJournal.getInvtype())) {
					journal.setInvoiceType(invoiceForJournal.getInvtype());
					if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(invoiceForJournal.getInvtype())
							|| MasterGSTConstants.CDNUR.equalsIgnoreCase(invoiceForJournal.getInvtype())) {

						if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(invoiceForJournal.getInvtype())) {
							String docType = invoiceForJournal.getCdn().get(0).getNt().get(0).getNtty();
							journal.setCreditDebitNoteType(docType);
						} else {
							String docType = invoiceForJournal.getCdnur().get(0).getNtty();
							journal.setCreditDebitNoteType(docType);
						}
					}

					if (isEmpty(invoiceForJournal.getLedgerName())) {
						if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
							journal.setLedgerName("Cash");
						} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
							journal.setLedgerName("HO-ISD");
						} else {
							journal.setLedgerName("Expenditure");
						}
					} else {
						journal.setLedgerName(invoiceForJournal.getLedgerName());
					}

				}
				journal.setInvoiceId(invoiceForJournal.getId().toString());
				journal.setReturnType("GSTR2");
				journal.setInvoiceNumber(invoiceForJournal.getInvoiceno());
				if (isEmpty(journal.getJournalNumber())) {
					journal.setJournalNumber(journalnumber);
				}
				Double taxableAmount = 0d;
				Double totalAmount = 0d;
				Double exemptedAmount = 0d;
				Double igstAmount = 0d;
				Double cgstAmount = 0d;
				Double sgstAmount = 0d;
				Double cessAmount = 0d;
				Double isdineligibleAmount = 0d;

				Double rigstAmount = 0d;
				Double rcgstAmount = 0d;
				Double rsgstAmount = 0d;
				Double rcessAmount = 0d;
				Double icsgstamountrcm = 0d;
				String itcinelg = "false";
				String itcType = "";
				Map<String,Item> ledgerNamemMap = Maps.newHashMap();
				List<String> ledgerkeys = Lists.newArrayList();
				if (isNotEmpty(invoiceForJournal.getItems())) {
					for (Item item : invoiceForJournal.getItems()) {
						String ledgerName = "";
						if(isNotEmpty(item.getLedgerName())) {
							ledgerName = item.getLedgerName().trim();
						}else {
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
								ledgerName = "Cash";
							}else {
								ledgerName = AccountConstants.PURCHASES;
							}
						}
						if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
							item.setElg("");
						}
						if(!ledgerNamemMap.containsKey(ledgerName)) {
							item.setLedgerName(ledgerName);
							Item newitem = new Item();
							try {
								BeanUtils.copyProperties(newitem, item);
							}catch (IllegalAccessException | InvocationTargetException e) {
								logger.error("ERROR in BeanUtils copy", e);
							}
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
								if (isNotEmpty(newitem.getIsdcessamount())) {
									newitem.setCessamount(newitem.getIsdcessamount());
								}
							}
							if(isNotEmpty(newitem.getTaxablevalue())) {
								Double taxable = newitem.getTaxablevalue();
								if ((isNotEmpty(newitem.getElg()) && ("no".equalsIgnoreCase(newitem.getElg()) || "pending".equalsIgnoreCase(newitem.getElg()))) || isEmpty(newitem.getElg())) {
									if (isNotEmpty(newitem.getIgstamount())) {
										taxable = taxable + newitem.getIgstamount();
									}
									if (isNotEmpty(newitem.getSgstamount())) {
										taxable = taxable + newitem.getSgstamount();
									}
									if (isNotEmpty(newitem.getCgstamount())) {
										taxable = taxable + newitem.getCgstamount();
									}
									if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
										if (isNotEmpty(newitem.getIsdcessamount())) {
											taxable = taxable + newitem.getIsdcessamount();
										}
									}else {
										if (isNotEmpty(newitem.getCessamount())) {
											taxable = taxable + newitem.getCessamount();
										}
									}
								}else {
									if (isNotEmpty(newitem.getIgstavltax()) && newitem.getIgstavltax() > 0d) {
										if (isNotEmpty(newitem.getElgpercent())) {
											if (isNotEmpty(newitem.getIgstamount())) {
												taxable = taxable + (((100 - newitem.getElgpercent()) / 100) * newitem.getIgstamount());
											}
										}
									}
									if (isNotEmpty(newitem.getSgstavltax())  && newitem.getSgstavltax() > 0d) {
										if (isNotEmpty(newitem.getElgpercent())) {
											if (isNotEmpty(newitem.getSgstamount())) {
												taxable = taxable + (((100 - newitem.getElgpercent()) / 100) * newitem.getSgstamount());
											}
										}
									}
									if (isNotEmpty(newitem.getCgstavltax())  && newitem.getCgstavltax() > 0d) {
										if (isNotEmpty(newitem.getElgpercent())) {
											if (isNotEmpty(newitem.getCgstamount())) {
												taxable = taxable + (((100 - newitem.getElgpercent()) / 100) * newitem.getCgstamount());
											}
										}
									}
									if (isNotEmpty(newitem.getCessavltax())  && newitem.getCessavltax() > 0d) {
										if (isNotEmpty(newitem.getElgpercent())) {
											if (isNotEmpty(newitem.getCessamount())) {
												taxable = taxable + (((100 - newitem.getElgpercent()) / 100) * newitem.getCessamount());
											}
										}
									}
								}
								newitem.setTaxablevalue(taxable);
							}
							ledgerNamemMap.put(ledgerName, newitem);
							ledgerkeys.add(ledgerName);
						}else {
							Item itm = ledgerNamemMap.get(ledgerName);
							if(isNotEmpty(itm.getIgstamount())) {
								if(isNotEmpty(item.getIgstamount())) {
									itm.setIgstamount(itm.getIgstamount() + item.getIgstamount());
								}
							}else {
								if(isNotEmpty(item.getIgstamount())) {
									itm.setIgstamount(item.getIgstamount());
								}
							}
							
							if(isNotEmpty(itm.getIgstavltax())) {
								if(isNotEmpty(item.getIgstavltax())) {
									itm.setIgstavltax(itm.getIgstavltax() + item.getIgstavltax());
								}
							}else {
								if(isNotEmpty(item.getIgstavltax())) {
									itm.setIgstavltax(item.getIgstavltax());
								}
							}
							
							if(isNotEmpty(itm.getCgstamount())) {
								if(isNotEmpty(item.getCgstamount())) {
									itm.setCgstamount(itm.getCgstamount() + item.getCgstamount());
								}
							}else {
								if(isNotEmpty(item.getCgstamount())) {
									itm.setCgstamount(item.getCgstamount());
								}
							}
							if(isNotEmpty(itm.getCgstavltax())) {
								if(isNotEmpty(item.getCgstavltax())) {
									itm.setCgstavltax(itm.getCgstavltax() + item.getCgstavltax());
								}
							}else {
								if(isNotEmpty(item.getCgstavltax())) {
									itm.setCgstavltax(item.getCgstavltax());
								}
							}
							if(isNotEmpty(itm.getSgstamount())) {
								if(isNotEmpty(item.getSgstamount())) {
									itm.setSgstamount(itm.getSgstamount() + item.getSgstamount());
								}
							}else {
								if(isNotEmpty(item.getSgstamount())) {
									itm.setSgstamount(item.getSgstamount());
								}
							}
							if(isNotEmpty(itm.getSgstavltax())) {
								if(isNotEmpty(item.getSgstavltax())) {
									itm.setSgstavltax(itm.getSgstavltax() + item.getSgstavltax());
								}
							}else {
								if(isNotEmpty(item.getSgstavltax())) {
									itm.setSgstavltax(item.getSgstavltax());
								}
							}
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
								if(isNotEmpty(itm.getCessamount())) {
									if(isNotEmpty(item.getIsdcessamount())) {
										itm.setCessamount(itm.getCessamount() + item.getIsdcessamount());
									}
								}else {
									if(isNotEmpty(item.getIsdcessamount())) {
										itm.setCessamount(item.getIsdcessamount());
									}
								}
							}else {
								if(isNotEmpty(itm.getCessamount())) {
									if(isNotEmpty(item.getCessamount())) {
										itm.setCessamount(itm.getCessamount() + item.getCessamount());
									}
								}else {
									if(isNotEmpty(item.getCessamount())) {
										itm.setCessamount(item.getCessamount());
									}
								}
							}
							if(isNotEmpty(itm.getCessavltax())) {
								if(isNotEmpty(item.getCessavltax())) {
									itm.setCessavltax(itm.getCessavltax() + item.getCessavltax());
								}
							}else {
								if(isNotEmpty(item.getCessavltax())) {
									itm.setCessavltax(item.getCessavltax());
								}
							}
							if(isNotEmpty(itm.getExmepted())) {
								if(isNotEmpty(item.getExmepted())) {
									itm.setExmepted(itm.getExmepted() + item.getExmepted());
								}
							}else {
								if(isNotEmpty(item.getExmepted())) {
									itm.setExmepted(item.getExmepted());
								}
							}
							if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
								if(isNotEmpty(itm.getTaxablevalue())) {
									if (isNotEmpty(item.getAdvadjustedAmount())) {
										itm.setTaxablevalue(itm.getTaxablevalue() + item.getAdvadjustedAmount());
									}
								}else {
									if (isNotEmpty(item.getAdvadjustedAmount())) {
										itm.setTaxablevalue(item.getAdvadjustedAmount());
									}
								}
							}else {
								if(isNotEmpty(itm.getTaxablevalue())) {
									if(isNotEmpty(item.getTaxablevalue())) {
										Double taxable = item.getTaxablevalue();
										if ((isNotEmpty(item.getElg()) && ("no".equalsIgnoreCase(item.getElg()) || "pending".equalsIgnoreCase(item.getElg()))) || isEmpty(item.getElg())) {
											if (isNotEmpty(item.getIgstamount())) {
												taxable = taxable + item.getIgstamount();
											}
											if (isNotEmpty(item.getSgstamount())) {
												taxable = taxable + item.getSgstamount();
											}
											if (isNotEmpty(item.getCgstamount())) {
												taxable = taxable + item.getCgstamount();
											}
											if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
												if (isNotEmpty(item.getIsdcessamount())) {
													taxable = taxable + item.getIsdcessamount();
												}
											}else {
												if (isNotEmpty(item.getCessamount())) {
													taxable = taxable + item.getCessamount();
												}
											}
										}else {	
											if (isNotEmpty(item.getIgstavltax())   && item.getIgstavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getIgstamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getIgstamount());
													}
												}
											}
											if (isNotEmpty(item.getSgstavltax())  && item.getSgstavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getSgstamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getSgstamount());
													}
												}
											}
											if (isNotEmpty(item.getCgstavltax())  && item.getCgstavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getCgstamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getCgstamount());
													}
												}
											}
											if (isNotEmpty(item.getCessavltax())  && item.getCessavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getCessamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getCessamount());
													}
												}
											}
										}
										itm.setTaxablevalue(itm.getTaxablevalue() + taxable);
									}
								}else {
									if(isNotEmpty(item.getTaxablevalue())) {
										Double taxable = item.getTaxablevalue();
										if ((isNotEmpty(item.getElg()) && ("no".equalsIgnoreCase(item.getElg()) || "pending".equalsIgnoreCase(item.getElg()))) || isEmpty(item.getElg())) {
											if (isNotEmpty(item.getIgstamount())) {
												taxable = taxable + item.getIgstamount();
											}
											if (isNotEmpty(item.getSgstamount())) {
												taxable = taxable + item.getSgstamount();
											}
											if (isNotEmpty(item.getCgstamount())) {
												taxable = taxable + item.getCgstamount();
											}
											if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
												if (isNotEmpty(item.getIsdcessamount())) {
													taxable = taxable + item.getIsdcessamount();
												}
											}else {
												if (isNotEmpty(item.getCessamount())) {
													taxable = taxable + item.getCessamount();
												}
											}
										}else {
											if (isNotEmpty(item.getIgstavltax()) && item.getIgstavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getIgstamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getIgstamount());
													}
												}
											}
											if (isNotEmpty(item.getSgstavltax())  && item.getSgstavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getSgstamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getSgstamount());
													}
												}
											}
											if (isNotEmpty(item.getCgstavltax())  && item.getCgstavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getCgstamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getCgstamount());
													}
												}
											}
											if (isNotEmpty(item.getCessavltax())  && item.getCessavltax() > 0d) {
												if (isNotEmpty(item.getElgpercent())) {
													if (isNotEmpty(item.getCessamount())) {
														taxable = taxable + (((100 - item.getElgpercent()) / 100) * item.getCessamount());
													}
												}
											}
										}
										itm.setTaxablevalue(taxable);
									}
								}
							}
							if(isNotEmpty(itm.getTotal())) {
								if(isNotEmpty(item.getTotal())) {
									itm.setTotal(itm.getTotal() + item.getTotal());
								}
							}else {
								if(isNotEmpty(item.getTotal())) {
									itm.setTotal(item.getTotal());
								}
							}
							ledgerNamemMap.put(ledgerName, itm);
						}
						
						
						if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.NIL)) {
							if (isNotEmpty(item.getTotal())) {
								totalAmount = totalAmount + item.getTotal();
							}
						} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
							if (isNotEmpty(item.getTotal())) {
								totalAmount = totalAmount + item.getTotal();
							}
							if (isNotEmpty(item.getIgstamount())) {
								igstAmount = igstAmount + item.getIgstamount();
							}
							if (isNotEmpty(item.getCgstamount())) {
								cgstAmount = cgstAmount + item.getCgstamount();
							}
							if (isNotEmpty(item.getSgstamount())) {
								sgstAmount = sgstAmount + item.getSgstamount();
							}
							if (isNotEmpty(item.getCessamount())) {
								cessAmount = cessAmount + item.getCessamount();
							}
						} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
							if (isNotEmpty(item.getTotal())) {
								totalAmount = totalAmount + item.getTotal();
							}
							if (isNotEmpty(item.getIgstamount())) {
								igstAmount = igstAmount + item.getIgstamount();
							}
							if (isNotEmpty(item.getCgstamount())) {
								cgstAmount = cgstAmount + item.getCgstamount();
							}
							if (isNotEmpty(item.getSgstamount())) {
								sgstAmount = sgstAmount + item.getSgstamount();
							}
							if (isNotEmpty(item.getCessamount())) {
								cessAmount = cessAmount + item.getCessamount();
							}
						} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ITC_REVERSAL)) {
							if (isNotEmpty(item.getTotal())) {
								totalAmount = totalAmount + item.getTotal();
							}
							if (isNotEmpty(item.getIgstamount())) {
								igstAmount = igstAmount + item.getIgstamount();
							}
							if (isNotEmpty(item.getCgstamount())) {
								cgstAmount = cgstAmount + item.getCgstamount();
							}
							if (isNotEmpty(item.getSgstamount())) {
								sgstAmount = sgstAmount + item.getSgstamount();
							}
							if (isNotEmpty(item.getCessamount())) {
								cessAmount = cessAmount + item.getCessamount();
							}
						} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
							if (isNotEmpty(item.getIsdType())
									&& ("Eligible - Credit distributed as".equalsIgnoreCase(item.getIsdType()) || "Eligible - Credit distributed".equalsIgnoreCase(item.getIsdType()))) {
								if (isNotEmpty(item.getTotal())) {
									totalAmount = totalAmount + item.getTotal();
								}
								if (isNotEmpty(item.getIgstamount())) {
									igstAmount = igstAmount + item.getIgstamount();
								}
								if (isNotEmpty(item.getCgstamount())) {
									cgstAmount = cgstAmount + item.getCgstamount();
								}
								if (isNotEmpty(item.getSgstamount())) {
									sgstAmount = sgstAmount + item.getSgstamount();
								}
								if (isNotEmpty(item.getIsdcessamount())) {
									cessAmount = cessAmount + item.getIsdcessamount();
								}
							}
							if (isNotEmpty(item.getIsdType())
									&& ("Ineligible - Credit distributed as".equalsIgnoreCase(item.getIsdType()) || "Ineligible - Credit distributed".equalsIgnoreCase(item.getIsdType()))) {
								if (isNotEmpty(item.getIgstamount())) {
									totalAmount = totalAmount + item.getIgstamount();
									isdineligibleAmount = isdineligibleAmount + item.getIgstamount();
								}
								if (isNotEmpty(item.getCgstamount())) {
									totalAmount = totalAmount + item.getCgstamount();
									isdineligibleAmount = isdineligibleAmount + item.getCgstamount();
								}
								if (isNotEmpty(item.getSgstamount())) {
									totalAmount = totalAmount + item.getSgstamount();
									isdineligibleAmount = isdineligibleAmount + item.getSgstamount();
								}
								if (isNotEmpty(item.getIsdcessamount())) {
									totalAmount = totalAmount + item.getIsdcessamount();
									isdineligibleAmount = isdineligibleAmount + item.getIsdcessamount();
								}
							}
						} else {

							if (isNotEmpty(item.getElg())) {
								itcType = item.getElg();
								if ("no".equalsIgnoreCase(itcType) || "pending".equalsIgnoreCase(itcType)) {
									itcinelg = "true";
									if (isNotEmpty(item.getTaxablevalue())) {
										taxableAmount = taxableAmount + item.getTaxablevalue();
									}
									if (isNotEmpty(item.getExmepted())) {
										Double qty = item.getQuantity() == null ? 1 : item.getQuantity();
										exemptedAmount = exemptedAmount + (item.getExmepted()*qty);
									}
									if (isNotEmpty(item.getTotal())) {
										totalAmount = totalAmount + item.getTotal();
									}
									if (isNotEmpty(item.getIgstamount())) {
										igstAmount = igstAmount + item.getIgstamount();
										taxableAmount = taxableAmount + item.getIgstamount();
										icsgstamountrcm = icsgstamountrcm + item.getIgstamount();
									}
									if (isNotEmpty(item.getSgstamount())) {
										sgstAmount = sgstAmount + item.getSgstamount();
										taxableAmount = taxableAmount + item.getSgstamount();
										icsgstamountrcm = icsgstamountrcm + item.getSgstamount();
									}
									if (isNotEmpty(item.getCgstamount())) {
										cgstAmount = cgstAmount + item.getCgstamount();
										taxableAmount = taxableAmount + item.getCgstamount();
										icsgstamountrcm = icsgstamountrcm + item.getCgstamount();
									}
									if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
										if (isNotEmpty(item.getIsdcessamount())) {
											cessAmount = cessAmount + item.getIsdcessamount();
											taxableAmount = taxableAmount + item.getIsdcessamount();
											icsgstamountrcm = icsgstamountrcm + item.getIsdcessamount();
										}
									}else {
										if (isNotEmpty(item.getCessamount())) {
											cessAmount = cessAmount + item.getCessamount();
											taxableAmount = taxableAmount + item.getCessamount();
											icsgstamountrcm = icsgstamountrcm + item.getCessamount();
										}
									}
								} else {
									itcinelg = "false";
									if (isNotEmpty(item.getTaxablevalue())) {
										taxableAmount = taxableAmount + item.getTaxablevalue();
									}
									if (isNotEmpty(item.getExmepted())) {
										Double qty = item.getQuantity() == null ? 1 : item.getQuantity();
										exemptedAmount = exemptedAmount + (item.getExmepted()*qty);
									}
									if (isNotEmpty(item.getTotal())) {
										totalAmount = totalAmount + item.getTotal();
									}
									if (isNotEmpty(item.getIgstavltax())) {
										igstAmount = igstAmount + item.getIgstavltax();
										icsgstamountrcm = icsgstamountrcm + item.getIgstavltax();
										if (isNotEmpty(item.getElgpercent())) {
											if (isNotEmpty(item.getIgstamount())) {
												taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getIgstamount());
											}
										}
									}
									if (isNotEmpty(item.getIgstamount())) {
										rigstAmount = rigstAmount + item.getIgstamount();
									}
									if (isNotEmpty(item.getSgstavltax())) {
										sgstAmount = sgstAmount + item.getSgstavltax();
										icsgstamountrcm = icsgstamountrcm + item.getSgstavltax();
										if (isNotEmpty(item.getElgpercent())) {
											if (isNotEmpty(item.getSgstamount())) {
												taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getSgstamount());
											}
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										rsgstAmount = rsgstAmount + item.getSgstamount();
									}
									if (isNotEmpty(item.getCgstavltax())) {
										cgstAmount = cgstAmount + item.getCgstavltax();
										icsgstamountrcm = icsgstamountrcm + item.getCgstavltax();
										if (isNotEmpty(item.getElgpercent())) {
											if (isNotEmpty(item.getCgstamount())) {
												taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getCgstamount());
											}
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										rcgstAmount = rcgstAmount + item.getCgstamount();
									}
									
									if (isNotEmpty(item.getCessavltax())) {
										cessAmount = cessAmount + item.getCessavltax();
										icsgstamountrcm = icsgstamountrcm + item.getCessavltax();
										if (isNotEmpty(item.getElgpercent())) {
											if (isNotEmpty(item.getCessamount())) {
												taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getCessamount());
											}
										}
									}
									if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
										if (isNotEmpty(item.getIsdcessamount())) {
											rcessAmount = rcessAmount + item.getIsdcessamount();
										}
									}else {
										if (isNotEmpty(item.getCessamount())) {
											rcessAmount = rcessAmount + item.getCessamount();
										}
									}
								}
							} else {
								itcinelg = "true";
								if (isNotEmpty(item.getTaxablevalue())) {
									taxableAmount = taxableAmount + item.getTaxablevalue();
								}
								if (isNotEmpty(item.getExmepted())) {
									Double qty = item.getQuantity() == null ? 1 : item.getQuantity();
									exemptedAmount = exemptedAmount + (item.getExmepted()*qty);
								}
								if (isNotEmpty(item.getTotal())) {
									totalAmount = totalAmount + item.getTotal();
								}
								if (isNotEmpty(item.getIgstavltax())) {

									igstAmount = igstAmount + item.getIgstavltax();
									icsgstamountrcm = icsgstamountrcm + item.getIgstavltax();
									if (isNotEmpty(item.getElgpercent())) {
										if (isNotEmpty(item.getIgstamount())) {
											taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getIgstamount());
										}
									}
								}
								if (isNotEmpty(item.getIgstamount())) {
									rigstAmount = rigstAmount + item.getIgstamount();
								}
								if (isNotEmpty(item.getSgstavltax())) {
									sgstAmount = sgstAmount + item.getSgstavltax();
									icsgstamountrcm = icsgstamountrcm + item.getSgstavltax();
									if (isNotEmpty(item.getElgpercent())) {
										if (isNotEmpty(item.getSgstamount())) {
											taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getSgstamount());
										}
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									rsgstAmount = rsgstAmount + item.getSgstamount();
								}
								if (isNotEmpty(item.getCgstavltax())) {
									cgstAmount = cgstAmount + item.getCgstavltax();
									icsgstamountrcm = icsgstamountrcm + item.getCgstavltax();
									if (isNotEmpty(item.getElgpercent())) {
										if (isNotEmpty(item.getCgstamount())) {
											taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getCgstamount());
										}
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									rcgstAmount = rcgstAmount + item.getCgstamount();
								}
								
								if (isNotEmpty(item.getCessavltax())) {
									cessAmount = cessAmount + item.getCessavltax();
									icsgstamountrcm = icsgstamountrcm + item.getCessavltax();
									if (isNotEmpty(item.getElgpercent())) {
										if (isNotEmpty(item.getCessamount())) {
											taxableAmount = taxableAmount + (((100 - item.getElgpercent()) / 100) * item.getCessamount());
										}
									}
								}
								if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
									if (isNotEmpty(item.getIsdcessamount())) {
										rcessAmount = rcessAmount + item.getIsdcessamount();
									}
								}else {
									if (isNotEmpty(item.getCessamount())) {
										rcessAmount = rcessAmount + item.getCessamount();
									}
								}
							}

						}
					}
				}
				String revchargetype = "";
				if (isNotEmpty(invoiceForJournal.getRevchargetype())) {
					revchargetype = invoiceForJournal.getRevchargetype();
				}
				journal.setItcinelg(itcinelg);
				if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.NIL)) {
					double tcsamt,tdsamt = 0d;
					tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
					tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
					journal.setTdsamount(tdsamt);
					journal.setTdstcsAmount(tcsamt);
					journal.setCustomerorSupplierAccount(totalAmount + tcsamt - tdsamt);
					journal.setSalesorPurchases(totalAmount);
				} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES)) {
					double tcsamt,tdsamt = 0d;
					tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
					tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
					journal.setTdsamount(tdsamt);
					journal.setTdstcsAmount(tcsamt);
					journal.setCustomerorSupplierAccount(totalAmount + tcsamt - tdsamt);
					journal.setSalesorPurchases(totalAmount);
					if ("Reverse".equalsIgnoreCase(revchargetype)) {
						journal.setRcmorinterorintra("RCM");
						if (isIntraState) {
							journal.setInterorintra("Intra");
						} else {
							journal.setInterorintra("Inter");
						}
					}else {
						if (isIntraState) {
							journal.setRcmorinterorintra("Intra");
						} else {
							journal.setRcmorinterorintra("Inter");
						}
					}
					journal.setIgstamount(igstAmount);
					journal.setSgstamount(sgstAmount);
					journal.setCgstamount(cgstAmount);
					journal.setCessAmount(cessAmount);
				} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
					double tcsamt,tdsamt = 0d;
					tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
					tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
					journal.setTdsamount(tdsamt);
					journal.setTdstcsAmount(tcsamt);
					journal.setCustomerorSupplierAccount(totalAmount + tcsamt - tdsamt);
					journal.setSalesorPurchases(totalAmount);
					journal.setIgstamount(igstAmount);
					journal.setSgstamount(sgstAmount);
					journal.setCgstamount(cgstAmount);
					journal.setCessAmount(cessAmount);
				} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_SERVICES)) {
					double tcsamt,tdsamt = 0d;
					tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
					tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
					journal.setTdsamount(tdsamt);
					journal.setTdstcsAmount(tcsamt);
					journal.setCustomerorSupplierAccount(taxableAmount + tcsamt - tdsamt);
					journal.setSalesorPurchases(taxableAmount);
					journal.setExemptedamount(exemptedAmount);
					journal.setIcsgstamountrcm(icsgstamountrcm);
					journal.setToicsgstamountrcm(icsgstamountrcm);
					journal.setIgstamount(igstAmount);
					journal.setSgstamount(sgstAmount);
					journal.setCgstamount(cgstAmount);
					journal.setCessAmount(cessAmount);
					if (isIntraState) {
						journal.setInterorintra("Intra");
					} else {
						journal.setInterorintra("Inter");
					}
				} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ITC_REVERSAL)) {
					journal.setCustomerorSupplierAccount(totalAmount);
					journal.setSalesorPurchases(totalAmount);
					journal.setExemptedamount(exemptedAmount);
					journal.setIgstamount(igstAmount);
					journal.setSgstamount(sgstAmount);
					journal.setCgstamount(cgstAmount);
					journal.setCessAmount(cessAmount);
					journal.setCessAmount(cessAmount);
					if (isIntraState) {
						journal.setInterorintra("Intra");
					} else {
						journal.setInterorintra("Inter");
					}
				} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD)) {
					journal.setCustomerorSupplierAccount(totalAmount);
					journal.setSalesorPurchases(totalAmount);
					journal.setExemptedamount(exemptedAmount);
					journal.setIgstamount(igstAmount);
					journal.setSgstamount(sgstAmount);
					journal.setCgstamount(cgstAmount);
					journal.setCessAmount(cessAmount);
					journal.setIsdineligiblecredit(isdineligibleAmount);
					if(isNotEmpty(((PurchaseRegister)invoiceForJournal).getIsd()) && isNotEmpty(((PurchaseRegister)invoiceForJournal).getIsd().get(0))
							&& isNotEmpty(((PurchaseRegister)invoiceForJournal).getIsd().get(0).getDoclist())  && isNotEmpty(((PurchaseRegister)invoiceForJournal).getIsd().get(0).getDoclist().get(0)) 
							 && isNotEmpty(((PurchaseRegister)invoiceForJournal).getIsd().get(0).getDoclist().get(0).getIsdDocty())) {
						String isddoctype = ((PurchaseRegister)invoiceForJournal).getIsd().get(0).getDoclist().get(0).getIsdDocty();
						journal.setInterorintra(isddoctype);
					}
				} else if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
					journal.setSalesorPurchases(taxableAmount);
					journal.setExemptedamount(exemptedAmount);
					journal.setIgstamount(igstAmount);
					journal.setSgstamount(sgstAmount);
					journal.setCgstamount(cgstAmount);
					journal.setCessAmount(cessAmount);
					double tcsamt,tdsamt = 0d;
					tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
					tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
					journal.setTdsamount(tdsamt);
					journal.setTdstcsAmount(tcsamt);
					journal.setCustomerorSupplierAccount(totalAmount + tcsamt - tdsamt);
					if (isIntraState) {
						journal.setRcmorinterorintra("Intra");
					} else {
						journal.setRcmorinterorintra("Inter");
					}
				} else {
					if ("Reverse".equalsIgnoreCase(revchargetype)) {
						if ("no".equalsIgnoreCase(itcType) || "Pending".equalsIgnoreCase(itcType)) {
							double tcsamt,tdsamt = 0d;
							tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
							tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
							journal.setTdsamount(tdsamt);
							journal.setTdstcsAmount(tcsamt);
							journal.setCustomerorSupplierAccount(taxableAmount + tcsamt - tdsamt);
							journal.setSalesorPurchases(totalAmount);
						} else {
							double tcsamt,tdsamt = 0d;
							tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
							tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
							journal.setTdsamount(tdsamt);
							journal.setTdstcsAmount(tcsamt);
							journal.setCustomerorSupplierAccount(totalAmount + tcsamt - tdsamt);
							journal.setSalesorPurchases(taxableAmount);
						}
						journal.setIcsgstamountrcm(icsgstamountrcm);
						journal.setToicsgstamountrcm(icsgstamountrcm);
						journal.setRcmorinterorintra("RCM");
						journal.setRigstamount(rigstAmount);
						journal.setRcgstamount(rcgstAmount);
						journal.setRsgstamount(rsgstAmount);
						journal.setRcessamount(rcessAmount);
						journal.setIgstamount(igstAmount);
						journal.setSgstamount(sgstAmount);
						journal.setCgstamount(cgstAmount);
						journal.setCessAmount(cessAmount);
						journal.setExemptedamount(exemptedAmount);
						if (isIntraState) {
							journal.setInterorintra("Intra");
						} else {
							journal.setInterorintra("Inter");
						}
					} else {
						if (isIntraState) {
							journal.setRcmorinterorintra("Intra");
						} else {
							journal.setRcmorinterorintra("Inter");
						}
						journal.setIgstamount(igstAmount);
						journal.setSgstamount(sgstAmount);
						journal.setCgstamount(cgstAmount);
						journal.setCessAmount(cessAmount);
						journal.setExemptedamount(exemptedAmount);
						double tcsamt,tdsamt = 0d;
						tdsamt = invoiceForJournal.getTdsAmount() == null ? 0d : invoiceForJournal.getTdsAmount();
						tcsamt = invoiceForJournal.getTcstdsAmount() == null ? 0d : invoiceForJournal.getTcstdsAmount();
						journal.setSalesorPurchases(taxableAmount);
						journal.setTdsamount(tdsamt);
						journal.setTdstcsAmount(tcsamt);
						journal.setCustomerorSupplierAccount(totalAmount + tcsamt - tdsamt);
					}
				}
				List<Item> itemlist = Lists.newArrayList();
				for(String key : ledgerkeys) {
					Item itm = ledgerNamemMap.get(key);
					itemlist.add(itm);
				}
				journal.setItems(itemlist);
				
				double totalCredit = 0.0;
				double totalDebit = 0.0;
				
				//totalCredit += journal.getCustomerorSupplierAccount() == null ? 0.0 : journal.getCustomerorSupplierAccount();
				//totalCredit += journal.getTdsamount() == null ? 0.0 : (journal.getTdsamount()*2);
				//totalCredit += journal.getRoundOffAmount() == null ? 0.0 : journal.getRoundOffAmount();
				if(isNotEmpty(journal.getItems())) {
					for(Item item : journal.getItems()) {
						if (invoiceForJournal.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)) {
							totalDebit += item.getAdvadjustedAmount() == null ? 0.0 : item.getAdvadjustedAmount();
						}else {
							totalDebit += item.getTaxablevalue() == null ? 0.0 : item.getTaxablevalue();
						}
						if(isNotEmpty(journal.getItcinelg()) && !"true".equalsIgnoreCase(journal.getItcinelg())) {
							if(isNotEmpty(item.getIgstavltax()) && item.getIgstavltax() > 0d) {
								totalDebit += item.getIgstavltax();
							}else if(isNotEmpty(item.getIgstamount())){
								totalDebit += item.getIgstamount();
							}
							if(isNotEmpty(item.getSgstavltax()) && item.getSgstavltax() > 0d) {
								totalDebit += item.getSgstavltax();
							}else if(isNotEmpty(item.getSgstamount())){
								totalDebit += item.getSgstamount();
							}
							if(isNotEmpty(item.getCgstavltax()) && item.getCgstavltax() > 0d) {
								totalDebit += item.getCgstavltax();
							}else if(isNotEmpty(item.getCgstamount())){
								totalDebit += item.getCgstamount();
							}
							if(isNotEmpty(item.getCessavltax()) && item.getCessavltax() > 0d) {
								totalDebit += item.getCessavltax();
							}else if(isNotEmpty(item.getCessamount())){
								totalDebit += item.getCessamount();
							}
						}
					}
				}
				/*totalDebit += journal.getSalesorPurchases() == null ? 0.0 : journal.getSalesorPurchases();
				totalDebit += journal.getSgstamount() == null ? 0.0 : journal.getSgstamount();
				totalDebit += journal.getCgstamount() == null ? 0.0 : journal.getCgstamount();
				totalDebit += journal.getIgstamount() == null ? 0.0 : journal.getIgstamount();
				totalDebit += journal.getCessAmount() == null ? 0.0 : journal.getCessAmount();
				totalDebit += journal.getTdsamount() == null ? 0.0 : journal.getTdsamount();
				totalDebit += journal.getRoundOffAmount() == null ? 0.0 : journal.getRoundOffAmount();
				totalDebit += journal.getExemptedamount() == null ? 0.0 : journal.getExemptedamount();*/
				totalDebit += journal.getTdstcsAmount() == null ? 0.0 : journal.getTdstcsAmount();
				//totalDebit -= journal.getTdsamount() == null ? 0.0 : journal.getTdsamount();
				journal.setCreditTotal(Math.abs(totalDebit));
				journal.setDebitTotal(Math.abs(totalDebit));
				accountingJournalRepository.save(journal);

			}
				
			
			
			
			
			//AccountingJournal journal = new AccountingJournal();
			
			//journal.setClientId(clientid);
			//journal.setCrJournalEntrie(crinit());
			//journal.setDrJournalEntrie(drinit());
			
			//accountingJournalRepository.save(journal);
			
			Criteria criteria = Criteria.where("clientId").is(clientid);
			criteria.orOperator(
					Criteria.where("crJournalEntrie").elemMatch(Criteria.where("name").is("Sales")),
					Criteria.where("drJournalEntrie").elemMatch(Criteria.where("name").is("Sales")));
			
			Query query = Query.query(criteria);
			
			//List<AccountingJournal> entries = mongoTemplate.find(query, AccountingJournal.class);
			
			//List<AccountingJournal> entries = accountingJournalRepository.findByClientIdAndCrJournalEntrie_nameOrDrJournalEntrie_name(clientid, "Sales");
			//for(AccountingJournal entrie : entries) {
				
				
				
			//}			
		}
	}
	
	public List<JournalEntrie> crinit() {
		
		ToEnterie toEnterie1 = new ToEnterie();
		toEnterie1.setName("Other Debtors");
		toEnterie1.setValue(100105d);
		ToEnterie toEnterie2 = new ToEnterie();
		toEnterie2.setName("IGST Receivable");
		toEnterie2.setValue(500d);
		
		ByEnterie byEnterie1 = new ByEnterie();
		byEnterie1.setName("Sales");
		byEnterie1.setValue(10000d);
		ByEnterie byEnterie2 = new ByEnterie();
		byEnterie2.setName("Output IGST");
		byEnterie2.setValue(500d);
		ByEnterie byEnterie3 = new ByEnterie();
		byEnterie2.setName("TCS Payable");
		byEnterie2.setValue(105d);	
		
		JournalEntrie journalEntrie1 = new JournalEntrie();
		journalEntrie1.setName("Other Debtors");
		journalEntrie1.setValue(100105d);
		JournalEntrie journalEntrie2 = new JournalEntrie();
		journalEntrie2.setName("IGST Receivable");
		journalEntrie2.setValue(500d);
		JournalEntrie journalEntrie3 = new JournalEntrie();
		JournalEntrie journalEntrie4 = new JournalEntrie();
		JournalEntrie journalEntrie5 = new JournalEntrie();
		
		journalEntrie3.setName("Sales");
		journalEntrie3.setValue(10000d);
		
		journalEntrie4.setName("Output IGST");
		journalEntrie4.setValue(500d);
		
		journalEntrie5.setName("TCS Payable");
		journalEntrie5.setValue(105d);
		
		return Arrays.asList(journalEntrie1, journalEntrie2);
	}
	
	public List<JournalEntrie> drinit() {
		
		ToEnterie toEnterie1 = new ToEnterie();
		toEnterie1.setName("Other Debtors");
		toEnterie1.setValue(100105d);
		ToEnterie toEnterie2 = new ToEnterie();
		toEnterie2.setName("IGST Receivable");
		toEnterie2.setValue(500d);
		
		ByEnterie byEnterie1 = new ByEnterie();
		byEnterie1.setName("Sales");
		byEnterie1.setValue(10000d);
		ByEnterie byEnterie2 = new ByEnterie();
		byEnterie2.setName("Output IGST");
		byEnterie2.setValue(500d);
		ByEnterie byEnterie3 = new ByEnterie();
		byEnterie2.setName("TCS Payable");
		byEnterie2.setValue(105d);	
		
		
		
		JournalEntrie journalEntrie1 = new JournalEntrie();
		journalEntrie1.setName("Other Debtors");
		journalEntrie1.setValue(100105d);
		JournalEntrie journalEntrie2 = new JournalEntrie();
		journalEntrie2.setName("IGST Receivable");
		journalEntrie2.setValue(500d);
		JournalEntrie journalEntrie3 = new JournalEntrie();
		JournalEntrie journalEntrie4 = new JournalEntrie();
		JournalEntrie journalEntrie5 = new JournalEntrie();
		
		journalEntrie3.setName("Sales");
		journalEntrie3.setValue(10000d);
		
		journalEntrie4.setName("Output IGST");
		journalEntrie4.setValue(500d);
		
		journalEntrie5.setName("TCS Payable");
		journalEntrie5.setValue(105d);
		
		return Arrays.asList(journalEntrie3, journalEntrie4, journalEntrie5);
	}

	@Override
	public InvoiceParent ewayBillvehicleDetails(String id, String returntype) {
		if (isNotEmpty(returntype)) {
			if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
				return ewayBillRepository.findOne(id);
			}
		}
		return null;
	}

	@Override
	public List<EBillVehicleListDetails> ewayBillVehicleHistory(String clientid, String ewayBillNumber) {

		return ewayBillRepository.findByClientidAndEwayBillNumber(clientid, ewayBillNumber);
	}
	
	@Override
	public Page<? extends InvoiceParent> getReport_PresentMonthfyinvsMannualMatchingIdisNotNull(String clientid, Date d1, Date d2) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);

		return purchaseRepository.findByClientidAndInvtypeInAndMatchingStatusInAndDateofinvoiceBetween(clientid, invTypes, matchingstatus, d1, d2, pageable);
	}
	
	@Override
	public Page<? extends InvoiceParent> getReport_Presentretperiodgstr2MannualMatchingStatus(String clientid, List<String> fp) {
		Pageable pageable = null;
		pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(MasterGSTConstants.B2B);
		invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		invTypes.add(MasterGSTConstants.ISD);
		invTypes.add(MasterGSTConstants.IMP_GOODS);
		List<String> matchingstatus = new ArrayList<String>();
		matchingstatus.add(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED);
		return gstr2Repository.findByClientidAndInvtypeInAndMatchingStatusInAndIsAmendmentAndFpIn(clientid, invTypes, matchingstatus, true, fp, pageable);
	}
	
	@Override
	@Transactional
	public void updateInprogressInvoices(final Client client, final String returnType, String userid, final String usertype, final int month, final int year) {
		logger.debug(CLASSNAME + "syncInvoiceData : Begin");
		logger.debug(CLASSNAME + "syncInvoiceData : returnType {}", returnType);
		logger.debug(CLASSNAME + "syncInvoiceData : month {}", month);
		logger.debug(CLASSNAME + "syncInvoiceData : year {}", year);
		String strMonth = month < 10 ? "0" + month : month + "";
		HeaderKeys headerKeys = null;
		if(isNotEmpty(client) && isNotEmpty(client.getGstname())) {
			headerKeys = headerKeysRepository.findByGstusername(client.getGstname());
		}
		Response gstnResponse = null;
		if(isNotEmpty(headerKeys)) {
			String fp = strMonth+year;
			List<GSTR1> inprogressInvoices  = gstr1Repository.findByClientidAndFpAndGstStatus(client.getId().toString(), fp, "In Progress");
			for(GSTR1 gstr1 : inprogressInvoices) {
				if(isNotEmpty(gstr1.getGstRefId())) {
					gstnResponse = iHubConsumerService.returnStatus(gstr1.getGstRefId(), client.getStatename(), client.getGstname(), client.getGstnnumber(), fp, false);
					if (isNotEmpty(gstnResponse) && isNotEmpty(gstnResponse.getData())
							&& isNotEmpty(gstnResponse.getData().getStatusCd())
							&& gstnResponse.getData().getStatusCd().equals(MasterGSTConstants.GST_RETURN_CODE_PE)
							&& isNotEmpty(gstnResponse.getData().getErrorReport())) {
							InvoiceParentSupport retInvoice = gstnResponse.getData().getErrorReport();
							if (isNotEmpty(retInvoice.getB2b())) {
								for (GSTRB2B gstItem : retInvoice.getB2b()) {
									if (isNotEmpty(gstItem.getErrorMsg())) {
										gstr1.setGstStatus(gstItem.getErrorMsg());
									}
								}
							} else if (isNotEmpty(retInvoice.getB2cl())) {
								for (GSTRB2CL gstItem : retInvoice.getB2cl()) {
									if (isNotEmpty(gstItem.getErrorMsg())) {
										gstr1.setGstStatus(gstItem.getErrorMsg());
									}
								}
							} else if (isNotEmpty(retInvoice.getB2cs())) {
								for (GSTRB2CS gstItem : retInvoice.getB2cs()) {
									if (isNotEmpty(gstItem.getErrorMsg())) {
										gstr1.setGstStatus(gstItem.getErrorMsg());
									}
								}
							} else if (isNotEmpty(retInvoice.getExp())) {
								for (GSTRExports gstItem : retInvoice.getExp()) {
									if (isNotEmpty(gstItem.getErrorMsg())) {
										gstr1.setGstStatus(gstItem.getErrorMsg());
									}
								}
							} else if (isNotEmpty(retInvoice.getCdnur())) {
								for (GSTRInvoiceDetails gstItem : retInvoice.getCdnur()) {
									if (isNotEmpty(gstItem.getErrorMsg())) {
										gstr1.setGstStatus(gstItem.getErrorMsg());
									}
								}
							}else if(isNotEmpty(retInvoice.getCdnr())) {
								for (GSTRCreditDebitNotes gstItem : retInvoice.getCdnr()) {
									if (isNotEmpty(gstItem.getErrorMsg())) {
										gstr1.setGstStatus(gstItem.getErrorMsg());
									}
								}
							}
					} else if (isNotEmpty(gstnResponse) && isNotEmpty(gstnResponse.getData())
							&& isNotEmpty(gstnResponse.getData().getStatusCd())
							&& gstnResponse.getData().getStatusCd().equals(MasterGSTConstants.GST_RETURN_CODE_P)) {
						gstr1.setGovtInvoiceStatus(MasterGSTConstants.SUCCESS);
						gstr1.setGstStatus(MasterGSTConstants.GST_STATUS_SUCCESS);
						gstr1.setGstRefId(gstr1.getGstRefId());
							
					} else if (isNotEmpty(gstnResponse)) {
						String message = "";
						if (isNotEmpty(gstnResponse.getData()) && isNotEmpty(gstnResponse.getData().getErrorReport())
								&& isNotEmpty(gstnResponse.getData().getErrorReport().getErrorMsg())) {
							message = gstnResponse.getData().getErrorReport().getErrorMsg();
						} else if (isNotEmpty(gstnResponse.getError())
								&& isNotEmpty(gstnResponse.getError().getMessage())) {
							message = gstnResponse.getError().getMessage();
						} else if (isNotEmpty(gstnResponse.getStatusdesc())) {
							message = gstnResponse.getStatusdesc();
							if (isNotEmpty(gstnResponse.getData().getStatusCd()) && gstnResponse.getData().getStatusCd()
									.equals(MasterGSTConstants.GST_RETURN_CODE_IP)) {
								message = "In Progress";
							}
							if(message.equalsIgnoreCase("GSTR request succeeds")) {
								message = "In Progress";
							}
						}
						gstr1.setGstStatus(message);
						if(message.equalsIgnoreCase("In Progress")) {
							gstr1.setGstRefId(gstr1.getGstRefId());
						}
							
					}	
					}
				gstr1Repository.save(gstr1);
				}
			}
			logger.debug(CLASSNAME + "syncInvoiceData : End");
		}
	@Override
	public Reminders saveReminders(Reminders reminders) {
			return remindersRepository.save(reminders);
		}
	@Override
	public SupplierComments saveSupplierComments(SupplierComments Supcomments) {
		
		return supplierCommentsRepository.save(Supcomments);
	}
		
	public List<InvoiceTypeSummery> getInvoiceSummeryByTypeForMonth(final String clientId, final String returnType, final int month, final int year){
		String yearCd = month<4? (year-1)+"-"+year : (year)+"-"+(year+1); 
		List<InvoiceTypeSummery> invoicesSummery = Collections.EMPTY_LIST;
		if(MasterGSTConstants.GSTR1.equals(returnType)){
			invoicesSummery =  gstr1Dao.getInvoiceSummeryByTypeForMonth(clientId, month, yearCd);
			invoicesSummery.forEach(summery -> {
				InvType.Sales saleInvType = InvType.getSalesInvType(summery.get_id());
				if(saleInvType == null){
					summery.setValue(summery.get_id());
					summery.setOrder(10000);
				}else {
					summery.setValue(saleInvType.getValue());
					summery.setOrder(saleInvType.getOrder());
				}
			});
		}else if(MasterGSTConstants.PURCHASE_REGISTER.equals(returnType)){
			invoicesSummery =  purchageRegisterDao.getInvoiceSummeryByTypeForMonth(clientId, month, yearCd);
			invoicesSummery.forEach(summery -> {
				InvType.Purchages purchagesInvType = InvType.getPurchagesInvType(summery.get_id());
				if(purchagesInvType == null){
					summery.setValue(summery.get_id());
					summery.setOrder(10000);
				}else{
					summery.setValue(purchagesInvType.getValue());
					summery.setOrder(purchagesInvType.getOrder());
				}
			});
		}else if(MasterGSTConstants.ANX1.equals(returnType)) {
			invoicesSummery =  newAnx1Dao.getInvoiceSummeryByTypeForMonth(clientId, month, yearCd);
			invoicesSummery.forEach(summery -> {
				InvType.ANX1 purchagesInvType = InvType.getAnx1InvType(summery.get_id());
				if(purchagesInvType == null){
					summery.setValue(summery.get_id());
					summery.setOrder(10000);
				}else{
					summery.setValue(purchagesInvType.getValue());
					summery.setOrder(purchagesInvType.getOrder());
				}
			});
		}else if(MasterGSTConstants.GSTR6.equals(returnType)){
			invoicesSummery =  gstr6Dao.getInvoiceSummeryByTypeForMonth(clientId, month, yearCd);
			invoicesSummery.forEach(summery -> {
				InvType.Sales saleInvType = InvType.getSalesInvType(summery.get_id());
				if(saleInvType == null){
					summery.setValue(summery.get_id());
					summery.setOrder(10000);
				}else {
					summery.setValue(saleInvType.getValue());
					summery.setOrder(saleInvType.getOrder());
				}
			});
		}
		return invoicesSummery;
	}
	
	public Map<String, Integer>  getMismatchCount(List<String> clientIds, int month, int year){
        Map<String, Integer> statusMap = Maps.newHashMap();
        //List<Client> lClient = findClients(clientIds);
        if (isNotEmpty(clientIds)) {
            List<MismatchInvCount> purchageMisMatch = purchageRegisterDao.getNoOfMismatches(clientIds, month, year);
            List<MismatchInvCount> gstr2MisMatch = gstr2Dao.getNoOfMismatches(clientIds, month, year);
            if(isNotEmpty(purchageMisMatch)){
                purchageMisMatch.forEach(misMatchCt ->{
                    statusMap.put(misMatchCt.get_id(), misMatchCt.getMismatchCount());
                });
            }
            if(isNotEmpty(gstr2MisMatch)){
                gstr2MisMatch.forEach(misMatchCt ->{
                    String clientId = misMatchCt.get_id();
                    int count = misMatchCt.getMismatchCount();
                    Integer ct = null;
                    if((ct = statusMap.get(clientId)) == null){
                        statusMap.put(clientId, count);
                    }else{
                        statusMap.put(clientId, ct+count);
                    }
                });
            }
            clientIds.forEach(clId -> {
                if(statusMap.get(clId) == null){
                    statusMap.put(clId, 0);    
                }
            });
        }
        return statusMap;
    }
	
	public Map<String, Integer>  getTotalInvoicesByGststatus(final String clientId, final String returnType, final int month, final int year){
		Map<String, Integer> statusMap = Maps.newHashMap();
		if(MasterGSTConstants.GSTR1.equals(returnType)){
			statusMap = gstr1Dao.getTotalInvoicesByGststatus(clientId,month,year);
		}else if(MasterGSTConstants.PURCHASE_REGISTER.equals(returnType)){
			statusMap = purchageRegisterDao.getTotalInvoicesByGststatus(clientId,month,year);
		}else if(MasterGSTConstants.GSTR6.equals(returnType)){
			statusMap = gstr6Dao.getTotalInvoicesByGststatus(clientId,month,year);
		}else if(MasterGSTConstants.GSTR4.equals(returnType)){
			statusMap = gstr4Dao.getTotalInvoicesByGststatus(clientId,month,year);
		}
		return statusMap;
	}
	
	
	public List<GSTReturnSummary> getGSTReturnsSummary(final Client client, int month, int year, boolean updateValues){
		List<GSTReturnSummary> returnsSummuryList = client.getReturnsSummary();
		if (isEmpty(returnsSummuryList)) {
			List<String> returntypes = configService.getDealerACL(client.getDealertype());
			returntypes = returntypes.stream().filter(String -> String.startsWith("GSTR")).collect(Collectors.toList());
			logger.debug(CLASSNAME + " getGSTReturnsSummary:: returntypes\t" + returntypes.toString());
			Calendar cal = Calendar.getInstance();
			Date date = null;
			if (month >= 0 && year >= 0) {
				cal.set(year, month - 1, 1);
				date = new java.util.Date(cal.getTimeInMillis());
			}
			returnsSummuryList = getGSTReturnsSummary(returntypes, date);
		}
		if (updateValues) {
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				String returnType = summaryItem.getReturntype();
				if (returnType.equals(MasterGSTConstants.GSTR2)) {
					returnType = MasterGSTConstants.PURCHASE_REGISTER;
				}
				/*Page<? extends InvoiceParent> invoices = getInvoices(null, client, returnType, month, year);
				Double fieldValue = 0d;
				Double salesAmt = 0d, purchaseAmt = 0d;
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoice : invoices) {
						if (returnType.equals(MasterGSTConstants.GSTR2)
								|| returnType.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
							if (isNotEmpty(invoice.getTotalitc())) {
								fieldValue += invoice.getTotalitc();
							}
							if (isNotEmpty(invoice.getTotalamount())) {
								purchaseAmt += invoice.getTotalamount();
							}
						} else {
							if (isNotEmpty(invoice.getTotaltax())) {
								fieldValue += invoice.getTotaltax();
							}
							if (returnType.equals(GSTR1) && isNotEmpty(invoice.getTotalamount())) {
								salesAmt += invoice.getTotalamount();
							}
						}
					}
					if (isEmpty(summaryItem.getFieldValue())) {
						summaryItem.setFieldValue(fieldValue);
					} else {
						summaryItem.setFieldValue(summaryItem.getFieldValue() + fieldValue);
					}
				}*/
				InvoiceDao invoiceDao = invoiceDaoFactory.getInvoiceDao(returnType);
				if(invoiceDao != null){
					Map result = invoiceDao.getClientTaxAndTotalAmountForMonth(client.getId().toString(), month, year);
					if(result != null){
						Double totalAmt = (Double)result.get("totalAmount");
						Double totalTaxAmt = (Double)result.get("totalTaxAmount");
						if (isEmpty(summaryItem.getFieldValue())) {
							summaryItem.setFieldValue(totalTaxAmt);
						} else {
							summaryItem.setFieldValue(summaryItem.getFieldValue() + totalTaxAmt);
						}
					}
				}
			}
		}
		return returnsSummuryList;
	}
	
	public InvoiceParent extrafields(InvoiceParent invoice,String returntype) {
		int mnths = -1,yrs=-1;
		if("Advances".equals(invoice.getInvtype()) || "Nil Supplies".equals(invoice.getInvtype()) || "Advance Adjusted Detail".equals(invoice.getInvtype())){
			String fp = invoice.getFp();
			int sumFactor = 1;
			if(fp != null){
				try {
					mnths = Integer.parseInt(fp.substring(0,2));
					mnths--;
					yrs = Integer.parseInt(fp.substring(2));
				} catch (NumberFormatException e) {
					
				}
			}
			int quarter = mnths/3;
			quarter = quarter == 0 ? 4 : quarter;
			String yearCode = quarter == 4 ? (yrs-1)+"-"+yrs : (yrs)+"-"+(yrs+1);
			mnths++;
			
			invoice.setMthCd(""+mnths);
			invoice.setYrCd(""+yearCode);
			invoice.setQrtCd(""+quarter);
			if(returntype.equals("GSTR1")) {
				if("Advance Adjusted Detail".equals(invoice.getInvtype())){
					invoice.setSftr(-1);
				}else {
					invoice.setSftr(sumFactor);
				}
			}else {
				invoice.setSftr(sumFactor);
			}
			
		}else {
			
		String invType = invoice.getInvtype();
		boolean isDebitCreditNotes = "Credit/Debit Notes".equals(invType);
		boolean isCDNA = "CDNA".equals(invType);
		boolean isCDNUR = "Credit/Debit Note for Unregistered Taxpayers".equals(invType);
		boolean isCreditNote = "Credit Note".equals(invType);
		boolean isDebitNote = "Debit Note".equals(invType);
		boolean isCreditNoteUr = "Credit Note(UR)".equals(invType);
		boolean isDebitNoteUr = "Debit Note(UR)".equals(invType);
		boolean isCdnNtNttyExists = invoice.getCdn() != null && invoice.getCdn().size() > 0 && invoice.getCdn().get(0).getNt() != null && invoice.getCdn().get(0).getNt().size() > 0;
		String cdnNtNtty = null;
		if(isCdnNtNttyExists){
			cdnNtNtty = invoice.getCdn().get(0).getNt().get(0).getNtty();
		}
		

		boolean isCdnurNttyExists = invoice.getCdnur() != null && invoice.getCdnur().size() > 0;
		String cdnurNtty = null;
		if(isCdnurNttyExists){
			cdnurNtty = invoice.getCdnur().get(0).getNtty();
		}
		int sumFactor = 1;
		
		
		if(!"CANCELLED".equals(invoice.getGstStatus())){
			if(returntype.equals("GSTR1")) {
				boolean isCdnrNtNttyExists = ((GSTR1)invoice).getCdnr() != null && ((GSTR1)invoice).getCdnr().size() > 0 && ((GSTR1)invoice).getCdnr().get(0).getNt() != null && ((GSTR1)invoice).getCdnr().get(0).getNt().size() > 0;
				String cdnrNtNtty = null;
				if(isCdnrNtNttyExists){
				cdnrNtNtty = ((GSTR1)invoice).getCdnr().get(0).getNt().get(0).getNtty();
				}
				if((isDebitCreditNotes || isCDNA )){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
						sumFactor = -1;
						}
					}else if(isCdnrNtNttyExists){
						if("C".equals(cdnrNtNtty)){
						sumFactor = -1;
						}
					}
				}else if(isCDNUR && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
					sumFactor = -1;
					}
				}
		
				if(isCreditNote || isDebitNote || isCDNA){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
						sumFactor = -1;
						}
					}else if(isCdnrNtNttyExists){
						if("C".equals(cdnrNtNtty)){
						sumFactor = -1;
						}
					}
				}else if((isCreditNoteUr || isDebitNoteUr || isCDNUR) && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
					sumFactor = -1;
					}
				}
			}else {
				if((isDebitCreditNotes || isCDNA )){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
							sumFactor = -1;
						}
					}/*else if(isCdnrNtNttyExists){
		if("C".equals(cdnrNtNtty)){
		sumFactor = -1;
		}
		}*/
				}else if(isCDNUR && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
						sumFactor = -1;
					}
				}
				
				if(isCreditNote || isDebitNote || isCDNA){
					if(isCdnNtNttyExists){
						if(!"D".equals(cdnNtNtty)){
							sumFactor = -1;
						}
					}/*else if(isCdnrNtNttyExists){
		if("C".equals(cdnrNtNtty)){
		sumFactor = -1;
		}
		}*/
				}else if((isCreditNoteUr || isDebitNoteUr || isCDNUR) && isCdnurNttyExists){
					if("C".equals(cdnurNtty)){
						sumFactor = -1;
					}
				}
			}
		}else{
			sumFactor = 0;
		}
		invoice.setSftr(sumFactor);
		Date dt = null;
		if (returntype.equals(MasterGSTConstants.EWAYBILL)) {
			dt = (Date)invoice.geteBillDate();
		}else {
			dt = (Date)invoice.getDateofinvoice();
		}
		if(returntype.equals(MasterGSTConstants.GSTR2)) {
			String fp = invoice.getFp();
			if(fp != null){
				try {
					mnths = Integer.parseInt(fp.substring(0,2));
					mnths--;
					yrs = Integer.parseInt(fp.substring(2));
				} catch (NumberFormatException e) {
					
				}
			}
			int quarter = mnths/3;
			quarter = quarter == 0 ? 4 : quarter;
			String yearCode = quarter == 4 ? (yrs-1)+"-"+yrs : (yrs)+"-"+(yrs+1);
			mnths++;
			
			invoice.setMthCd(""+mnths);
			invoice.setYrCd(""+yearCode);
			invoice.setQrtCd(""+quarter);
		}else {
			if(isNotEmpty(dt)) {
				int month = dt.getMonth();
				int year = dt.getYear()+1900;
				int quarter = month/3;
				quarter = quarter == 0 ? 4 : quarter;
				String yearCode = quarter == 4 ? (year-1)+"-"+year : (year)+"-"+(year+1);
				month++;
				
				invoice.setMthCd(""+month);
				invoice.setYrCd(""+yearCode);
				invoice.setQrtCd(""+quarter);
			}
		}
		}
		
		
		Date ewayBillDate = null;
		Double totalTaxableAmt = invoice.getTotaltaxableamount();
		Double totalTax = invoice.getTotaltax();
		Double totalAmt = invoice.getTotalamount();
		Date dateOfInvoice = invoice.getDateofinvoice();
		if(isNotEmpty(invoice.geteBillDate())) {
			ewayBillDate = invoice.geteBillDate();
		}
		String totalTaxableAmtStr = String.format(DOUBLE_FORMAT,totalTaxableAmt);
		String totalTaxStr = String.format(DOUBLE_FORMAT,totalTax);
		String totalAmtStr = String.format(DOUBLE_FORMAT,totalAmt);
		String dateOfInvoiceStr = "";
		if(isNotEmpty(dateOfInvoice)) {
			dateOfInvoiceStr = dateFormatOnlyDate.format(dateOfInvoice);
		}
		String ewayBillDateStr = "";
		if(isNotEmpty(ewayBillDate)) {
			ewayBillDateStr = dateFormatOnlyDate.format(ewayBillDate);
		}
		invoice.setTotaltaxableamount_str(totalTaxableAmtStr);
		invoice.setTotaltax_str(totalTaxStr);
		invoice.setTotalamount_str(totalAmtStr);
		if(isNotEmpty(dateOfInvoiceStr)) {
			invoice.setDateofinvoice_str(dateOfInvoiceStr);
		}
		if(isNotEmpty(ewayBillDateStr)) {
			invoice.setEwayBillDate_str(ewayBillDateStr);
		}
		Double totalIGST = 0d;
		Double totalCGST = 0d;
		Double totalSGST = 0d;
		Double totalExempted = 0d;
		Double totalCess = 0d;
		for (Item item : invoice.getItems()) {
			if (isNotEmpty(item.getIgstamount())) {
				totalIGST += item.getIgstamount();
			}
			if (isNotEmpty(item.getCgstamount())) {
				totalCGST += item.getCgstamount();
			}
			if (isNotEmpty(item.getSgstamount())) {
				totalSGST += item.getSgstamount();
			}
			if (isNotEmpty(item.getExmepted())) {
				totalExempted += item.getExmepted();
			}
			if (isNotEmpty(item.getCessamount())) {
				totalCess += item.getCessamount();
			}
		}
		invoice.setTotalIgstAmount(totalIGST);
		invoice.setTotalCgstAmount(totalCGST);
		invoice.setTotalSgstAmount(totalSGST);
		invoice.setTotalExemptedAmount(totalExempted);
		invoice.setTotalCessAmount(totalCess);
		invoice.setCsftr(1);
		return invoice;
	}
	
	@Override
	public String fetchAcknowledgementClientId(String userid) {
		logger.debug(CLASSNAME + "fetchClientIds : " + BEGIN);
		String clientid=null;
		List<String> userIdList = Lists.newArrayList();
		userIdList.add(userid);
			
		List<ClientUserMapping> clientPUserMappings = clientUserMappingRepository.findByUseridIn(userIdList);
		if (isNotEmpty(clientPUserMappings)) {
			for (ClientUserMapping clientUserMapping : clientPUserMappings) {
				if (isNotEmpty(clientRepository.findByIdAndConfigurefirmNull(clientUserMapping.getClientid()))) {
					clientid = clientUserMapping.getClientid();
				}
			}
		}
		return clientid;
	}

	@Override
	public  Map<String, Map<String, String>> getConsolidatedSummeryForYearReports(final Client client, String returntype, String yearCd, boolean checkQuarterly, String reportType, InvoiceFilter invoiceFilter){
		
		List<TotalInvoiceAmount> gstrInvoiceAmounts = null;
		if(GSTR1.equalsIgnoreCase(returntype) && "Multimonth-Reports".equalsIgnoreCase(reportType)) {
			//Multimonth GSTR1 Report
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.B2BA ,MasterGSTConstants.CDNA,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.B2CL ,MasterGSTConstants.B2CLA,MasterGSTConstants.CDNUR ,MasterGSTConstants.CDNURA ,MasterGSTConstants.B2C ,MasterGSTConstants.B2CSA,
					MasterGSTConstants.EXPORTS ,MasterGSTConstants.EXPA ,MasterGSTConstants.ADVANCES,MasterGSTConstants.NIL,MasterGSTConstants.ATPAID,MasterGSTConstants.ATA,MasterGSTConstants.TXPA);				
			gstrInvoiceAmounts = gstr1Dao.getConsolidatedMultimonthSummeryForYearMonthwise(client, invTypes, yearCd,invoiceFilter);			
		}else if(GSTR2A.equalsIgnoreCase(returntype) && "Multimonth-Reports".equalsIgnoreCase(reportType)) {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			gstrInvoiceAmounts = gstr2Dao.getConsolidatedMultimonthSummeryForYearMonthwise(client, invTypes, yearCd,invoiceFilter);
		}else if(GSTR1.equalsIgnoreCase(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reportType)) {
			gstrInvoiceAmounts = gstr1Dao.getConsolidatedSummeryForYearMonthwise(client, yearCd, checkQuarterly,"gstrOrEinvoice",invoiceFilter);			
		}else if(PURCHASE_REGISTER.equals(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reportType)){
			gstrInvoiceAmounts = purchageRegisterDao.getConsolidatedReportsSummeryForYear(client, yearCd, checkQuarterly,invoiceFilter);
		}else if(MasterGSTConstants.EWAYBILL.equals(returntype)) {
			gstrInvoiceAmounts = ewayBillDao.getConsolidatedSummeryForYearMonthwise(client, yearCd, checkQuarterly,invoiceFilter);
		}else if(MasterGSTConstants.EINVOICE.equals(returntype)) {
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.EXPORTS);
			gstrInvoiceAmounts =  gstr1Dao.getConsolidatedSummeryForYearMonthwiseEinvoice(client,invTypes, yearCd, checkQuarterly,"gstrOrEinvoice",invoiceFilter);
		}else if(GSTR2B.equalsIgnoreCase(returntype) && "Multimonth-Reports".equalsIgnoreCase(reportType)) {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			gstrInvoiceAmounts = gstr2bDao.getConsolidatedMultimonthSummeryForYearMonthwise(client, invTypes, Integer.parseInt(yearCd.split("-")[0]), invoiceFilter);
		}
		
		Map<String, TotalInvoiceAmount> summerySlsData = new HashMap<String, TotalInvoiceAmount>();
		for(TotalInvoiceAmount gstr1InvoiceAmount : gstrInvoiceAmounts){
			String code = gstr1InvoiceAmount.get_id();
			summerySlsData.put(code, gstr1InvoiceAmount);
		}
		List<TotalInvoiceAmount> invs = new ArrayList<>();
		Map<String, Map<String, String>> summeryReturnData = new HashMap<String, Map<String, String>>();		
		int ct = 12;
		if(checkQuarterly){
			ct = 4;
		}
		for(int i=1; i<=ct; i++){
			String cd = Integer.toString(i);
			int totalTransactions = 0;
			Double totalAmount = 0d, itcAmount =0d;
			Double salesAmt = 0d, taxAmt = 0d, salesTax = 0d, igst = 0d, cgst = 0d, sgst = 0d , cess = 0d, exempted = 0d,tcs = 0d,ptcs = 0d,tds = 0d;
			TotalInvoiceAmount invoiceAmountSls = summerySlsData.get(cd);
			Map<String, String> reportMap = new HashMap<String, String>();
			summeryReturnData.put(cd, reportMap);
			if(invoiceAmountSls != null){
				totalTransactions = invoiceAmountSls.getTotalTransactions();
				salesAmt = invoiceAmountSls.getTotalTaxableAmount().doubleValue();
				taxAmt = invoiceAmountSls.getTotalTaxAmount().doubleValue();
				salesTax = invoiceAmountSls.getTotalTaxAmount().doubleValue();
				igst = invoiceAmountSls.getTotalIGSTAmount().doubleValue();
				cgst = invoiceAmountSls.getTotalCGSTAmount().doubleValue();
				sgst = invoiceAmountSls.getTotalSGSTAmount().doubleValue();
				
				if(GSTR1.equalsIgnoreCase(returntype)) {
					exempted = invoiceAmountSls.getTotalExemptedAmount().doubleValue();					
					tcs = invoiceAmountSls.getTcsTdsAmount().doubleValue();
				}else {
					itcAmount= invoiceAmountSls.getTotalITCAvailable().doubleValue();
					ptcs = invoiceAmountSls.getTcsTdsAmount().doubleValue();
					tds = invoiceAmountSls.getTdsAmount().doubleValue();
				}
				
				cess=invoiceAmountSls.getTotalCESSAmount().doubleValue();
				//totalAmount = salesAmt + igst+ cgst + sgst;
				totalAmount = invoiceAmountSls.getTotalAmount().doubleValue();
			}
			reportMap.put("Sales", decimalFormat.format(salesAmt));
			reportMap.put("Tax", decimalFormat.format(taxAmt));
			reportMap.put("SalesTax", decimalFormat.format(salesTax));
			reportMap.put("igst", decimalFormat.format(igst));
			reportMap.put("cgst", decimalFormat.format(cgst));
			reportMap.put("sgst", decimalFormat.format(sgst));
			reportMap.put("cess", decimalFormat.format(cess));
			reportMap.put("exempted", decimalFormat.format(exempted));
			reportMap.put("tcsamount", decimalFormat.format(tcs));
			reportMap.put("ptcsamount", decimalFormat.format(ptcs));
			reportMap.put("tdsamount", decimalFormat.format(tds));
			reportMap.put("totalTransactions", String.valueOf(totalTransactions));
			reportMap.put("totalamt", decimalFormat.format(totalAmount));
			reportMap.put("itc", decimalFormat.format(itcAmount));
		}
		return summeryReturnData;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Map<String, Object> getCustomInvoices(Pageable pageable,Client client,String id,String retType,String type,String fromtime,String totime,int start,int length,String searchVal, InvoiceFilter filter, boolean flag,String booksOrReturns) {
		logger.debug(CLASSNAME + "getCustomInvoices : Begin");
		
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		Map<String, Object> invoicesMap = new HashMap<String, Object>();
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Page<? extends InvoiceParent> invoices = null;
		TotalInvoiceAmount totalInvoiceAmount = null;
		if (isNotEmpty(retType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1, Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			
			if("GSTR1".equalsIgnoreCase(retType)) {
				invoices = gstr1Dao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, start, length, searchVal, filter);
				totalInvoiceAmount =gstr1Dao.getTotalInvoicesAmountsForCustom(client.getId().toString(), stDate, endDate, searchVal, filter);				
			}else if(MasterGSTConstants.EWAYBILL.equalsIgnoreCase(retType)) {
				invoices = ewayBillDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, start, length, searchVal, filter);
				totalInvoiceAmount =ewayBillDao.getTotalInvoicesAmountsForCustom(client.getId().toString(), stDate, endDate, searchVal, filter);				
			} else {
				invoices = purchageRegisterDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, start, length, searchVal, filter);
				totalInvoiceAmount =purchageRegisterDao.getTotalInvoicesAmountsForCustom(client.getId().toString(), stDate, endDate, searchVal, filter);				
			}
		}
		
		invoicesMap.put("invoices",invoices);
		invoicesMap.put("invoicesAmount",totalInvoiceAmount);
		return invoicesMap;
	}
	
	@Override
	@Transactional(readOnly=true)
	public Map<String, Object> getCustomInvoices(Pageable pageable,Client client,String id,String retType,String type,String fromtime,String totime,int start,int length,String searchVal,String fieldName, String order, InvoiceFilter filter, boolean flag,String booksOrReturns) {
		logger.debug(CLASSNAME + "getCustomInvoices : Begin");
		
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		Map<String, Object> invoicesMap = new HashMap<String, Object>();
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Page<? extends InvoiceParent> invoices = null;
		TotalInvoiceAmount totalInvoiceAmount = null;
		if (isNotEmpty(retType)) {
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1, Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
			
			if("GSTR1".equalsIgnoreCase(retType)) {
				invoices = gstr1SortDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount =gstr1Dao.getTotalInvoicesAmountsForCustom(client.getId().toString(), stDate, endDate, searchVal, filter);				
			}else if(MasterGSTConstants.EWAYBILL.equalsIgnoreCase(retType)) {
				invoices = ewayBillDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount =ewayBillDao.getTotalInvoicesAmountsForCustom(client.getId().toString(), stDate, endDate, searchVal, filter);				
			} else {
				invoices = purchageRegisterSortDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount =purchageRegisterDao.getTotalInvoicesAmountsForCustom(client.getId().toString(), stDate, endDate, searchVal, filter);				
			}
		}
		
		invoicesMap.put("invoices",invoices);
		invoicesMap.put("invoicesAmount",totalInvoiceAmount);
		return invoicesMap;
	}
	
	@Override
	public Map<String, Map<String, String>> getConsolidatedSummeryForCustomReports(Client client, String returntype, String fromtime, String totime,InvoiceFilter filter) {
		logger.debug(CLASSNAME + "getConsolidatedSummeryForCustomReports : Begin");
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,
				Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,
					59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		
		List<TotalInvoiceAmount> gstrInvoiceAmounts = null;
		if(GSTR1.equalsIgnoreCase(returntype)) {
			gstrInvoiceAmounts = gstr1Dao.getConsolidatedSummeryForCustom(client, returntype, stDate, endDate,filter,"gstrOrEinvoice");
		}else if(MasterGSTConstants.EWAYBILL.equalsIgnoreCase(returntype)) {
			gstrInvoiceAmounts = ewayBillDao.getConsolidatedSummeryForCustom(client, returntype, stDate, endDate,filter);
		}else if(MasterGSTConstants.EINVOICE.equalsIgnoreCase(returntype)) {
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.EXPORTS);
			gstrInvoiceAmounts = gstr1Dao.getConsolidatedSummeryForCustomEinvoice(client,invTypes, returntype, stDate, endDate,filter,"gstrOrEinvoice");
		}else {
			gstrInvoiceAmounts = purchageRegisterDao.getConsolidatedSummeryForCustom(client, returntype, stDate, endDate,filter);
		}
		Map<String, TotalInvoiceAmount> summerySlsData = new HashMap<String, TotalInvoiceAmount>();
		for(TotalInvoiceAmount gstr1InvoiceAmount : gstrInvoiceAmounts){
			String code = gstr1InvoiceAmount.get_id();
			summerySlsData.put(code, gstr1InvoiceAmount);
		}
		List<TotalInvoiceAmount> invs = new ArrayList<>();
		Map<String, Map<String, String>> summeryReturnData = new HashMap<String, Map<String, String>>();		
		
		
		for(int i=1; i<=12; i++){
			String cd = Integer.toString(i);
			int totalTransactions = 0;
			Double totalAmount = 0d, itcAmount =0d;
			Double salesAmt = 0d, taxAmt = 0d, salesTax = 0d, igst = 0d, cgst = 0d, sgst = 0d , cess = 0d, exempted = 0d,tcs = 0d,ptcs = 0d,tds = 0d;
			TotalInvoiceAmount invoiceAmountSls = summerySlsData.get(cd);
			Map<String, String> reportMap = new HashMap<String, String>();
			summeryReturnData.put(cd, reportMap);
			if(invoiceAmountSls != null){
				totalTransactions = invoiceAmountSls.getTotalTransactions();
				salesAmt = invoiceAmountSls.getTotalTaxableAmount().doubleValue();
				taxAmt = invoiceAmountSls.getTotalTaxAmount().doubleValue();
				salesTax = invoiceAmountSls.getTotalTaxAmount().doubleValue();
				igst = invoiceAmountSls.getTotalIGSTAmount().doubleValue();
				cgst = invoiceAmountSls.getTotalCGSTAmount().doubleValue();
				sgst = invoiceAmountSls.getTotalSGSTAmount().doubleValue();
				
				if(GSTR1.equalsIgnoreCase(returntype)) {
					exempted = invoiceAmountSls.getTotalExemptedAmount().doubleValue();					
					tcs = invoiceAmountSls.getTcsTdsAmount().doubleValue();
				}else {
					itcAmount= invoiceAmountSls.getTotalITCAvailable().doubleValue();
					ptcs = invoiceAmountSls.getTcsTdsAmount().doubleValue();
					tds = invoiceAmountSls.getTdsAmount().doubleValue();
				}
				
				cess=invoiceAmountSls.getTotalCESSAmount().doubleValue();
				//totalAmount = salesAmt + igst+ cgst + sgst;
				totalAmount = invoiceAmountSls.getTotalAmount().doubleValue();
			}
			
			reportMap.put("Sales", decimalFormat.format(salesAmt));
			reportMap.put("Tax", decimalFormat.format(taxAmt));
			reportMap.put("SalesTax", decimalFormat.format(salesTax));
			reportMap.put("igst", decimalFormat.format(igst));
			reportMap.put("cgst", decimalFormat.format(cgst));
			reportMap.put("sgst", decimalFormat.format(sgst));
			reportMap.put("cess", decimalFormat.format(cess));
			reportMap.put("exempted", decimalFormat.format(exempted));
			reportMap.put("tcsamount", decimalFormat.format(tcs));
			reportMap.put("ptcsamount", decimalFormat.format(ptcs));
			reportMap.put("tdsamount", decimalFormat.format(tds));
			reportMap.put("totalTransactions", String.valueOf(totalTransactions));
			reportMap.put("totalamt", decimalFormat.format(totalAmount));
			reportMap.put("itc", decimalFormat.format(itcAmount));
		}
		return summeryReturnData;
	}
	
	@Override
	public Map<String, Object> getCustomInvoicesSupport(final Client client, final String returnType, final String reports, String fromtime, String totime){
		logger.debug(CLASSNAME + "getCustomInvoicesSupport : Begin");
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,
				Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,
					59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		Map<String,List<String>> cf = Maps.newHashMap();
		Map<String,String> cfnames = Maps.newHashMap();
		Map<String, Object> supportObj = new HashMap<>();
		if (isNotEmpty(returnType)) {
			List<String> billToNames = null;List<String> customFields = null;
			if (returnType.equals(GSTR1)) {
				billToNames = gstr1Dao.getCustomBillToNames(client.getId().toString(), stDate, endDate);
				
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldsReports(client.getId().toString(),returnType,stDate, endDate);
				
				//customFields = getCustomFields(client.getId().toString(),returnType);
			} else if (returnType.equals(GSTR2)) {
				//return gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				//billToNames = gstr2Dao.getBillToNames(client.getId().toString(), invTypes, retPeriod);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				billToNames = purchageRegisterDao.getCustomBillToNames(client.getId().toString(), stDate, endDate);
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldsReports(client.getId().toString(),returnType,stDate, endDate);
				//customFields = getCustomFields(client.getId().toString(),returnType);
			} else if (returnType.equals(MasterGSTConstants.EWAYBILL)) {
				billToNames = ewayBillDao.getCustomBillToNames(client.getId().toString(), stDate, endDate);
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldsReports(client.getId().toString(),returnType,stDate, endDate);
				//customFields = getCustomFields(client.getId().toString(), returnType);
			} else if (returnType.equals(MasterGSTConstants.EINVOICE)) {
				billToNames = gstr1Dao.getCustomBillToNames(client.getId().toString(), stDate, endDate);
				cfnames = getCustomFieldNames(client.getId().toString(),returnType);
				cf = getCustomFieldsReports(client.getId().toString(),returnType,stDate, endDate);
				//customFields = getCustomFields(client.getId().toString(), returnType);
			}
			
			Iterator cfs = cf.entrySet().iterator();
			while (cfs.hasNext()) {
				Map.Entry entry = (Map.Entry) cfs.next();
				supportObj.put(entry.getKey().toString(), entry.getValue());
			}
			Iterator cfsname = cfnames.entrySet().iterator();
			while (cfsname.hasNext()) {
				Map.Entry entry = (Map.Entry) cfsname.next();
				supportObj.put(entry.getKey().toString(), entry.getValue());
			}
			
			supportObj.put("billToNames", billToNames);
			//supportObj.put("customFields", customFields);
		}
		return supportObj;	
	}
	
	@Override
	@Transactional
	public GSTR3B populateGSTR3BOffsetLiabilityDetails(Client client, int month, int year, String id) {
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		
		GSTR3B gstr3b = gstr3BRepository.findByClientidAndRetPeriod(client.getId().toString(), retPeriod);
		if(isNotEmpty(gstr3b)) {
			
			Double outwardIgst = 0d;
			Double outwardCgst = 0d;
			Double outwardSgst = 0d;
			Double outwardCess = 0d;
			
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet().getIamt())) {
				outwardIgst = Double.parseDouble(df2.format(gstr3b.getSupDetails().getOsupDet().getIamt()));
			}
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet().getCamt())) {
				outwardCgst = Double.parseDouble(df2.format(gstr3b.getSupDetails().getOsupDet().getCamt()));
			}
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet().getSamt())) {
				outwardSgst = Double.parseDouble(df2.format(gstr3b.getSupDetails().getOsupDet().getSamt()));
			}
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet()) && isNotEmpty(gstr3b.getSupDetails().getOsupDet().getCsamt())) {
				outwardCess = Double.parseDouble(df2.format(gstr3b.getSupDetails().getOsupDet().getCsamt()));
			}
			
			
			if(isEmpty(gstr3b.getOffLiab())) {
				gstr3b.setOffLiab(new GSTR3BOffsetLiability());
			}
			gstr3b.getOffLiab().setPditc(new GSTR3BOffsetLiabilityCredit());
			
			GSTR3BOffsetLiabilityCash gstr3BOffsetLiabilityCash = new GSTR3BOffsetLiabilityCash();
			
			GSTR3BOffsetLiabilityCash reversegstr3BOffsetLiabilityCash = new GSTR3BOffsetLiabilityCash();
			
			List<GSTR3BOffsetLiabilityCash> list3BOffsetLiabilityCash = Lists.newArrayList();
			list3BOffsetLiabilityCash.add(gstr3BOffsetLiabilityCash);
			list3BOffsetLiabilityCash.add(reversegstr3BOffsetLiabilityCash);
			gstr3b.getOffLiab().setPdcash(list3BOffsetLiabilityCash);
			
			
			GSTR3BTaxPayment gstr3BTaxPayment = new GSTR3BTaxPayment();
			
			GSTR3BTaxPaymentDetails gstr3BTaxPaymentDetails = new GSTR3BTaxPaymentDetails();
			gstr3BTaxPaymentDetails.setTx(outwardIgst);
			
			gstr3BTaxPayment.setIgst(gstr3BTaxPaymentDetails);
		
			GSTR3BTaxPaymentDetails gstr3BTaxPaymentDetailsSgst = new GSTR3BTaxPaymentDetails();
			gstr3BTaxPaymentDetailsSgst.setTx(outwardSgst);
			gstr3BTaxPayment.setSgst(gstr3BTaxPaymentDetailsSgst);
		
			GSTR3BTaxPaymentDetails gstr3BTaxPaymentDetailsCgst = new GSTR3BTaxPaymentDetails();
			gstr3BTaxPaymentDetailsCgst.setTx(outwardCgst);
			gstr3BTaxPayment.setCgst(gstr3BTaxPaymentDetailsCgst);
			
			GSTR3BTaxPaymentDetails gstr3BTaxPaymentDetailsCess = new GSTR3BTaxPaymentDetails();
			gstr3BTaxPaymentDetailsCess.setTx(outwardCess);
			gstr3BTaxPayment.setCess(gstr3BTaxPaymentDetailsCess);
			
			List<GSTR3BTaxPayment> listGstr3BTaxPayment = Lists.newArrayList();
			listGstr3BTaxPayment.add(gstr3BTaxPayment);
			
			Double reverseIgstAmount = 0d;
			Double reverseCgstAmount = 0d;
			Double reverseSgstAmount = 0d;
			Double reverseCessAmount = 0d;

			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
				reverseIgstAmount = Double.parseDouble(df2.format(gstr3b.getSupDetails().getIsupRev().getIamt()));
			}
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
				reverseCgstAmount = Double.parseDouble(df2.format(gstr3b.getSupDetails().getIsupRev().getCamt()));
			}
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
				reverseSgstAmount = Double.parseDouble(df2.format(gstr3b.getSupDetails().getIsupRev().getSamt()));
			}
			if(isNotEmpty(gstr3b.getSupDetails()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev()) && isNotEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
				reverseCessAmount = Double.parseDouble(df2.format(gstr3b.getSupDetails().getIsupRev().getCsamt()));
			}

			
			GSTR3BTaxPayment reversegstr3BTaxPayment = new GSTR3BTaxPayment();
			
			GSTR3BTaxPaymentDetails reversegstr3BTaxPaymentDetails = new GSTR3BTaxPaymentDetails();
			reversegstr3BTaxPaymentDetails.setTx(reverseIgstAmount);
			
			reversegstr3BTaxPayment.setIgst(reversegstr3BTaxPaymentDetails);
		
			GSTR3BTaxPaymentDetails reversegstr3BTaxPaymentDetailsSgst = new GSTR3BTaxPaymentDetails();
			reversegstr3BTaxPaymentDetailsSgst.setTx(reverseCgstAmount);
			reversegstr3BTaxPayment.setSgst(reversegstr3BTaxPaymentDetailsSgst);
		
			GSTR3BTaxPaymentDetails reversegstr3BTaxPaymentDetailsCgst = new GSTR3BTaxPaymentDetails();
			reversegstr3BTaxPaymentDetailsCgst.setTx(reverseSgstAmount);
			reversegstr3BTaxPayment.setCgst(reversegstr3BTaxPaymentDetailsCgst);
			
			GSTR3BTaxPaymentDetails reversegstr3BTaxPaymentDetailsCess = new GSTR3BTaxPaymentDetails();
			reversegstr3BTaxPaymentDetailsCess.setTx(reverseCessAmount);
			reversegstr3BTaxPayment.setCess(reversegstr3BTaxPaymentDetailsCess);
			
			listGstr3BTaxPayment.add(reversegstr3BTaxPayment);
			
			gstr3b.getOffLiab().setTaxPayable(listGstr3BTaxPayment);
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
			Date date = new Date();  
			String fromdate = dateFormat.format(date);
			
			Double crIgstAmount = 0d;
			Double crCgstAmount = 0d;
			Double crSgstAmount = 0d;
			Double crCessAmount = 0d;
			
			if(isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcNet())) {
				if(isNotEmpty(gstr3b.getItcElg().getItcNet().getIamt())) {
					crIgstAmount = crIgstAmount + gstr3b.getItcElg().getItcNet().getIamt();
				}
				if(isNotEmpty(gstr3b.getItcElg().getItcNet().getCamt())) {
					crCgstAmount = crCgstAmount + gstr3b.getItcElg().getItcNet().getCamt();
				}
				if(isNotEmpty(gstr3b.getItcElg().getItcNet().getSamt())) {
					crSgstAmount = crSgstAmount + gstr3b.getItcElg().getItcNet().getSamt();
				}
				if(isNotEmpty(gstr3b.getItcElg().getItcNet().getCsamt())) {
					crCessAmount = crCessAmount + gstr3b.getItcElg().getItcNet().getCsamt();
				}
			}
			Double acrIgstAmount = 0d;
			Double acrCgstAmount = 0d;
			Double acrSgstAmount = 0d;
			Double acrCessAmount = 0d;
			LedgerResponse creditledger = iHubConsumerService.getLedgerITCDetails(client, client.getGstnnumber(), fromdate, fromdate, id, true);
			if(isNotEmpty(creditledger)) {
				if(isNotEmpty(creditledger.getData())) {
					if(isNotEmpty(creditledger.getData().getItcLdgDtls())) {
						if(isNotEmpty(creditledger.getData().getItcLdgDtls().getCloseBal())) {
							crIgstAmount = crIgstAmount + creditledger.getData().getItcLdgDtls().getCloseBal().getIgstTaxBal();
							crCgstAmount = crCgstAmount + creditledger.getData().getItcLdgDtls().getCloseBal().getCgstTaxBal();
							crSgstAmount = crSgstAmount + creditledger.getData().getItcLdgDtls().getCloseBal().getSgstTaxBal();
							crCessAmount = crCessAmount + creditledger.getData().getItcLdgDtls().getCloseBal().getCessTaxBal();
							
						}
					}
				}
			}
			if(outwardIgst > 0d) {
				if(crIgstAmount > 0d) {
					if(crIgstAmount >= outwardIgst) {
						acrIgstAmount = outwardIgst;
						crIgstAmount = crIgstAmount - acrIgstAmount;
					}else {
						acrIgstAmount = crIgstAmount;
						crIgstAmount = crIgstAmount - acrIgstAmount;
					}
				}
				if(crCgstAmount > 0d && crSgstAmount > 0d) {
					if((outwardIgst - acrIgstAmount) > 0d) {
						if(crCgstAmount >= (outwardIgst - acrIgstAmount)) {
							acrCgstAmount = (outwardIgst - acrIgstAmount)/2;
							crCgstAmount = crCgstAmount - acrCgstAmount;
						}else {
							acrCgstAmount = crCgstAmount/2;
							crCgstAmount = crCgstAmount - acrCgstAmount;
						}
						
						if(crSgstAmount >= (outwardIgst - acrIgstAmount)) {
							acrSgstAmount = (outwardIgst - acrIgstAmount)/2;
							crSgstAmount = crSgstAmount - acrSgstAmount;
						}else {
							acrSgstAmount = crSgstAmount/2;
							crSgstAmount = crSgstAmount - acrSgstAmount;
						}
					}
				}else if(crCgstAmount > 0d) {
					if((outwardIgst - acrIgstAmount) > 0d) {
						if(crCgstAmount >= (outwardIgst - acrIgstAmount)) {
							acrCgstAmount = outwardIgst - acrIgstAmount;
							crCgstAmount = crCgstAmount - acrCgstAmount;
						}else {
							acrCgstAmount = crCgstAmount;
							crCgstAmount = crCgstAmount - acrCgstAmount;
						}
					}
				}
				
				if(crSgstAmount > 0d) {
					if((outwardIgst - acrIgstAmount - acrCgstAmount - acrSgstAmount) > 0d) {
						if(crSgstAmount >= (outwardIgst - acrIgstAmount - acrCgstAmount - acrSgstAmount)) {
							acrSgstAmount = outwardIgst - acrIgstAmount - acrCgstAmount - acrSgstAmount;
							crSgstAmount = crSgstAmount - acrSgstAmount; 
						}else {
							acrSgstAmount = crSgstAmount;
							crSgstAmount = crSgstAmount - acrSgstAmount;
						}
					}
				}
			}
			gstr3b.getOffLiab().getPditc().setIgstPdigst(Double.parseDouble(df2.format(acrIgstAmount)));
			gstr3b.getOffLiab().getPditc().setIgstPdcgst(Double.parseDouble(df2.format(acrCgstAmount)));
			gstr3b.getOffLiab().getPditc().setIgstPdsgst(Double.parseDouble(df2.format(acrSgstAmount)));
			
			
			Double igstcash = 0d;
			
			igstcash = igstcash + (outwardIgst - (Double.parseDouble(df2.format(acrIgstAmount))+Double.parseDouble(df2.format(acrCgstAmount))+Double.parseDouble(df2.format(acrSgstAmount))));
			gstr3b.getOffLiab().getPdcash().get(0).setIpd(Double.parseDouble(df2.format(igstcash)));
			
			Double bcrIgstAmount = 0d;
			Double bcrCgstAmount = 0d;
			
			if(outwardCgst  > 0d) {
				if(crIgstAmount > 0d) {
					if(crIgstAmount >= outwardCgst) {
						bcrIgstAmount = outwardCgst;
						crIgstAmount = crIgstAmount - bcrIgstAmount; 
					}else {
						bcrIgstAmount = crIgstAmount;
						crIgstAmount = crIgstAmount - bcrIgstAmount;
					}
				}
				
				if(crCgstAmount > 0d) {
					if((outwardCgst - bcrIgstAmount) > 0d) {
						if(crCgstAmount >= (outwardCgst - bcrIgstAmount)) {
							bcrCgstAmount = outwardCgst - bcrIgstAmount;
							crCgstAmount = crCgstAmount - bcrCgstAmount;
						}else {
							bcrCgstAmount = crCgstAmount;
							crCgstAmount = crCgstAmount - bcrCgstAmount;
						}
					}
				}
			}
			
			gstr3b.getOffLiab().getPditc().setCgstPdigst(Double.parseDouble(df2.format(bcrIgstAmount)));
			gstr3b.getOffLiab().getPditc().setCgstPdcgst(Double.parseDouble(df2.format(bcrCgstAmount)));
			
			Double cgstcash = 0d;
			
			cgstcash = cgstcash + ((outwardCgst - (bcrIgstAmount+bcrCgstAmount)));
			
			gstr3b.getOffLiab().getPdcash().get(0).setCpd(Double.parseDouble(df2.format(cgstcash)));
			
			Double ccrIgstAmount = 0d;
			Double ccrSgstAmount = 0d;
			
			if(outwardSgst  > 0d) {
				if(crIgstAmount > 0d) {
					if(crIgstAmount >= outwardSgst) {
						ccrIgstAmount = outwardSgst;
						crIgstAmount = crIgstAmount - ccrIgstAmount; 
					}else {
						ccrIgstAmount = crIgstAmount;
						crIgstAmount = crIgstAmount - ccrIgstAmount;
					}
				}
				
				if(crSgstAmount > 0d) {
					if((outwardSgst - ccrIgstAmount) > 0d) {
						if(crSgstAmount >= (outwardSgst - ccrIgstAmount)) {
							ccrSgstAmount = outwardCgst - ccrIgstAmount;
							crSgstAmount = crSgstAmount - ccrSgstAmount;
						}else {
							ccrSgstAmount = crSgstAmount;
							crSgstAmount = crSgstAmount - ccrSgstAmount;
						}
					}
				}
			}
			
			gstr3b.getOffLiab().getPditc().setSgstPdigst(Double.parseDouble(df2.format(ccrIgstAmount)));
			gstr3b.getOffLiab().getPditc().setSgstPdsgst(Double.parseDouble(df2.format(ccrSgstAmount)));
			
			Double sgstcash = 0d;
			
			sgstcash = sgstcash + ((outwardSgst - (ccrIgstAmount+ccrSgstAmount)));
			
			gstr3b.getOffLiab().getPdcash().get(0).setSpd(Double.parseDouble(df2.format(sgstcash)));
			
			if(outwardCess > 0d) {
				if(crCessAmount > 0d) {
					if(crCessAmount >= outwardCess) {
						acrCessAmount = outwardCess;
						crCessAmount = crCessAmount - acrCessAmount;
					}else {
						acrCessAmount = crCessAmount;
						crCessAmount = crCessAmount - acrCessAmount;
					}
				}
			}
			
			gstr3b.getOffLiab().getPditc().setCessPdcess(Double.parseDouble(df2.format(acrCessAmount)));
			
			Double cesscash = 0d;
			
			cesscash = cesscash + ((outwardCess - acrCessAmount));
			
			gstr3b.getOffLiab().getPdcash().get(0).setCspd(Double.parseDouble(df2.format(cesscash)));
			
			gstr3b.getOffLiab().getPdcash().get(1).setIpd(reverseIgstAmount);
			gstr3b.getOffLiab().getPdcash().get(1).setCpd(reverseCgstAmount);
			gstr3b.getOffLiab().getPdcash().get(1).setSpd(reverseSgstAmount);
			gstr3b.getOffLiab().getPdcash().get(1).setCspd(reverseCessAmount);
		
		
			
			
			
			
			gstr3BRepository.save(gstr3b);
			
			
		}
		
		
		
		return gstr3b;
	}
	
	@Override
	public Map<String, Map<String, Map<String, List<String>>>> getAllSupplierStatusBasedOnClientid(String clientid, int year, List<String> rtArray) {

	Map<String,Map<String,Map<String,List<String>>>> supplier_reportMap=new HashMap<String,Map<String,Map<String,List<String>>>>();

	List<CompanySuppliers> cmpySupplierLst=companySuppliersRepository.findByClientid(clientid);

	SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
	if(isNotEmpty(cmpySupplierLst)) {
		for(CompanySuppliers cmpysuppliers:cmpySupplierLst){
			if(isNotEmpty(cmpysuppliers.getGstnnumber())) {
				Map<String,Map<String,List<String>>> reportMap=new HashMap<String,Map<String,List<String>>>();
				Map<String,List<String>> rtMap_GSTR1=new HashMap<String,List<String>>();
				List<SupplierStatus> gstr1_supplier = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR1, rtArray);
				if(isNotEmpty(gstr1_supplier)) {
					for(SupplierStatus supplier:gstr1_supplier) {
						List<String> list1 = Lists.newArrayList();
						list1.add(supplier.getStatus());
						list1.add(supplier.getMof());
						list1.add(sdf.format(supplier.getDof()));
						if (isNotEmpty(supplier.getArn())) {
							list1.add(supplier.getArn());
						}
						rtMap_GSTR1.put("GSTR1" + supplier.getReturnperiod() + supplier.getSupplierid(), list1);
						if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
							for (String rt : rtArray) {
								if (!rt.equals(supplier.getReturnperiod())) {
									if (!rtMap_GSTR1.containsKey("GSTR1"+rt+supplier.getSupplierid())) {
										list1 = Lists.newArrayList();
										list1.add(MasterGSTConstants.PENDING);
										rtMap_GSTR1.put("GSTR1" + rt + supplier.getSupplierid(), list1);
									}
								}
							}
						}
					}
					reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
				}else {
					for (String rt : rtArray) {
						List<String> list1 = Lists.newArrayList();
						list1.add(MasterGSTConstants.PENDING);
	//rtMap_GSTR1.put("GSTR1" + rt + cmpysuppliers.getId().toString(), MasterGSTConstants.PENDING);
						rtMap_GSTR1.put("GSTR1" + rt + cmpysuppliers.getId().toString(), list1);
					}
					reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
				}

				List<SupplierStatus> gstr3b_supplier = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR3B, rtArray);
				Map<String,List<String>> rtMap_GSTR3B=new HashMap<String,List<String>>();
				if(isNotEmpty(gstr3b_supplier)) {
					for(SupplierStatus supplier:gstr3b_supplier) {
						List<String> list1 = Lists.newArrayList();
						list1.add(supplier.getStatus());
						list1.add(supplier.getMof());
						list1.add(sdf.format(supplier.getDof()));
						if (isNotEmpty(supplier.getArn())) {
							list1.add(supplier.getArn());
						}
						rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(), list1);
	//rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(), supplier.getStatus());
						if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
							for (String rt : rtArray) {
								if (!rt.equals(supplier.getReturnperiod())) {
									if (!rtMap_GSTR3B.containsKey("GSTR3"+rt+supplier.getSupplierid())) {
										list1 = Lists.newArrayList();
										list1.add(MasterGSTConstants.PENDING);
										rtMap_GSTR3B.put("GSTR3" + rt + supplier.getSupplierid(), list1);
									}
								}
							}
						}
					}
					reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
				}else {
					for (String rt : rtArray) {
						List<String> list1 = Lists.newArrayList();
						list1.add(MasterGSTConstants.PENDING);
						rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(),list1);
	//rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(), MasterGSTConstants.PENDING);
					}
					reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
				}
				supplier_reportMap.put(cmpysuppliers.getName()+"-"+cmpysuppliers.getGstnnumber(),reportMap);
			}
		}
	}
	//System.out.println(supplier_reportMap);
	return supplier_reportMap;
	}
	
	@Override
	public void getDownloadGSTRXStatus(final Client client, final String userId, final String gstr, final int month, final int year) {
		String strMonth =  month<10 ? "0"+month : month+"";
		String retPeriod = strMonth + year;
		
		if(gstr.equals(GSTR1)) {
			List<GSTR1DownloadStatus> gstr1DownloadStatus = gstr1DowloadService.getGSTR1DownloadStatus(userId, client.getId().toString(), retPeriod);
			if(isNotEmpty(gstr1DownloadStatus)) {
				gstr1DowloadService.deleteGSTR1DownloadStatus(gstr1DownloadStatus);
			}
			GSTR1DownloadStatus dwnldstatus = new GSTR1DownloadStatus();
			dwnldstatus.setUserid(userId);
			dwnldstatus.setClientid(client.getId().toString());
			dwnldstatus.setReturnperiod(retPeriod);
			dwnldstatus.setStatus("DOWNLOAD");
			dwnldstatus.setFinancialyear(year + "");
			dwnldstatus.setCurrrentmonth(strMonth);
			dwnldstatus.setInvoicedata("invoices not available");
			gstr1DowloadService.savedownloadstatus(dwnldstatus);			
		}else {
		
			List<GSTR2ADownloadStatus> gstr2ADownloadStatuss = gstr2ADowloadService.getGSTR2ADownloadStatus(userId, client.getId().toString(),retPeriod);
			if(isNotEmpty(gstr2ADownloadStatuss)) {
				gstr2ADowloadService.deleteGSTR2ADownloadStatus(gstr2ADownloadStatuss);
			}
			GSTR2ADownloadStatus gstr2ADownloadStatus = new GSTR2ADownloadStatus();
			gstr2ADownloadStatus.setClientid(client.getId().toString());
			gstr2ADownloadStatus.setUserid(userId);
			gstr2ADownloadStatus.setStatus("DOWNLOAD");
			gstr2ADownloadStatus.setReturnperiod(retPeriod);
			gstr2ADownloadStatus.setFinancialyear(year + "");
			gstr2ADownloadStatus.setCurrrentmonth(strMonth);
			gstr2ADownloadStatus.setInvoicedata("invoices not available");
			gstr2ADowloadService.savedownloadstatus(gstr2ADownloadStatus);	
		}
	}
	@Override
	public Page<? extends InvoiceParent> getDaoInvoices(Client client, String returntype, int month, int year, String reporttype,InvoiceFilter filter) {
		logger.debug(CLASSNAME + "getDaoInvoices : Begin");
		
		String yearCode = Utility.getYearCode(month, year);
				
		if(GSTR1.equalsIgnoreCase(returntype) && "Multimonth-Reports".equalsIgnoreCase(reporttype)) {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.B2BA ,MasterGSTConstants.CDNA,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.B2CL ,MasterGSTConstants.B2CLA,MasterGSTConstants.CDNUR ,MasterGSTConstants.CDNURA ,MasterGSTConstants.B2C ,MasterGSTConstants.B2CSA,
					MasterGSTConstants.EXPORTS ,MasterGSTConstants.EXPA ,MasterGSTConstants.ADVANCES, MasterGSTConstants.ATA, MasterGSTConstants.NIL, MasterGSTConstants.ADVANCES, MasterGSTConstants.TXPA);				
			return gstr1Dao.getMultimonthInvoices(client.getId().toString(), invTypes, yearCode, 0, 0, null, filter);
		}else if(GSTR2A.equalsIgnoreCase(returntype) && "Multimonth-Reports".equalsIgnoreCase(reporttype)) {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			return gstr2Dao.getMultimonthInvoices(client.getId().toString(), invTypes, yearCode,  0, 0, null, filter);
		}else if(GSTR2A.equalsIgnoreCase(returntype) && !"Multimonth-Reports".equalsIgnoreCase(reporttype)) {
			String strMonth =  month<10 ? "0"+month : month+"";
			String retPeriod = strMonth+year;
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
					MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			return gstr2ADao.findByClientidAndMonthAndYear(client.getId().toString(),invTypes,retPeriod,0,0,null,filter);
			//return gstr2Dao.getMultimonthInvoices(client.getId().toString(), invTypes, yearCode,  0, 0, null, filter);
		}else if(GSTR1.equalsIgnoreCase(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reporttype)) {
			return gstr1Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, 0, 0, null, filter);
		}else if(PURCHASE_REGISTER.equals(returntype)  && "bRreports".equalsIgnoreCase(reporttype)){
			return purchageRegisterDao.findByClientidAndBillDateMonthAndYear(client.getId().toString(), month, yearCode, 0, 0, null, filter);
		}else if(PURCHASE_REGISTER.equals(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reporttype)){
			return purchageRegisterDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, 0, 0, null, filter);
		}else if("Unclaimed".equalsIgnoreCase(returntype)  && "bRreports".equalsIgnoreCase(reporttype)){
			return purchageRegisterDao.findByClientidAndMonthAndYearForUnclimedTransactiondate(client.getId().toString(), month, yearCode, 0, 0, null, filter);
		}else if("Unclaimed".equalsIgnoreCase(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reporttype)){
			return purchageRegisterDao.findByClientidAndMonthAndYearForUnclimed(client.getId().toString(), month, yearCode, 0, 0, null, filter);
		}else if(MasterGSTConstants.EWAYBILL.equalsIgnoreCase(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reporttype)) {
			return ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, 0, 0, null, filter);
		}else if(MasterGSTConstants.EINVOICE.equalsIgnoreCase(returntype)  && !"Multimonth-Reports".equalsIgnoreCase(reporttype)) {
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.EXPORTS);
			return gstr1Dao.findByClientidAndInvtypeInAndMonthAndYear(client.getId().toString(),invTypes, month, yearCode, 0, 0, null, filter);
		}
		
		return null;
	}
	
	@Override
	public Page<? extends InvoiceParent> getDaoInvoices(Client client, String returntype, String fromtime, String totime, InvoiceFilter filter) {
		logger.debug(CLASSNAME + "getDaoInvoices : Begin");
			
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,
				Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,
					59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
	
		if(returntype.equals(MasterGSTConstants.GSTR1)) {
			return gstr1Dao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, 0, 0, null, filter);
		}else if(returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
			return purchageRegisterDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, 0, 0, null, filter);
		}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
			return ewayBillDao.findByClientidAndFromtimeAndTotime(client.getId().toString(), stDate, endDate, 0, 0, null, filter);
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			List<String> invTypes = new ArrayList<String>();
			invTypes.add(MasterGSTConstants.B2B);
			invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			invTypes.add(MasterGSTConstants.CDNUR);
			invTypes.add(MasterGSTConstants.EXPORTS);
			return gstr1Dao.findByClientidAndFromtimeAndTotimeEinvoice(client.getId().toString(), invTypes,stDate, endDate, 0, 0, null, filter);
		}
		
		return null;
	}
	
	@Override
	public Page<? extends InvoiceParent> getGlobalReportDaoInvoices(List<String> clientids, String returntype, int month, int year,String booksorReturns,InvoiceFilter filter) {
		logger.debug(CLASSNAME + "getGlobalReportDaoInvoices : Begin");
		String yearCode = Utility.getYearCode(month, year);
		if(GSTR1.equalsIgnoreCase(returntype)) {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.B2BA ,MasterGSTConstants.CDNA,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.B2CL ,MasterGSTConstants.B2CLA,MasterGSTConstants.CDNUR ,MasterGSTConstants.CDNURA ,MasterGSTConstants.B2C ,MasterGSTConstants.B2CSA,
					MasterGSTConstants.EXPORTS ,MasterGSTConstants.EXPA ,MasterGSTConstants.ADVANCES,MasterGSTConstants.NIL,MasterGSTConstants.ATPAID);				
			return gstr1Dao.findByClientidInAndMonthAndYear(clientids, invTypes, month ,yearCode, 0, 0, null, booksorReturns,filter);
		}else if(returntype.contentEquals(MasterGSTConstants.GSTR2) || returntype.contentEquals(MasterGSTConstants.PURCHASE_REGISTER)) {
			return purchageRegisterDao.findByClientidInAndMonthAndYear(clientids, month, yearCode, 0, 0, null, filter);
		}else if(GSTR2A.equalsIgnoreCase(returntype)) {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			return gstr2Dao.findByClientidInAndMonthAndYear(clientids, invTypes, month,yearCode,  0, 0, null,booksorReturns, filter);
		}else if(returntype.equalsIgnoreCase(MasterGSTConstants.EINVOICE)){
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.CDNUR,MasterGSTConstants.EXPORTS );				
			return gstr1Dao.findByClientidInAndMonthAndYear(clientids, invTypes, month ,yearCode, 0, 0, null, booksorReturns,filter);
		}
		return null;
	}
	@Override
	public Page<? extends InvoiceParent> getGlobalReportDaoInvoices(List<String> clientids, String returntype, String fromtime, String totime,String booksorReturns, InvoiceFilter filter) {
		logger.debug(CLASSNAME + "getGlobalReportDaoInvoices : Begin");
			
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,
				Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,
					59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
	
		if(returntype.equals(MasterGSTConstants.GSTR1)) {
			return gstr1Dao.findByClientidInAndFromtimeAndTotime(clientids, stDate, endDate, 0, 0, null, filter,booksorReturns);
		}else if(returntype.equals(MasterGSTConstants.GSTR2)) {
			return purchageRegisterDao.findByClientidInAndFromtimeAndTotime(clientids, stDate, endDate, 0, 0, null, filter);
		}else if(returntype.equalsIgnoreCase(MasterGSTConstants.EINVOICE)){				
			return gstr1Dao.findByClientidInAndFromtimeAndTotime(clientids, stDate, endDate, 0, 0, null, filter,booksorReturns);
		}else {
			List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
					MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
			return gstr2Dao.findByClientidInAndMonthAndYear(clientids, invTypes, stDate, endDate, 0, 0, null, booksorReturns,filter);
		}
	}
	public InvoiceFilter invoiceFilter(HttpServletRequest request) {
		InvoiceFilter filter = new InvoiceFilter();
		filter.setInvoiceType(request.getParameter("invoiceType"));
		String user = request.getParameter("user");
		if(isNotEmpty(user)) {
			if(user.contains("-mgst-")) {
				user = user.replaceAll("-mgst-", "&");
			}
		}
		filter.setUser(user);
		String vendor = request.getParameter("vendor");
		if(isNotEmpty(vendor)) {
			if(vendor.contains("-mgst-")) {
				vendor = vendor.replaceAll("-mgst-", "&");
			}
		}
		filter.setVendor(vendor);
		filter.setBranch(request.getParameter("branch"));
		filter.setVertical(request.getParameter("vertical"));
		filter.setIrnStatus(request.getParameter("irnStatus"));
		filter.setReverseCharge(request.getParameter("reverseCharge"));
				
		filter.setBooksOrReturns(request.getParameter("booksOrReturns"));
		filter.setPaymentStatus(request.getParameter("paymentStatus"));
		filter.setReverseCharge(request.getParameter("reverseCharge"));
		filter.setSupplyType(request.getParameter("supplyType"));
		filter.setDocumentType(request.getParameter("documentType"));
		filter.setReconStatus(request.getParameter("reconStatus"));
		filter.setGstr2aFilingStatus(request.getParameter("gstr2aFilingStatus"));	
		filter.setSubSupplyType(request.getParameter("subSupplyType"));
		filter.setStatus(request.getParameter("status"));
		filter.setFromtime(request.getParameter("fromtime"));
		filter.setTotime(request.getParameter("totime"));
		String customfield1 = request.getParameter("customFieldText1");
		if(isNotEmpty(customfield1)) {
			if(customfield1.contains("-mgst-")) {
				customfield1 = customfield1.replaceAll("-mgst-", "&");
			}
		}
		filter.setCustomFieldText1(customfield1);
		String customfield2 = request.getParameter("customFieldText2");
		if(isNotEmpty(customfield2)) {
			if(customfield2.contains("-mgst-")) {
				customfield2 = customfield2.replaceAll("-mgst-", "&");
			}
		}
		filter.setCustomFieldText2(customfield2);
		String customfield3 = request.getParameter("customFieldText3");
		if(isNotEmpty(customfield3)) {
			if(customfield3.contains("-mgst-")) {
				customfield3 = customfield3.replaceAll("-mgst-", "&");
			}
		}
		filter.setCustomFieldText3(customfield3);
		String customfield4 = request.getParameter("customFieldText4");
		if(isNotEmpty(customfield4)) {
			if(customfield4.contains("-mgst-")) {
				customfield4 = customfield4.replaceAll("-mgst-", "&");
			}
		}
		filter.setCustomFieldText4(customfield4);
		return filter;	
	}
	
	public Map getInvoices(Pageable pageable, final Client client, final String userid, final String returnType,final String reports, int month,
			int year, int start, int length, String searchVal,String fieldName, String order, InvoiceFilter filter, boolean isTotalRequired, String booksOrReturns){
		logger.debug(CLASSNAME + "getInvoices : Begin");
		Map<String, Object> invoicesMap = new HashMap<String, Object>();
		if(pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Page<? extends InvoiceParent> invoices = null;
		TotalInvoiceAmount totalInvoiceAmount = null;
		if (isNotEmpty(returnType)) {
			if(isNotEmpty(client.getInvoiceViewOption()) && client.getInvoiceViewOption().equalsIgnoreCase("Yearly")) {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr;
					if(month == 1 || month == 2 || month == 3) {
						yr = (year-1)+"-"+(year);
					}else {
						yr = year+"-"+(year+1);
					}
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
			}else {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr;
					if(month == 1 || month == 2 || month == 3) {
						yr = (year-1)+"-"+(year);
					}else {
						yr = year+"-"+(year+1);
					}
					//String yr=year+"-"+(year+1);
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
			}
			Date[] dates = caliculateStEndDates(client, returnType, reports, month, year);
			Date stDate = dates[0];
			Date endDate = dates[1];
			String yearCode = Utility.getYearCode(month, year);
			if (returnType.equals(GSTR1)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				ClientStatus clientStatus = getClientStatus(client.getId().toString(), returnType, retPeriod);
				String filingstatus = "";
				if (isNotEmpty(clientStatus)) {
					filingstatus = clientStatus.getStatus();
				}
				Page<GSTR1> gstr1 = null;
				Boolean prevPendinginv = false;
				if(isEmpty(client.getPrevPendingInv())) {
					prevPendinginv = false;
				}else if("previousMonthsPendingInv".equalsIgnoreCase(client.getPrevPendingInv())){
					prevPendinginv = true;
				}else {
					prevPendinginv = false;
				}
				if(filingstatus.equalsIgnoreCase(MasterGSTConstants.STATUS_FILED) || filingstatus.equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED)) {
					prevPendinginv = false;
				}
				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
				Boolean fpidate = false;
				if(isNotEmpty(otherconfig)){
					fpidate = otherconfig.isEnableinvoiceview();
				}
				if("reports".equals(reports)) {
					gstr1 = gstr1SortDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
					totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter,"");
				}else {
					if(isEmpty(otherconfig) || !fpidate) {
						if(prevPendinginv && isEmpty(booksOrReturns)) {
							boolean contains = false;
							InvoiceFilter filter1 = new InvoiceFilter();
							if(isNotEmpty(filter) && isNotEmpty(filter.getPaymentStatus()) && filter.getPaymentStatus().length>0) {
								contains = Arrays.asList(filter.getPaymentStatus()).contains("Pending");
								 try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
									}
								if(!contains) {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="All";
									filter.setPaymentStatus(tempArray);
								}else {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="Pending";
									filter.setPaymentStatus(tempArray);
								}
							}else {
								 try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
								 }
								
								 String[] tempArray = new String[ 1 ];
								 tempArray[0] ="Pending";
								filter.setPaymentStatus(tempArray);
							}
							gstr1 = gstr1SortDao.findByClientidAndMonthAndYearPrevMonthPendingInvoices(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter,filter1);
							totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonthPreviousMonthPendingInvoices(client.getId().toString(), month, yearCode, searchVal, filter,filter1);
						}else {
							if(isNotEmpty(client) && isNotEmpty(client.getFilingOption()) && "Quarterly".equalsIgnoreCase(client.getFilingOption())) {
								gstr1 = gstr1SortDao.findByClientidAndMonthAndYearQuarterly(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
								totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonthQuarterly(client.getId().toString(), month, yearCode, searchVal, filter,"");
							}else {
								gstr1 = gstr1SortDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
								totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter,"");
							}
						}
					} else {
						if(prevPendinginv && isEmpty(booksOrReturns)) {
							boolean contains = false;
							InvoiceFilter filter1 = new InvoiceFilter();
							if(isNotEmpty(filter) && isNotEmpty(filter.getPaymentStatus()) && filter.getPaymentStatus().length>0) {
								contains = Arrays.asList(filter.getPaymentStatus()).contains("Pending");
								 try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
									}
								if(!contains) {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="All";
									filter.setPaymentStatus(tempArray);
								}else {
									String[] tempArray = new String[ 1 ];
									 tempArray[0] ="Pending";
									filter.setPaymentStatus(tempArray);
								}
							}else {
								try {
									BeanUtils.copyProperties(filter1, filter);
								 } catch (IllegalAccessException | InvocationTargetException e) {
										logger.error("ERROR in BeanUtils copy", e);
								 }
								
								 String[] tempArray = new String[ 1 ];
								 tempArray[0] ="Pending";
								filter.setPaymentStatus(tempArray);
							}
							gstr1 = gstr1SortDao.findByClientidAndMonthAndYearPrevMonthPendingInvoices(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter,filter1);
							totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForMonthPreviousMonthPendingInvoices(client.getId().toString(), month, yearCode, searchVal, filter,filter1);
						}else {
							if(isNotEmpty(client) && isNotEmpty(client.getFilingOption()) && "Quarterly".equalsIgnoreCase(client.getFilingOption())) {
								gstr1 = gstr1SortDao.findByClientidAndFpQuarterly(client.getId().toString(), retPeriod,month,year, start, length, searchVal,fieldName,order, filter);
								totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForFpQuarterly(client.getId().toString(),month,year, searchVal, filter);
							}else {
								gstr1 = gstr1SortDao.findByClientidAndFp(client.getId().toString(), retPeriod, start, length, searchVal,fieldName,order, filter);
								totalInvoiceAmount = gstr1Dao.getTotalInvoicesAmountsForFp(client.getId().toString(), retPeriod, searchVal, filter);
							}
						}
					}
				}
				invoices = gstr1;
			} else if (returnType.equals(GSTR2)) {
				invoices= gstr2Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			} else if (returnType.equals(MasterGSTConstants.GSTR2A)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
						MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				invoices = gstr2ADao.findByClientidAndMonthAndYear(client.getId().toString(),invTypes,retPeriod,start,length,searchVal,fieldName,order,filter);
				totalInvoiceAmount = gstr2ADao.getTotalInvoicesAmountsForMonth(client.getId().toString(), invTypes,retPeriod, searchVal, filter);
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				if("reports".equals(reports)) {
					invoices = purchageRegisterSortDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
					totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
				}else {
					OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
					Boolean billdate = false;
					if(isNotEmpty(otherconfig)){
						billdate = otherconfig.isEnableTransDate();
					}
					if(isEmpty(otherconfig) || !billdate) {
						invoices = purchageRegisterSortDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
						totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
					} else {
						invoices = purchageRegisterSortDao.findByClientidAndBillDateMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
						totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForBillDateMonth(client.getId().toString(), month, yearCode, searchVal, filter);
					}
				}
			} else if (returnType.equals(GSTR4)) {
				//invoices= gstr4Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				invoices = gstr4Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = gstr4Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if (returnType.equals(MasterGSTConstants.GSTR4A)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA);
				invoices = gstr4aDao.findByClientidAndMonthAndYear(client.getId().toString(),invTypes,retPeriod,start,length,searchVal,fieldName,order,filter);
				totalInvoiceAmount = gstr4aDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), invTypes,retPeriod, searchVal, filter);
			}else if (returnType.equals(GSTR5)) {
				invoices= gstr5Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
			}  else if (returnType.equals(GSTR6) || returnType.equals(MasterGSTConstants.ISD) || returnType.equals("Distribution") || returnType.equals("GSTR6Pur")) {
				//invoices= gstr6Repository.findByClientidAndDateofinvoiceBetween(client.getId().toString(), stDate, endDate, pageable);
				List<String> invtypeList = null;
				if(returnType.equals(GSTR6) || returnType.equals("GSTR6Pur")) {
					invtypeList = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES);					
				}else if(returnType.equals(MasterGSTConstants.ISD) || returnType.equals("Distribution")) {
					invtypeList = Arrays.asList(MasterGSTConstants.ISD, MasterGSTConstants.ISDCN,MasterGSTConstants.ISDDN);
				}
				invoices = gstr6Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, invtypeList,start, length, searchVal, filter);
				totalInvoiceAmount = gstr6Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, invtypeList,searchVal, filter);
			}else if (returnType.equals(MasterGSTConstants.GSTR6A)) {
				String strMonth =  month<10 ? "0"+month : month+"";
				String retPeriod = strMonth+year;
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
						MasterGSTConstants.B2BA, MasterGSTConstants.CDNA);
				invoices = gstr6aDao.findByClientidAndMonthAndYear(client.getId().toString(),invTypes,retPeriod,start,length,searchVal,fieldName,order,filter);
				totalInvoiceAmount = gstr6aDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), invTypes,retPeriod, searchVal, filter);
			} else if (returnType.equals("Unclaimed")) {
				if("reports".equals(reports)) {
					invoices = purchageRegisterSortDao.findByClientidAndMonthAndYearForUnclimed(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
					totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonthForUnclimed(client.getId().toString(), month, yearCode, searchVal, filter);
				}else {
					OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
					Boolean billdate = false;
					if(isNotEmpty(otherconfig)){
						billdate = otherconfig.isEnableTransDate();
					}
					if(isEmpty(otherconfig) || !billdate) {
						invoices = purchageRegisterSortDao.findByClientidAndMonthAndYearForUnclimed(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
						totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonthForUnclimed(client.getId().toString(), month, yearCode, searchVal, filter);
					}else {
						invoices = purchageRegisterSortDao.findByClientidAndMonthAndYearForUnclimedTransactiondate(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
						totalInvoiceAmount = purchageRegisterDao.getTotalInvoicesAmountsForMonthForUnclimedTransactiondate(client.getId().toString(), month, yearCode, searchVal, filter);
					}
				}
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
				invoices = deliveryChallanaDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount = deliveryChallanaDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			}  else if(returnType.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
				invoices = proformaDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount = proformaDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
				invoices = estimatesDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount = estimatesDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			} else if(returnType.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
				invoices = purchaseOrderDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order, filter);
				totalInvoiceAmount = purchaseOrderDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
			
				if("reports".equals(reports)) {
					invoices = ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order,filter);
					totalInvoiceAmount = ewayBillDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal,filter);
				}else {
					invoices = ewayBillDao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal,fieldName,order,filter);
					totalInvoiceAmount = ewayBillDao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal,filter);
				}
			}else if(returnType.equalsIgnoreCase(MasterGSTConstants.ANX2)) {
				invoices = anx2Dao.findByClientidAndMonthAndYear(client.getId().toString(), month, yearCode, start, length, searchVal, filter);
				totalInvoiceAmount = anx2Dao.getTotalInvoicesAmountsForMonth(client.getId().toString(), month, yearCode, searchVal, filter);
			}
			invoicesMap.put("invoices",invoices);
			invoicesMap.put("invoicesAmount",totalInvoiceAmount);
		}
		return invoicesMap;
	}
	
	@Override
	public void changeSubscriptionData(String usrid,String usertype) {
		SubscriptionDetails subscriptionDetails = subscriptionService.getSubscriptionData(usrid);
		if(isNotEmpty(subscriptionDetails)) {
			if(isNotEmpty(usertype) && usertype.equals(MasterGSTConstants.SUVIDHA_CENTERS) 
					&& isNotEmpty(subscriptionDetails.getUserid())
					&& !usrid.equals(subscriptionDetails.getUserid())) {
				subscriptionDetails.setId(new ObjectId());
				subscriptionDetails.setUserid(usrid);
			}
			if(isNotEmpty(subscriptionDetails.getProcessedInvoices())) {
				subscriptionDetails.setProcessedInvoices(subscriptionDetails.getProcessedInvoices() + 1);
			} else {
				subscriptionDetails.setProcessedInvoices(1);
			}
			subscriptionService.updateSubscriptionData(subscriptionDetails);
		}
	}
	
	
	@Override
	public Page<? extends InvoiceParent> getHSNInvoices(Pageable pageable, final Client client, final String userid, String returnType,final String reports, int month,
			int year){
		logger.debug(CLASSNAME + "getInvoices : Begin");
		if (pageable == null) {
			pageable = new PageRequest(0, Integer.MAX_VALUE);
		}
		Page<? extends InvoiceParent> invoices = null;
		String yearCode = "";
		if(month > 0) {
			yearCode = Utility.getYearCode(month, year);
		}else {
			yearCode = (year)+"-"+(year+1);
		}
		
		if (isNotEmpty(returnType)) {
			if (returnType.equals(MasterGSTConstants.EINVOICE)) {
				returnType = GSTR1;
			}
			if (returnType.equals(GSTR1)) {
				Page<GSTR1> gstr1invoices = null;
						if(month > 0) {
							gstr1invoices = gstr1Repository.findByClientidAndMthCdAndYrCd(client.getId().toString(), month+"", yearCode, pageable);
						}else {
							gstr1invoices = gstr1Repository.findByClientidAndYrCd(client.getId().toString(),  yearCode, pageable);
						}
				invoices = gstr1invoices;
				return invoices;
			} else if (returnType.equals(PURCHASE_REGISTER)) {
				Page<PurchaseRegister> purchaseinv =  null;
				if(month > 0) {
					purchaseinv =  purchaseRepository.findByClientidAndMthCdAndYrCd(client.getId().toString(), month+"",yearCode, pageable);
				}else {
					purchaseinv =  purchaseRepository.findByClientidAndYrCd(client.getId().toString(),yearCode, pageable);
				}
				invoices = purchaseinv;
					return invoices;
			}
		}
		return null;
	}
	
	
	@Override
	@Transactional
	public void updateMismatchStatusByTransactionDate(String clientId, List<PurchaseRegister> purchaseRegisters, List<GSTR2> gstr2List,
			final String invType, final String gstn, final String fp, final String monthlyOrYearly) {
		logger.debug(CLASSNAME + "updateMismatchStatus : Begin");
		if(gstr2List == null) {
			if ("monthly".equalsIgnoreCase(monthlyOrYearly)) {
				gstr2List = gstr2Repository.findByClientidAndFpAndInvtypeAndIsAmendment(clientId, fp, invType, true);
			} else {
				String year = fp.substring(2);
				int yr = Integer.parseInt(year);
				Date presentDate = new Date();
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(presentDate);
				int presentYear = calendar.get(Calendar.YEAR);
				List<String> rtarray = Lists.newArrayList();
				for (int i = yr; i <= presentYear; i++) {
					for (int j = 4; j <= 12; j++) {
						String strMonth = j < 10 ? "0" + j : j + "";
						rtarray.add(strMonth + (i));
					}
					for (int k = 1; k <= 3; k++) {
						String strMonth = k < 10 ? "0" + k : k + "";
						rtarray.add(strMonth + (i + 1));
					}
				}
				gstr2List = gstr2Repository.findByClientidAndFpInAndInvtypeAndIsAmendment(clientId, rtarray, invType,true);
			}
		}
		Double allowedDiff = 0d;
		Double allowedDays = 0d;
		boolean ignoreHyphen = true;
		boolean ignoreSlash = true;
		boolean ignoreZeroOrO = true;
		boolean ignoreCapitalI = true;
		boolean ignorel = true;
		boolean ignoreInvoiceMatch = true;
		ClientConfig clientConfig = getClientConfig(clientId);
		if(isNotEmpty(clientConfig)) {
			if(isNotEmpty(clientConfig.getReconcileDiff())) {
				allowedDiff = clientConfig.getReconcileDiff();
			}
			if(isNotEmpty(clientConfig.getAllowedDays())) {
				allowedDays = clientConfig.getAllowedDays();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreHyphen())) {
				ignoreHyphen = clientConfig.isEnableIgnoreHyphen();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreSlash())) {
				ignoreSlash = clientConfig.isEnableIgnoreSlash();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreZero())) {
				ignoreZeroOrO = clientConfig.isEnableIgnoreZero();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreI())) {
				ignoreCapitalI = clientConfig.isEnableIgnoreI();
			}
			if(isNotEmpty(clientConfig.isEnableIgnoreL())) {
				ignorel = clientConfig.isEnableIgnoreL();
			}
			if(isNotEmpty(clientConfig.isEnableInvoiceMatch())) {
				ignoreInvoiceMatch = clientConfig.isEnableInvoiceMatch();
			}
		}else {
			ignoreHyphen = true;
			ignoreSlash = true;
			ignoreZeroOrO = true;
			ignoreCapitalI = true;
			ignorel = true;
			ignoreInvoiceMatch = true;
		}
		List<PurchaseRegister> savePRList = Lists.newArrayList();
		List<GSTR2> saveGSTR2List = Lists.newArrayList();
		if (isNotEmpty(gstr2List)) {
			for (GSTR2 gstr2 : gstr2List) {
				if (isEmpty(gstr2.getMatchingStatus()) || (isNotEmpty(gstr2.getMatchingStatus()) && !gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED))) {
				gstr2.setMatchingStatus("Not In Purchases");
				gstr2 = gstr2Repository.save(gstr2);
				boolean mstatus = false;
				for (PurchaseRegister purchaseRegister : purchaseRegisters) {
					if(!mstatus) {
						if (isEmpty(purchaseRegister.getMatchingStatus()) || (isNotEmpty(purchaseRegister.getMatchingStatus()) && !purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED))) {
							if (invType.equals(B2B) && isNotEmpty(gstr2.getInvtype()) && gstr2.getInvtype().equals(invType)) {
							if (isNotEmpty(gstr2.getB2b())) {
								for (GSTRB2B gstrb2b : gstr2.getB2b()) {
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
											if(isNotEmpty(gstrInvoiceDetails.getInum()) && isNotEmpty(gstrInvoiceDetails.getIdt())) {
										if (isNotEmpty(purchaseRegister.getB2b())
												&& isNotEmpty(purchaseRegister.getB2b().get(0).getCtin())
												&& isNotEmpty(purchaseRegister.getB2b().get(0).getInv())
												&& isNotEmpty(purchaseRegister.getB2b().get(0).getInv().get(0).getInum())) {
											SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
											String dateBeforeString = gstrInvoiceDetails.getIdt();
											String dateAfterString = purchaseRegister.getB2b().get(0).getInv().get(0).getIdt();
											float daysBetween = 0f;
											double daysBetweenInvoiceDate = 0d;
											 try {
											       Date dateBefore = myFormat.parse(dateBeforeString);
											       Date dateAfter = myFormat.parse(dateAfterString);
											       long difference = dateAfter.getTime() - dateBefore.getTime();
											       daysBetween = (difference / (1000*60*60*24));
											       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
											 } catch (Exception e) {
											       e.printStackTrace();
											 }
											String purchaseregisterInvoiceNo = (purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim();
											String gstr2InvoiceNo = (gstrInvoiceDetails.getInum()).trim();
											 if(ignoreHyphen) {
												 if(purchaseregisterInvoiceNo.contains("-")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
												 }
												 if(gstr2InvoiceNo.contains("-")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
												 }
											 }
											 if(ignoreSlash) {
												 if(purchaseregisterInvoiceNo.contains("/")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
												 }
												if (gstr2InvoiceNo.contains("/")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
												 }
											 }
											 if(ignoreZeroOrO) {
													if (purchaseregisterInvoiceNo.contains("o")	|| purchaseregisterInvoiceNo.contains("O")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
												 }
												 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
												 }
											 }
											 if(ignoreCapitalI) {
												 if(purchaseregisterInvoiceNo.contains("I")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
												 }
												 if(gstr2InvoiceNo.contains("I")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
												 }
											 }
											 if(ignorel) {
												 if(purchaseregisterInvoiceNo.contains("l")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
												 }
												 if(gstr2InvoiceNo.contains("l")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
												 }
											 }
											 gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
											 purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
											if ((gstrb2b.getCtin().trim()).equals((purchaseRegister.getB2b().get(0).getCtin()).trim())
												&& (gstrInvoiceDetails.getInum().trim().toLowerCase()).equals((purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim().toLowerCase())
												&& daysBetweenInvoiceDate <= allowedDays
												&& gstrInvoiceDetails.getVal().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getVal())
												&& gstrInvoiceDetails.getPos().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getPos())) {
													if(isNotEmpty(gstrb2b.getCfs())) {
														purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
													}
													if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
														&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
														|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
														&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
														|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
																&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))) {
																	if (gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
																		if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		}else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		}
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	}
															}else {
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
															savePRList.add((PurchaseRegister) purchaseRegister);
															saveGSTR2List.add(gstr2);
															mstatus = true;
														} else {
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePRList.add((PurchaseRegister) purchaseRegister);
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															saveGSTR2List.add(gstr2);
														}
											} else if ((gstrInvoiceDetails.getInum().trim().toLowerCase()).equals((purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim().toLowerCase())
														&& (gstrb2b.getCtin().trim()).equals((purchaseRegister.getB2b().get(0).getCtin()).trim())) {
													if (isNotEmpty(gstrb2b.getCfs())) {
														purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
													}
														if (daysBetweenInvoiceDate <= allowedDays) {
																if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																	&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																	&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& (((gstr2.getTotaltaxableamount()	- purchaseRegister.getTotaltaxableamount()) == 0)
																			|| ((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) == 0)))
																			&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																			&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																			|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))) {
																			if (gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
																				if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																				}else {
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																				}
																			}else {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			}
																		}else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																		mstatus = true;
																	} else {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		saveGSTR2List.add(gstr2);
																	}
														} else {
															if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																	&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																	&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}
														}
													} else if ((gstrb2b.getCtin().trim()).equals((purchaseRegister.getB2b().get(0).getCtin()).trim())
															&& gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
															if (isNotEmpty(gstrb2b.getCfs())) {
																purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
															}
															Double alldDiff = 0d;
															if (allowedDiff == 0d) {
																alldDiff = 1d;
															} else {
																alldDiff = allowedDiff;
															}
															if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= alldDiff)
																&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																|| (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) <= alldDiff)
																&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))) {
																if (ignoreInvoiceMatch) {
																	List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstr2InvoiceNo));
																	List<Character> purinvd = convertStringToCharList(removeLeadingZeros(purchaseregisterInvoiceNo));
																	if (purinvd.containsAll(gstrinvd) || gstrinvd.containsAll(purinvd)) {
																		if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo) || purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																			}else {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			}
																		}else if (isEmpty(purchaseRegister.getMatchingStatus()) || purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		}
																	} else {
																	if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	}else if (isEmpty(purchaseRegister.getMatchingStatus()) || purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	}
																}
																savePRList.add((PurchaseRegister) purchaseRegister);
																saveGSTR2List.add(gstr2);
															} else if (gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																}
																savePRList.add((PurchaseRegister) purchaseRegister);
																saveGSTR2List.add(gstr2);
															} else {
																if (isEmpty(purchaseRegister.getMatchingStatus())|| purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		saveGSTR2List.add(gstr2);
																}
															}
														}
													} else if ((gstrInvoiceDetails.getInum().trim().toLowerCase()).equals((purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim().toLowerCase())
															&& gstrInvoiceDetails.getIdt().equals(purchaseRegister.getB2b().get(0).getInv().get(0).getIdt())) {
														if (isNotEmpty(gstrb2b.getCfs())) {
															purchaseRegister.getB2b().get(0).setCfs(gstrb2b.getCfs());
														}
														Double alldDiff = 0d;
														if (allowedDiff == 0d) {
															alldDiff = 1d;
														} else {
															alldDiff = allowedDiff;
														}
														if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
															&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
															&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
															|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
															&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
															&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
															&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
															&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
															|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
															&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																if (isEmpty(purchaseRegister.getMatchingStatus()) || purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	saveGSTR2List.add(gstr2);
																}
															}
														}
													}
												}
											}
										}
									}
								} else if (invType.equals(CREDIT_DEBIT_NOTES) && isNotEmpty(gstr2.getInvtype()) && gstr2.getInvtype().equals(invType)) {
								if (isNotEmpty(gstr2.getCdn())) {
									for (GSTRCreditDebitNotes gstrcdn : gstr2.getCdn()) {
										for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
											if (isNotEmpty(gstrInvoiceDetails.getNtNum()) && isNotEmpty(gstrInvoiceDetails.getNtDt())) {
												if (isNotEmpty(purchaseRegister.getCdn().get(0).getCtin())
														&& isNotEmpty(purchaseRegister.getCdn().get(0).getNt())
														&& isNotEmpty(purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum())) {
													SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
													String dateBeforeString = myFormat.format(gstrInvoiceDetails.getNtDt());
													String dateAfterString = myFormat.format(purchaseRegister.getCdn().get(0).getNt().get(0).getNtDt());
													float daysBetween = 0f;
													double daysBetweenInvoiceDate = 0d;
													try {
														Date dateBefore = myFormat.parse(dateBeforeString);
														Date dateAfter = myFormat.parse(dateAfterString);
														long difference = dateAfter.getTime() - dateBefore.getTime();
														daysBetween = (difference / (1000 * 60 * 60 * 24));
														daysBetweenInvoiceDate = Math.abs((double) daysBetween);
													} catch (Exception e) {
														e.printStackTrace();
													}
													String purchaseregisterInvoiceNo = purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim();
													String gstr2InvoiceNo = gstrInvoiceDetails.getNtNum().trim();
													if (ignoreHyphen) {
														if (purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
														}
														if (gstr2InvoiceNo.contains("-")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
														}
													}
													if (ignoreSlash) {
														if (purchaseregisterInvoiceNo.contains("/")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
														}
														if (gstr2InvoiceNo.contains("/")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
														}
													}
													if (ignoreZeroOrO) {
														if (purchaseregisterInvoiceNo.contains("o")|| purchaseregisterInvoiceNo.contains("O")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
														}
														if (gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
														}
													}
													if (ignoreCapitalI) {
														if (purchaseregisterInvoiceNo.contains("I")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
														}
														if (gstr2InvoiceNo.contains("I")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
														}
													}
													if (ignorel) {
														if (purchaseregisterInvoiceNo.contains("l")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
														}
														if (gstr2InvoiceNo.contains("l")) {
															gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
														}
													}
													gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
													if ((gstrcdn.getCtin().trim()).equals((purchaseRegister.getCdn().get(0).getCtin().trim()))
															&& (gstrInvoiceDetails.getNtNum().trim().toLowerCase()).equals((purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim().toLowerCase()))
															&& daysBetweenInvoiceDate <= allowedDays
															&& gstrInvoiceDetails.getVal().equals(purchaseRegister.getCdn().get(0).getNt().get(0).getVal())) {
														if(isNotEmpty(gstrcdn.getCfs())) {
															purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
														}
														List<Double> pTxValues = Lists.newArrayList();
														if (isNotEmpty(gstrInvoiceDetails.getItms())&& isNotEmpty(purchaseRegister.getCdn().get(0).getNt().get(0).getItms())) {
															for (GSTRItems gstrItem : purchaseRegister.getCdn().get(0).getNt().get(0).getItms()) {
																pTxValues.add(gstrItem.getItem().getTxval());
															}
														}
													if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
														 && ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														 && (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
														 || (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														 && (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
														 && (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
														 && ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														 && (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
														 || (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														 && (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																|| ((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)))) {
																	if (dateBeforeString.equals(dateAfterString)) {
																		if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																		}else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																		}
																	}else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	}
															}else {
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
														savePRList.add((PurchaseRegister) purchaseRegister);
														saveGSTR2List.add(gstr2);
														mstatus = true;
													} else {
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePRList.add((PurchaseRegister) purchaseRegister);
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														saveGSTR2List.add(gstr2);
													}
												} else if ((gstrInvoiceDetails.getNtNum().trim().toLowerCase()).equals((purchaseRegister.getCdn().get(0).getNt().get(0).getNtNum().trim().toLowerCase()))
															&& (gstrcdn.getCtin().trim()).equals((purchaseRegister.getCdn().get(0).getCtin().trim()))) {
														if (isNotEmpty(gstrcdn.getCfs())) {
															purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
														}
														if (daysBetweenInvoiceDate <= allowedDays) {
															if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																&& ((((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																&& ((((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) <= allowedDiff)
																&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																		|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& (((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) == 0)
																		|| ((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)))) {
																		if (dateBeforeString.equals(dateAfterString)) {
																			if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																			}else {
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																			}
																		} else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		}
																	} else {
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																	mstatus = true;
																} else {
																	purchaseRegister.setMatchingId(gstr2.getId().toString());
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																	saveGSTR2List.add(gstr2);
																}
															} else {
																if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& ((((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																		&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																		|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& ((((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) <= allowedDiff)
																		&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																		|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																		&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			savePRList.add((PurchaseRegister) purchaseRegister);
																			saveGSTR2List.add(gstr2);
																}
															}
														} else if ((gstrcdn.getCtin().trim()).equals((purchaseRegister.getCdn().get(0).getCtin()).trim())&& gstrInvoiceDetails.getNtDt().equals(purchaseRegister.getCdn().get(0).getNt().get(0).getNtDt())) {
															if(isNotEmpty(gstrcdn.getCfs())) {
																purchaseRegister.getCdn().get(0).setCfs(gstrcdn.getCfs());
															}
															Double alldDiff = 0d;
															if (allowedDiff == 0d) {
																alldDiff = 1d;
															} else {
																alldDiff = allowedDiff;
															}
															if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																	&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
																	&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																	&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
																	&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																if(ignoreInvoiceMatch) {
																	List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstr2InvoiceNo));
																	List<Character> purinvd = convertStringToCharList(removeLeadingZeros(purchaseregisterInvoiceNo));
																	if (purinvd.containsAll(gstrinvd) || gstrinvd.containsAll(purinvd)) {
																		if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																				
																			}else {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			}
																		}else if (isEmpty(purchaseRegister.getMatchingStatus())|| purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		}
																	}else {
																		if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		}else if (isEmpty(purchaseRegister.getMatchingStatus())|| purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		}
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																} else if (gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																	if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																	}else {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	}
																	savePRList.add((PurchaseRegister) purchaseRegister);
																	saveGSTR2List.add(gstr2);
																}else {
																	if (isEmpty(purchaseRegister.getMatchingStatus())|| purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		saveGSTR2List.add(gstr2);
																	}
																}
															}
														}
												}
											}
										}
									}
								}
							}else if(invType.equals(MasterGSTConstants.IMP_GOODS) && isNotEmpty(gstr2.getInvtype()) && gstr2.getInvtype().equals(invType)) {
								
								
								if (isNotEmpty(gstr2.getImpGoods())) {
									for (GSTRImportDetails gstrimpg : gstr2.getImpGoods()) {
										if(isNotEmpty(gstrimpg.getBoeNum()) && isNotEmpty(gstrimpg.getBoeDt())) {
											if(isNotEmpty(purchaseRegister.getImpGoods()) && isNotEmpty(purchaseRegister.getImpGoods().get(0)) && isNotEmpty(purchaseRegister.getImpGoods().get(0).getBoeNum())) {
												SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
												String dateBeforeString = myFormat.format(gstrimpg.getBoeDt());
												String dateAfterString = myFormat.format(purchaseRegister.getDateofinvoice());
												float daysBetween = 0f;
												double daysBetweenInvoiceDate = 0d;
												 try {
												       Date dateBefore = myFormat.parse(dateBeforeString);
												       Date dateAfter = myFormat.parse(dateAfterString);
												       long difference = dateAfter.getTime() - dateBefore.getTime();
												       daysBetween = (difference / (1000*60*60*24));
												       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
												 } catch (Exception e) {
												       e.printStackTrace();
												 }
												String purchaseregisterInvoiceNo = (purchaseRegister.getB2b().get(0).getInv().get(0).getInum()).trim();
												String gstr2InvoiceNo = (gstrimpg.getBoeNum().toString()).trim();
												 if(ignoreHyphen) {
													 if(purchaseregisterInvoiceNo.contains("-")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
													 }
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
													 }
												 }
												 if(ignoreSlash) {
													 if(purchaseregisterInvoiceNo.contains("/")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
													 }
													if (gstr2InvoiceNo.contains("/")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
													 }
												 }
												 if(ignoreZeroOrO) {
														if (purchaseregisterInvoiceNo.contains("o")	|| purchaseregisterInvoiceNo.contains("O")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
													 }
													 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
													 }
												 }
												 if(ignoreCapitalI) {
													 if(purchaseregisterInvoiceNo.contains("I")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
													 }
													 if(gstr2InvoiceNo.contains("I")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
													 }
												 }
												 if(ignorel) {
													 if(purchaseregisterInvoiceNo.contains("l")) {
															purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
													 }
													 if(gstr2InvoiceNo.contains("l")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
													 }
												 }
												 gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
												 purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
												 if(isEmpty(gstrimpg.getStin())) {
													 gstrimpg.setStin(" ");
												 }
												 if(isEmpty(purchaseRegister) || isEmpty(purchaseRegister.getImpGoods()) || isEmpty(purchaseRegister.getImpGoods().get(0)) || isEmpty(purchaseRegister.getImpGoods().get(0).getStin())) {
													 purchaseRegister.getImpGoods().get(0).setStin(" ");
												 }
												 if ((gstrimpg.getStin().trim()).equals((purchaseRegister.getImpGoods().get(0).getStin()).trim())
															&& ((gstrimpg.getBoeNum().toString()).trim().toLowerCase()).equals((purchaseRegister.getImpGoods().get(0).getBoeNum().toString()).trim().toLowerCase())
															&& daysBetweenInvoiceDate <= allowedDays
															&& gstrimpg.getBoeVal().equals(purchaseRegister.getImpGoods().get(0).getBoeVal())) {
																
																if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																	&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																	&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																	&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)
																			|| ((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)))
																			&& (isNotEmpty(gstr2.getTotaltax()) && isNotEmpty(purchaseRegister.getTotaltax())
																			&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																			|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))) {
																				if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																					if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																					}else {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																					}
																				}else {
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																				}
																		}else {
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																		mstatus = true;
																	} else {
																		purchaseRegister.setMatchingId(gstr2.getId().toString());
																		purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																		saveGSTR2List.add(gstr2);
																	}
														} else if (((gstrimpg.getBoeNum().toString()).trim().toLowerCase()).equals((purchaseRegister.getInvoiceno()).trim().toLowerCase())
																&& (gstrimpg.getStin().trim()).equals((purchaseRegister.getImpGoods().get(0).getStin()))) {
																if (daysBetweenInvoiceDate <= allowedDays) {
																		if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																			&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																			|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																			&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																			&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																			&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																			|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																					&& (((gstr2.getTotaltaxableamount()	- purchaseRegister.getTotaltaxableamount()) == 0)
																					|| ((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) == 0)))
																					&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																					&& (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)
																					|| ((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) == 0)))) {
																					if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																						if (gstr2.getFp().equals(purchaseRegister.getFp())) {
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED);
																						}else {
																							purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																							gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																						}
																					}else {
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					}
																				}else {
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																				}
																				savePRList.add((PurchaseRegister) purchaseRegister);
																				saveGSTR2List.add(gstr2);
																				mstatus = true;
																			} else {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				savePRList.add((PurchaseRegister) purchaseRegister);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				saveGSTR2List.add(gstr2);
																			}
																} else {
																	if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																			&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
																			&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																			|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																			&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																			&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
																			&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																			|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
																			&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			savePRList.add((PurchaseRegister) purchaseRegister);
																			saveGSTR2List.add(gstr2);
																		}
																}
															} else if ((gstrimpg.getStin().trim()).equals((purchaseRegister.getImpGoods().get(0).getStin()).trim())
																	&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																	Double alldDiff = 0d;
																	if (allowedDiff == 0d) {
																		alldDiff = 1d;
																	} else {
																		alldDiff = allowedDiff;
																	}
																	if ((isNotEmpty(gstr2.getTotaltaxableamount()) && isNotEmpty(purchaseRegister.getTotaltaxableamount())
																		&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																		&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0)
																		|| (((purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) <= alldDiff)
																		&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)))
																		&& (isNotEmpty(gstr2.getTotaltax())	&& isNotEmpty(purchaseRegister.getTotaltax())
																		&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																		&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)
																		|| (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) <= alldDiff)
																		&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)))) {
																		if (ignoreInvoiceMatch) {
																			List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstr2InvoiceNo));
																			List<Character> purinvd = convertStringToCharList(removeLeadingZeros(purchaseregisterInvoiceNo));
																			if (purinvd.containsAll(gstrinvd) || gstrinvd.containsAll(purinvd)) {
																				if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo) || purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																					if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																					}else {
																						purchaseRegister.setMatchingId(gstr2.getId().toString());
																						purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																						gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																					}
																				}else if (isEmpty(purchaseRegister.getMatchingStatus()) || purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				}
																			} else {
																			if (gstr2InvoiceNo.contains(purchaseregisterInvoiceNo)|| purchaseregisterInvoiceNo.contains(gstr2InvoiceNo)) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			}else if (isEmpty(purchaseRegister.getMatchingStatus()) || purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																					purchaseRegister.setMatchingId(gstr2.getId().toString());
																					purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																					gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			}
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	} else if (gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
																		if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																		}else {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																		}
																		savePRList.add((PurchaseRegister) purchaseRegister);
																		saveGSTR2List.add(gstr2);
																	} else {
																		if (isEmpty(purchaseRegister.getMatchingStatus())|| purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																				purchaseRegister.setMatchingId(gstr2.getId().toString());
																				purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				savePRList.add((PurchaseRegister) purchaseRegister);
																				gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																				saveGSTR2List.add(gstr2);
																		}
																	}
																}
															} else if (((gstrimpg.getBoeNum().toString()).trim().toLowerCase()).equals((purchaseRegister.getInvoiceno()).trim().toLowerCase())
																	&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(purchaseRegister.getDateofinvoice()))) {
																
																Double alldDiff = 0d;
																if (allowedDiff == 0d) {
																	alldDiff = 1d;
																} else {
																	alldDiff = allowedDiff;
																}
																if ((isNotEmpty(gstr2.getTotaltaxableamount())&& isNotEmpty(purchaseRegister.getTotaltaxableamount())
																	&& ((((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
																	&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)
																	|| (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
																	&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)))
																	&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
																	&& ((((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
																	&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
																	|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
																	&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
																		if (isEmpty(purchaseRegister.getMatchingStatus()) || purchaseRegister.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																			purchaseRegister.setMatchingId(gstr2.getId().toString());
																			purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			savePRList.add((PurchaseRegister) purchaseRegister);
																			gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																			saveGSTR2List.add(gstr2);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
		purchaseRepository.save(savePRList);
		gstr2Repository.save(saveGSTR2List);
		
		int month = Integer.parseInt(fp.substring(0, 2));
		int year = Integer.parseInt(fp.substring(2));
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, month - 1, 0, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);

		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH) + 1;

		Date ystDate = null;
		Date yendDate = null;
		if(month < 10) {
			cal.set(year-1, 3, 1, 0, 0, 0);
			ystDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			if (presentYear != year) {
				cal.set(year, 9, 0, 23, 59, 59);
				yendDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, presentMonth, 0, 23, 59, 59);
			yendDate = new java.util.Date(cal.getTimeInMillis());
			}
		}else {
			cal.set(year - 1, 3, 1, 0, 0, 0);
			ystDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			if (presentYear != year) {
				cal.set(year, 9, 0, 23, 59, 59);
				yendDate = new java.util.Date(cal.getTimeInMillis());
			} else {
				cal.set(year, presentMonth, 0, 23, 59, 59);
			yendDate = new java.util.Date(cal.getTimeInMillis());
		}
		}
		Pageable pageable = new PageRequest(0, Integer.MAX_VALUE);
		List<String> invTypes = new ArrayList<String>();
		invTypes.add(invType);
		Page<? extends InvoiceParent> notInGstr2Ainvoices = purchaseRepository.findByClientidAndInvtypeInAndBillDateBetweenAndMatchingStatusIsNull(clientId, invTypes, stDate,endDate, pageable);
		Page<? extends InvoiceParent> notInGstr2Ainvoicess = purchaseRepository.findByClientidAndInvtypeInAndMatchingStatusAndBillDateBetween(clientId, invTypes,"Not In GSTR 2A",stDate,endDate, pageable);
		List<PurchaseRegister> notingstr2a = Lists.newArrayList();
		List<PurchaseRegister> ngstr2a = (List<PurchaseRegister>) notInGstr2Ainvoices.getContent();
		List<PurchaseRegister> notingstr2aa = (List<PurchaseRegister>) notInGstr2Ainvoicess.getContent();
		if(isNotEmpty(ngstr2a)) {
			notingstr2a.addAll(ngstr2a);
		}
		if(isNotEmpty(notingstr2aa)) {
			notingstr2a.addAll(notingstr2aa);
		}
		Page<? extends InvoiceParent> gstr2aInvoices = gstr2Repository.findByClientidAndInvtypeInAndIsAmendmentAndDateofinvoiceBetweenAndMatchingStatusIsNull(clientId,invTypes, true, ystDate, yendDate, pageable);
		Page<? extends InvoiceParent> gstr2aInvoicess = gstr2Repository.findByClientidAndInvtypeInAndDateofinvoiceBetweenAndMatchingStatusAndIsAmendment(clientId,invTypes,ystDate, yendDate,"Not In Purchases",true,pageable);
		List<GSTR2> gstr2aInvoic = Lists.newArrayList();
		List<GSTR2> npur = (List<GSTR2>) gstr2aInvoices.getContent();
		List<GSTR2> gstr2aInvoice = (List<GSTR2>) gstr2aInvoicess.getContent();
		if(isNotEmpty(npur)) {
			gstr2aInvoic.addAll(npur);
		}
		if(isNotEmpty(gstr2aInvoice)) {
			gstr2aInvoic.addAll(gstr2aInvoice);
		}
		List<PurchaseRegister> savePPRList = Lists.newArrayList();
		List<GSTR2> savePGSTR2List = Lists.newArrayList();
		if (isNotEmpty(notingstr2a)) {
			for (PurchaseRegister purchaseRegister : notingstr2a) {
				for (GSTR2 gstr2 : gstr2aInvoic) {
					if (invType.equals(B2B) && isNotEmpty(purchaseRegister.getInvtype())
							&& purchaseRegister.getInvtype().equals(invType)) {
							if (isNotEmpty(purchaseRegister.getB2b())) {
								for (GSTRB2B gstrb2b : purchaseRegister.getB2b()) {
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
										if (isNotEmpty(gstrInvoiceDetails.getInum()) && isNotEmpty(gstrInvoiceDetails.getIdt())) {
											if (isNotEmpty(gstr2.getB2b()) && isNotEmpty(gstr2.getB2b().get(0).getCtin())
												&& isNotEmpty(gstr2.getB2b().get(0).getInv())
												&& isNotEmpty(gstr2.getB2b().get(0).getInv().get(0).getInum())) {
												SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
												String dateBeforeString = gstrInvoiceDetails.getIdt();
												String dateAfterString = gstr2.getB2b().get(0).getInv().get(0).getIdt();
												float daysBetween = 0f;
												double daysBetweenInvoiceDate = 0d;
												try {
											       Date dateBefore = myFormat.parse(dateBeforeString);
											       Date dateAfter = myFormat.parse(dateAfterString);
											       long difference = dateAfter.getTime() - dateBefore.getTime();
											       daysBetween = (difference / (1000*60*60*24));
											       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
												} catch (Exception e) {
													e.printStackTrace();
												}
												String purchaseregisterInvoiceNo = gstr2.getB2b().get(0).getInv().get(0).getInum().trim();
												String gstr2InvoiceNo = gstrInvoiceDetails.getInum().trim();
												if(ignoreHyphen) {
													if(purchaseregisterInvoiceNo.contains("-")) {
														purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
													}
													 if(gstr2InvoiceNo.contains("-")) {
														 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
													 }
												}
											 if(ignoreSlash) {
												 if(purchaseregisterInvoiceNo.contains("/")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
												 }
												 if(gstr2InvoiceNo.contains("-")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
												 }
											 }
											 if(ignoreZeroOrO) {
											if (purchaseregisterInvoiceNo.contains("o") || purchaseregisterInvoiceNo.contains("O")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
												 }
												 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
												 }
											 }
											 if(ignoreCapitalI) {
												 if(purchaseregisterInvoiceNo.contains("I")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
												 }
												 if(gstr2InvoiceNo.contains("I")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
												 }
											 }
											 if(ignorel) {
												 if(purchaseregisterInvoiceNo.contains("l")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
												 }
												 if(gstr2InvoiceNo.contains("l")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
												 }
											 }
											gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
											purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
											if ((gstrb2b.getCtin().trim()).equals((gstr2.getB2b().get(0).getCtin().trim()))
												&& (gstrInvoiceDetails.getInum().trim()).equals((gstr2.getB2b().get(0).getInv().get(0).getInum().trim()))
												&& daysBetweenInvoiceDate <= allowedDays
												&& gstrInvoiceDetails.getVal().equals(gstr2.getB2b().get(0).getInv().get(0).getVal())) {
												if(isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
													gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
												}
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
													&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
													&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
													|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
													&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
													&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
													&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
													&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
													|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
													&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
															&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
															|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)))
															&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
															&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
															if (gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
														}else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
														savePGSTR2List.add((GSTR2) gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														savePPRList.add(purchaseRegister);
													} else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePPRList.add((PurchaseRegister) purchaseRegister);
													}
												} else if ((gstrInvoiceDetails.getInum().trim()).equals((gstr2.getB2b().get(0).getInv().get(0).getInum().trim()))
													&& (gstrb2b.getCtin().trim()).equals((gstr2.getB2b().get(0).getCtin().trim()))) {
													if (isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
														gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
													}
												if (daysBetweenInvoiceDate <= allowedDays) {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
														&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
															&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
															|| ((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) == 0)))
															&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax())
															&& (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) == 0) 
															|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
															if (gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
															} else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
														} else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
														savePGSTR2List.add((GSTR2) gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														savePPRList.add(purchaseRegister);
													} else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePPRList.add((PurchaseRegister) purchaseRegister);
													}
												}else {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
															&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
															&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
															|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
															&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
															&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
															&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
															&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))) {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePGSTR2List.add((GSTR2) gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															savePPRList.add(purchaseRegister);
														}
												}
										} else if ((gstrb2b.getCtin().trim()).equals((gstr2.getB2b().get(0).getCtin().trim()))
													&& gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
											Double alldDiff = 0d;
											if (allowedDiff == 0d) {
												alldDiff = 1d;
											} else {
												alldDiff = allowedDiff;
											}
												if(isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
													gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
												}
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
													&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
													&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
													|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
													&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
													&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
													&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
													&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
													|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
													&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
														if(ignoreInvoiceMatch) {
															List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstrInvoiceDetails.getInum().trim()));
															List<Character> purinvd = convertStringToCharList(removeLeadingZeros(gstr2.getB2b().get(0).getInv().get(0).getInum().trim()));
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															if (purinvd.containsAll(gstrinvd)|| gstrinvd.containsAll(purinvd)) {
																if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
																}else {
																	gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																	purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																}
															}else {
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															}
															savePRList.add((PurchaseRegister) purchaseRegister);
														}else if(gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
															if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																purchaseRegister.setMatchingId(gstr2.getId().toString());
															}
															savePGSTR2List.add((GSTR2) gstr2);
															savePPRList.add(purchaseRegister);
														}else {
															if (isEmpty(gstr2.getMatchingStatus()) || gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePGSTR2List.add(gstr2);
																purchaseRegister.setMatchingId(gstr2.getId().toString());
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
																savePPRList.add((PurchaseRegister) purchaseRegister);
															}
														}
												}
											} else if ((gstrInvoiceDetails.getInum().trim()).equals((gstr2.getB2b().get(0).getInv().get(0).getInum().trim()))&& gstrInvoiceDetails.getIdt().equals(gstr2.getB2b().get(0).getInv().get(0).getIdt())) {
												Double alldDiff = 0d;
												if (allowedDiff == 0d) {
													alldDiff = 1d;
												} else {
													alldDiff = allowedDiff;
												}
												if (isNotEmpty(gstr2.getB2b().get(0).getCfs())) {
													gstrb2b.setCfs(gstr2.getB2b().get(0).getCfs());
												}
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
													&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
													&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
													|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
													&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
													&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
													&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
													&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
													|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
													&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
													if (isEmpty(gstr2.getMatchingStatus()) || gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													}
												}
											}
										}
									}
								}
							}
					} else if (invType.equals(CREDIT_DEBIT_NOTES) && isNotEmpty(purchaseRegister.getInvtype()) && purchaseRegister.getInvtype().equals(invType)) {
							if (isNotEmpty(purchaseRegister.getCdn())) {
								for (GSTRCreditDebitNotes gstrcdn : purchaseRegister.getCdn()) {
									for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
										if (isNotEmpty(gstrInvoiceDetails.getNtNum())&& isNotEmpty(gstrInvoiceDetails.getNtDt())) {
											if (isNotEmpty(gstr2.getCdn()) && isNotEmpty(gstr2.getCdn().get(0)) && isNotEmpty(gstr2.getCdn().get(0).getCtin())
												&& isNotEmpty(gstr2.getCdn().get(0).getNt())
												&& isNotEmpty(gstr2.getCdn().get(0).getNt().get(0).getNtDt())) {
												SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
												String dateBeforeString = myFormat.format(gstrInvoiceDetails.getNtDt());
												String dateAfterString = myFormat.format(gstr2.getCdn().get(0).getNt().get(0).getNtDt());
												float daysBetween = 0f;
												double daysBetweenInvoiceDate = 0d;
												try {
											       Date dateBefore = myFormat.parse(dateBeforeString);
											       Date dateAfter = myFormat.parse(dateAfterString);
											       long difference = dateAfter.getTime() - dateBefore.getTime();
											       daysBetween = (difference / (1000*60*60*24));
											       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
												} catch (Exception e) {
													e.printStackTrace();
												}
												String purchaseregisterInvoiceNo = gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim();
												String gstr2InvoiceNo = gstrInvoiceDetails.getNtNum().trim();
												if(ignoreHyphen) {
												 if(purchaseregisterInvoiceNo.contains("-")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
												 }
												 if(gstr2InvoiceNo.contains("-")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
												 }
												}
											 if(ignoreSlash) {
												 if(purchaseregisterInvoiceNo.contains("/")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
												 }
												 if(gstr2InvoiceNo.contains("-")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
												 }
											 }
											 if(ignoreZeroOrO) {
												 if (purchaseregisterInvoiceNo.contains("o") || purchaseregisterInvoiceNo.contains("O")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
												 }
												 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
												 }
											 }
											 if(ignoreCapitalI) {
												 if(purchaseregisterInvoiceNo.contains("I")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
												 }
												 if(gstr2InvoiceNo.contains("I")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
												 }
											 }
											 if(ignorel) {
												 if(purchaseregisterInvoiceNo.contains("l")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
												 }
												 if(gstr2InvoiceNo.contains("l")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
												 }
											 }
											 gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
											purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
											if ((gstrcdn.getCtin().trim()).equals((gstr2.getCdn().get(0).getCtin().trim()))
												&& (gstrInvoiceDetails.getNtNum().trim()).equals((gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim()))
													&& daysBetweenInvoiceDate <= allowedDays
													&& gstrInvoiceDetails.getVal().equals(gstr2.getCdn().get(0).getNt().get(0).getVal())) {
												if(isNotEmpty(gstr2.getCdn().get(0).getCfs())) {
													gstrcdn.setCfs(gstr2.getCdn().get(0).getCfs());
												}
												List<Double> pTxValues = Lists.newArrayList();
												if (isNotEmpty(gstrInvoiceDetails.getItms())&& isNotEmpty(gstr2.getCdn().get(0).getNt().get(0).getItms())) {
													for (GSTRItems gstrItem : gstr2.getCdn().get(0).getNt().get(0).getItms()) {
														pTxValues.add(gstrItem.getItem().getTxval());
													}
												}
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
													&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
													&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
													|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
													&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
													&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
													&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
													&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
													|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
													&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
															&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
															|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
															&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
															&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)
															|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
															if (dateBeforeString.equals(dateAfterString)) {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
														}else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														savePPRList.add((PurchaseRegister)purchaseRegister);
													} else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePPRList.add((PurchaseRegister) purchaseRegister);
												}
											} else if ((gstrInvoiceDetails.getNtNum().trim()).equals((gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim()))
													&& (gstrcdn.getCtin().trim()).equals((gstr2.getCdn().get(0).getCtin().trim()))) {
												if (isNotEmpty(gstr2.getCdn().get(0).getCfs())) {
													gstrcdn.setCfs(gstr2.getCdn().get(0).getCfs());
												}
												if (daysBetweenInvoiceDate <= allowedDays) {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
														|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
														if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
															&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
															|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
															&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
															&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)
															|| ((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) == 0)))) {
															if (dateBeforeString.equals(dateAfterString)) {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
															} else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															}
														} else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														savePPRList.add((PurchaseRegister) purchaseRegister);
													} else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePGSTR2List.add(gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePPRList.add((PurchaseRegister)purchaseRegister);
													}
												}else {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
															&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
															&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
															|| (((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
															&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
															&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
															&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
															&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
															|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
															&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePGSTR2List.add(gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
												}
											} else if ((gstrcdn.getCtin().trim()).equals((gstr2.getCdn().get(0).getCtin().trim()))
													&& gstrInvoiceDetails.getNtDt().equals(gstr2.getCdn().get(0).getNt().get(0).getNtDt())) {
												Double alldDiff = 0d;
												if (allowedDiff == 0d) {
													alldDiff = 1d;
												} else {
													alldDiff = allowedDiff;
												}
												if(isNotEmpty(gstr2.getCdn().get(0).getCfs())) {
													gstrcdn.setCfs(gstr2.getCdn().get(0).getCfs());
												}
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
													&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
													&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
													|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
													&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
													&& (isNotEmpty(gstr2.getTotaltax())&& isNotEmpty(purchaseRegister.getTotaltax())
													&& ((((gstr2.getTotaltax()- purchaseRegister.getTotaltax()) <= alldDiff)
													&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)
													|| (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
													&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)))) {
													if(ignoreInvoiceMatch) {
													List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros(gstrInvoiceDetails.getNtNum().trim()));
													List<Character> purinvd = convertStringToCharList(removeLeadingZeros(gstr2.getCdn().get(0).getNt().get(0).getNtNum().trim()));
														if (purinvd.containsAll(gstrinvd)|| gstrinvd.containsAll(purinvd)) {
															if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																purchaseRegister.setMatchingId(gstr2.getId().toString());
															}
														}else {
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
														}
														
														savePRList.add((PurchaseRegister) purchaseRegister);
													}else if(gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
														if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
														}else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														}
														savePGSTR2List.add((GSTR2) gstr2);
														savePPRList.add(purchaseRegister);
													}else {
														if (isEmpty(gstr2.getMatchingStatus())|| gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePGSTR2List.add(gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePPRList.add((PurchaseRegister)purchaseRegister);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}else if (invType.equals(MasterGSTConstants.IMP_GOODS) && isNotEmpty(purchaseRegister.getInvtype()) && purchaseRegister.getInvtype().equals(invType)) {
						if (isNotEmpty(purchaseRegister.getImpGoods())) {
							for (GSTRImportDetails gstrimpg : purchaseRegister.getImpGoods()) {
									if (isNotEmpty(gstrimpg.getBoeNum()) && isNotEmpty(gstrimpg.getBoeDt())) {
										if (isNotEmpty(gstr2.getImpGoods()) && isNotEmpty(gstr2.getImpGoods().get(0).getBoeNum())) {
											SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
											String dateBeforeString = myFormat.format(gstrimpg.getBoeDt());
											String dateAfterString = myFormat.format(gstr2.getImpGoods().get(0).getBoeDt());
											float daysBetween = 0f;
											double daysBetweenInvoiceDate = 0d;
											try {
										       Date dateBefore = myFormat.parse(dateBeforeString);
										       Date dateAfter = myFormat.parse(dateAfterString);
										       long difference = dateAfter.getTime() - dateBefore.getTime();
										       daysBetween = (difference / (1000*60*60*24));
										       daysBetweenInvoiceDate = Math.abs((double)daysBetween);
											} catch (Exception e) {
												e.printStackTrace();
											}
											String purchaseregisterInvoiceNo = (gstr2.getImpGoods().get(0).getBoeNum().toString()).trim();
											String gstr2InvoiceNo = (gstrimpg.getBoeNum().toString()).trim();
											if(ignoreHyphen) {
												if(purchaseregisterInvoiceNo.contains("-")) {
													purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("-", "");
												}
												 if(gstr2InvoiceNo.contains("-")) {
													 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("-", "");
												 }
											}
										 if(ignoreSlash) {
											 if(purchaseregisterInvoiceNo.contains("/")) {
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("/", "");
											 }
											 if(gstr2InvoiceNo.contains("-")) {
												 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("/", "");
											 }
										 }
										 if(ignoreZeroOrO) {
										if (purchaseregisterInvoiceNo.contains("o") || purchaseregisterInvoiceNo.contains("O")) {
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("o", "0");
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("O", "0");
											 }
											 if(gstr2InvoiceNo.contains("o") || gstr2InvoiceNo.contains("O")) {
												 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("o", "0");
												 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("O", "0");
											 }
										 }
										 if(ignoreCapitalI) {
											 if(purchaseregisterInvoiceNo.contains("I")) {
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("I", "1");
											 }
											 if(gstr2InvoiceNo.contains("I")) {
												 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("I", "1");
											 }
										 }
										 if(ignorel) {
											 if(purchaseregisterInvoiceNo.contains("l")) {
												purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.replaceAll("l", "1");
											 }
											 if(gstr2InvoiceNo.contains("l")) {
												 gstr2InvoiceNo = gstr2InvoiceNo.replaceAll("l", "1");
											 }
										 }
										gstr2InvoiceNo = gstr2InvoiceNo.toLowerCase();
										purchaseregisterInvoiceNo = purchaseregisterInvoiceNo.toLowerCase();
										
										 if(isEmpty(gstrimpg.getStin())) {
											 gstrimpg.setStin(" ");
										 }
										 if(isEmpty(gstr2) || isEmpty(gstr2.getImpGoods()) || isEmpty(gstr2.getImpGoods().get(0)) || isEmpty(gstr2.getImpGoods().get(0).getStin())) {
											 gstr2.getImpGoods().get(0).setStin(" ");
										 }
										
										
										if ((gstrimpg.getStin().trim()).equals((gstr2.getImpGoods().get(0).getStin().trim()))
											&& ((gstrimpg.getBoeNum().toString()).trim()).equals(((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim()))
											&& daysBetweenInvoiceDate <= allowedDays
											&& gstrimpg.getBoeVal().equals(gstr2.getImpGoods().get(0).getBoeVal())) {
											if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
												&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= allowedDiff)
												&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
												|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
												&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
												&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
												&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= allowedDiff)
												&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
												|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
												&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
														&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
														|| ((gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) == 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
														&& (((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) == 0)|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
														if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
														}else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
													}else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
													}
													savePGSTR2List.add((GSTR2) gstr2);
													purchaseRegister.setMatchingId(gstr2.getId().toString());
													savePPRList.add(purchaseRegister);
												} else {
													gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
													savePGSTR2List.add(gstr2);
													purchaseRegister.setMatchingId(gstr2.getId().toString());
													purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
													savePPRList.add((PurchaseRegister) purchaseRegister);
												}
											} else if (((gstrimpg.getBoeNum().toString()).trim()).equals((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim())
												&& (gstrimpg.getStin().trim()).equals((gstr2.getImpGoods().get(0).getStin()).trim())){
											if (daysBetweenInvoiceDate <= allowedDays) {
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
													&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
													&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
													|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
													&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
													&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
													&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
													&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))) {
													if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
														&& (((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) == 0)
														|| ((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) == 0)))
														&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax())
														&& (((purchaseRegister.getTotaltax() - gstr2.getTotaltax()) == 0) 
														|| ((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) == 0)))) {
														if (myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MATCHED_PREVIOUS_MONTH);
														} else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														}
													} else {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_ROUNDOFFMATCHED);
													}
													savePGSTR2List.add((GSTR2) gstr2);
													purchaseRegister.setMatchingId(gstr2.getId().toString());
													savePPRList.add(purchaseRegister);
												} else {
													gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
													savePGSTR2List.add(gstr2);
													purchaseRegister.setMatchingId(gstr2.getId().toString());
													purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
													savePPRList.add((PurchaseRegister) purchaseRegister);
												}
											}else {
												if ((isNotEmpty(purchaseRegister.getTotaltaxableamount()) && isNotEmpty(gstr2.getTotaltaxableamount())
														&& ((((purchaseRegister.getTotaltaxableamount()	- gstr2.getTotaltaxableamount()) <= allowedDiff)
														&& (purchaseRegister.getTotaltaxableamount() - gstr2.getTotaltaxableamount()) >= 0)
														|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= allowedDiff)
														&& (gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) >= 0))) 
														&& (isNotEmpty(purchaseRegister.getTotaltax()) && isNotEmpty(gstr2.getTotaltax()) && ((((purchaseRegister.getTotaltax()	- gstr2.getTotaltax()) <= allowedDiff)
														&& (purchaseRegister.getTotaltax() - gstr2.getTotaltax()) >= 0)	|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= allowedDiff)
														&& (gstr2.getTotaltax()	- purchaseRegister.getTotaltax()) >= 0)))) {
														gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														savePGSTR2List.add((GSTR2) gstr2);
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														savePPRList.add(purchaseRegister);
													}
											}
									} else if ((gstrimpg.getStin().trim()).equals((gstr2.getImpGoods().get(0).getStin().trim()))
												&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
										Double alldDiff = 0d;
										if (allowedDiff == 0d) {
											alldDiff = 1d;
										} else {
											alldDiff = allowedDiff;
										}
											if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
												&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
												&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
												|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
												&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
												&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
												&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
												&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
												|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
												&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
													if(ignoreInvoiceMatch) {
														List<Character> gstrinvd = convertStringToCharList(removeLeadingZeros((gstrimpg.getBoeNum().toString()).trim()));
														List<Character> purinvd = convertStringToCharList(removeLeadingZeros((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim()));
														purchaseRegister.setMatchingId(gstr2.getId().toString());
														if (purinvd.containsAll(gstrinvd)|| gstrinvd.containsAll(purinvd)) {
															if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
															}else {
																gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
																purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
															}
														}else {
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
														}
														savePRList.add((PurchaseRegister) purchaseRegister);
													}else if(gstr2InvoiceNo.equals(purchaseregisterInvoiceNo)) {
														if(isNotEmpty(purchaseRegister.getMatchingStatus()) && "Matched".equalsIgnoreCase(purchaseRegister.getMatchingStatus())) {
														}else {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_PROBABLEMATCHED);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
														}
														savePGSTR2List.add((GSTR2) gstr2);
														savePPRList.add(purchaseRegister);
													}else {
														if (isEmpty(gstr2.getMatchingStatus()) || gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
															gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePGSTR2List.add(gstr2);
															purchaseRegister.setMatchingId(gstr2.getId().toString());
															purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
															savePPRList.add((PurchaseRegister) purchaseRegister);
														}
													}
											}
										} else if (((gstrimpg.getBoeNum().toString()).trim()).equals((gstr2.getImpGoods().get(0).getBoeNum().toString()).trim())&& myFormat.format(gstrimpg.getBoeDt()).equals(myFormat.format(gstr2.getDateofinvoice()))) {
											Double alldDiff = 0d;
											if (allowedDiff == 0d) {
												alldDiff = 1d;
											} else {
												alldDiff = allowedDiff;
											}
											if ((isNotEmpty(purchaseRegister.getTotaltaxableamount())&& isNotEmpty(gstr2.getTotaltaxableamount())
												&& ((((purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) <= alldDiff)
												&& (purchaseRegister.getTotaltaxableamount()- gstr2.getTotaltaxableamount()) >= 0)
												|| (((gstr2.getTotaltaxableamount() - purchaseRegister.getTotaltaxableamount()) <= alldDiff)
												&& (gstr2.getTotaltaxableamount()- purchaseRegister.getTotaltaxableamount()) >= 0)))
												&& (isNotEmpty(purchaseRegister.getTotaltax())&& isNotEmpty(gstr2.getTotaltax())
												&& ((((purchaseRegister.getTotaltax()- gstr2.getTotaltax()) <= alldDiff)
												&& (purchaseRegister.getTotaltax()- gstr2.getTotaltax()) >= 0)
												|| (((gstr2.getTotaltax() - purchaseRegister.getTotaltax()) <= alldDiff)
												&& (gstr2.getTotaltax()- purchaseRegister.getTotaltax()) >= 0)))) {
												if (isEmpty(gstr2.getMatchingStatus()) || gstr2.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MISMATCHED)) {
													gstr2.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
													savePGSTR2List.add(gstr2);
													purchaseRegister.setMatchingId(gstr2.getId().toString());
													purchaseRegister.setMatchingStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
													savePPRList.add((PurchaseRegister) purchaseRegister);
													}
												}
											}
										}
									}
								}
							}
						}
				}
			}
		}
		purchaseRepository.save(savePPRList);
		gstr2Repository.save(savePGSTR2List);
		logger.debug(CLASSNAME + "updateMismatchStatus : End");
	}

	 	@Override
		@Transactional(readOnly = true)
		public GSTR6 getGSTR6AnnualInvoice(final String clientId, final String fp) {
			logger.debug(CLASSNAME + "getGSTR6AnnualInvoice : Begin");
			GSTR6 gstr6 = gstr6Repository.findByClientidAndFp(clientId, fp);
			return gstr6;
		}
	 	@Override
		public boolean checkHsnOrSac(String hsnVal) {
	 		Map<String, String> sacMap = configService.getSACMap();
	 		
			boolean isExist = false;
			if (sacMap.containsKey(hsnVal)) {
				isExist = true;
			} else if (sacMap.containsValue(hsnVal)) {
				isExist = true;
			}
			/*
			 * 
			 * String code = hsnVal; if (isNotEmpty(hsnVal)) { if (hsnVal.contains(" : ")) {
			 * String hsncode[] = hsnVal.split(" : "); code = hsncode[0]; } else { code =
			 * hsnVal; } } if (isNotEmpty(code)) { HSNConfig hsn =
			 * hsnRepository.findByCode(hsnVal); if(isNotEmpty(hsn)) { isExist = true; }else
			 * { //ServiceConfig service = serviceRepository.findByName(hsnVal); isExist =
			 * false; } }
			 */
			
			return isExist;
		}
		
		@Override
	 	public GSTR3B populateGSTR3BLiabilityAutoCalcDetails(Client client, int month, int year) {
	 		String strMonth = month < 10 ? "0" + month : month + "";
			String retPeriod = strMonth + year;
			gstr3BRepository.deleteByClientidAndRetPeriod(client.getId().toString(),retPeriod);
			GSTR3B	gstr3b = new GSTR3B();
			gstr3b.setRetPeriod(retPeriod);
			gstr3b.setGstin(client.getGstnnumber());
			gstr3b.setDateofinvoice(Calendar.getInstance().getTime());
			if(isEmpty(gstr3b.getInterSup())) {
				gstr3b.setInterSup(new GSTR3BInterSupplyDetails());
			}
			if(isEmpty(gstr3b.getSupDetails())) {
				gstr3b.setSupDetails(new GSTR3BSupplyDetails());
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupDet())) {
				gstr3b.getSupDetails().setOsupDet(new GSTR3BDetails());
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupDet().getTxval())) {
				gstr3b.getSupDetails().getOsupDet().setTxval(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupDet().getIamt())) {
				gstr3b.getSupDetails().getOsupDet().setIamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupDet().getCamt())) {
				gstr3b.getSupDetails().getOsupDet().setCamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupDet().getSamt())) {
				gstr3b.getSupDetails().getOsupDet().setSamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupDet().getCsamt())) {
				gstr3b.getSupDetails().getOsupDet().setCsamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupZero())) {
				gstr3b.getSupDetails().setOsupZero(new GSTR3BDetails());
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupZero().getTxval())) {
				gstr3b.getSupDetails().getOsupZero().setTxval(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupZero().getIamt())) {
				gstr3b.getSupDetails().getOsupZero().setIamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupZero().getCsamt())) {
				gstr3b.getSupDetails().getOsupZero().setCsamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupNilExmp())) {
				gstr3b.getSupDetails().setOsupNilExmp(new GSTR3BDetails());
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupNilExmp().getTxval())) {
				gstr3b.getSupDetails().getOsupNilExmp().setTxval(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupNongst())) {
				gstr3b.getSupDetails().setOsupNongst(new GSTR3BDetails());
			}
			if(isEmpty(gstr3b.getSupDetails().getOsupNongst().getTxval())) {
				gstr3b.getSupDetails().getOsupNongst().setTxval(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getIsupRev())) {
				gstr3b.getSupDetails().setIsupRev(new GSTR3BDetails());
			}
			if(isEmpty(gstr3b.getSupDetails().getIsupRev().getTxval())) {
				gstr3b.getSupDetails().getIsupRev().setTxval(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getIsupRev().getIamt())) {
				gstr3b.getSupDetails().getIsupRev().setIamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getIsupRev().getCamt())) {
				gstr3b.getSupDetails().getIsupRev().setCamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getIsupRev().getSamt())) {
				gstr3b.getSupDetails().getIsupRev().setSamt(0d);
			}
			if(isEmpty(gstr3b.getSupDetails().getIsupRev().getCsamt())) {
				gstr3b.getSupDetails().getIsupRev().setCsamt(0d);
			}
			if(isEmpty(gstr3b.getItcElg())) {
				gstr3b.setItcElg(new GSTR3BITCDetails());
			}
			if (isEmpty(gstr3b.getItcElg().getItcAvl()) || gstr3b.getItcElg().getItcAvl().size() < 5) {
				gstr3b.getItcElg().setItcAvl(Lists.newArrayList());
				GSTR3BDetails impg = new GSTR3BDetails();
				impg.setTy("IMPG");
				impg.setIamt(0d);
				impg.setCamt(0d);
				impg.setSamt(0d);
				impg.setCsamt(0d);
				gstr3b.getItcElg().getItcAvl().add(impg);
				GSTR3BDetails imps = new GSTR3BDetails();
				imps.setTy("IMPS");
				imps.setIamt(0d);
				imps.setCamt(0d);
				imps.setSamt(0d);
				imps.setCsamt(0d);
				gstr3b.getItcElg().getItcAvl().add(imps);
				GSTR3BDetails isrc = new GSTR3BDetails();
				isrc.setTy("ISRC");
				isrc.setIamt(0d);
				isrc.setCamt(0d);
				isrc.setSamt(0d);
				isrc.setCsamt(0d);
				gstr3b.getItcElg().getItcAvl().add(isrc);
				GSTR3BDetails isd = new GSTR3BDetails();
				isd.setTy("ISD");
				isd.setIamt(0d);
				isd.setCamt(0d);
				isd.setSamt(0d);
				isd.setCsamt(0d);
				gstr3b.getItcElg().getItcAvl().add(isd);
				GSTR3BDetails otheritc = new GSTR3BDetails();
				otheritc.setTy("OTH");
				otheritc.setIamt(0d);
				otheritc.setCamt(0d);
				otheritc.setSamt(0d);
				otheritc.setCsamt(0d);
				gstr3b.getItcElg().getItcAvl().add(otheritc);
			}
			if (isEmpty(gstr3b.getItcElg().getItcInelg()) || gstr3b.getItcElg().getItcInelg().size() < 2) {
				GSTR3BDetails itcInElgRUL = new GSTR3BDetails();
				itcInElgRUL.setTy("RUL");
				itcInElgRUL.setIamt(0d);
				itcInElgRUL.setCamt(0d);
				itcInElgRUL.setSamt(0d);
				itcInElgRUL.setCsamt(0d);
				gstr3b.getItcElg().getItcInelg().add(itcInElgRUL);
				GSTR3BDetails itcInElgOTH = new GSTR3BDetails();
				itcInElgOTH.setTy("OTH");
				itcInElgOTH.setIamt(0d);
				itcInElgOTH.setCamt(0d);
				itcInElgOTH.setSamt(0d);
				itcInElgOTH.setCsamt(0d);
				gstr3b.getItcElg().getItcInelg().add(itcInElgOTH);
				
			}
			if(isEmpty(gstr3b.getInwardSup().getIsupDetails())) {
				GSTR3BDetails gst = new GSTR3BDetails();
				gst.setTy("GST");
				gst.setInter(0d);
				gst.setIntra(0d);
				gstr3b.getInwardSup().getIsupDetails().add(gst);
				GSTR3BDetails nongst = new GSTR3BDetails();
				nongst.setTy("NONGST");
				nongst.setInter(0d);
				nongst.setIntra(0d);
				gstr3b.getInwardSup().getIsupDetails().add(nongst);
				
			}
			
			if (isEmpty(gstr3b.getItcElg().getItcRev()) || gstr3b.getItcElg().getItcRev().size() < 2) {
				GSTR3BDetails itcRevRUL = new GSTR3BDetails();
				itcRevRUL.setTy("RUL");
				itcRevRUL.setIamt(0d);
				itcRevRUL.setCamt(0d);
				itcRevRUL.setSamt(0d);
				itcRevRUL.setCsamt(0d);
				gstr3b.getItcElg().getItcRev().add(itcRevRUL);
				GSTR3BDetails itcRevOTH = new GSTR3BDetails();
				itcRevOTH.setTy("OTH");
				itcRevOTH.setIamt(0d);
				itcRevOTH.setCamt(0d);
				itcRevOTH.setSamt(0d);
				itcRevOTH.setCsamt(0d);
				gstr3b.getItcElg().getItcRev().add(itcRevOTH);
				
			}
			
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
					/*Response gstr3bresponse = iHubConsumerService.getGSTR3BLiablitiesAutoCalcDetails(client, client.getGstnnumber(),retPeriod);
					if (isEmpty(gstr3bresponse.getError()) && isNotEmpty(gstr3bresponse) && isNotEmpty(gstr3bresponse.getData())) {
						if(isNotEmpty(gstr3bresponse.getData().getR3bautopop())) {
							GSTR3BAutoPopulateDetails details = gstr3bresponse.getData().getR3bautopop();
							if(isNotEmpty(details.getR1fildt())) {
								gstr3b.setR1fildt(details.getR1fildt());
							}
							if(isNotEmpty(details.getR2bgendt())) {
								gstr3b.setR2bgendt(details.getR2bgendt());
							}
							if(isNotEmpty(details.getR3bgendt())) {
								gstr3b.setR3bgendt(details.getR3bgendt());
							}
							if(isNotEmpty(details.getLiabitc())) {
								if(isNotEmpty(details.getLiabitc().getSupplyDetails())) {
									if(isNotEmpty(details.getLiabitc().getSupplyDetails().getLiability31a())) {
										if(isNotEmpty(details.getLiabitc().getSupplyDetails().getLiability31a().getSubtotal())) {
											GSTR3BSubTotals totals = details.getLiabitc().getSupplyDetails().getLiability31a().getSubtotal();
											if(isNotEmpty(totals.getTxval())) {
												gstr3b.getSupDetails().getOsupDet().setTxval(totals.getTxval());
											}
											if(isNotEmpty(totals.getIamt())) {
												gstr3b.getSupDetails().getOsupDet().setIamt(totals.getIamt());
											}
											if(isNotEmpty(totals.getCamt())) {
												gstr3b.getSupDetails().getOsupDet().setCamt(totals.getCamt());
											}
											if(isNotEmpty(totals.getSamt())) {
												gstr3b.getSupDetails().getOsupDet().setSamt(totals.getSamt());
											}
											if(isNotEmpty(totals.getCsamt())) {
												gstr3b.getSupDetails().getOsupDet().setCsamt(totals.getCsamt());
											}
										}
										if(isNotEmpty(details.getLiabitc().getSupplyDetails().getLiability31b().getSubtotal())) {
											GSTR3BSubTotals totals = details.getLiabitc().getSupplyDetails().getLiability31b().getSubtotal();
											if(isNotEmpty(totals.getTxval())) {
												gstr3b.getSupDetails().getOsupZero().setTxval(totals.getTxval());
											}
											if(isNotEmpty(totals.getIamt())) {
												gstr3b.getSupDetails().getOsupZero().setIamt(totals.getIamt());
											}
											if(isNotEmpty(totals.getCamt())) {
												gstr3b.getSupDetails().getOsupZero().setCamt(totals.getCamt());
											}
											if(isNotEmpty(totals.getSamt())) {
												gstr3b.getSupDetails().getOsupZero().setSamt(totals.getSamt());
											}
											if(isNotEmpty(totals.getCsamt())) {
												gstr3b.getSupDetails().getOsupZero().setCsamt(totals.getCsamt());
											}
										}
										if(isNotEmpty(details.getLiabitc().getSupplyDetails().getLiability31c().getSubtotal())) {
											GSTR3BSubTotals totals = details.getLiabitc().getSupplyDetails().getLiability31c().getSubtotal();
											if(isNotEmpty(totals.getTxval())) {
												gstr3b.getSupDetails().getOsupNilExmp().setTxval(totals.getTxval());
											}
											if(isNotEmpty(totals.getIamt())) {
												gstr3b.getSupDetails().getOsupNilExmp().setIamt(totals.getIamt());
											}
											if(isNotEmpty(totals.getCamt())) {
												gstr3b.getSupDetails().getOsupNilExmp().setCamt(totals.getCamt());
											}
											if(isNotEmpty(totals.getSamt())) {
												gstr3b.getSupDetails().getOsupNilExmp().setSamt(totals.getSamt());
											}
											if(isNotEmpty(totals.getCsamt())) {
												gstr3b.getSupDetails().getOsupNilExmp().setCsamt(totals.getCsamt());
											}
											
										}
										if(isNotEmpty(details.getLiabitc().getSupplyDetails().getLiability31d().getSubtotal())) {
											GSTR3BSubTotals totals = details.getLiabitc().getSupplyDetails().getLiability31d().getSubtotal();
											if(isNotEmpty(totals.getTxval())) {
												gstr3b.getSupDetails().getIsupRev().setTxval(totals.getTxval());
											}
											if(isNotEmpty(totals.getIamt())) {
												gstr3b.getSupDetails().getIsupRev().setIamt(totals.getIamt());
											}
											if(isNotEmpty(totals.getCamt())) {
												gstr3b.getSupDetails().getIsupRev().setCamt(totals.getCamt());
											}
											if(isNotEmpty(totals.getSamt())) {
												gstr3b.getSupDetails().getIsupRev().setSamt(totals.getSamt());
											}
											if(isNotEmpty(totals.getCsamt())) {
												gstr3b.getSupDetails().getIsupRev().setCsamt(totals.getCsamt());
											}
											
										}
										if(isNotEmpty(details.getLiabitc().getSupplyDetails().getLiability31e().getSubtotal())) {
											GSTR3BSubTotals totals = details.getLiabitc().getSupplyDetails().getLiability31e().getSubtotal();
											if(isNotEmpty(totals.getTxval())) {
												gstr3b.getSupDetails().getOsupNongst().setTxval(totals.getTxval());
											}
											if(isNotEmpty(totals.getIamt())) {
												gstr3b.getSupDetails().getOsupNongst().setIamt(totals.getIamt());
											}
											if(isNotEmpty(totals.getCamt())) {
												gstr3b.getSupDetails().getOsupNongst().setCamt(totals.getCamt());
											}
											if(isNotEmpty(totals.getSamt())) {
												gstr3b.getSupDetails().getOsupNongst().setSamt(totals.getSamt());
											}
											if(isNotEmpty(totals.getCsamt())) {
												gstr3b.getSupDetails().getOsupNongst().setCsamt(totals.getCsamt());
											}
											
										}
										
									}
								}
								if(isNotEmpty(details.getLiabitc().getInterSupplyDetails())) {
									//GSTR3BInterSupplyDetails interSup=new GSTR3BInterSupplyDetails();
									if(isNotEmpty(details.getLiabitc().getInterSupplyDetails().getComp32())) {
										if(isNotEmpty(details.getLiabitc().getInterSupplyDetails().getComp32().getSubtotal())) {
											List<GSTR3BDetails> compDetails=Lists.newArrayList();
											List<GSTR3BSubTotals> totals = details.getLiabitc().getInterSupplyDetails().getComp32().getSubtotal();
											for(GSTR3BSubTotals subtotals : totals) {
												GSTR3BDetails composite32 = new GSTR3BDetails();
												GSTR3BDetails osupDetAmts = populatetotals(subtotals,composite32);
												compDetails.add(osupDetAmts);
											}
											gstr3b.getInterSup().setCompDetails(compDetails);
										}
									}
									if(isNotEmpty(details.getLiabitc().getInterSupplyDetails().getUnreg32())) {
										if(isNotEmpty(details.getLiabitc().getInterSupplyDetails().getUnreg32().getSubtotal())) {
											List<GSTR3BDetails> unregDetails=Lists.newArrayList();
											List<GSTR3BSubTotals> totals = details.getLiabitc().getInterSupplyDetails().getUnreg32().getSubtotal();
											for(GSTR3BSubTotals subtotals : totals) {
												GSTR3BDetails unreg32 = new GSTR3BDetails();
												GSTR3BDetails osupDetAmts = populatetotals(subtotals,unreg32);
												unregDetails.add(osupDetAmts);
											}
											gstr3b.getInterSup().setUnregDetails(unregDetails);
										}
								     }
									if(isNotEmpty(details.getLiabitc().getInterSupplyDetails().getUin32())) {
										if(isNotEmpty(details.getLiabitc().getInterSupplyDetails().getUin32().getSubtotal())) {
											List<GSTR3BDetails> uinDetails=Lists.newArrayList();
											List<GSTR3BSubTotals> totals = details.getLiabitc().getInterSupplyDetails().getUin32().getSubtotal();
											for(GSTR3BSubTotals subtotals : totals) {
												GSTR3BDetails uin32 = new GSTR3BDetails();
												GSTR3BDetails osupDetAmts = populatetotals(subtotals,uin32);
												uinDetails.add(osupDetAmts);
											}
											gstr3b.getInterSup().setUinDetails(uinDetails);
										}
								     }
							}
							if (isNotEmpty(details.getLiabitc().getElgitc())) {
								if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a1())) {
									if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a1().getDet())) {
										GSTR3BDet totals = details.getLiabitc().getElgitc().getItc4a1().getDet();
										if(isNotEmpty(totals.getItcavl())){
											if(isNotEmpty(totals.getItcavl().getTxval())) {
												gstr3b.getItcElg().getItcAvl().get(0).setTxval(totals.getItcavl().getTxval());
											}
											if(isNotEmpty(totals.getItcavl().getIgst())) {
												gstr3b.getItcElg().getItcAvl().get(0).setIamt(totals.getItcavl().getIgst());
											}
											if(isNotEmpty(totals.getItcavl().getCgst())) {
												gstr3b.getItcElg().getItcAvl().get(0).setCamt(totals.getItcavl().getCgst());
											}
											if(isNotEmpty(totals.getItcavl().getSgst())) {
												gstr3b.getItcElg().getItcAvl().get(0).setSamt(totals.getItcavl().getSgst());
											}
											if(isNotEmpty(totals.getItcavl().getCess())) {
												gstr3b.getItcElg().getItcAvl().get(0).setCsamt(totals.getItcavl().getCess());
											}
										}
									}
								}
								if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a3())) {
									if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a3().getDet())) {
										GSTR3BDet totals = details.getLiabitc().getElgitc().getItc4a3().getDet();
										if(isNotEmpty(totals.getItcavl())){
											if(isNotEmpty(totals.getItcavl().getTxval())) {
												gstr3b.getItcElg().getItcAvl().get(2).setTxval(totals.getItcavl().getTxval());
											}
											if(isNotEmpty(totals.getItcavl().getIgst())) {
												gstr3b.getItcElg().getItcAvl().get(2).setIamt(totals.getItcavl().getIgst());
											}
											if(isNotEmpty(totals.getItcavl().getCgst())) {
												gstr3b.getItcElg().getItcAvl().get(2).setCamt(totals.getItcavl().getCgst());
											}
											if(isNotEmpty(totals.getItcavl().getSgst())) {
												gstr3b.getItcElg().getItcAvl().get(2).setSamt(totals.getItcavl().getSgst());
											}
											if(isNotEmpty(totals.getItcavl().getCess())) {
												gstr3b.getItcElg().getItcAvl().get(2).setCsamt(totals.getItcavl().getCess());
											}
										}
									}
								}
								if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a4())) {
									if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a4().getDet())) {
										GSTR3BDet totals = details.getLiabitc().getElgitc().getItc4a4().getDet();
										if(isNotEmpty(totals.getItcavl())){
											if(isNotEmpty(totals.getItcavl().getTxval())) {
												gstr3b.getItcElg().getItcAvl().get(3).setTxval(totals.getItcavl().getTxval());
											}
											if(isNotEmpty(totals.getItcavl().getIgst())) {
												gstr3b.getItcElg().getItcAvl().get(3).setIamt(totals.getItcavl().getIgst());
											}
											if(isNotEmpty(totals.getItcavl().getCgst())) {
												gstr3b.getItcElg().getItcAvl().get(3).setCamt(totals.getItcavl().getCgst());
											}
											if(isNotEmpty(totals.getItcavl().getSgst())) {
												gstr3b.getItcElg().getItcAvl().get(3).setSamt(totals.getItcavl().getSgst());
											}
											if(isNotEmpty(totals.getItcavl().getCess())) {
												gstr3b.getItcElg().getItcAvl().get(3).setCsamt(totals.getItcavl().getCess());
											}
										}
									}
								}
								if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a5())) {
									if (isNotEmpty(details.getLiabitc().getElgitc().getItc4a5().getDet())) {
										GSTR3BDet totals = details.getLiabitc().getElgitc().getItc4a4().getDet();
										if(isNotEmpty(totals.getItcavl())){
											if(isNotEmpty(totals.getItcavl().getTxval())) {
												gstr3b.getItcElg().getItcAvl().get(4).setTxval(totals.getItcavl().getTxval());
											}
											if(isNotEmpty(totals.getItcavl().getIgst())) {
												gstr3b.getItcElg().getItcAvl().get(4).setIamt(totals.getItcavl().getIgst());
											}
											if(isNotEmpty(totals.getItcavl().getCgst())) {
												gstr3b.getItcElg().getItcAvl().get(4).setCamt(totals.getItcavl().getCgst());
											}
											if(isNotEmpty(totals.getItcavl().getSgst())) {
												gstr3b.getItcElg().getItcAvl().get(4).setSamt(totals.getItcavl().getSgst());
											}
											if(isNotEmpty(totals.getItcavl().getCess())) {
												gstr3b.getItcElg().getItcAvl().get(4).setCsamt(totals.getItcavl().getCess());
											}
										}
									}
								}
								if (isNotEmpty(details.getLiabitc().getElgitc().getItc4b2())) {
									if (isNotEmpty(details.getLiabitc().getElgitc().getItc4b2().getDet())) {
										GSTR3BDet totals = details.getLiabitc().getElgitc().getItc4b2().getDet();
										if(isNotEmpty(totals.getItcavl())){
											if(isNotEmpty(totals.getItcavl().getTxval())) {
												gstr3b.getItcElg().getItcRev().get(1).setTxval(totals.getItcavl().getTxval());
											}
											if(isNotEmpty(totals.getItcavl().getIgst())) {
												gstr3b.getItcElg().getItcRev().get(1).setIamt(totals.getItcavl().getIgst());
											}
											if(isNotEmpty(totals.getItcavl().getCgst())) {
												gstr3b.getItcElg().getItcRev().get(1).setCamt(totals.getItcavl().getCgst());
											}
											if(isNotEmpty(totals.getItcavl().getSgst())) {
												gstr3b.getItcElg().getItcRev().get(1).setSamt(totals.getItcavl().getSgst());
											}
											if(isNotEmpty(totals.getItcavl().getCess())) {
												gstr3b.getItcElg().getItcRev().get(1).setCsamt(totals.getItcavl().getCess());
											}
										}
									}
								}
						 }
								
						}
					}
				}else {*/
					GSTR1AutoLiabilityResponse autogstr1Response = iHubConsumerService.getGSTR1AutoLiabilityDetails(client, client.getGstnnumber(),retPeriod);
					if (isNotEmpty(autogstr1Response) && isEmpty(autogstr1Response.getError()) && isNotEmpty(autogstr1Response.getData())) {
						GSTR3BLiabilities gstr3bnewliab = autogstr1Response.getData();
						if(isNotEmpty(gstr3bnewliab.getSupplyDetails())) {
							if(isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31a()) && isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31a().getSubtotal())) {
								GSTR3BSubTotals totals = gstr3bnewliab.getSupplyDetails().getLiability31a().getSubtotal();
								if(isNotEmpty(totals.getTxval())) {
									gstr3b.getSupDetails().getOsupDet().setTxval(totals.getTxval());
								}
								if(isNotEmpty(totals.getIamt())) {
									gstr3b.getSupDetails().getOsupDet().setIamt(totals.getIamt());
								}
								if(isNotEmpty(totals.getCamt())) {
									gstr3b.getSupDetails().getOsupDet().setCamt(totals.getCamt());
								}
								if(isNotEmpty(totals.getSamt())) {
									gstr3b.getSupDetails().getOsupDet().setSamt(totals.getSamt());
								}
								if(isNotEmpty(totals.getCsamt())) {
									gstr3b.getSupDetails().getOsupDet().setCsamt(totals.getCsamt());
								}
							}
							if(isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31b()) && isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31b().getSubtotal())) {
								GSTR3BSubTotals totals = gstr3bnewliab.getSupplyDetails().getLiability31b().getSubtotal();
								if(isNotEmpty(totals.getTxval())) {
									gstr3b.getSupDetails().getOsupZero().setTxval(totals.getTxval());
								}
								if(isNotEmpty(totals.getIamt())) {
									gstr3b.getSupDetails().getOsupZero().setIamt(totals.getIamt());
								}
								if(isNotEmpty(totals.getCamt())) {
									gstr3b.getSupDetails().getOsupZero().setCamt(totals.getCamt());
								}
								if(isNotEmpty(totals.getSamt())) {
									gstr3b.getSupDetails().getOsupZero().setSamt(totals.getSamt());
								}
								if(isNotEmpty(totals.getCsamt())) {
									gstr3b.getSupDetails().getOsupZero().setCsamt(totals.getCsamt());
								}
							}
							if(isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31c()) && isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31c().getSubtotal())) {
								GSTR3BSubTotals totals = gstr3bnewliab.getSupplyDetails().getLiability31c().getSubtotal();
								if(isNotEmpty(totals.getTxval())) {
									gstr3b.getSupDetails().getOsupNilExmp().setTxval(totals.getTxval());
								}
								if(isNotEmpty(totals.getIamt())) {
									gstr3b.getSupDetails().getOsupNilExmp().setIamt(totals.getIamt());
								}
								if(isNotEmpty(totals.getCamt())) {
									gstr3b.getSupDetails().getOsupNilExmp().setCamt(totals.getCamt());
								}
								if(isNotEmpty(totals.getSamt())) {
									gstr3b.getSupDetails().getOsupNilExmp().setSamt(totals.getSamt());
								}
								if(isNotEmpty(totals.getCsamt())) {
									gstr3b.getSupDetails().getOsupNilExmp().setCsamt(totals.getCsamt());
								}
							}
							if(isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31e()) && isNotEmpty(gstr3bnewliab.getSupplyDetails().getLiability31e().getSubtotal())) {
								GSTR3BSubTotals totals = gstr3bnewliab.getSupplyDetails().getLiability31e().getSubtotal();
								if(isNotEmpty(totals.getTxval())) {
									gstr3b.getSupDetails().getOsupNongst().setTxval(totals.getTxval());
								}
								if(isNotEmpty(totals.getIamt())) {
									gstr3b.getSupDetails().getOsupNongst().setIamt(totals.getIamt());
								}
								if(isNotEmpty(totals.getCamt())) {
									gstr3b.getSupDetails().getOsupNongst().setCamt(totals.getCamt());
								}
								if(isNotEmpty(totals.getSamt())) {
									gstr3b.getSupDetails().getOsupNongst().setSamt(totals.getSamt());
								}
								if(isNotEmpty(totals.getCsamt())) {
									gstr3b.getSupDetails().getOsupNongst().setCsamt(totals.getCsamt());
								}
								
							}
						}
						if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails())) {
							//GSTR3BInterSupplyDetails interSup=new GSTR3BInterSupplyDetails();
							if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails().getComp32())) {
								if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails().getComp32().getSubtotal())) {
									List<GSTR3BDetails> compDetails=Lists.newArrayList();
									List<GSTR3BSubTotals> totals = gstr3bnewliab.getInterSupplyDetails().getComp32().getSubtotal();
									for(GSTR3BSubTotals subtotals : totals) {
										GSTR3BDetails composite32 = new GSTR3BDetails();
										if(isNotEmpty(subtotals) && isNotEmpty(subtotals.getPos())){
											GSTR3BDetails osupDetAmts = populatetotals(subtotals,composite32);
											compDetails.add(osupDetAmts);
										}
									}
									gstr3b.getInterSup().setCompDetails(compDetails);
								}
							}
							if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails().getUnreg32())) {
								if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails().getUnreg32().getSubtotal())) {
									List<GSTR3BDetails> unregDetails=Lists.newArrayList();
									List<GSTR3BSubTotals> totals = gstr3bnewliab.getInterSupplyDetails().getUnreg32().getSubtotal();
									for(GSTR3BSubTotals subtotals : totals) {
										GSTR3BDetails unreg32 = new GSTR3BDetails();
										if(isNotEmpty(subtotals) && isNotEmpty(subtotals.getPos())){
											GSTR3BDetails osupDetAmts = populatetotals(subtotals,unreg32);
											unregDetails.add(osupDetAmts);
										}
									}
									gstr3b.getInterSup().setUnregDetails(unregDetails);
								}
						     }
							if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails().getUin32())) {
								if(isNotEmpty(gstr3bnewliab.getInterSupplyDetails().getUin32().getSubtotal())) {
									List<GSTR3BDetails> uinDetails=Lists.newArrayList();
									List<GSTR3BSubTotals> totals = gstr3bnewliab.getInterSupplyDetails().getUin32().getSubtotal();
									for(GSTR3BSubTotals subtotals : totals) {
										GSTR3BDetails uin32 = new GSTR3BDetails();
										if(isNotEmpty(subtotals) && isNotEmpty(subtotals.getPos())){
											GSTR3BDetails osupDetAmts = populatetotals(subtotals,uin32);
											uinDetails.add(osupDetAmts);
										}
									}
									gstr3b.getInterSup().setUinDetails(uinDetails);
								}
						     }
						}
					}
				//}
					Double itcelgaiamt =0d;
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(0)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(0).getIamt())) {
						itcelgaiamt += gstr3b.getItcElg().getItcAvl().get(0).getIamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2).getIamt())) {
						itcelgaiamt += gstr3b.getItcElg().getItcAvl().get(2).getIamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3).getIamt())) {
						itcelgaiamt += gstr3b.getItcElg().getItcAvl().get(3).getIamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4).getIamt())) {
						itcelgaiamt += gstr3b.getItcElg().getItcAvl().get(4).getIamt();
					}
					
					
					Double itcelgacsamt =0d;
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(0)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(0).getCsamt())) {
						itcelgacsamt += gstr3b.getItcElg().getItcAvl().get(0).getCsamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2).getCsamt())) {
						itcelgacsamt += gstr3b.getItcElg().getItcAvl().get(2).getCsamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3).getCsamt())) {
						itcelgacsamt += gstr3b.getItcElg().getItcAvl().get(3).getCsamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4).getCsamt())) {
						itcelgacsamt += gstr3b.getItcElg().getItcAvl().get(4).getCsamt();
					}
					
					Double itcelgacamt =0d;
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2).getCamt())) {
						itcelgacamt += gstr3b.getItcElg().getItcAvl().get(2).getCamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3).getCamt())) {
						itcelgacamt += gstr3b.getItcElg().getItcAvl().get(3).getCamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4).getCamt())) {
						itcelgacamt += gstr3b.getItcElg().getItcAvl().get(4).getCamt();
					}
					
					Double itcelgasamt =0d;
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(2).getSamt())) {
						itcelgasamt += gstr3b.getItcElg().getItcAvl().get(2).getSamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(3).getSamt())) {
						itcelgasamt += gstr3b.getItcElg().getItcAvl().get(3).getSamt();
					}
					if(isNotEmpty(gstr3b) && isNotEmpty(gstr3b.getItcElg()) && isNotEmpty(gstr3b.getItcElg().getItcAvl()) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4)) && isNotEmpty(gstr3b.getItcElg().getItcAvl().get(4).getSamt())) {
						itcelgasamt += gstr3b.getItcElg().getItcAvl().get(4).getSamt();
					}
					
					Double totitcreviamt = 0d;
					Double totitcrevcamt = 0d;
					Double totitcrevsamt = 0d;
					Double totitcrevcsamt = 0d;
					if(isNotEmpty(gstr3b)  && isNotEmpty(gstr3b.getItcElg())  && isNotEmpty(gstr3b.getItcElg().getItcRev()) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1)) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1).getIamt())) {
						totitcreviamt = gstr3b.getItcElg().getItcRev().get(1).getIamt();
					}
					
					if(isNotEmpty(gstr3b)  && isNotEmpty(gstr3b.getItcElg())  && isNotEmpty(gstr3b.getItcElg().getItcRev()) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1)) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1).getCamt())) {
						totitcrevcamt = gstr3b.getItcElg().getItcRev().get(1).getCamt();
					}
					
					if(isNotEmpty(gstr3b)  && isNotEmpty(gstr3b.getItcElg())  && isNotEmpty(gstr3b.getItcElg().getItcRev()) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1)) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1).getSamt())) {
						totitcrevsamt = gstr3b.getItcElg().getItcRev().get(1).getSamt();
					}
					
					if(isNotEmpty(gstr3b)  && isNotEmpty(gstr3b.getItcElg())  && isNotEmpty(gstr3b.getItcElg().getItcRev()) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1)) && isNotEmpty(gstr3b.getItcElg().getItcRev().get(1).getCsamt())) {
						totitcrevcsamt = gstr3b.getItcElg().getItcRev().get(1).getCsamt();
					}
					
					gstr3b.getItcElg().getItcNet().setIamt(itcelgaiamt - totitcreviamt);
					gstr3b.getItcElg().getItcNet().setCamt(itcelgacamt - totitcrevcamt);
					gstr3b.getItcElg().getItcNet().setSamt(itcelgasamt - totitcrevsamt);
					gstr3b.getItcElg().getItcNet().setCsamt(itcelgacsamt - totitcrevcsamt);
	 	}
			return gstr3b;
	 	}

		private GSTR3BDetails populatetotals(GSTR3BSubTotals totals, GSTR3BDetails Amts) {
			if(isNotEmpty(totals)) {
				if(isNotEmpty(totals.getPos())) {
					Amts.setPos(totals.getPos());
				}
				if(isNotEmpty(totals.getTxval())) {
					Amts.setTxval(totals.getTxval());
				}
				if(isNotEmpty(totals.getIamt())) {
					Amts.setIamt(totals.getIamt());
				}
				if(isNotEmpty(totals.getCamt())) {
					Amts.setCamt(totals.getCamt());
				}
				if(isNotEmpty(totals.getSamt())) {
					Amts.setSamt(totals.getSamt());
				}
				if(isNotEmpty(totals.getCsamt())) {
					Amts.setCsamt(totals.getCsamt());
				}
			}
			return Amts;
			
		}
		
		public void populateNewHSNList(List<HSNData> hsnDataList, InvoiceParent invoiceParent, Map<String, String> hsnMap,
				Map<String, String> sacMap, List<UQCConfig> uqcList, final String returnType) {
			if (isNotEmpty(invoiceParent.getItems())) {
				for (Item item : invoiceParent.getItems()) {
					String description = null;
					String uqc = "OTH";
					
					String code = item.getHsn();
					if (isNotEmpty(code)) {
						if(code.contains(" : ")) {
							String hsncode[]= code.split(" : ");
							code = hsncode[0];
							description = hsncode[1];
						} else {
							if (hsnMap.containsKey(code)) {
								String hsndet = hsnMap.get(code);
								if(hsndet.contains(" : ")) {
									String hsncode[]= hsndet.split(" : ");
									description = hsncode[1];
								}else {
									description = hsndet;
								}
							} else if (hsnMap.containsValue(code)) {
								for (String key : hsnMap.keySet()) {
									if (hsnMap.get(key).equals(code)) {
										code = key;
										String hsndet = hsnMap.get(key);
										if(hsndet.contains(" : ")) {
											String hsncode[]= hsndet.split(" : ");
											description = hsncode[1];
										}else {
											description = hsndet;
										}
										break;
									}
								}
							} else if (sacMap.containsKey(code)) {
								String sacdet = sacMap.get(code);
								if(sacdet.contains(" : ")) {
									String saccode[]= sacdet.split(" : ");
									description = saccode[1];
								}else {
									description = sacdet;
								}
							} else if (sacMap.containsValue(code)) {
								for (String key : sacMap.keySet()) {
									if (sacMap.get(key).equals(code)) {
										code = key;
										String sacdet = sacMap.get(key);
										if(sacdet.contains(" : ")) {
											String saccode[]= sacdet.split(" : ");
											description = saccode[1];
										}else {
											description = sacdet;
										}
										break;
									}
								}
							}
							if (isEmpty(description)) {
								for (String key : hsnMap.keySet()) {
									if (hsnMap.get(key).endsWith(" : " + code)) {
										code = key;
										String hsndet = hsnMap.get(key);
										if(hsndet.contains(" : ")) {
											String hsncode[]= hsndet.split(" : ");
											description = hsncode[1];
										}else {
											description = hsndet;
										}
										break;
									}
								}
							}
							if (isEmpty(description)) {
								for (String key : sacMap.keySet()) {
									if (sacMap.get(key).endsWith(" : " + code)) {
										code = key;
										String sacdet = sacMap.get(key);
										if(sacdet.contains(" : ")) {
											String saccode[]= sacdet.split(" : ");
											description = saccode[1];
										}else {
											description = sacdet;
										}
										break;
									}
								}
							}
						}
					}
					if (isNotEmpty(description)) {
						if (description.length() > 30) {
							description = description.substring(0, 27) + "..";
						}
					}
					Double rateoftax = 0d;
					if(isEmpty(item.getRate())) {
						if(isNotEmpty(item.getIgstrate())) {
							rateoftax = item.getIgstrate();
						}else if(isNotEmpty(item.getSgstrate()) && isNotEmpty(item.getCgstrate())) {
							rateoftax = item.getSgstrate() + item.getCgstrate();
						}else {
							rateoftax = 0d;
						}
					}else {
						if(item.getRate() < 0d) {
							rateoftax = 0d;
						}else {
							rateoftax = item.getRate();
						}
						
					}
					
					if(!checkHsnOrSac(code)) {
						if (isNotEmpty(item.getUqc())) {
							boolean uqcPresent = false;
							for (UQCConfig uqcObj : uqcList) {
								if (uqcObj.getName().equalsIgnoreCase(item.getUqc().trim())) {
									uqc = uqcObj.getCode();
									uqcPresent = true;
									break;
								}
							}
							if (!uqcPresent) {
								uqc = item.getUqc().toUpperCase();
							}
						} 
					}else {
						uqc = "NA";
					}
					
					
					boolean present = false;
					if (!hsnDataList.isEmpty()) {
						for (HSNData hsnData : hsnDataList) {
							if (hsnData.getHsnSc().equals(code) && hsnData.getRt().equals(rateoftax) && hsnData.getUqc().equals(uqc)) {
								if (isEmpty(invoiceParent.getInvtype())
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2B)
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2C)
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2CL)
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.ATPAID)
										|| invoiceParent.getInvtype().equals(MasterGSTConstants.NIL)) {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(hsnData.getQty() + item.getQuantity());
									}
									//if (isNotEmpty(item.getTotal())) {
										hsnData.setVal(0d);
									//}
									if (isNotEmpty(item.getTaxablevalue())) {
										hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
									}
									if (isNotEmpty(item.getIgstamount())) {
										hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
									}
									if (isNotEmpty(item.getCgstamount())) {
										hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
									}
									if (isNotEmpty(item.getSgstamount())) {
										hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
									}
									if (isNotEmpty(item.getCessamount())) {
										hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
									}
								} else {
									if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnr())) {
										if(isNotEmpty(((GSTR1)invoiceParent).getCdnr().get(0).getNt()) 
												&& isNotEmpty(((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty())
												&& ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty().equals("C")) {
											hsnData.setVal(0d);
											if (isNotEmpty(item.getTaxablevalue())) {
												hsnData.setTxval(hsnData.getTxval() - item.getTaxablevalue());
											}
											if (isNotEmpty(item.getIgstamount())) {
												hsnData.setIamt(hsnData.getIamt() - item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												hsnData.setCamt(hsnData.getCamt() - item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												hsnData.setSamt(hsnData.getSamt() - item.getSgstamount());
											}
											if (isNotEmpty(item.getCessamount())) {
												hsnData.setCsamt(hsnData.getCsamt() - item.getCessamount());
											}
										} else {
											if (isNotEmpty(item.getQuantity())) {
												hsnData.setQty(hsnData.getQty() + item.getQuantity());
											}
											hsnData.setVal(0d);
											if (isNotEmpty(item.getTaxablevalue())) {
												hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
											}
											if (isNotEmpty(item.getIgstamount())) {
												hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
											}
											if (isNotEmpty(item.getCessamount())) {
												hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
											}
										}
									}else if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnur())){
										if(isNotEmpty(((GSTR1)invoiceParent).getCdnur()) 
												&& isNotEmpty(((GSTR1)invoiceParent).getCdnur().get(0).getNtty()) 
												&& ((GSTR1)invoiceParent).getCdnur().get(0).getNtty().equals("C")) {
											hsnData.setVal(0d);
											if (isNotEmpty(item.getTaxablevalue())) {
												hsnData.setTxval(hsnData.getTxval() - item.getTaxablevalue());
											}
											if (isNotEmpty(item.getIgstamount())) {
												hsnData.setIamt(hsnData.getIamt() - item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												hsnData.setCamt(hsnData.getCamt() - item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												hsnData.setSamt(hsnData.getSamt() - item.getSgstamount());
											}
											if (isNotEmpty(item.getCessamount())) {
												hsnData.setCsamt(hsnData.getCsamt() - item.getCessamount());
											}
										} else {
											if (isNotEmpty(item.getQuantity())) {
												hsnData.setQty(hsnData.getQty() + item.getQuantity());
											}
											hsnData.setVal(0d);
											if (isNotEmpty(item.getTaxablevalue())) {
												hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
											}
											if (isNotEmpty(item.getIgstamount())) {
												hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
											}
											if (isNotEmpty(item.getCessamount())) {
												hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
											}
										}
									} else {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(hsnData.getQty() + item.getQuantity());
										}
										hsnData.setVal(0d);
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(hsnData.getTxval() + item.getTaxablevalue());
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(hsnData.getIamt() + item.getIgstamount());
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(hsnData.getCamt() + item.getCgstamount());
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(hsnData.getSamt() + item.getSgstamount());
										}
										if (isNotEmpty(item.getCessamount())) {
											hsnData.setCsamt(hsnData.getCsamt() + item.getCessamount());
										}
									}
								}
								if(uqc.equalsIgnoreCase("NA")) {
									hsnData.setUqc("NA");
									hsnData.setQty(0d);
								}else {
									hsnData.setUqc(uqc);
								}
								present = true;
								break;
							}
						}
					}
					if (!present) {
						if (isNotEmpty(code)) {
							HSNData hsnData = new HSNData();
							if(code.contains(" : ")){
								String hsncode[]= code.split(" : ");
								String desc = null;
								if (hsncode[1].length() > 30) {
									desc = hsncode[1].substring(0, 27) + "..";
								}
								hsnData.setHsnSc(hsncode[0]);
								hsnData.setDesc(desc);
							}else{
								hsnData.setHsnSc(code);
								if (isNotEmpty(description)) {
									hsnData.setDesc(description);
								}
							}
							hsnData.setNum(hsnDataList.size() + 1);
							if(isEmpty(item.getRate())) {
								if(isNotEmpty(item.getIgstrate())) {
									hsnData.setRt(item.getIgstrate());
								}else if(isNotEmpty(item.getSgstrate()) && isNotEmpty(item.getCgstrate())) {
									hsnData.setRt(item.getSgstrate() + item.getCgstrate());
								}else {
									hsnData.setRt(0d);
								}
							}else {
								if(item.getRate() < 0d) {
									hsnData.setRt(0d);
								}else {
									hsnData.setRt(item.getRate());
								}
								
							}
							if (isEmpty(invoiceParent.getInvtype())
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2B)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2C)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.B2CL)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.ATPAID)
									|| invoiceParent.getInvtype().equals(MasterGSTConstants.NIL)) {
								if (isNotEmpty(item.getQuantity())) {
									hsnData.setQty(item.getQuantity());
								} else {
									hsnData.setQty(0d);
								}
								hsnData.setVal(0d);
								if (isNotEmpty(item.getTaxablevalue())) {
									hsnData.setTxval(item.getTaxablevalue());
								} else {
									hsnData.setTxval(0d);
								}
								if (isNotEmpty(item.getIgstamount())) {
									hsnData.setIamt(item.getIgstamount());
								} else {
									hsnData.setIamt(0d);
								}
								if (isNotEmpty(item.getCgstamount())) {
									hsnData.setCamt(item.getCgstamount());
								} else {
									hsnData.setCamt(0d);
								}
								if (isNotEmpty(item.getSgstamount())) {
									hsnData.setSamt(item.getSgstamount());
								} else {
									hsnData.setSamt(0d);
								}
								if (isNotEmpty(item.getCessamount())) {
									hsnData.setCsamt(item.getCessamount());
								} else {
									hsnData.setCsamt(0d);
								}
							} else {
								if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnr())) {
									if(isNotEmpty(((GSTR1)invoiceParent).getCdnr().get(0).getNt()) 
											&& isNotEmpty(((GSTR1)invoiceParent).getCdnr().get(0).getNt().get(0).getNtty()) 
											&& ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty().equals("C")) {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(item.getQuantity());
										} else {
											hsnData.setQty(0d);
										}
										hsnData.setVal(0d);
										if (isNotEmpty(item.getTaxablevalue()) && item.getTaxablevalue() > 0d) {
											hsnData.setTxval(item.getTaxablevalue()*-1);
										} else {
											hsnData.setTxval(0d);
										}
										if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0d) {
											hsnData.setIamt(item.getIgstamount()*-1);
										} else {
											hsnData.setIamt(0d);
										}
										if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() > 0d) {
											hsnData.setCamt(item.getCgstamount()*-1);
										} else {
											hsnData.setCamt(0d);
										}
										if (isNotEmpty(item.getSgstamount()) && item.getSgstamount() > 0d) {
											hsnData.setSamt(item.getSgstamount()*-1);
										} else {
											hsnData.setSamt(0d);
										}
										if (isNotEmpty(item.getCessamount()) && item.getCessamount() > 0d) {
												hsnData.setCsamt(item.getCessamount()*-1);
										} else {
											hsnData.setCsamt(0d);
										}
									} else {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(item.getQuantity());
										} else {
											hsnData.setQty(0d);
										}
										hsnData.setVal(0d);
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(item.getTaxablevalue());
										} else {
											hsnData.setTxval(0d);
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(item.getIgstamount());
										} else {
											hsnData.setIamt(0d);
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(item.getCgstamount());
										} else {
											hsnData.setCamt(0d);
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(item.getSgstamount());
										} else {
											hsnData.setSamt(0d);
										}
										if (isNotEmpty(item.getCessamount())) {
											hsnData.setCsamt(item.getCessamount());
										} else {
											hsnData.setCsamt(0d);
										}
									}
								}else if(returnType.equals(GSTR1) && isNotEmpty(((GSTR1)invoiceParent).getCdnur())){
									if(isNotEmpty(((GSTR1)invoiceParent).getCdnur()) 
											&& isNotEmpty(((GSTR1)invoiceParent).getCdnur().get(0).getNtty()) 
											&& ((GSTR1)invoiceParent).getCdnur().get(0).getNtty().equals("C")) {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(item.getQuantity());
										} else {
											hsnData.setQty(0d);
										}
										hsnData.setVal(0d);
										if (isNotEmpty(item.getTaxablevalue()) && item.getTaxablevalue() > 0d) {
											hsnData.setTxval(item.getTaxablevalue()*-1);
										} else {
											hsnData.setTxval(0d);
										}
										if (isNotEmpty(item.getIgstamount()) && item.getIgstamount() > 0d) {
											hsnData.setIamt(item.getIgstamount()*-1);
										} else {
											hsnData.setIamt(0d);
										}
										if (isNotEmpty(item.getCgstamount()) && item.getCgstamount() > 0d) {
											hsnData.setCamt(item.getCgstamount()*-1);
										} else {
											hsnData.setCamt(0d);
										}
										if (isNotEmpty(item.getSgstamount()) && item.getSgstamount() > 0d) {
											hsnData.setSamt(item.getSgstamount()*-1);
										} else {
											hsnData.setSamt(0d);
										}
										if (isNotEmpty(item.getCessamount()) && item.getCessamount() > 0d) {
											hsnData.setCsamt(item.getCessamount()*-1);
										} else {
											hsnData.setCsamt(0d);
										}
									} else {
										if (isNotEmpty(item.getQuantity())) {
											hsnData.setQty(item.getQuantity());
										} else {
											hsnData.setQty(0d);
										}
										hsnData.setVal(0d);
										if (isNotEmpty(item.getTaxablevalue())) {
											hsnData.setTxval(item.getTaxablevalue());
										} else {
											hsnData.setTxval(0d);
										}
										if (isNotEmpty(item.getIgstamount())) {
											hsnData.setIamt(item.getIgstamount());
										} else {
											hsnData.setIamt(0d);
										}
										if (isNotEmpty(item.getCgstamount())) {
											hsnData.setCamt(item.getCgstamount());
										} else {
											hsnData.setCamt(0d);
										}
										if (isNotEmpty(item.getSgstamount())) {
											hsnData.setSamt(item.getSgstamount());
										} else {
											hsnData.setSamt(0d);
										}
										if (isNotEmpty(item.getCessamount())) {
											hsnData.setCsamt(item.getCessamount());
										} else {
											hsnData.setCsamt(0d);
										}
									}
								} else {
									if (isNotEmpty(item.getQuantity())) {
										hsnData.setQty(item.getQuantity());
									} else {
										hsnData.setQty(0d);
									}
									hsnData.setVal(0d);
									if (isNotEmpty(item.getTaxablevalue())) {
										hsnData.setTxval(item.getTaxablevalue());
									} else {
										hsnData.setTxval(0d);
									}
									if (isNotEmpty(item.getIgstamount())) {
										hsnData.setIamt(item.getIgstamount());
									} else {
										hsnData.setIamt(0d);
									}
									if (isNotEmpty(item.getCgstamount())) {
										hsnData.setCamt(item.getCgstamount());
									} else {
										hsnData.setCamt(0d);
									}
									if (isNotEmpty(item.getSgstamount())) {
										hsnData.setSamt(item.getSgstamount());
									} else {
										hsnData.setSamt(0d);
									}
									if (isNotEmpty(item.getCessamount())) {
										hsnData.setCsamt(item.getCessamount());
									} else {
										hsnData.setCsamt(0d);
									}
								}
							}
							if(uqc.equalsIgnoreCase("NA")) {
								hsnData.setUqc("NA");
								hsnData.setQty(0d);
							}else {
								hsnData.setUqc(uqc);
							}
							hsnDataList.add(hsnData);
						}
					}
				}
			}
		}	
		
		
		public Map<String,List<String>> getCustomFieldsReports(String clientid, String returnType,Date stDate,Date endDate) {
			CustomFields  custFields = customFieldsRepository.findByClientid(clientid);
			Map<String,List<String>> cf = Maps.newHashMap();
			
			List<String> customFields = Lists.newArrayList();
			if(NullUtil.isNotEmpty(custFields)) {
				if(returnType.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
					cf = Maps.newHashMap();
					if(NullUtil.isNotEmpty(custFields.getSales())) {
						int i=1;
						for(CustomData cdata  : custFields.getSales()) {
							customFields = Lists.newArrayList();
							if(cdata.getDisplayInFilters().equals(true)) {
								customFields = gstr1Dao.getReportsCustomFields(clientid, stDate, endDate, "customFieldtext"+i);
								cf.put("customField"+i, customFields);
							}
							i++;
						}
					}
			   }else if(returnType.equalsIgnoreCase(PURCHASE_REGISTER)) {
				   cf = Maps.newHashMap();
				   if(NullUtil.isNotEmpty(custFields.getPurchase())) {
					   int i=1;
					  for(CustomData cdata  : custFields.getPurchase()) {
						  customFields = Lists.newArrayList();
							if(cdata.getDisplayInFilters().equals(true)) {
								customFields = purchageRegisterDao.getReportsCustomFields(clientid, stDate, endDate, "customFieldtext"+i);
								cf.put("customField"+i, customFields);
							}
							i++;
						}
				   }
			   }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
				   cf = Maps.newHashMap();
				   if(NullUtil.isNotEmpty(custFields.getEwaybill())) {
					   int i=1;
					  for(CustomData cdata  : custFields.getEwaybill()) {
						  customFields = Lists.newArrayList();
							if(cdata.getDisplayInFilters().equals(true)) {
								customFields = ewayBillDao.getReportsCustomFields(clientid, stDate, endDate, "customFieldtext"+i);
								cf.put("customField"+i, customFields);
							}
							i++;
						}
				   }
			    }else if(returnType.equalsIgnoreCase(MasterGSTConstants.EINVOICE)) {
			    	cf = Maps.newHashMap();
			    	if(NullUtil.isNotEmpty(custFields.getEinvoice())) {
			    		int i=1;
						  for(CustomData cdata  : custFields.getEinvoice()) {
							  customFields = Lists.newArrayList();
								if(cdata.getDisplayInFilters().equals(true)) {
									customFields = gstr1Dao.getReportsEinvCustomFields(clientid, stDate, endDate, "customFieldtext"+i);
									cf.put("customField"+i, customFields);
								}
								i++;
							}
					   }
			    }
			}
			return cf;
		}
		
		@Override
	 	public Map<String, Object> getSuppliersBillToGstns(String clientId) {
			Map<String, Object> supportObj = new HashMap<>();
			List<String> gstno = Lists.newArrayList();
			gstno.add("");
			gstno.add(null);
			Criteria criteria = Criteria.where("clientid").is(clientId).and("gstnnumber").nin(gstno);
			Query query = Query.query(criteria);
			query.fields().include("name");
			query.fields().include("gstnnumber");
			
			List<CompanySuppliers> billedTogstns = mongoTemplate.find(query, CompanySuppliers.class);
			
			supportObj.put("billedTogstns", billedTogstns);
	
			return supportObj;
	 	}
		
		/*@Override
		public Map<String, Map<String, Map<String, List<String>>>> getAllSupplierStatusBasedOnClientid(String clientid, int year, List<String> rtArray) {

		Map<String,Map<String,Map<String,List<String>>>> supplier_reportMap=new HashMap<String,Map<String,Map<String,List<String>>>>();

		List<CompanySuppliers> cmpySupplierLst=companySuppliersRepository.findByClientid(clientid);

		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		if(isNotEmpty(cmpySupplierLst)) {
		for(CompanySuppliers cmpysuppliers:cmpySupplierLst){
		if(isNotEmpty(cmpysuppliers.getGstnnumber())) {
		Map<String,Map<String,List<String>>> reportMap=new HashMap<String,Map<String,List<String>>>();
		Map<String,List<String>> rtMap_GSTR1=new HashMap<String,List<String>>();
		List<SupplierStatus> gstr1_supplier = supplierStatusRepository
		.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR1, rtArray);
		if(isNotEmpty(gstr1_supplier)) {
		for(SupplierStatus supplier:gstr1_supplier) {
		List<String> list1 = Lists.newArrayList();
		list1.add(supplier.getStatus());
		list1.add(supplier.getMof());
		list1.add(sdf.format(supplier.getDof()));
		if (isNotEmpty(supplier.getArn())) {
		list1.add(supplier.getArn());
		}
		//rtMap_GSTR1.put("GSTR1" + supplier.getReturnperiod() + supplier.getSupplierid(), supplier.getStatus());
		rtMap_GSTR1.put("GSTR1" + supplier.getReturnperiod() + supplier.getSupplierid(), list1);
		if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
		for (String rt : rtArray) {
		if (!rt.equals(supplier.getReturnperiod())) {
		if (!rtMap_GSTR1.containsKey("GSTR1"+rt+supplier.getSupplierid())) {
		list1 = Lists.newArrayList();
		list1.add(MasterGSTConstants.PENDING);
		//rtMap_GSTR1.put("GSTR1" + rt + supplier.getSupplierid(), MasterGSTConstants.PENDING);
		rtMap_GSTR1.put("GSTR1" + rt + supplier.getSupplierid(), list1);
		}
		}
		}
		}
		}
		reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
		}else {
		for (String rt : rtArray) {
		List<String> list1 = Lists.newArrayList();
		list1.add(MasterGSTConstants.PENDING);
		//rtMap_GSTR1.put("GSTR1" + rt + cmpysuppliers.getId().toString(), MasterGSTConstants.PENDING);
		rtMap_GSTR1.put("GSTR1" + rt + cmpysuppliers.getId().toString(), list1);
		}
		reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
		}

		List<SupplierStatus> gstr3b_supplier = supplierStatusRepository
		.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR3B, rtArray);
		Map<String,List<String>> rtMap_GSTR3B=new HashMap<String,List<String>>();
		if(isNotEmpty(gstr3b_supplier)) {
		for(SupplierStatus supplier:gstr3b_supplier) {
		List<String> list1 = Lists.newArrayList();
		list1.add(supplier.getStatus());
		list1.add(supplier.getMof());
		list1.add(sdf.format(supplier.getDof()));
		if (isNotEmpty(supplier.getArn())) {
		list1.add(supplier.getArn());
		}
		rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(), list1);
		//rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(), supplier.getStatus());
		if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
		for (String rt : rtArray) {
		if (!rt.equals(supplier.getReturnperiod())) {
		if (!rtMap_GSTR3B.containsKey("GSTR3"+rt+supplier.getSupplierid())) {
		list1 = Lists.newArrayList();
		list1.add(MasterGSTConstants.PENDING);
		rtMap_GSTR3B.put("GSTR3" + rt + supplier.getSupplierid(), list1);
		}
		}
		}
		}
		}
		reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
		}else {
		for (String rt : rtArray) {
		List<String> list1 = Lists.newArrayList();
		list1.add(MasterGSTConstants.PENDING);
		rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(),list1);
		//rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(), MasterGSTConstants.PENDING);
		}
		reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
		}
		supplier_reportMap.put(cmpysuppliers.getName()+"-"+cmpysuppliers.getGstnnumber(),reportMap);
		}
		}
		}
		//System.out.println(supplier_reportMap);
		return supplier_reportMap;
		}*/
		
		@Override
		public Map<String, Object> getAllSupplierStatusBasedOnClientid(String userid,String clientid, int year, int start, int length, String searchVal, InvoiceFilter invFilter) {
	 		Map<String, Object> responseMap = new HashMap<String, Object>();
			String rtStart = "04"+year;
			String rtEnd = "03"+(year+1);		
			List<String> rtArray=Arrays.asList(rtStart, "05"+year, "06"+year, "07"+year, "08"+year, "09"+year, 
					"10"+year, "11"+year, "12"+year, "01"+(year+1), "02"+(year+1), rtEnd);
			Map<String,Map<String,Map<String,String>>> supplier_reportMap=new HashMap<String,Map<String,Map<String,String>>>();
			
			Criteria criteria = Criteria.where("clientid").is(clientid);
			if(NullUtil.isNotEmpty(searchVal)){
				criteria = new Criteria().andOperator(criteria, new Criteria().orOperator(
						Criteria.where("name").regex(searchVal,"i"), Criteria.where("gstnnumber").regex(searchVal,"i"))
					);
			}
			Query query = Query.query(criteria);
			query.fields().include("name");
			query.fields().include("gstnnumber");
			query.fields().include("fullname");
			query.fields().include("userid");
			query.fields().include("clientid");
			List<String> gstno = Lists.newArrayList();
			gstno.add("");
			gstno.add(null);
			if(invFilter != null){
				if(invFilter.getVendor() != null){
					criteria.and("gstnnumber").in(Arrays.asList(invFilter.getVendor()));
				}else {
					criteria.and("gstnnumber").nin(gstno);
				}
			}else {
				criteria.and("gstnnumber").nin(gstno);
			}
			if(length == -1) {
				length = Integer.MAX_VALUE;
			}
			Pageable pageable = new PageRequest((start/length), length);
			query.with(pageable);
			long total = mongoTemplate.count(query, CompanySuppliers.class, "company_suppliers");
			Page<CompanySuppliers> suppliersData = null;
			if (total == 0) {
				suppliersData = new PageImpl<CompanySuppliers>(Collections.<CompanySuppliers> emptyList());
			}else {
				suppliersData = new PageImpl<CompanySuppliers>(mongoTemplate.find(query, CompanySuppliers.class, "company_suppliers"), pageable, total);				
				List<String> returnArr=Arrays.asList(MasterGSTConstants.GSTR1,MasterGSTConstants.GSTR3B);
				
				if(isNotEmpty(suppliersData) && isNotEmpty(suppliersData.getContent())) {
					int[] iarr = {0};
					suppliersData.getContent().forEach(supplier->{
						for(String returntype:returnArr){
							Calendar calendar = Calendar.getInstance();
							int cYear = calendar.get(Calendar.YEAR);
							int cMonth = calendar.get(Calendar.MONTH)+1;
							int size = 12;
							if(cYear == year) {
								size = cMonth - 3;
							}
							List<SupplierStatus> statussList = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(supplier.getId().toString(), returntype, rtArray);
							int nxtYear=year+1;
							String fy=year+"-"+String.valueOf(nxtYear).substring(2);
							if(isNotEmpty(supplier.getGstnnumber())) {
								if(statussList.size() <= size) {
									iarr[0]++;
									clientUtils.supplierRettrack(clientid, supplier.getId().toString(), supplier.getName(), supplier.getGstnnumber(), fy);
									break;
								}							
							}
						}
					});
					String usrid = userid(userid,clientid);
					SubscriptionDetails subscriptionDetails = subscriptionService.getSubscriptionData(usrid);
					if(isNotEmpty(subscriptionDetails)) {
						if(isNotEmpty(subscriptionDetails.getProcessedInvoices())) {
							subscriptionDetails.setProcessedInvoices(subscriptionDetails.getProcessedInvoices() + Math.abs(iarr[0]/4));
						} else {
							subscriptionDetails.setProcessedInvoices(Math.abs(iarr[0]/4));
						}
						subscriptionService.updateSubscriptionData(subscriptionDetails);
					}
				}
				
				Map<String,Map<String,String>> reportMap=new HashMap<String,Map<String,String>>();
				if(isNotEmpty(suppliersData) && isNotEmpty(suppliersData.getContent())) {
					for(CompanySuppliers cmpysuppliers : suppliersData.getContent()){
						if(isNotEmpty(cmpysuppliers.getGstnnumber())) {
							Map<String,String> rtMap_GSTR1 = new TreeMap<String,String>();
							List<SupplierStatus> gstr1_supplier = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR1, rtArray);
							if(isNotEmpty(gstr1_supplier)) {
								for(SupplierStatus supplier : gstr1_supplier) {
									rtMap_GSTR1.put("GSTR1" + supplier.getReturnperiod(), supplier.getStatus());
									if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
										for (String rt : rtArray) {
											if (!rt.equals(supplier.getReturnperiod())) {
												if (!rtMap_GSTR1.containsKey("GSTR1"+rt)) {
													rtMap_GSTR1.put("GSTR1" + rt, MasterGSTConstants.PENDING);
												}
											}
										}
									}
								}
							}
							for (String rt : rtArray) {
								if (!rtMap_GSTR1.containsKey("GSTR1"+rt)) {
									rtMap_GSTR1.put("GSTR1" + rt, MasterGSTConstants.PENDING);
								}
							}
							reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(), rtMap_GSTR1);
							List<SupplierStatus> gstr3b_supplier = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR3B, rtArray);
							Map<String,String> rtMap_GSTR3B=new TreeMap<String,String>();
							if(isNotEmpty(gstr3b_supplier)) {
								for(SupplierStatus supplier : gstr3b_supplier) {
									rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod(), supplier.getStatus());
									if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
										for (String rt : rtArray) {
											if (!rt.equals(supplier.getReturnperiod())) {
												if (!rtMap_GSTR3B.containsKey("GSTR3"+rt)) {
													rtMap_GSTR3B.put("GSTR3" + rt, MasterGSTConstants.PENDING);
												}
											}
										}
									}
								}
							}
							for (String rt : rtArray) {
								if (!rtMap_GSTR3B.containsKey("GSTR3"+rt)) {
									rtMap_GSTR3B.put("GSTR3" + rt, MasterGSTConstants.PENDING);
								}
							}
							reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(), rtMap_GSTR3B);
							cmpysuppliers.setFilingGstr1history(rtMap_GSTR1);
							cmpysuppliers.setFilingGstr3bhistory(rtMap_GSTR3B);
							supplier_reportMap.put(cmpysuppliers.getName()+"-"+cmpysuppliers.getGstnnumber(),reportMap);
						}
					}
				}
			}
			responseMap.put("suppliers", suppliersData);
			return responseMap;
		}
	
		@Override
		public Map<String, Map<String, Map<String, List<String>>>> getAllSupplierStatusBasedOnClientid(List<CompanySuppliers> cmpySupplierLst, int year, List<String> rtArray) {

		Map<String,Map<String,Map<String,List<String>>>> supplier_reportMap=new HashMap<String,Map<String,Map<String,List<String>>>>();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		if(isNotEmpty(cmpySupplierLst)) {
			for(CompanySuppliers cmpysuppliers:cmpySupplierLst){
				if(isNotEmpty(cmpysuppliers.getGstnnumber())) {
					Map<String,Map<String,List<String>>> reportMap=new HashMap<String,Map<String,List<String>>>();
					Map<String,List<String>> rtMap_GSTR1=new HashMap<String,List<String>>();
					Query query = new Query();
					Criteria criteria = Criteria.where("supplierid").is(cmpysuppliers.getId().toString()).and("returntype").is(MasterGSTConstants.GSTR1).and("returnperiod").in(rtArray);
					query.addCriteria(criteria);
					List<SupplierStatus> gstr1_supplier = mongoTemplate.find(query, SupplierStatus.class);
					//List<SupplierStatus> gstr1_supplier = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR1, rtArray);
					if(isNotEmpty(gstr1_supplier)) {
						for(SupplierStatus supplier:gstr1_supplier) {
							List<String> list1 = Lists.newArrayList();
							list1.add(supplier.getStatus());
							list1.add(supplier.getMof());
							list1.add(sdf.format(supplier.getDof()));
							if (isNotEmpty(supplier.getArn())) {
								list1.add(supplier.getArn());
							}
							rtMap_GSTR1.put("GSTR1" + supplier.getReturnperiod() + supplier.getSupplierid(), list1);
							if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
								for (String rt : rtArray) {
									if (!rt.equals(supplier.getReturnperiod())) {
										if (!rtMap_GSTR1.containsKey("GSTR1"+rt+supplier.getSupplierid())) {
											list1 = Lists.newArrayList();
											list1.add(MasterGSTConstants.PENDING);
											rtMap_GSTR1.put("GSTR1" + rt + supplier.getSupplierid(), list1);
										}
									}
								}
							}
						}
						
						
						
						reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
					}else {
						for (String rt : rtArray) {
							List<String> list1 = Lists.newArrayList();
							list1.add(MasterGSTConstants.PENDING);
							rtMap_GSTR1.put("GSTR1" + rt + cmpysuppliers.getId().toString(), list1);
						}
						reportMap.put("GSTR1_"+cmpysuppliers.getId().toString(),rtMap_GSTR1);
					}
					Query query3b = new Query();
					Criteria criteria3b = Criteria.where("supplierid").is(cmpysuppliers.getId().toString()).and("returntype").is(MasterGSTConstants.GSTR3B).and("returnperiod").in(rtArray);
					query3b.addCriteria(criteria3b);
					List<SupplierStatus> gstr3b_supplier = mongoTemplate.find(query3b, SupplierStatus.class);
					//List<SupplierStatus> gstr3b_supplier = supplierStatusRepository.findBySupplieridAndReturntypeAndReturnperiodIn(cmpysuppliers.getId().toString(), MasterGSTConstants.GSTR3B, rtArray);
					Map<String,List<String>> rtMap_GSTR3B=new HashMap<String,List<String>>();
					if(isNotEmpty(gstr3b_supplier)) {
						for(SupplierStatus supplier:gstr3b_supplier) {
							List<String> list1 = Lists.newArrayList();
							list1.add(supplier.getStatus());
							list1.add(supplier.getMof());
							list1.add(sdf.format(supplier.getDof()));
							if (isNotEmpty(supplier.getArn())) {
								list1.add(supplier.getArn());
							}
							rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(), list1);
		//rtMap_GSTR3B.put("GSTR3" + supplier.getReturnperiod() + supplier.getSupplierid(), supplier.getStatus());
							if (supplier.getStatus().equals(MasterGSTConstants.STATUS_FILED)) {
								for (String rt : rtArray) {
									if (!rt.equals(supplier.getReturnperiod())) {
										if (!rtMap_GSTR3B.containsKey("GSTR3"+rt+supplier.getSupplierid())) {
											list1 = Lists.newArrayList();
											list1.add(MasterGSTConstants.PENDING);
											rtMap_GSTR3B.put("GSTR3" + rt + supplier.getSupplierid(), list1);
										}
									}
								}
							}
						}
						reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
					}else {
						for (String rt : rtArray) {
							List<String> list1 = Lists.newArrayList();
							list1.add(MasterGSTConstants.PENDING);
							rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(),list1);
		//rtMap_GSTR3B.put("GSTR3" + rt + cmpysuppliers.getId().toString(), MasterGSTConstants.PENDING);
						}
						reportMap.put("GSTR3B_"+cmpysuppliers.getId().toString(),rtMap_GSTR3B);
					}
					supplier_reportMap.put(cmpysuppliers.getName()+"-"+cmpysuppliers.getGstnnumber(),reportMap);
				}
			}
		}
		//System.out.println(supplier_reportMap);
		return supplier_reportMap;
		}
		
		
		
		@Override
		public List<FilingStatusReportsVO> getAllSupplierStatusBasedOnClientids(List<CompanySuppliers> cmpySupplierLst, int year, List<String> rtArray) {
			List<FilingStatusReportsVO> filingStatusReportsVOList=Lists.newArrayList();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		if(isNotEmpty(cmpySupplierLst)) {
			for(CompanySuppliers cmpysuppliers:cmpySupplierLst){
				if(isNotEmpty(cmpysuppliers.getGstnnumber())) {
					Map<String,List<String>> rtMap_GSTR1=new HashMap<String,List<String>>();
					Query query = new Query();
					Criteria criteria = Criteria.where("supplierid").is(cmpysuppliers.getId().toString()).and("returntype").is(MasterGSTConstants.GSTR1).and("returnperiod").in(rtArray);
					query.addCriteria(criteria);
					List<SupplierStatus> gstr1_supplier = mongoTemplate.find(query, SupplierStatus.class);
					if(isNotEmpty(gstr1_supplier)) {
						for(SupplierStatus supplier:gstr1_supplier) {
							FilingStatusReportsVO reportsVo = new FilingStatusReportsVO();
							if (isNotEmpty(supplier.getArn())) {
								reportsVo.setArnNo(supplier.getArn());
							}
							reportsVo.setStatus(supplier.getStatus());
							reportsVo.setModeOfFiling(supplier.getMof());
							reportsVo.setDateOfFiling(sdf.format(supplier.getDof()));
							reportsVo.setRetPeriod(supplier.getReturnperiod());
							reportsVo.setReturnType(MasterGSTConstants.GSTR1);
							if(isNotEmpty(cmpysuppliers.getName())) {
								reportsVo.setSupplierName(cmpysuppliers.getName());
							}
							reportsVo.setGstin(cmpysuppliers.getGstnnumber());
							filingStatusReportsVOList.add(reportsVo);
							List<String> list1 = Lists.newArrayList();
							rtMap_GSTR1.put("GSTR1"+supplier.getReturnperiod()+cmpysuppliers.getId().toString(), list1);
						}
						for (String rt : rtArray) {
							if (!rtMap_GSTR1.containsKey("GSTR1"+rt+cmpysuppliers.getId().toString())) {
								List<String> list1 = Lists.newArrayList();
								FilingStatusReportsVO reportsVo = new FilingStatusReportsVO();
								reportsVo.setStatus(MasterGSTConstants.PENDING);
								if(isNotEmpty(cmpysuppliers.getName())) {
									reportsVo.setSupplierName(cmpysuppliers.getName());
								}
								reportsVo.setGstin(cmpysuppliers.getGstnnumber());
								reportsVo.setReturnType(MasterGSTConstants.GSTR1);
								reportsVo.setRetPeriod(rt);
								filingStatusReportsVOList.add(reportsVo);
								rtMap_GSTR1.put("GSTR1"+rt+cmpysuppliers.getId().toString(), list1);
							}
						}
					}else {
						for (String rt : rtArray) {
							List<String> list1 = Lists.newArrayList();
							FilingStatusReportsVO reportsVo = new FilingStatusReportsVO();
							reportsVo.setStatus(MasterGSTConstants.PENDING);
							if(isNotEmpty(cmpysuppliers.getName())) {
								reportsVo.setSupplierName(cmpysuppliers.getName());
							}
							reportsVo.setGstin(cmpysuppliers.getGstnnumber());
							reportsVo.setReturnType(MasterGSTConstants.GSTR1);
							reportsVo.setRetPeriod(rt);
							filingStatusReportsVOList.add(reportsVo);
						}
					}
					Query query3b = new Query();
					Criteria criteria3b = Criteria.where("supplierid").is(cmpysuppliers.getId().toString()).and("returntype").is(MasterGSTConstants.GSTR3B).and("returnperiod").in(rtArray);
					query3b.addCriteria(criteria3b);
					List<SupplierStatus> gstr3b_supplier = mongoTemplate.find(query3b, SupplierStatus.class);
					Map<String,List<String>> rtMap_GSTR3B=new HashMap<String,List<String>>();
					if(isNotEmpty(gstr3b_supplier)) {
						for(SupplierStatus supplier:gstr3b_supplier) {
							FilingStatusReportsVO reportsVo = new FilingStatusReportsVO();
							if (isNotEmpty(supplier.getArn())) {
								reportsVo.setArnNo(supplier.getArn());
							}
							reportsVo.setStatus(supplier.getStatus());
							reportsVo.setModeOfFiling(supplier.getMof());
							reportsVo.setDateOfFiling(sdf.format(supplier.getDof()));
							if(isNotEmpty(cmpysuppliers.getName())) {
								reportsVo.setSupplierName(cmpysuppliers.getName());
							}
							reportsVo.setGstin(cmpysuppliers.getGstnnumber());
							reportsVo.setRetPeriod(supplier.getReturnperiod());
							reportsVo.setReturnType(MasterGSTConstants.GSTR3B);
							filingStatusReportsVOList.add(reportsVo);
							List<String> list1 = Lists.newArrayList();
							rtMap_GSTR3B.put("GSTR3"+supplier.getReturnperiod()+cmpysuppliers.getId().toString(), list1);
						}
						for (String rt : rtArray) {
							if (!rtMap_GSTR3B.containsKey("GSTR3"+rt+cmpysuppliers.getId().toString())) {
								List<String> list1 = Lists.newArrayList();
								FilingStatusReportsVO reportsVo = new FilingStatusReportsVO();
								reportsVo.setStatus(MasterGSTConstants.PENDING);
								if(isNotEmpty(cmpysuppliers.getName())) {
									reportsVo.setSupplierName(cmpysuppliers.getName());
								}
								reportsVo.setGstin(cmpysuppliers.getGstnnumber());
								reportsVo.setRetPeriod(rt);
								reportsVo.setReturnType(MasterGSTConstants.GSTR3B);
								filingStatusReportsVOList.add(reportsVo);
								rtMap_GSTR3B.put("GSTR3"+rt+cmpysuppliers.getId().toString(), list1);
							}
						}
					}else {
						for (String rt : rtArray) {
							List<String> list1 = Lists.newArrayList();
							FilingStatusReportsVO reportsVo = new FilingStatusReportsVO();
							reportsVo.setStatus(MasterGSTConstants.PENDING);
							if(isNotEmpty(cmpysuppliers.getName())) {
								reportsVo.setSupplierName(cmpysuppliers.getName());
							}
							reportsVo.setGstin(cmpysuppliers.getGstnnumber());
							reportsVo.setRetPeriod(rt);
							reportsVo.setReturnType(MasterGSTConstants.GSTR3B);
							filingStatusReportsVOList.add(reportsVo);
						}
					}
				}
			}
		}
		return filingStatusReportsVOList;
		}
		
		@Override
		@Transactional(readOnly=true)
		public Page<PurchaseRegister> getUpdatePurchaseRegisters(final String invType, final String clientid, final int month,
				final int year, boolean isYear, Pageable pageable) {
			Date stDate = null;
			Date endDate = null;
			Date presentDate = new Date();
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(presentDate);

			int presentYear = calendar.get(Calendar.YEAR);
			int presentMonth = calendar.get(Calendar.MONTH) + 1;
			Calendar cal = Calendar.getInstance();
			if (isYear) {
			if(month < 10) {
				cal.set(year-1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
					if (presentYear != year) {
						cal.set(year, 12, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					} else {
						cal.set(year, presentMonth, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					}

				} else {
					cal.set(year - 1, 3, 1, 0, 0, 0);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if (presentYear != year) {
						cal.set(year, 12, 0, 23, 59, 59);
						endDate = new java.util.Date(cal.getTimeInMillis());
					} else {
						cal.set(year, presentMonth, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
					}
				}
			}else {
				cal.set(year, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year + 1, 3, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
			return purchaseRepository.findByClientidAndInvtypeAndDateofinvoiceBetween(clientid, invType, stDate, endDate, pageable);
		}
		
		@Override
		@Transactional
		//@Async("reconcileTaskExecutor")
		public void removegstr2id(List<String> gstr2id,String clientid) {
			if(isNotEmpty(gstr2id)) {
				List<PurchaseRegister> pr = purchaseRepository.findByClientidAndMatchingIdInAndMatchingStatus(clientid, gstr2id,MasterGSTConstants.GST_STATUS_MISMATCHED);
				List<PurchaseRegister> savePPRList = Lists.newArrayList();
				for(PurchaseRegister purchaseregister: pr) {
					purchaseregister.setMatchingId(null);
					purchaseregister.setMatchingStatus(null);
					savePPRList.add(purchaseregister);
				}
				purchaseRepository.save(savePPRList);
			}
		}

		@Override
		@Transactional
		//@Async("reconcileTaskExecutor")
		public void removematchingid(List<PurchaseRegister> purchaseRegisters) {
			List<PurchaseRegister> savePPRList = Lists.newArrayList();
			for(PurchaseRegister purchaseregister: purchaseRegisters) {
				purchaseregister.setMatchingId(null);
				purchaseregister.setMatchingStatus(null);
				savePPRList.add(purchaseregister);
			}
			purchaseRepository.save(savePPRList);
			
		}
		
		@Override
		@Transactional(readOnly=true)
		public Page<PurchaseRegister> getPurchaseRegistersByGstr2bMatchingStatusInvoiceNos(final String clientid, final String invtype, List<String> invoiceNos, Pageable pageable) {
			List<String> matchingstatuspr = Lists.newArrayList();
			matchingstatuspr.add("");
			matchingstatuspr.add(null);
			matchingstatuspr.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2B);
			return purchaseRepository.findByClientidAndInvtypeAndInvoicenoInAndGstr2bMatchingStatusIn(clientid,invtype, invoiceNos, matchingstatuspr,pageable);
		}
		
		@Override
		public Page<? extends InvoiceParent> getGlobalReportDaoInvoices(List<String> clientids, String returntype, int month, int year,String booksorReturns,InvoiceFilter filter,Pageable pageable) {
			logger.debug(CLASSNAME + "getGlobalReportDaoInvoices : Begin");
			String yearCode = Utility.getYearCode(month, year);
			if(GSTR1.equalsIgnoreCase(returntype)) {
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.B2BA ,MasterGSTConstants.CDNA,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.B2CL ,MasterGSTConstants.B2CLA,MasterGSTConstants.CDNUR ,MasterGSTConstants.CDNURA ,MasterGSTConstants.B2C ,MasterGSTConstants.B2CSA,
						MasterGSTConstants.EXPORTS ,MasterGSTConstants.EXPA ,MasterGSTConstants.ADVANCES,MasterGSTConstants.NIL,MasterGSTConstants.ATPAID,MasterGSTConstants.ATA,MasterGSTConstants.TXPA);				
				return gstr1Dao.findByClientidInAndMonthAndYear(clientids, invTypes, month ,yearCode, 0, 0, null, booksorReturns,filter,pageable);
			}else if(returntype.contentEquals(MasterGSTConstants.GSTR2) || returntype.contentEquals(MasterGSTConstants.PURCHASE_REGISTER)) {
				return purchageRegisterDao.findByClientidInAndMonthAndYear(clientids, month, yearCode, 0, 0, null, filter,pageable);
			}else if(GSTR2A.equalsIgnoreCase(returntype)) {
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				return gstr2Dao.findByClientidInAndMonthAndYear(clientids, invTypes, month,yearCode,  0, 0, null,booksorReturns, filter);
			}else if(returntype.equalsIgnoreCase(MasterGSTConstants.EINVOICE)){
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B,MasterGSTConstants.CREDIT_DEBIT_NOTES ,MasterGSTConstants.CDNUR,MasterGSTConstants.EXPORTS );				
				return gstr1Dao.findByClientidInAndMonthAndYear(clientids, invTypes, month ,yearCode, 0, 0, null, booksorReturns,filter,pageable);
			}else if(returntype.contentEquals(MasterGSTConstants.GSTR2B) || returntype.contentEquals(MasterGSTConstants.PURCHASE_REGISTER)) {
				List<String> fps = null;
				if(month > 0) {
					String strMonth = month < 10 ? "0" + month : month + "";
					String fp = strMonth + year;
					fps = Arrays.asList(fp);
				}else {
					fps = Arrays.asList("04"+year, "05"+year, "06"+year, "07"+year, "08"+year, "09"+year, "10"+year, "11"+year, "12"+year, "01"+(year+1), "02"+(year+1), "03"+(year+1));
				}
				
				return gstr2bDao.findByClientidInAndMonthAndYear(clientids, fps, 0, 0, null, filter, pageable);
			}
			return null;
		}
		
		@Override
		public Page<? extends InvoiceParent> getGlobalReportDaoInvoices(List<String> clientids, String returntype, String fromtime, String totime,String booksorReturns, InvoiceFilter filter,Pageable pageable) {
			logger.debug(CLASSNAME + "getGlobalReportDaoInvoices : Begin");
				
			String[] fromtimes = fromtime.split("-");
			String[] totimes = totime.split("-");
			
			Date stDate = null;
			Date endDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1]) - 1,	Integer.parseInt(fromtimes[0]) - 1, 23, 59, 59);
			stDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1]) - 1, Integer.parseInt(totimes[0]), 23,59, 59);
			endDate = new java.util.Date(cal.getTimeInMillis());
		
			if(returntype.equals(MasterGSTConstants.GSTR1)) {
				return gstr1Dao.findByClientidInAndFromtimeAndTotime(clientids, stDate, endDate, 0, 0, null, filter,booksorReturns,pageable);
			}else if(returntype.equals(MasterGSTConstants.GSTR2)) {
				return purchageRegisterDao.findByClientidInAndFromtimeAndTotime(clientids, stDate, endDate, 0, 0, null, filter,pageable);
			}else if(returntype.equalsIgnoreCase(MasterGSTConstants.EINVOICE)){				
				return gstr1Dao.findByClientidInAndFromtimeAndTotime(clientids, stDate, endDate, 0, 0, null, filter,booksorReturns,pageable);
			}else {
				List<String> invTypes = Arrays.asList(MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,
						MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA,MasterGSTConstants.IMP_GOODS);
				return gstr2Dao.findByClientidInAndMonthAndYear(clientids, invTypes, stDate, endDate, 0, 0, null, booksorReturns,filter,pageable);
			}
		}
		
		public List<? extends InvoiceParent> getSpecificInvoicesForNilSuppliesFromCDN(final Client client, final String returnType, int month,int year, final String status) {
			logger.debug(CLASSNAME + "getSpecificInvoices : Begin");
			if (isNotEmpty(returnType)) {
				if(isNotEmpty(client.getFilingoptions())) {
					String yr;
					if(month == 1 || month == 2 || month == 3) {
						yr = (year-1)+"-"+(year);
					}else {
						yr = year+"-"+(year+1);
					}
					client.getFilingoptions().forEach(options->{
						if(options.getYear().equalsIgnoreCase(yr)){
							client.setFilingOption(options.getOption());			
						}
					});
				}
				Date stDate = null;
				Date endDate = null;
				Calendar cal = Calendar.getInstance();
				if (isNotEmpty(client.getFilingOption())
						&& client.getFilingOption().equals(MasterGSTConstants.FILING_OPTION_QUARTERLY)) {
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 0, 0, 23, 59, 59);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year, 9, 0, 23, 59, 59);
					}
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					if(month == 1 || month == 2 || month == 3) {
						cal.set(year, 3, 0, 23, 59, 59);
					} else if(month == 4 || month == 5 || month == 6) {
						cal.set(year, 6, 0, 23, 59, 59);
					} else if(month == 7 || month == 8 || month == 9) {
						cal.set(year, 9, 0, 23, 59, 59);
					} else if(month == 10 || month == 11 || month == 12) {
						cal.set(year + 1, 0, 0, 23, 59, 59);
					}
					endDate = new java.util.Date(cal.getTimeInMillis());
				} else {
					cal.set(year, month - 1, 0, 23, 59, 59);
					stDate = new java.util.Date(cal.getTimeInMillis());
					cal = Calendar.getInstance();
					cal.set(year, month, 0, 23, 59, 59);
					endDate = new java.util.Date(cal.getTimeInMillis());
				}
				if (returnType.equals(GSTR1)) {
					List<String> gstStatus = Lists.newArrayList();
					gstStatus.add(status);
					gstStatus.add("In Progress");
					
					List<String> invtype = Lists.newArrayList();
					invtype.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
					invtype.add(MasterGSTConstants.CDNUR);
					return gstr1Repository.findByClientidAndInvtypeInAndGstStatusInAndCdnnilsuppliesAndDateofinvoiceBetween(client.getId().toString(), invtype,gstStatus,"yes", stDate, endDate);
				}
			}
			return Lists.newArrayList();
		}
		
		
		
}
