/*
 * Copyright (c) 2017, BVM Solutions  and/or its affiliates. All rights reserved.
 *
 */
package com.mastergst.web.usermanagement.runtime.controller;

import static com.mastergst.core.common.MasterGSTConstants.ADVANCES;
import static com.mastergst.core.common.MasterGSTConstants.ANX1;
import static com.mastergst.core.common.MasterGSTConstants.ATA;
import static com.mastergst.core.common.MasterGSTConstants.ATPAID;
import static com.mastergst.core.common.MasterGSTConstants.B2B;
import static com.mastergst.core.common.MasterGSTConstants.B2BA;
import static com.mastergst.core.common.MasterGSTConstants.B2C;
import static com.mastergst.core.common.MasterGSTConstants.B2CL;
import static com.mastergst.core.common.MasterGSTConstants.B2CLA;
import static com.mastergst.core.common.MasterGSTConstants.B2CSA;
import static com.mastergst.core.common.MasterGSTConstants.BEGIN;
import static com.mastergst.core.common.MasterGSTConstants.CDNA;
import static com.mastergst.core.common.MasterGSTConstants.CDNUR;
import static com.mastergst.core.common.MasterGSTConstants.CDNURA;
import static com.mastergst.core.common.MasterGSTConstants.CREDIT_DEBIT_NOTES;
import static com.mastergst.core.common.MasterGSTConstants.DEALER_COMPOUND;
import static com.mastergst.core.common.MasterGSTConstants.END;
import static com.mastergst.core.common.MasterGSTConstants.EXPA;
import static com.mastergst.core.common.MasterGSTConstants.EXPORTS;
import static com.mastergst.core.common.MasterGSTConstants.FILING_OPTION_MONTHLY;
import static com.mastergst.core.common.MasterGSTConstants.FILING_OPTION_QUARTERLY;
import static com.mastergst.core.common.MasterGSTConstants.GSTR1;
import static com.mastergst.core.common.MasterGSTConstants.GSTR2;
import static com.mastergst.core.common.MasterGSTConstants.GSTR2A;
import static com.mastergst.core.common.MasterGSTConstants.GSTR3B;
import static com.mastergst.core.common.MasterGSTConstants.GSTR4;
import static com.mastergst.core.common.MasterGSTConstants.GSTR5;
import static com.mastergst.core.common.MasterGSTConstants.GSTR6;
import static com.mastergst.core.common.MasterGSTConstants.GSTR9;
import static com.mastergst.core.common.MasterGSTConstants.GSTR9C;
import static com.mastergst.core.common.MasterGSTConstants.NIL;
import static com.mastergst.core.common.MasterGSTConstants.PURCHASE_REGISTER;
import static com.mastergst.core.common.MasterGSTConstants.TXPA;
import static com.mastergst.core.util.NullUtil.isEmpty;
import static com.mastergst.core.util.NullUtil.isNotEmpty;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bson.types.ObjectId;
import org.json.JSONObject;
import org.jxls.template.SimpleExporter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.gridfs.GridFsOperations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.util.MultiValueMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.mastergst.configuration.service.CommonLedgerRepository;
import com.mastergst.configuration.service.ConfigService;
import com.mastergst.configuration.service.CountryConfig;
import com.mastergst.configuration.service.Currencycodes;
import com.mastergst.configuration.service.CurrencycodesRepository;
import com.mastergst.configuration.service.EmailService;
import com.mastergst.configuration.service.ErrorCodeConfig;
import com.mastergst.configuration.service.ErrorCodesRepository;
import com.mastergst.configuration.service.GroupsRepository;
import com.mastergst.configuration.service.LatestNews;
import com.mastergst.configuration.service.LatestUpdates;
import com.mastergst.configuration.service.ReconcileTemp;
import com.mastergst.configuration.service.ReconcileTempRepository;
import com.mastergst.configuration.service.StateConfig;
import com.mastergst.core.common.AccountConstants;
import com.mastergst.core.common.AuditLogConstants;
import com.mastergst.core.common.MasterGSTConstants;
import com.mastergst.core.exception.MasterGSTException;
import com.mastergst.core.util.MoneyConverterUtil;
import com.mastergst.core.util.NullUtil;
import com.mastergst.core.util.SendMsgsSummary;
import com.mastergst.core.util.VmUtil;
import com.mastergst.login.runtime.domain.HeaderKeys;
import com.mastergst.login.runtime.domain.User;
import com.mastergst.login.runtime.repository.UserRepository;
import com.mastergst.login.runtime.service.UserService;
import com.mastergst.usermanagement.runtime.accounting.domain.JournalEntrie;
import com.mastergst.usermanagement.runtime.accounting.util.AccountingJournalsUtils;
import com.mastergst.usermanagement.runtime.audit.AuditlogService;
import com.mastergst.usermanagement.runtime.dao.Gstr2Dao;
import com.mastergst.usermanagement.runtime.dao.InvoicesMappingDao;
import com.mastergst.usermanagement.runtime.dao.ProfileDao;
import com.mastergst.usermanagement.runtime.dao.PurchageRegisterDao;
import com.mastergst.usermanagement.runtime.domain.AccountingJournal;
import com.mastergst.usermanagement.runtime.domain.AccountingJournalPaymentItems;
import com.mastergst.usermanagement.runtime.domain.AllPaymentDetails;
import com.mastergst.usermanagement.runtime.domain.Anx1;
import com.mastergst.usermanagement.runtime.domain.AnxInvoiceParent;
import com.mastergst.usermanagement.runtime.domain.AnxInvoiceSupport;
import com.mastergst.usermanagement.runtime.domain.Branch;
import com.mastergst.usermanagement.runtime.domain.CancelEwayBill;
import com.mastergst.usermanagement.runtime.domain.Client;
import com.mastergst.usermanagement.runtime.domain.ClientConfig;
import com.mastergst.usermanagement.runtime.domain.ClientStatus;
import com.mastergst.usermanagement.runtime.domain.ClientUserMapping;
import com.mastergst.usermanagement.runtime.domain.CompanyBankDetails;
import com.mastergst.usermanagement.runtime.domain.CompanyCustomers;
import com.mastergst.usermanagement.runtime.domain.CompanyInvoices;
import com.mastergst.usermanagement.runtime.domain.CompanySuppliers;
import com.mastergst.usermanagement.runtime.domain.CompanyUser;
import com.mastergst.usermanagement.runtime.domain.CustomData;
import com.mastergst.usermanagement.runtime.domain.CustomFields;
import com.mastergst.usermanagement.runtime.domain.DashboardRoles;
import com.mastergst.usermanagement.runtime.domain.DeletedInvoices;
import com.mastergst.usermanagement.runtime.domain.DeliveryChallan;
import com.mastergst.usermanagement.runtime.domain.EBillVehicleListDetails;
import com.mastergst.usermanagement.runtime.domain.EWAYBILL;
import com.mastergst.usermanagement.runtime.domain.Estimates;
import com.mastergst.usermanagement.runtime.domain.EwayBillConfigurations;
import com.mastergst.usermanagement.runtime.domain.FilingOptions;
import com.mastergst.usermanagement.runtime.domain.GSTR1;
import com.mastergst.usermanagement.runtime.domain.GSTR1A;
import com.mastergst.usermanagement.runtime.domain.GSTR1DocDetails;
import com.mastergst.usermanagement.runtime.domain.GSTR1DocIssueDetails;
import com.mastergst.usermanagement.runtime.domain.GSTR1DocumentIssue;
import com.mastergst.usermanagement.runtime.domain.GSTR1DownloadStatus;
import com.mastergst.usermanagement.runtime.domain.GSTR2;
import com.mastergst.usermanagement.runtime.domain.GSTR2ADownloadStatus;
import com.mastergst.usermanagement.runtime.domain.GSTR2A_VS_GSTR2;
import com.mastergst.usermanagement.runtime.domain.GSTR2BSupport;
import com.mastergst.usermanagement.runtime.domain.GSTR3B;
import com.mastergst.usermanagement.runtime.domain.GSTR3BDetails;
import com.mastergst.usermanagement.runtime.domain.GSTR3BDownloadStatus;
import com.mastergst.usermanagement.runtime.domain.GSTR3BOffsetLiability;
import com.mastergst.usermanagement.runtime.domain.GSTR3B_VS_GSTR1;
import com.mastergst.usermanagement.runtime.domain.GSTR3B_VS_GSTR2A;
import com.mastergst.usermanagement.runtime.domain.GSTR4;
import com.mastergst.usermanagement.runtime.domain.GSTR5;
import com.mastergst.usermanagement.runtime.domain.GSTR6;
import com.mastergst.usermanagement.runtime.domain.GSTR8;
import com.mastergst.usermanagement.runtime.domain.GSTR9;
import com.mastergst.usermanagement.runtime.domain.GSTR9AutoCal;
import com.mastergst.usermanagement.runtime.domain.GSTR9C;
import com.mastergst.usermanagement.runtime.domain.GSTR9Table4OtherThanExpSezDetails;
import com.mastergst.usermanagement.runtime.domain.GSTR9Table5ItemDetails;
import com.mastergst.usermanagement.runtime.domain.GSTR9Table9AllDetails;
import com.mastergst.usermanagement.runtime.domain.GSTR9Table9Details;
import com.mastergst.usermanagement.runtime.domain.GSTR9Table9SummaryDetails;
import com.mastergst.usermanagement.runtime.domain.GSTRAdvanceTax;
import com.mastergst.usermanagement.runtime.domain.GSTRB2B;
import com.mastergst.usermanagement.runtime.domain.GSTRCreditDebitNotes;
import com.mastergst.usermanagement.runtime.domain.GSTRExports;
import com.mastergst.usermanagement.runtime.domain.GSTRITCReversals;
import com.mastergst.usermanagement.runtime.domain.GSTRInvoiceDetails;
import com.mastergst.usermanagement.runtime.domain.GSTReturnSummary;
import com.mastergst.usermanagement.runtime.domain.HSNData;
import com.mastergst.usermanagement.runtime.domain.HSNDetails;
import com.mastergst.usermanagement.runtime.domain.InvoiceFilter;
import com.mastergst.usermanagement.runtime.domain.InvoiceItcClaimed;
import com.mastergst.usermanagement.runtime.domain.InvoiceParent;
import com.mastergst.usermanagement.runtime.domain.Item;
import com.mastergst.usermanagement.runtime.domain.Messages;
import com.mastergst.usermanagement.runtime.domain.OtherConfigurations;
import com.mastergst.usermanagement.runtime.domain.PaymentItems;
import com.mastergst.usermanagement.runtime.domain.PaymentTerms;
import com.mastergst.usermanagement.runtime.domain.Payments;
import com.mastergst.usermanagement.runtime.domain.PaymentsVo;
import com.mastergst.usermanagement.runtime.domain.PrintConfiguration;
import com.mastergst.usermanagement.runtime.domain.ProformaInvoices;
import com.mastergst.usermanagement.runtime.domain.PurchaseOrder;
import com.mastergst.usermanagement.runtime.domain.PurchaseRegister;
import com.mastergst.usermanagement.runtime.domain.ReturnsDownloadStatus;
import com.mastergst.usermanagement.runtime.domain.SupplierComments;
import com.mastergst.usermanagement.runtime.domain.TemplateMapperDoc;
import com.mastergst.usermanagement.runtime.domain.TurnoverOptions;
import com.mastergst.usermanagement.runtime.domain.Vertical;
import com.mastergst.usermanagement.runtime.repository.AccountingJournalRepository;
import com.mastergst.usermanagement.runtime.repository.ClientUserMappingRepository;
import com.mastergst.usermanagement.runtime.repository.CustomFieldsRepository;
import com.mastergst.usermanagement.runtime.repository.DeliveryChallanRepository;
import com.mastergst.usermanagement.runtime.repository.EstimatesRepository;
import com.mastergst.usermanagement.runtime.repository.EwayBillConfigurationRepository;
import com.mastergst.usermanagement.runtime.repository.EwayBillRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR1Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR2BSupportRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR2Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR3BRepository;
import com.mastergst.usermanagement.runtime.repository.GSTR4Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR5Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR6Repository;
import com.mastergst.usermanagement.runtime.repository.GSTR9Repository;
import com.mastergst.usermanagement.runtime.repository.GroupDetailsRepository;
import com.mastergst.usermanagement.runtime.repository.HSNSummaryRepository;
import com.mastergst.usermanagement.runtime.repository.LedgerRepository;
import com.mastergst.usermanagement.runtime.repository.OtherConfigurationRepository;
import com.mastergst.usermanagement.runtime.repository.PrintConfigurationRepository;
import com.mastergst.usermanagement.runtime.repository.ProformaInvoicesRepository;
import com.mastergst.usermanagement.runtime.repository.PurchaseOrderRepository;
import com.mastergst.usermanagement.runtime.repository.PurchaseRegisterRepository;
import com.mastergst.usermanagement.runtime.repository.RecordPaymentsRepository;
import com.mastergst.usermanagement.runtime.repository.SupplierCommentsRepository;
import com.mastergst.usermanagement.runtime.response.EwayBillCancelResponse;
import com.mastergst.usermanagement.runtime.response.EwayBillDateResponse;
import com.mastergst.usermanagement.runtime.response.EwayBillResponse;
import com.mastergst.usermanagement.runtime.response.EwayBillResponseData;
import com.mastergst.usermanagement.runtime.response.EwayBillVehicleUpdateResponse;
import com.mastergst.usermanagement.runtime.response.FinancialSummaryVO;
import com.mastergst.usermanagement.runtime.response.GSTR9GetResponse;
import com.mastergst.usermanagement.runtime.response.GSTRCommonResponse;
import com.mastergst.usermanagement.runtime.response.GenerateEwayBillResponse;
import com.mastergst.usermanagement.runtime.response.ITCClaimVO;
import com.mastergst.usermanagement.runtime.response.InvoiceVO;
import com.mastergst.usermanagement.runtime.response.LedgerResponse;
import com.mastergst.usermanagement.runtime.response.MisMatchVO;
import com.mastergst.usermanagement.runtime.response.Response;
import com.mastergst.usermanagement.runtime.response.ResponseData;
import com.mastergst.usermanagement.runtime.response.SendMessageVO;
import com.mastergst.usermanagement.runtime.response.TrackResponse;
import com.mastergst.usermanagement.runtime.service.AccountingUtils;
import com.mastergst.usermanagement.runtime.service.Anx1Service;
import com.mastergst.usermanagement.runtime.service.ClientReportsUtil;
import com.mastergst.usermanagement.runtime.service.ClientService;
import com.mastergst.usermanagement.runtime.service.ClientUtils;
import com.mastergst.usermanagement.runtime.service.GSTR1DowloadService;
import com.mastergst.usermanagement.runtime.service.GSTR2ADowloadService;
import com.mastergst.usermanagement.runtime.service.GSTR3BDowloadService;
import com.mastergst.usermanagement.runtime.service.GSTR6Utils;
import com.mastergst.usermanagement.runtime.service.Gstr4AnnualService;
import com.mastergst.usermanagement.runtime.service.IHubConsumerService;
import com.mastergst.usermanagement.runtime.service.INewClientService;
import com.mastergst.usermanagement.runtime.service.ImportMapperService;
import com.mastergst.usermanagement.runtime.service.InventoryService;
import com.mastergst.usermanagement.runtime.service.InvoiceSaveUtils;
import com.mastergst.usermanagement.runtime.service.LatestNewsService;
import com.mastergst.usermanagement.runtime.service.LatestUpdatesService;
import com.mastergst.usermanagement.runtime.service.OtpExpiryService;
import com.mastergst.usermanagement.runtime.service.PrintService;
import com.mastergst.usermanagement.runtime.service.ProfileService;
import com.mastergst.usermanagement.runtime.service.ReturnsDownloadStatusService;
import com.mastergst.usermanagement.runtime.service.ServiceUtils;
import com.mastergst.usermanagement.runtime.service.SubscriptionService;
import com.mastergst.usermanagement.runtime.support.EwaybillValidator;
import com.mastergst.usermanagement.runtime.support.Utility;

import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;

/**
 * Handles Add Client depending on the URI template.
 * 
 * @author BVM Consultancy Services(www.bvmcs.com).
 * @version 1.0
 * @since 1.0
 */
@Controller
public class ClientController {
	private static final Logger logger = LogManager.getLogger(ClientController.class.getName());
	private static final String CLASSNAME = "ClientController::";
	private static DecimalFormat df2 = new DecimalFormat("#.##");
	private DecimalFormat decimalFormat = new DecimalFormat("#0.00");
	@Value("${metadata.json.location}")
	private String metadatajsonlocation;
	@Autowired	private Gstr4AnnualService gstr4AnnualService;
	@Autowired	private GSTR6Utils gstr6Utils;
	@Autowired	private ClientUtils clientUtils;
	@Autowired	private SupplierCommentsRepository supplierCommentsRepository;
	@Autowired	private ErrorCodesRepository errorCodesRepository;
	@Autowired	private EwayBillRepository ewayBillRepository;
	@Autowired	private EwayBillConfigurationRepository ewayBillConfigurationRepository;
	@Autowired	LedgerRepository ledgerRepository;
	@Autowired	GroupDetailsRepository groupDetailsRepository;
	@Autowired	GroupsRepository groupsRepository;
	@Autowired	PurchaseRegisterRepository purchaseRepository;
	@Autowired	UserRepository userRepository;
	@Autowired	private GSTR1Repository gstr1repository;
	@Autowired	private ProformaInvoicesRepository proformaInvoicesRepository;
	@Autowired  private DeliveryChallanRepository deliveryChallanRepository;
	@Autowired  private EstimatesRepository estimatesRepository;
	@Autowired  private PurchaseOrderRepository purchaseOrderRepository;
	@Autowired	private ClientService clientService;
	@Autowired	private ConfigService configService;
	@Autowired	private ProfileService profileService;
	@Autowired	private SubscriptionService subscriptionService;
	@Autowired	private IHubConsumerService iHubConsumerService;
	@Autowired	private ImportMapperService importMapperService;
	@Autowired	private UserService userService;
	@Autowired	private Anx1Service anx1Service;
	@Autowired	private InvoiceSaveUtils invoiceSaveUtils;
	@Autowired  private ResourceLoader resourceLoader;
	@Autowired	GSTR3BRepository gstr3BRepository;
	@Autowired	GSTR2Repository gstr2Repository;
	@Autowired	GSTR9Repository gstr9Repository;
	@Autowired	GridFsOperations gridOperations;
	@Autowired	InventoryService inventoryService;
	@Autowired	private GSTR3BDowloadService gstr3BDowloadService;
	@Autowired	private GSTR2ADowloadService gstr2ADowloadService;
	@Autowired	private GSTR1DowloadService gstr1DowloadService;
	@Autowired	private EmailService emailService;
	@Autowired	private ServiceUtils serviceUtils;
	@Autowired	private ClientReportsUtil clientReportsUtil;
	@Autowired	PrintConfigurationRepository printConfigurationRepository;
	@Autowired	AccountingJournalRepository accountingJournalRepository;
	@Autowired	ClientUserMappingRepository clientUserMappingRepository;
	@Autowired	OtherConfigurationRepository otherConfigurationRepository;
	@Autowired	CommonLedgerRepository commonLedgerRepository;
	@Autowired	RecordPaymentsRepository recordPaymentsRepository;
	@Autowired	private	HSNSummaryRepository hsnSummaryRepository; 
	@Autowired	private ProfileDao ProfileDao;
	@Autowired	private LatestUpdatesService latestUpdatesService;
	@Autowired	private LatestNewsService latestNewsService;
	@Autowired	private PrintService printService;
	@Autowired	private OtpExpiryService otpExpiryService;
	@Autowired	private PurchageRegisterDao purchageRegisterDao;
	@Autowired	private CurrencycodesRepository currencycodesRepository;
	@Autowired	private INewClientService newclientService;
	@Autowired	CustomFieldsRepository customFieldsRepository;
	@Autowired  InvoicesMappingDao invoicesMappingDao;
	@Autowired	private Gstr2Dao gstr2Dao;
	@Autowired  private ReconcileTempRepository reconcileTempRepository;
	@Autowired  private GSTR2BSupportRepository gstr2bSupportRepository;
	@Autowired  private ReturnsDownloadStatusService returnsDownloadStatusService;
    @Autowired  private AccountingUtils accountingUtils;
    @Autowired  private AccountingJournalsUtils accountingJournalsUtils;
    @Autowired  private AuditlogService auditlogService;
    @Autowired  private GSTR5Repository gstr5Repository;
    @Autowired  private GSTR6Repository gstr6Repository;
    @Autowired  private GSTR4Repository gstr4Repository;
	/**
	 * Handles User Dashboard based on Usertype and Year.
	 * Filing Status of all the Clients of User for that financial Year 
	 *  
	 * @param id
	 * @param fullname
	 * @param usertype
	 * @param month
	 * @param year
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/cadb/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String caDashboard(@PathVariable("id") String id, @PathVariable("name") String fullname, @PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "caDashboard::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		List<String> clientList = clientService.fetchClientIds(id);
		model.addAttribute("clientList", clientList);
		Map<String, GSTReturnSummary> returnsSummaryMap = Maps.newHashMap();
		List<GSTReturnSummary> returnsSummaryList = clientService.getGSTReturnsSummary();
		for (GSTReturnSummary summary : returnsSummaryList) {
			if (!returnsSummaryMap.containsKey(summary.getReturntype())) {
				if (NullUtil.isEmpty(summary.getStatusMap())) {
					Map<String, Integer> statusMap = Maps.newHashMap();
					statusMap.put(MasterGSTConstants.PENDING, 0);
					summary.setStatusMap(statusMap);
				}
				returnsSummaryMap.put(summary.getReturntype(), summary);
			}
		}
		model.addAttribute("returnsSummaryMap", returnsSummaryMap);
		logger.debug(CLASSNAME + method + END);
		return "dashboard/dashboard_ca";
	}

	private void updateModel(ModelMap model, String id, String fullname, String usertype, int month, int year) {
		model.addAttribute("id", id);
		model.addAttribute("fullname", fullname);
		model.addAttribute("usertype", usertype);
		model.addAttribute("month", month);
		model.addAttribute("year", year);
	}

	/**
	 * Handles Getting the Filing Status of the respective Clients based on ReturnType,month,year and ClientIds
	 * 
	 * @param retType
	 * @param month
	 * @param year
	 * @param clientIds
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/fstatus", method = RequestMethod.GET)
	public @ResponseBody Map<String, Integer> getFilingStatus(@RequestParam(value = "retType", required = true) String retType,	@RequestParam(value = "month", required = true) int month, @RequestParam(value = "year", required = true) int year,	@RequestParam(value = "clientIds", required = true) List<String> clientIds, ModelMap model)	throws Exception {
		final String method = "getFilingStatus::";
		logger.debug(CLASSNAME + method + BEGIN);
		String retPeriod = (month < 10 ? "0" + month : month + "") + year;
		return clientService.getReportStatus(clientIds, retType, retPeriod);
	}
	
	@RequestMapping(value = "/fstatuss", method = RequestMethod.GET)
	public @ResponseBody Map<String, List<Client>> getFilingStatuss(@RequestParam(value = "retType", required = true) String retType, @RequestParam(value = "month", required = true) int month, @RequestParam(value = "year", required = true) int year, @RequestParam(value = "clientIds", required = true) List<String> clientIds, ModelMap model) throws Exception {
		final String method = "getFilingStatus::";
		logger.debug(CLASSNAME + method + BEGIN);
		String retPeriod = (month < 10 ? "0" + month : month + "") + year;
		return clientService.getReportStatuss(clientIds, retType, retPeriod);
	}

	/**
	 * Handles Getting the Client Status of the respective Clients based on month,year and ClientIds
	 * 
	 * @param month
	 * @param year
	 * @param clientIds
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/cstatus", method = RequestMethod.GET)
	public @ResponseBody Map<String, String> getClientStatus(@RequestParam(value = "month", required = true) int month,	@RequestParam(value = "year", required = true) int year, @RequestParam(value = "clientIds", required = true) List<String> clientIds, ModelMap model) throws Exception {
		final String method = "getClientStatus::";
		logger.debug(CLASSNAME + method + BEGIN);
		String retPeriod = (month < 10 ? "0" + month : month + "") + year;
		return clientService.getClientStatus(clientIds, retPeriod);
	}
	
	/**
	 * Handles to Delete Invoices of particular Client and ReturnType based on month and Year
	 * 
	 * @param id
	 * @param fullname
	 * @param usertype
	 * @param clientid
	 * @param returntype
	 * @param type
	 * @param month
	 * @param year
	 * @param model
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/delinvs/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String deleteInvoices(@PathVariable("id") String id, @PathVariable("name") String fullname,@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,	@PathVariable("returntype") String returntype, @RequestParam("type") String type, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model,	HttpServletRequest request) throws Exception {
		final String method = "deleteInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		clientService.deleteInvoices(clientid, returntype, month, year);
		return "redirect:/alliview/" + id + "/" + fullname + "/" + usertype + "/"
			+ clientid + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}

	@RequestMapping(value = "/delSelectedInvss/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String delSelectedInvss(@PathVariable("id") String id,@PathVariable("clientid") String clientid,@PathVariable("returntype") String returntype, @PathVariable("month") int month,	@PathVariable("year") int year, @RequestParam("booksOrReturns") String booksOrReturns,@RequestBody DeletedInvoices deletedinvoices, ModelMap model,HttpServletRequest request) throws Exception {
		final String method = "delSelectedInvss::";
		List<String> invnos =deletedinvoices.getInvnos();
		List<String> irnstatus = Lists.newArrayList();
		irnstatus.add("Generated");
		irnstatus.add("Cancelled");
		returntype = returntype.trim();
		for(String invno:invnos) {
			if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1) || returntype.equalsIgnoreCase("SalesRegister")) {
				InvoiceParent invoice = gstr1repository.findOne(invno);
				if(isNotEmpty(invoice) && ((isNotEmpty(invoice.getIrnStatus()) && !irnstatus.contains(invoice.getIrnStatus())) || isEmpty(invoice.getIrnStatus()))) {
					if(isEmpty(invoice.getIrnNo())) {
						String invoiceNumber = invoice != null ? invoice.getInvoiceno() != null ? invoice.getInvoiceno() : "" : "";
						auditlogService.saveAuditLog(id, clientid,invoiceNumber,AuditLogConstants.DELETE,returntype,null,null);
						inventoryService.changeQuantityInMasters(invoice, returntype);
						deleteInvoices(id, clientid, returntype, invno, booksOrReturns, month, year);
					}
				}
			}else {
				if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase("Purchase Register")) {
					InvoiceParent invoice = purchaseRepository.findOne(invno);
					String invoiceNumber = invoice != null ? invoice.getInvoiceno() != null ? invoice.getInvoiceno() : "" : "";
					auditlogService.saveAuditLog(id, clientid,invoiceNumber,AuditLogConstants.DELETE,returntype,null,null);
					inventoryService.changeQuantityInMasters(invoice, returntype);
				}else if(returntype.equalsIgnoreCase(MasterGSTConstants.PROFORMAINVOICES)) {
					InvoiceParent invoice = proformaInvoicesRepository.findOne(invnos.get(0));
					String invoiceNumber = invoice != null ? invoice.getInvoiceno() != null ? invoice.getInvoiceno() : "" : "";
					auditlogService.saveAuditLog(id, clientid,invoiceNumber,AuditLogConstants.DELETE,returntype,null,null);
				}else if(returntype.equalsIgnoreCase(MasterGSTConstants.DELIVERYCHALLANS)) {
					InvoiceParent invoice = deliveryChallanRepository.findOne(invnos.get(0));
					String invoiceNumber = invoice != null ? invoice.getInvoiceno() != null ? invoice.getInvoiceno() : "" : "";
					auditlogService.saveAuditLog(id, clientid,invoiceNumber,AuditLogConstants.DELETE,returntype,null,null);
				}else if(returntype.equalsIgnoreCase(MasterGSTConstants.ESTIMATES)) {
					InvoiceParent invoice = estimatesRepository.findOne(invnos.get(0));
					String invoiceNumber = invoice != null ? invoice.getInvoiceno() != null ? invoice.getInvoiceno() : "" : "";
					auditlogService.saveAuditLog(id, clientid,invoiceNumber,AuditLogConstants.DELETE,returntype,null,null);
				}else if(returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASEORDER)) {
					InvoiceParent invoice = purchaseOrderRepository.findOne(invnos.get(0));
					String invoiceNumber = invoice != null ? invoice.getInvoiceno() != null ? invoice.getInvoiceno() : "" : "";
					auditlogService.saveAuditLog(id, clientid,invoiceNumber,AuditLogConstants.DELETE,returntype,null,null);
				}
				deleteInvoices(id, clientid, returntype, invno, booksOrReturns, month, year);
			}
		}
		logger.debug(CLASSNAME + method + BEGIN);
		return MasterGSTConstants.SUCCESS;
	}
	
	@RequestMapping(value = "/deleteAllInvoices/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String delAllInvss(@PathVariable("id") String id,@PathVariable("clientid") String clientid,@PathVariable("returntype") String returntype, @PathVariable("month") int month,	@PathVariable("year") int year, @RequestParam("booksOrReturns") String booksOrReturns, ModelMap model,HttpServletRequest request) throws Exception {
		final String method = "deleteAllInvoices::";
		String reportType = "notreports";
		String strMonth = month < 10 ? "0" + month : month + "";
		String desc = strMonth+year;
		auditlogService.saveAuditLog(id, clientid,desc,AuditLogConstants.DELETEALL,returntype,null,null);
		String st = request.getParameter("start");
		String booksorReturns = request.getParameter("booksOrReturns");
		if(isNotEmpty(booksorReturns)) {
			if(booksorReturns.equals(MasterGSTConstants.PROFORMAINVOICES) || booksorReturns.equals(MasterGSTConstants.DELIVERYCHALLANS) || booksorReturns.equals(MasterGSTConstants.ESTIMATES) || booksorReturns.equals("SalesRegister") || booksorReturns.equals(MasterGSTConstants.PURCHASEORDER) || booksorReturns.equals("PurchaseRegister")){
				if(booksorReturns.equals(MasterGSTConstants.PROFORMAINVOICES) || booksorReturns.equals(MasterGSTConstants.DELIVERYCHALLANS) || booksorReturns.equals(MasterGSTConstants.ESTIMATES) || booksorReturns.equals("SalesRegister")){
					reportType = "reports";
				}
				booksorReturns = "books";
			}			
		}
		InvoiceFilter filter = new InvoiceFilter();
		filter.setBooksOrReturns(request.getParameter("booksorReturns"));
		int start = StringUtils.isEmpty(st) ? 0 : Integer.parseInt(st);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		Client client = clientService.findById(clientid);
		if(isNotEmpty(client) && isNotEmpty(client.getInvoiceViewOption())) {
			if(client.getInvoiceViewOption().equalsIgnoreCase("Yearly")) {
				if(booksorReturns !="" && booksorReturns !=null && booksorReturns.equalsIgnoreCase("books")) {
					month = 0;
					++year;
				}else if(isNotEmpty(filter.getBooksOrReturns()) && filter.getBooksOrReturns().equalsIgnoreCase("books")) {
					month = 0;
					++year;
				}
			}
		}
		String retType = returntype.trim();
		Pageable pageable = new PageRequest(0, 1000);
		boolean hasMore = true;
		Map<String, Object> invoicesMap = null;
		start = pageable.getPageNumber();
		while(hasMore) {
			invoicesMap = clientService.getDeleteAllInvoices(pageable, client, id, retType, reportType, month, year, start, 1000, searchVal, filter, true,booksOrReturns);
			Page<? extends InvoiceParent> invoices = (Page<? extends InvoiceParent>)invoicesMap.get("invoices");
			start++;
			if(isEmpty(invoices) || isEmpty(invoices.getContent()) || invoices.getContent().size() == 0) {
				hasMore = false;
				break;				
			}
			if(isNotEmpty(invoices) && isNotEmpty(invoices.getContent()) && invoices.getContent().size() < 1000) {
				hasMore = false;
			}
			if(isNotEmpty(invoices) && isNotEmpty(invoices.getContent())) {
				List<String> irnstatus = Lists.newArrayList();
				irnstatus.add("Generated");
				irnstatus.add("Cancelled");
				for(InvoiceParent invoiceParent : invoices) {
					if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1) || returntype.equalsIgnoreCase("SalesRegister")) {
						if(isNotEmpty(invoiceParent) && ((isNotEmpty(invoiceParent.getIrnStatus()) && !irnstatus.contains(invoiceParent.getIrnStatus())) || isEmpty(invoiceParent.getIrnStatus()))) {
							if(isEmpty(invoiceParent.getIrnNo())) {
								inventoryService.changeQuantityInMasters(invoiceParent, returntype);
								deleteInvoices(id, clientid, returntype, invoiceParent.getId().toString(), booksOrReturns, month, year);
							}
						}
					}else {
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase("Purchase Register")) {
							inventoryService.changeQuantityInMasters(invoiceParent, returntype);
						}
						deleteInvoices(id, clientid, returntype, invoiceParent.getId().toString(), booksOrReturns, month, year);
					}
				}
			}
		}
		logger.debug(CLASSNAME + method + BEGIN);
		return MasterGSTConstants.SUCCESS;
	}
	
	public void deleteInvoices(String id, String clientid, String returntype, String invoiceId, String booksOrReturns, int month, int year) {
		String retType;
		if(returntype.equals(GSTR1)){
			retType = GSTR1;
		}else if(returntype.equals(GSTR4)){
			retType = GSTR4;
		}else if(returntype.equals(GSTR5)){
			retType = GSTR5;
		}else if(returntype.equals(GSTR6)){
			retType = GSTR6;
		}else if(returntype.equals(ANX1)){
			retType = ANX1;
		}else if(returntype.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			retType = MasterGSTConstants.DELIVERYCHALLANS;
		}else if(returntype.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			retType = MasterGSTConstants.PROFORMAINVOICES;
		}else if(returntype.equals(MasterGSTConstants.ESTIMATES)) {
			retType = MasterGSTConstants.ESTIMATES;
		}else if(returntype.equals(MasterGSTConstants.PURCHASEORDER)) {
			retType = MasterGSTConstants.PURCHASEORDER;
		}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
			retType = MasterGSTConstants.EWAYBILL;
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			retType = MasterGSTConstants.EINVOICE;
		}else{
			retType = PURCHASE_REGISTER;
		}
		AccountingJournal journal = null;
		if(PURCHASE_REGISTER.equals(retType)) {
			journal = accountingJournalRepository.findByInvoiceIdAndClientIdAndReturnType(invoiceId,clientid,"GSTR2");
		}else {
			journal = accountingJournalRepository.findByInvoiceIdAndClientIdAndReturnType(invoiceId,clientid,retType);
		}
		if(isNotEmpty(journal)) {
			journal.setStatus("Deleted");
			accountingJournalRepository.save(journal);
		}
		String invoiceNo = clientService.deleteInvoice(invoiceId, retType,booksOrReturns);
		if (isNotEmpty(invoiceNo)) {
			String submissionYear = (year - 1) + "-" + (year);
			if (month > 3) {
				submissionYear = year + "-" + (year + 1);
			}
			Client client = clientService.findById(clientid);
			List<CompanyInvoices> invoiceSubmissionDatas = profileService.getUserInvoiceSubmissionDetails(clientid,submissionYear);
			if (isNotEmpty(invoiceSubmissionDatas)) {
				for (CompanyInvoices invoiceSubmissionData : invoiceSubmissionDatas) {
					if (isNotEmpty(invoiceSubmissionData.getPrefix()) && invoiceNo.startsWith(invoiceSubmissionData.getPrefix())) {
						if (isEmpty(invoiceSubmissionData.getInvoiceType())) {
							invoiceSubmissionData.setInvoiceType("ALL");
						}
						String prefix = invoiceSubmissionData.getPrefix();
						Integer inv = -1;
						try {
							inv = Integer.parseInt(invoiceNo.replace(prefix, ""));
						} catch (NumberFormatException e) {
						}
						if (inv > 0) {
							Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, returntype,month, year);
							if(isNotEmpty(invoices)) {
								boolean updated = false;
								for (InvoiceParent invoice : invoices) {
									if (isNotEmpty(invoice.getInvoiceno()) && isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(invoiceSubmissionData.getInvoiceType()) || invoiceSubmissionData.getInvoiceType().equals("ALL")) && invoice.getInvoiceno().startsWith(prefix)) {
										try {
											Integer newInv = Integer.parseInt(invoice.getInvoiceno().replace(prefix, ""));
											if (newInv > inv) {
												newInv--;
											}
											invoice.setInvoiceno(prefix + newInv);
											updated = true;
										} catch (NumberFormatException e) {
										}
									}
								}
								if (updated) {
									clientService.saveInvoices(invoices, returntype);
								}
							}
						}
					}
				}
			}
		}
	}
	
	@RequestMapping(value = "/mdfyreturns", method = RequestMethod.GET)
	public @ResponseBody Map<String, GSTReturnSummary> getReturnSummary(@RequestParam(value = "userid", required = true) String userid,	@RequestParam(value = "date", required = true) String date, ModelMap model, HttpServletRequest request)	throws Exception {
		final String method = "getReturnSummary::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "date\t" + date);
		Date newDate = new SimpleDateFormat("dd-MM-yyyy").parse(date);
		List<Client> lClient = Lists.newArrayList();
		List<String> clientIds = (List<String>) request.getSession().getAttribute("clientIds");
		if (isEmpty(clientIds)) {
			lClient = clientService.findByUserid(userid);
		} else {
			lClient = clientService.findClients(clientIds);
		}
		return getReturnSummaryMap(lClient, newDate);
	}

	@RequestMapping(value = "/mdfyclntreturns", method = RequestMethod.GET)
	public @ResponseBody Map<String, GSTReturnSummary> getClientReturnSummary(@RequestParam(value = "clientid", required = true) String clientid,@RequestParam(value = "date", required = true) String date, ModelMap model) throws Exception {
		final String method = "getClientReturnSummary::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "date\t" + date);
		Date newDate = new SimpleDateFormat("dd-MM-yyyy").parse(date);
		Client client = clientService.findById(clientid);
		List<Client> lClient = Lists.newArrayList();
		lClient.add(client);
		return getReturnSummaryMap(lClient, newDate);
	}

	private Map<String, GSTReturnSummary> getReturnSummaryMap(final List<Client> clientList, final Date date) {
		Map<String, GSTReturnSummary> returnsSummaryMap = Maps.newHashMap();
		List<GSTReturnSummary> returnsSummaryList = clientService.getGSTReturnsSummary(date);
		for (GSTReturnSummary summary : returnsSummaryList) {
			if (!returnsSummaryMap.containsKey(summary.getReturntype())) {
				if (isEmpty(summary.getStatusMap())) {
					Map<String, Integer> statusMap = Maps.newHashMap();
					statusMap.put(MasterGSTConstants.PENDING, 0);
					summary.setStatusMap(statusMap);
				}
				returnsSummaryMap.put(summary.getReturntype(), summary);
			}
		}
		if (isNotEmpty(clientList)) {
			for (Client client : clientList) {
				if (isNotEmpty(client.getStatus()) && returnsSummaryMap.keySet().contains(client.getStatus())) {
					returnsSummaryMap.get(client.getStatus()).getStatusMap().put(MasterGSTConstants.PENDING, returnsSummaryMap.get(client.getStatus()).getStatusMap().get(MasterGSTConstants.PENDING) + 1);
				} else {
					if (returnsSummaryMap.get(GSTR1).getStatusMap().containsKey(MasterGSTConstants.PENDING)) {
						returnsSummaryMap.get(GSTR1).getStatusMap().put(MasterGSTConstants.PENDING, returnsSummaryMap.get(GSTR1).getStatusMap().get(MasterGSTConstants.PENDING) + 1);
					} else {
						returnsSummaryMap.get(GSTR1).getStatusMap().put(MasterGSTConstants.PENDING, 1);
					}
				}
				Calendar cal = Calendar.getInstance();
				cal.setTime(date);
				int month = cal.get(Calendar.MONTH) + 1;
				int year = cal.get(Calendar.YEAR);
				for (String returnType : returnsSummaryMap.keySet()) {
					Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, returnType, month, year);
					Double fieldValue = 0d;
					if (isNotEmpty(invoices)) {
						for (InvoiceParent invoice : invoices) {
							if (returnType.equals(MasterGSTConstants.GSTR2)) {
								if (isNotEmpty(invoice.getTotalitc())) {
									fieldValue += invoice.getTotalitc();
								}
							} else {
								if (isNotEmpty(invoice.getTotaltax())) {
									fieldValue += invoice.getTotaltax();
								}
							}
						}
					}
					if (isEmpty(returnsSummaryMap.get(returnType).getFieldValue())) {
						returnsSummaryMap.get(returnType).setFieldValue(fieldValue);
					} else {
						returnsSummaryMap.get(returnType).setFieldValue(returnsSummaryMap.get(returnType).getFieldValue() + fieldValue);
					}
				}
			}
		}
		return returnsSummaryMap;
	}

	@RequestMapping(value = "/addclient/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public ModelAndView addClient(@PathVariable("id") String id, @PathVariable("name") String fullname,@PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("clientvalue", "addclient");
		logger.debug(CLASSNAME + method + END);
		return new ModelAndView("client/addclient", "client", new Client());
	}

	@RequestMapping(value = "/configurefirm/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String configureFirm(@PathVariable("id") String id, @PathVariable("name") String fullname,@PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "configureFirm::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		model.addAttribute("userdetails", user);
		logger.debug(CLASSNAME + method + END);
		Client clnt =null;
		if(isNotEmpty(user.getParentid())) {
			User usr = null;
			if(isNotEmpty(user.getIsglobal()) && "true".equals(user.getIsglobal())) {
				usr = userService.findById(user.getParentid());
			}else {
				usr = user;
			}
			clnt = clientService.findByEmailandfirm(usr.getEmail(), "firm");
		}else {
			clnt = clientService.findByEmailandfirm(user.getEmail(), "firm");
		}
		if(NullUtil.isNotEmpty(clnt)) {
			return "redirect:/ccdb/" + id + "/" + fullname + "/" + usertype + "/"+clnt.getId().toString()+"/" + month + "/" + year+"?type=cfirm";
		} else {	
			return "client/configurefirm";
		}
	}
	
	@RequestMapping(value = "/addclntelgbty/{id}", method = RequestMethod.GET)
	public @ResponseBody boolean checkAddClientEligibility(@PathVariable("id") String id) throws Exception {
		final String method = "checkAddClientEligibility::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<String> clientList = clientService.getClientList(id, Lists.newArrayList());
		return subscriptionService.allowAddClient(id, clientList.size());
	}
	public void addDefaultDetailsToClient(Client client) {
		PrintConfiguration printform = new PrintConfiguration();
		printform.setClientid(client.getId().toString());
		printform.setInvoiceText("");
		printform.setEnableDiscount(false);
		printform.setEnableRate(false);
		printform.setEnableQuantity(false);
		printform.setEnableState(true);
		printform.setEnablePan(true);
		printform.setEnablePlaceOfSupply(true);
		printConfigurationRepository.save(printform);
		OtherConfigurations otherConfigs = new OtherConfigurations();
		otherConfigs.setClientid(client.getId().toString());
		otherConfigs.setItcinput("100");
		otherConfigs.setItcinputService("100");
		otherConfigs.setItcCapgood("100");
		otherConfigs.setEnableDrcr(false);
		otherConfigs.setEnableTransDate(false);
		otherConfigs.setEnableLedgerSalesField(true);
		otherConfigs.setEnableLedgerPurField(true);
		otherConfigs.setEnableLedgerName(false);
		otherConfigs.setEnableSalesFields(false);
		otherConfigs.setEnablePurFields(false);
		otherConfigs.setEnableinvoiceview(false);
		otherConfigurationRepository.save(otherConfigs);
		/*boolean isgroupexist = false;
		List<GroupDetails> groupdetails = Lists.newArrayList();
		List<Groups> defgrps = groupsRepository.findAll();
		for(Groups grps : defgrps) {
			GroupDetails grpdetails = new GroupDetails();
			grpdetails.setClientid(client.getId().toString());
			grpdetails.setGroupname(grps.getName());
			grpdetails.setHeadname(grps.getHeadname());
			grpdetails.setPath(grps.getPath());
			List<Subgroups> subgroup = Lists.newArrayList();
			if(isNotEmpty(grps.getSubgroup())) {
				for(Subgroup subgrp : grps.getSubgroup()) {
					if(isNotEmpty(subgrp) && isNotEmpty(subgrp.getSubgroupname())) {
						Subgroups subgrps = new Subgroups();
						subgrps.setGroupname(subgrp.getSubgroupname());
						subgrps.setHeadname(grpdetails.getGroupname());
						subgrps.setPath(grpdetails.getPath()+"/"+subgrp.getSubgroupname());
						subgrps.setGroupid(grpdetails.getId().toString());
						subgroup.add(subgrps);
					}
				}
			}
			grpdetails.setSubgroups(subgroup);
			groupdetails.add(grpdetails);
		}
		groupDetailsRepository.save(groupdetails);
		List<ProfileLedger> ledger = Lists.newArrayList();
		ProfileLedger lgrdr = new ProfileLedger();
		lgrdr.setClientid(client.getId().toString());	
		lgrdr.setLedgerName("Other Debtors");
		lgrdr.setGrpsubgrpName("Sundry Debtors");
		lgrdr.setLedgerpath("Assets/Current Assets/Sundry Debtors");
		lgrdr.setLedgerOpeningBalance(0);
		ledger.add(lgrdr);
		ProfileLedger lgrcr = new ProfileLedger();
		lgrcr.setClientid(client.getId().toString());	
		lgrcr.setLedgerName("Other Creditors");
		lgrcr.setGrpsubgrpName("Sundry Creditors");
		lgrcr.setLedgerpath("Assets/Current Assets/Sundry Creditors");
		lgrcr.setLedgerOpeningBalance(0);
		ledger.add(lgrcr);
		ledgerRepository.save(ledger);
		client.setIsgroupexist(true);*/
	}
	@RequestMapping(value = "/createclient/{userid}/{name}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String createClient(@ModelAttribute("client") Client client, @PathVariable("userid") String userid,@PathVariable("name") String fullname, @PathVariable("usertype") String usertype,@PathVariable("month") int month, @PathVariable("year") int year,@RequestParam("filingoption")String filingoption, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "createClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + userid);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		boolean isExist = clientService.collectionExists("client");
		logger.debug(CLASSNAME + method + isExist);
		String delearType = client.getDealertype();
		if(delearType.equals(DEALER_COMPOUND)){
			client.setFilingOption(FILING_OPTION_QUARTERLY);
		}else{
			client.setFilingOption(FILING_OPTION_MONTHLY);
		}
		List<GSTReturnSummary> lGSTReturnsSummury = clientService.getGSTReturnsSummary(client, month, year, false);
		client.setReturnsSummary(lGSTReturnsSummury);
		List<FilingOptions> lstoptions=new ArrayList<FilingOptions>();
		lstoptions.add(new FilingOptions(new ObjectId(),Calendar.getInstance().get(Calendar.YEAR)+"-"+(Calendar.getInstance().get(Calendar.YEAR)+1),filingoption));
		client.setFilingoptions(lstoptions);
		List<TurnoverOptions> turnoveroptionLst=new ArrayList<TurnoverOptions>();
		turnoveroptionLst.add(new TurnoverOptions(new ObjectId(), "APR2017-JUN2017", 0d));
		client.setTurnovergoptions(turnoveroptionLst);
		if(isEmpty(client.getJournalEnteringDate())) {
			Calendar cal = Calendar.getInstance();
			if(isNotEmpty(client.getCreatedDate())) {
				cal.setTime(client.getCreatedDate());
			}
			year = cal.get(Calendar.YEAR);
			cal.set(year, Calendar.APRIL, 1);
			client.setJournalEnteringDate(cal.getTime());
		}
		client = clientService.createClient(client, userid);
		addDefaultDetailsToClient(client);
		Branch branch = new Branch();
		branch.setName("Main Branch");
		branch.setAddress(client.getAddress());
		client.getBranches().add(branch);
		if(isEmpty(client.getClienttype())) {
			client.setClienttype("UnRegistered");
		}
		clientService.saveClient(client);
		List<String> clientIds = (List<String>) request.getSession().getAttribute("clientIds");
		if (isEmpty(clientIds)) {
			clientIds = Lists.newArrayList();
		}
		clientIds.add(client.getId().toString());
		request.getSession().setAttribute("clientIds", clientIds);
		String clientid=client.getId().toString();
		logger.debug(CLASSNAME + method + END);
		if(isNotEmpty(client.getClienttype()) && "UnRegistered".equalsIgnoreCase(client.getClienttype())) {
			return "redirect:/ccdb/" + userid + "/" + fullname + "/" + usertype +"/"+clientid+ "/" + month + "/" + year+"?type=initial";
		}else {
			return "redirect:/csyncdata/" + userid + "/" + fullname + "/" + usertype +"/"+clientid+ "/" + month + "/" + year;
		}
	}
	
	@RequestMapping(value = "/createfirm/{userid}/{name}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String createFirm(@ModelAttribute("client") Client client, @PathVariable("userid") String userid,@PathVariable("name") String fullname, @PathVariable("usertype") String usertype,@RequestParam("filingoption")String filingoption,@PathVariable("month") int month, @PathVariable("year") int year,	ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "createClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + userid);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		boolean isExist = clientService.collectionExists("client");
		logger.debug(CLASSNAME + method + isExist);
		String delearType = client.getDealertype();
		if(delearType.equals(DEALER_COMPOUND)){
			client.setFilingOption(FILING_OPTION_QUARTERLY);
		}else{
			client.setFilingOption(FILING_OPTION_MONTHLY);
		}
		List<FilingOptions> lstoptions=new ArrayList<FilingOptions>();
		lstoptions.add(new FilingOptions(new ObjectId(),Calendar.getInstance().get(Calendar.YEAR)+"-"+(Calendar.getInstance().get(Calendar.YEAR)+1),filingoption));
		client.setFilingoptions(lstoptions);
		client.setConfigurefirm("firm");
		client = clientService.createClient(client, userid);
		addDefaultDetailsToClient(client);
		clientService.saveClient(client);
		List<String> clientIds = (List<String>) request.getSession().getAttribute("clientIds");
		if (isEmpty(clientIds)) {
			clientIds = Lists.newArrayList();
		}
		request.getSession().setAttribute("clientIds", clientIds);
		logger.debug(CLASSNAME + method + END);
		return "redirect:/ccdb/" + userid + "/" + fullname + "/" + usertype + "/"+client.getId().toString()+"/" + month + "/" + year+"?type=cfirm";
	}

	@RequestMapping(value = "/cdb/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String clientDashboard(@PathVariable("id") String id, @PathVariable("name") String fullname,	@PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year,ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "clientDashboard::";
		logger.debug(CLASSNAME + method + BEGIN);
		updateModel(model, id, fullname, usertype, month, year);
		List<Client> lClient = Lists.newArrayList();
		List<String> clientIds = (List<String>) request.getSession().getAttribute("clientIds");
		if (isEmpty(clientIds)) {
			lClient = clientService.findByUserid(id);
		} else {
			lClient = clientService.findClients(clientIds);
		}
		User user = userService.findById(id);
		List<DashboardRoles> dbroles = profileService.getUserDashboardClientPermissions(id,clientIds);
		model.addAttribute("dbroles", dbroles);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			model.addAttribute("companyUser", companyUser);
			if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
				model.addAttribute("addClient", companyUser.getAddclient());
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		if (isNotEmpty(lClient)) {
			model.addAttribute("headervalue","allclients");
			populateClientModel(lClient, model, month, year);
			logger.debug(CLASSNAME + method + END);
			return "client/client_dashboard";
		} else {
			return "dashboard/dashboard_ca_init";
		}
	}
	
	@RequestMapping(value = "/clientlist/{id}/{name}/{clientid}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public  @ResponseBody List<Client> clientList(@PathVariable("id") String id, @PathVariable("name") String fullname,@PathVariable("clientid") String clientid, @PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "clientList::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<Client> lClient = Lists.newArrayList();
		List<Client> lClients = Lists.newArrayList();
		List<String> clientIds = (List<String>) request.getSession().getAttribute("clientIds");
		if (isEmpty(clientIds)) {
			lClient = clientService.findByUserid(id);
		} else {
			lClient = clientService.findClients(clientIds);
		}
		User cuser = userService.findById(id);
		for(Client client : lClient) {
			String clientids = client.getId().toString();
			CompanyUser companyUser = null;
			if(NullUtil.isNotEmpty(cuser) && NullUtil.isNotEmpty(cuser.getParentid())){
				companyUser = profileService.getCompanyUser(cuser.getEmail(), clientids);
			}
			if(NullUtil.isNotEmpty(companyUser)) {
				if(isEmpty(companyUser.getDisable()) || "false".equals(companyUser.getDisable())) {
					client.setContactperson("false");
				}else {
					client.setContactperson("true");
				}
			}else {
				client.setContactperson("false");
			}
			client.setLastname(clientids);
			lClients.add(client);
		}
		return lClients;
	}
	
	@RequestMapping(value = "/clientsData", method = RequestMethod.GET)
	public @ResponseBody List<Client> clientData(@RequestParam(value = "clientIds", required = true) List<String> clientIds) throws Exception {
		List<Client> lClient = clientService.findClients(clientIds);
		return lClient;
	}
	@RequestMapping(value = "/customersData", method = RequestMethod.GET)
	public @ResponseBody List<CompanyCustomers> customersData(@RequestParam(value = "clientIds", required = true) List<String> clientIds) throws Exception {
		List<CompanyCustomers> customers = ProfileDao.findByClientid(clientIds);
		return customers;
	}
	
	@RequestMapping(value = "/mismtchstatus", method = RequestMethod.GET)
	public @ResponseBody Map<String, Integer> getMisMatchCounts(@RequestParam(value = "month", required = true) int month,@RequestParam(value = "year", required = true) int year,@RequestParam(value = "clientIds", required = true) List<String> clientIds, ModelMap model) throws Exception {
		final String method = "getMisMatchCounts::";
		logger.debug(CLASSNAME + method + BEGIN);
		Map<String, Integer> statusMap = clientService.getMismatchCount(clientIds, month, year);
		logger.debug(CLASSNAME + method + END);
		return statusMap;
	}

	@RequestMapping(value = "/connectors/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String connectors(@PathVariable("id") String id, @PathVariable("name") String fullname,@PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "connectors::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		model.addAttribute("connectorvalue", "connectors");
		updateModel(model, id, fullname, usertype, month, year);
		logger.debug(CLASSNAME + method + END);
		return "connectors/connectors";
	}

	private void populateClientModel(List<Client> lClient, ModelMap model, int month, int year) throws Exception {
		Collections.sort(lClient, new Comparator<Client>() {
			@Override
			public int compare(Client o1, Client o2) {
				if (isNotEmpty(o1.getCreatedDate()) && isNotEmpty(o2.getCreatedDate())) {
					long first = o1.getCreatedDate().getTime();
					long second = o2.getCreatedDate().getTime();
					return (first < second ? 1 : (first == second ? 0 : -1));
				} else {
					return 0;
				}
			}
		});
		model.addAttribute("lClient", lClient);
	}

	@RequestMapping(value = "/ccdb/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String clientCompanyDashboard(@PathVariable("id") String id, @PathVariable("name") String fullname,@PathVariable("clientid") String clientid, @PathVariable("usertype") String usertype, @PathVariable("month") int month,@PathVariable("year") int year,@RequestParam("type") String type,HttpServletRequest request, ModelMap model) throws Exception {
		final String method = "clientCompanyDashboard::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		Client client = clientService.findById(clientid);
		List<GSTReturnSummary> lGSTReturnsSummury = clientService.getGSTReturnsSummary(client, month, year, false);
		client.setReturnsSummary(lGSTReturnsSummury);
		CompletableFuture<Client> future = CompletableFuture.supplyAsync(() -> client);
		future.thenAcceptAsync(clientObj -> {
			clientObj.setReturnsSummary(lGSTReturnsSummury);
			clientService.saveClient(clientObj);
		});
		String name = "Main Branch";
		String baddress = "";
		if(isNotEmpty(client.getAddress())) {
			baddress = client.getAddress();
		}
		List<Branch> branches =client.getBranches();
		boolean branchexists = false;
		for(int i=0;i<branches.size();i++) {
			String bname = branches.get(i).getName();
			if(name.equalsIgnoreCase(bname)) {
				branchexists =  true;
				break;
		   }else {
			   branchexists = false;
		   }
		}
		if(!branchexists) {
			Branch branch = new Branch();
			branch.setName("Main Branch");
			branch.setAddress(baddress);
			client.getBranches().add(branch);
			clientService.saveClient(client);
		}
		logger.debug(CLASSNAME + method + "lGSTReturnsSummary\t" + lGSTReturnsSummury.toString());
		if(isNotEmpty(client.getGstname())) {
			HeaderKeys headerKeys=clientService.getHeaderkeysGstusername(client.getGstname());			
			if(isEmpty(headerKeys)) {
				model.addAttribute("headerkeys", "NOTFOUND");
			}else {
				if(NullUtil.isNotEmpty(headerKeys) && NullUtil.isNotEmpty(headerKeys.getUpdatedDate())) {
					long duration = Calendar.getInstance().getTime().getTime() - headerKeys.getUpdatedDate().getTime();
					long diff = TimeUnit.MILLISECONDS.toMinutes(duration);
					if(NullUtil.isNotEmpty(headerKeys.getExpiry()) && headerKeys.getExpiry() == 0) {
						model.addAttribute("otpexpires","EXPIRED");
					}else {
						if(diff >= 360) {
							model.addAttribute("otpexpires","EXPIRED");
						}
					}
				}	
			}
		}
		List<Client> lClient = Lists.newArrayList();
		lClient.add(client);
		populateClientModel(lClient, model, month, year);
		User user = userRepository.findById(id);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.contains(clientid)){
					model.addAttribute("companyUser", companyUser);
				}else {
					ClientUserMapping clntusermapping = clientUserMappingRepository.findByClientidAndCreatedByIsNotNull(clientid);
					if(isEmpty(clntusermapping)) {
					ClientUserMapping clientuserMapping = clientUserMappingRepository.findByUseridAndClientid(user.getId().toString(), clientid);
						if(isNotEmpty(clientuserMapping) && isEmpty(clientuserMapping.getCreatedBy())) {
							clientuserMapping.setCreatedBy(user.getId().toString());
							clientUserMappingRepository.save(clientuserMapping);
						}
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
			ClientUserMapping clntusermapping = clientUserMappingRepository.findByClientidAndCreatedByIsNotNull(clientid);
			if(isEmpty(clntusermapping)) {
				ClientUserMapping clientuserMapping = clientUserMappingRepository.findByUseridAndClientid(user.getId().toString(), clientid);
				if(isNotEmpty(clientuserMapping) && isEmpty(clientuserMapping.getCreatedBy())) {
					clientuserMapping.setCreatedBy(user.getId().toString());
					clientUserMappingRepository.save(clientuserMapping);
				}
			}
		}
		Map<String, Map<String, String>> summaryMap = clientService.getConsolidatedSummeryForYearMonthwise(client, Utility.getYearCode(month, year), false);
		model.addAttribute("summaryMap", summaryMap);
		model.addAttribute("client", client);
		model.addAttribute("userdetails", user);
		model.addAttribute("dealertype", client.getDealertype());
		model.addAttribute("lGSTReturnsSummury", lGSTReturnsSummury);
		model.addAttribute("ptype", type);
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);
		if(type == "initial" || type == "cfirm") {
			Calendar cal = Calendar.getInstance();
			month = cal.get(Calendar.MONTH) + 1;
			year = cal.get(Calendar.YEAR);
		}
		updateModel(model, id, fullname, usertype, month, year);
		HttpSession session = request.getSession(false);
		if (isNotEmpty(session) && isNotEmpty(session.getAttribute("error.xls"))) {
			File file = (File) session.getAttribute("error.xls");
			try {
				file.delete();
			} catch (Exception e) {}
			session.removeAttribute("error.xls");
		}
		logger.debug(CLASSNAME + method + END);
		return "client/client_company_dashboard";
	}
	
	@RequestMapping(value = "/cashAndCreditLedgerDetails/{id}/{clientid}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Object> ledgerDetails(@PathVariable("id") String id,@PathVariable("clientid") String clientid,ModelMap model)throws Exception {
		final String method = "ledgerDetails::";
		logger.debug(CLASSNAME + method + BEGIN);
		Map<String, Object> cashAndCreditLedger = Maps.newHashMap();
		Client client = clientService.findById(clientid);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		Date date = new Date();  
		String fromdate = dateFormat.format(date);
		LedgerResponse cashledger = iHubConsumerService.getLedgerCashDetails(client, client.getGstnnumber(), fromdate, fromdate, id, true);
		if(isNotEmpty(cashledger)) {
			if(isNotEmpty(cashledger.getData())) {
				if(isNotEmpty(cashledger.getData().getCloseBal())) {
					cashAndCreditLedger.put("cashledger", cashledger.getData().getCloseBal());
				}
			}
		}
		LedgerResponse creditledger = iHubConsumerService.getLedgerITCDetails(client, client.getGstnnumber(), fromdate, fromdate, id, true);
		if(isNotEmpty(creditledger)) {
			if(isNotEmpty(creditledger.getData())) {
				if(isNotEmpty(creditledger.getData().getItcLdgDtls())) {
					if(isNotEmpty(creditledger.getData().getItcLdgDtls().getCloseBal())) {
						cashAndCreditLedger.put("creditledger", creditledger.getData().getItcLdgDtls().getCloseBal());
					}
				}
			}
		}
		return cashAndCreditLedger;
	}
	
	@RequestMapping(value = "/mdfyclntReportView", method = RequestMethod.POST)
	public @ResponseBody void saveReportView(@RequestParam(value = "clientid", required = true) String clientid,@RequestParam(value = "reportView", required = true) String reportView, ModelMap model) {
		final String method = "saveTerms::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		client.setReportView(reportView);
		clientService.saveClient(client);
	}
	
	@RequestMapping(value = "/mdfyclntPendingInvoicesView", method = RequestMethod.POST)
	public @ResponseBody void savePendingInvoicesView(@RequestParam(value = "clientid", required = true) String clientid,@RequestParam(value = "prevPendingInv", required = true) String prevPendingInv, ModelMap model) {
		final String method = "saveTerms::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		client.setPrevPendingInv(prevPendingInv);
		clientService.saveClient(client);
	}
	
	@RequestMapping(value = "/mdfyclntBillDateInvoicesView", method = RequestMethod.POST)
	public @ResponseBody OtherConfigurations saveBillDateInvoicesView(@RequestParam(value = "clientid", required = true) String clientid,@RequestParam(value = "billDateInv", required = true) String billDateInv, ModelMap model) {
		final String method = "billDateInv::";
		logger.debug(CLASSNAME + method + BEGIN);
		OtherConfigurations othrconfigs = otherConfigurationRepository.findByClientid(clientid);
		if(isNotEmpty(othrconfigs)) {
			otherConfigurationRepository.deleteByClientid(othrconfigs.getClientid());			
		}
		if(isEmpty(othrconfigs)) {
			othrconfigs = new OtherConfigurations();
			othrconfigs.setEnableDrcr(false);
			othrconfigs.setItcinput("100");
			othrconfigs.setItcinputService("100");
			othrconfigs.setItcCapgood("100");
			othrconfigs.setClientid(clientid);
			if(billDateInv.equals("true")) {
				othrconfigs.setEnableTransDate(true);
			} else {
				othrconfigs.setEnableTransDate(false);
			}
		}else {
			if(billDateInv.equals("true")) {
				othrconfigs.setEnableTransDate(true);
			} else {
				othrconfigs.setEnableTransDate(false);
			}
		}
		return otherConfigurationRepository.save(othrconfigs);
	}
	
	@RequestMapping(value = "/mdfyclntfpinvdateInvoicesView", method = RequestMethod.POST)
	public @ResponseBody OtherConfigurations savefpinvdateInvoicesView(@RequestParam(value = "clientid", required = true) String clientid,
			@RequestParam(value = "fpinvDateInv", required = true) String fpinvDateInv, ModelMap model) {
		final String method = "fpinvDateInv::";
		logger.debug(CLASSNAME + method + BEGIN);
		OtherConfigurations othrconfigs = otherConfigurationRepository.findByClientid(clientid);
		if(isNotEmpty(othrconfigs)) {
			otherConfigurationRepository.deleteByClientid(othrconfigs.getClientid());			
		}
		if(isEmpty(othrconfigs)) {
			othrconfigs = new OtherConfigurations();
			othrconfigs.setEnableDrcr(false);
			othrconfigs.setItcinput("100");
			othrconfigs.setItcinputService("100");
			othrconfigs.setItcCapgood("100");
			othrconfigs.setClientid(clientid);
			if(fpinvDateInv.equals("true")) {
				othrconfigs.setEnableinvoiceview(true);
			} else {
				othrconfigs.setEnableinvoiceview(false);
			}
		}else {
			if(fpinvDateInv.equals("true")) {
				othrconfigs.setEnableinvoiceview(true);
			} else {
				othrconfigs.setEnableinvoiceview(false);
			}
		}
		return otherConfigurationRepository.save(othrconfigs);
	}
	@RequestMapping(value = "/clntflngstatus/{clientid}/{year}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Map<String, List<String>>> clientFilingStatus(@PathVariable("clientid") String clientid,@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "clientFilingStatus::";
		logger.debug(CLASSNAME + method + BEGIN);
		return clientService.getFilingStatusReports(clientid, year);
	}
	
	@RequestMapping(value = "/clntflngstatuss/{clientid}/{year}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Map<String, List<String>>> reportCientFilingStatus(@PathVariable("clientid") String clientid,@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "reportCientFilingStatus::";
		logger.debug(CLASSNAME + method + BEGIN);
		return clientService.getReportFilingStatusReports(clientid, year);
	}

	@RequestMapping(value = "/mdfyclntMonthlyreturns", method = RequestMethod.GET)
	public @ResponseBody Map<String, Map<String, String>> getClientMonthlyReturnSummary(@RequestParam(value = "clientid", required = true) String clientid,	@RequestParam(value = "year", required = true) int year, ModelMap model,HttpServletRequest request) throws Exception {
		final String method = "getClientReturnSummary::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		model.addAttribute("dealertype", client.getDealertype());
		int month = Calendar.getInstance().get(Calendar.MONTH);
		month++;
		String yrcode = (year)+"-"+(year+1);
		Map<String, Map<String, String>> summaryMap = clientService.getConsolidatedSummeryForYearMonthwise(client, yrcode, false);
		Double totSales =0d,totpurchase = 0d,totexpense = 0d,totbalance = 0d,totSalesTax = 0d,totPurchasetax = 0d,totTax = 0d,totExempted = 0d, totTcsAmount = 0d,ptotTcsAmount = 0d,totTdsAmount = 0d;
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		for (int i : monthArray) {
			totSales += Double.valueOf(summaryMap.get(i + "").get("Sales"));
			totpurchase += Double.valueOf(summaryMap.get(i + "").get("Purchase"));
			totexpense += Double.valueOf(summaryMap.get(i + "").get("Expenses"));
			totbalance += Double.valueOf(summaryMap.get(i + "").get("Balance"));
			totSalesTax += Double.valueOf(summaryMap.get(i + "").get("SalesTax"));
			totPurchasetax += Double.valueOf(summaryMap.get(i + "").get("PurchaseTax"));
			totExempted += Double.valueOf(summaryMap.get(i + "").get("exempted"));
			totTcsAmount += Double.valueOf(summaryMap.get(i + "").get("tcsamount"));
			ptotTcsAmount += Double.valueOf(summaryMap.get(i + "").get("ptcsamount"));
			totTdsAmount += Double.valueOf(summaryMap.get(i + "").get("tdsamount"));
			totTax += Double.valueOf(summaryMap.get(i + "").get("Tax"));
		}
		for(int i=1; i<=12;i++) {
			if(i < 4) {
				Map<String, String> reportMap = summaryMap.get(i+"");
				Double cummulativeTax = 0d;
				if(Double.valueOf(summaryMap.get(i + "").get("Tax")) != 0) {
					for(int j=4 ; j<=12;j++) {
						cummulativeTax += Double.valueOf(summaryMap.get(j + "").get("Tax"));
					}
					for(int k=i ; k<=i && k>0;k--) {
						cummulativeTax += Double.valueOf(summaryMap.get(k + "").get("Tax"));
					}
				}
				reportMap.put("cummulativeTax", decimalFormat.format(cummulativeTax));
				summaryMap.put(i + "", reportMap);
			}else {
				Map<String, String> reportMap = summaryMap.get(i+"");
				Double cummulativeTax = 0d;
				if(Double.valueOf(summaryMap.get(i + "").get("Tax")) != 0) {
					for(int j=i ; j<=i && j>=4;j--) {
						cummulativeTax += Double.valueOf(summaryMap.get(j + "").get("Tax"));
					}
				}
				reportMap.put("cummulativeTax", decimalFormat.format(cummulativeTax));
				summaryMap.put(i + "", reportMap);
			}
		}
		Map<String, String> totReportMap = Maps.newHashMap();
		totReportMap.put("totSales", decimalFormat.format(totSales));
		totReportMap.put("totpurchase", decimalFormat.format(totpurchase));
		totReportMap.put("totexpense", decimalFormat.format(totexpense));
		totReportMap.put("totbalance", decimalFormat.format(totbalance));
		totReportMap.put("totSalesTax", decimalFormat.format(totSalesTax));
		totReportMap.put("totPurchasetax", decimalFormat.format(totPurchasetax));
		totReportMap.put("totExempted", decimalFormat.format(totExempted));
		totReportMap.put("totTcsAmount", decimalFormat.format(totTcsAmount));
		totReportMap.put("ptotTcsAmount", decimalFormat.format(ptotTcsAmount));
		totReportMap.put("totTdsAmount", decimalFormat.format(totTdsAmount));
		totReportMap.put("totTax", decimalFormat.format(totTax));
		summaryMap.put("totals", totReportMap);
		return summaryMap;
	}
	
	private Map<String, Map<String, String>> getFinancialSummary(Client client,int year) throws Exception{
		Double totSales =0d,totpurchase = 0d,totbalance = 0d,totSalesTax = 0d,totPurchasetax = 0d,totTax = 0d,totExempted = 0d, totTcsAmount = 0d,totTdsAmount = 0d;
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		Map<String, Map<String, String>> summaryMap = Maps.newHashMap();
		for (int i : monthArray) {
			Map<String, String> reportMap = null;
			if (i < 4) {
				reportMap = getSummaryMap(null, client, i, year + 1);
				summaryMap.put(i + "", reportMap);
			} else {
				reportMap = getSummaryMap(null, client, i, year);
				summaryMap.put(i + "", reportMap);
			}
			totSales += Double.valueOf(summaryMap.get(i + "").get("Sales"));
			totpurchase += Double.valueOf(summaryMap.get(i + "").get("Purchase"));
			totbalance += Double.valueOf(summaryMap.get(i + "").get("Balance"));
			totSalesTax += Double.valueOf(summaryMap.get(i + "").get("SalesTax"));
			totPurchasetax += Double.valueOf(summaryMap.get(i + "").get("PurchaseTax"));
			totExempted += Double.valueOf(summaryMap.get(i + "").get("exempted"));
			totTcsAmount += Double.valueOf(summaryMap.get(i + "").get("tcsamount"));
			totTdsAmount += Double.valueOf(summaryMap.get(i + "").get("tdsamount"));
			totTax += Double.valueOf(summaryMap.get(i + "").get("Tax"));
		}
		for(int i=1; i<=12;i++) {
			if(i < 4) {
				Map<String, String> reportMap = summaryMap.get(i+"");
				Double cummulativeTax = 0d;
				if(Double.valueOf(summaryMap.get(i + "").get("Tax")) != 0) {
					for(int j=4 ; j<=12;j++) {
						cummulativeTax += Double.valueOf(summaryMap.get(j + "").get("Tax"));
					}
					for(int k=i ; k<=i && k>0;k--) {
						cummulativeTax += Double.valueOf(summaryMap.get(k + "").get("Tax"));
					}
				}
				reportMap.put("cummulativeTax", decimalFormat.format(cummulativeTax));
				summaryMap.put(i + "", reportMap);
				
			}else {
				Map<String, String> reportMap = summaryMap.get(i+"");
				Double cummulativeTax = 0d;
				if(Double.valueOf(summaryMap.get(i + "").get("Tax")) != 0) {
					for(int j=i ; j<=i && j>=4;j--) {
						cummulativeTax += Double.valueOf(summaryMap.get(j + "").get("Tax"));
					}
				}
				reportMap.put("cummulativeTax", decimalFormat.format(cummulativeTax));
				summaryMap.put(i + "", reportMap);
				
			}
		}
		Map<String, String> totReportMap = Maps.newHashMap();
		totReportMap.put("totSales", decimalFormat.format(totSales));
		totReportMap.put("totpurchase", decimalFormat.format(totpurchase));
		totReportMap.put("totbalance", decimalFormat.format(totbalance));
		totReportMap.put("totSalesTax", decimalFormat.format(totSalesTax));
		totReportMap.put("totPurchasetax", decimalFormat.format(totPurchasetax));
		totReportMap.put("totExempted", decimalFormat.format(totExempted));
		totReportMap.put("totTcsAmount", decimalFormat.format(totTcsAmount));
		totReportMap.put("totTdsAmount", decimalFormat.format(totTdsAmount));
		totReportMap.put("totTax", decimalFormat.format(totTax));
		summaryMap.put("totals", totReportMap);
		return summaryMap;
	}
	
	@RequestMapping(value = "/dwnldFinancialSummaryxls/{id}/{clientid}/{year}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadFinancialSummary(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("year") int year,HttpServletResponse response, HttpServletRequest request) throws Exception {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		String clientname = "";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
			clientname = client.getBusinessname().replace("/", "");
		}
		String nextyear = ((year+1)+"").substring(2);
		String yrcode = (year)+"-"+(year+1);
		String fy = year+"_"+nextyear;
		String filename = ""+clientname+"_"+gstnumber+"_"+fy+"-Financial_Summary.xls";
		response.setHeader("Content-Disposition", "inline; filename='"+clientname+"_"+gstnumber+"_"+fy+"-Financial_Summary.xls");
		
		Map<String, Map<String, String>> summaryMap = clientService.getConsolidatedSummeryForYearMonthwise(client, yrcode, false);

		Double totSales =0d,totpurchase = 0d,totexpenses = 0d,totbalance = 0d,totSalesTax = 0d,totPurchasetax = 0d,totTax = 0d,totExempted = 0d, totTcsAmount = 0d,ptotTcsAmount = 0d,totTdsAmount = 0d;
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		for (int i : monthArray) {
			totSales += Double.valueOf(summaryMap.get(i + "").get("Sales"));
			totpurchase += Double.valueOf(summaryMap.get(i + "").get("Purchase"));
			totexpenses += Double.valueOf(summaryMap.get(i + "").get("Expenses"));
			totbalance += Double.valueOf(summaryMap.get(i + "").get("Balance"));
			totSalesTax += Double.valueOf(summaryMap.get(i + "").get("SalesTax"));
			totPurchasetax += Double.valueOf(summaryMap.get(i + "").get("PurchaseTax"));
			totExempted += Double.valueOf(summaryMap.get(i + "").get("exempted"));
			totTcsAmount += Double.valueOf(summaryMap.get(i + "").get("tcsamount"));
			ptotTcsAmount += Double.valueOf(summaryMap.get(i + "").get("ptcsamount"));
			totTdsAmount += Double.valueOf(summaryMap.get(i + "").get("tdsamount"));
			totTax += Double.valueOf(summaryMap.get(i + "").get("Tax"));
		}
		for(int i=1; i<=12;i++) {
			if(i < 4) {
				Map<String, String> reportMap = summaryMap.get(i+"");
				Double cummulativeTax = 0d;
				if(Double.valueOf(summaryMap.get(i + "").get("Tax")) != 0) {
					for(int j=4 ; j<=12;j++) {
						cummulativeTax += Double.valueOf(summaryMap.get(j + "").get("Tax"));
					}
					for(int k=i ; k<=i && k>0;k--) {
						cummulativeTax += Double.valueOf(summaryMap.get(k + "").get("Tax"));
					}
				}
				reportMap.put("cummulativeTax", decimalFormat.format(cummulativeTax));
				summaryMap.put(i + "", reportMap);
			}else {
				Map<String, String> reportMap = summaryMap.get(i+"");
				Double cummulativeTax = 0d;
				if(Double.valueOf(summaryMap.get(i + "").get("Tax")) != 0) {
					for(int j=i ; j<=i && j>=4;j--) {
						cummulativeTax += Double.valueOf(summaryMap.get(j + "").get("Tax"));
					}
				}
				reportMap.put("cummulativeTax", decimalFormat.format(cummulativeTax));
				summaryMap.put(i + "", reportMap);
			}
		}
		
		Map<String, String> totReportMap = Maps.newHashMap();
		totReportMap.put("totSales", decimalFormat.format(totSales));
		totReportMap.put("totpurchase", decimalFormat.format(totpurchase));
		totReportMap.put("totexpenses", decimalFormat.format(totexpenses));
		totReportMap.put("totbalance", decimalFormat.format(totbalance));
		totReportMap.put("totSalesTax", decimalFormat.format(totSalesTax));
		totReportMap.put("totPurchasetax", decimalFormat.format(totPurchasetax));
		totReportMap.put("totExempted", decimalFormat.format(totExempted));
		totReportMap.put("totTcsAmount", decimalFormat.format(totTcsAmount));
		totReportMap.put("ptotTcsAmount", decimalFormat.format(ptotTcsAmount));
		totReportMap.put("totTdsAmount", decimalFormat.format(totTdsAmount));
		totReportMap.put("totTax", decimalFormat.format(totTax));
		summaryMap.put("totals", totReportMap);
		
		Map<String, FinancialSummaryVO> summaryMapr = Maps.newHashMap();
		
		Iterator iter = summaryMap.entrySet().iterator();
		while (iter.hasNext()) {
			Map.Entry entry = (Map.Entry) iter.next();
			Map<String,String> monthSummary= (Map<String, String>) entry.getValue();
			String mnth = entry.getKey().toString();
			if(!"totals".equals(mnth)) {
			Iterator miter = monthSummary.entrySet().iterator();
			while (miter.hasNext()) {
				Map.Entry mentry = (Map.Entry) miter.next();
				if(summaryMapr.containsKey(mentry.getKey())) {
					String typ = mentry.getKey().toString();
					if(!typ.equals("sgst") && !typ.equals("cgst")  && !typ.equals("igst")) {
						
					FinancialSummaryVO sfinSummary = summaryMapr.get(mentry.getKey());
					switch(mnth) {
					case "1": sfinSummary.setJanamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "2": sfinSummary.setFebamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "3": sfinSummary.setMaramt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "4": sfinSummary.setAprilamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "5": sfinSummary.setMayamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "6": sfinSummary.setJuneamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "7": sfinSummary.setJulyamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "8": sfinSummary.setAugustamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "9": sfinSummary.setSepamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "10": sfinSummary.setOctamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "11": sfinSummary.setNovamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "12": sfinSummary.setDecamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					default : sfinSummary.setTotalamt(Double.parseDouble(mentry.getValue().toString()));
					break;
						
				}
				summaryMapr.put(mentry.getKey().toString(), sfinSummary);
					}
				}else {
					String typ = mentry.getKey().toString();
					if(!typ.equals("sgst") && !typ.equals("cgst")  && !typ.equals("igst")) {
					FinancialSummaryVO sfinSummary = new FinancialSummaryVO();
					switch(typ) {
					case "Sales": sfinSummary.setType("Sales");
					break;
					case "Purchase": sfinSummary.setType("Purchases");
					break;
					case "Expenses": sfinSummary.setType("Expenses");
					break;
					case "Balance": sfinSummary.setType("Balance");
					break;
					case "SalesTax": sfinSummary.setType("Output Tax");
					break;
					case "PurchaseTax": sfinSummary.setType("Input Tax");
					break;
					case "Tax": sfinSummary.setType("Monthly Tax");
					break;
					case "tcsamount": sfinSummary.setType("TCS Payable");
					break;
					case "ptcsamount": sfinSummary.setType("TCS Receivable");
					break;
					case "tdsamount": sfinSummary.setType("TDS Payable");
					break;
					case "exempted": sfinSummary.setType("Exempted");
					break;
					case "cummulativeTax": sfinSummary.setType("Cummulative Tax");
					break;
					default : sfinSummary.setType(typ);
					break;
					}
					
					switch(mnth) {
					case "1": sfinSummary.setJanamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "2": sfinSummary.setFebamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "3": sfinSummary.setMaramt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "4": sfinSummary.setAprilamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "5": sfinSummary.setMayamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "6": sfinSummary.setJuneamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "7": sfinSummary.setJulyamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "8": sfinSummary.setAugustamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "9": sfinSummary.setSepamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "10": sfinSummary.setOctamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "11": sfinSummary.setNovamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					case "12": sfinSummary.setDecamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					default : sfinSummary.setTotalamt(Double.parseDouble(mentry.getValue().toString()));
					break;
					}
					
					summaryMapr.put(mentry.getKey().toString(), sfinSummary);
					}
				}
			}
		}
		}
		
		Map<String,String> totals = summaryMap.get("totals");
		
		List<FinancialSummaryVO> financialSummaryVOList=Lists.newArrayList();
		Iterator summary = summaryMapr.entrySet().iterator();
		while (summary.hasNext()) {
			Map.Entry entry = (Map.Entry) summary.next();
			if("Sales".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totSales").toString()));
				financialSummaryVOList.add(sales);	
			}else if("Purchase".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totpurchase").toString()));
				financialSummaryVOList.add(sales);	
			}else if("Expenses".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totexpenses").toString()));
				financialSummaryVOList.add(sales);	
			}else if("Balance".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totbalance").toString()));
				financialSummaryVOList.add(sales);	
			}else if("Tax".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totTax").toString()));
				financialSummaryVOList.add(sales);	
			}else if("SalesTax".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totSalesTax").toString()));
				financialSummaryVOList.add(sales);	
			}else if("PurchaseTax".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totPurchasetax").toString()));
				financialSummaryVOList.add(sales);	
			}else if("exempted".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totExempted").toString()));
				financialSummaryVOList.add(sales);	
			}else if("tcsamount".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totTcsAmount").toString()));
				financialSummaryVOList.add(sales);	
			}else if("ptcsamount".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("ptotTcsAmount").toString()));
				financialSummaryVOList.add(sales);	
			}else if("tdsamount".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totTdsAmount").toString()));
				financialSummaryVOList.add(sales);	
			}else if("cummulativeTax".equals(entry.getKey().toString())) {
				FinancialSummaryVO sales = (FinancialSummaryVO) entry.getValue();
				sales.setTotalamt(Double.parseDouble(totals.get("totTax").toString()));
				financialSummaryVOList.add(sales);	
			}
				
		}
		
		File file = new File(filename);
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
					headers = Arrays.asList("", "April", "May", "June", "July", "August", "september","October", "November", "December", "January","February","March","YTD(Year To Date)");				
				
			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, financialSummaryVOList,"type, aprilamt, mayamt, juneamt,julyamt,augustamt,sepamt,octamt, novamt, decamt, janamt,febamt,maramt,totalamt",fos);
				
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File(filename));
	}
	/*private List<GSTReturnSummary> getGSTReturnsSummary(Pageable pageable, final Client client, int month, int year, boolean updateValues)
			throws Exception {
		List<GSTReturnSummary> returnsSummuryList = client.getReturnsSummary();
		if (isEmpty(returnsSummuryList)) {
			List<String> returntypes = configService.getDealerACL(client.getDealertype());
			returntypes = returntypes.stream().filter(String -> String.startsWith("GSTR")).collect(Collectors.toList());
			logger.debug(CLASSNAME + " getGSTReturnsSummary:: returntypes\t" + returntypes.toString());
			Calendar cal = Calendar.getInstance();
			Date date = null;
			if (month >= 0 && year >= 0) {
				cal.set(year, month - 1, 1);
				date = new java.util.Date(cal.getTimeInMillis());
			}
			returnsSummuryList = clientService.getGSTReturnsSummary(returntypes, date);
		}
		if (updateValues) {
			for (GSTReturnSummary summaryItem : returnsSummuryList) {
				String returnType = summaryItem.getReturntype();
				if (returnType.equals(MasterGSTConstants.GSTR2)) {
					returnType = MasterGSTConstants.PURCHASE_REGISTER;
				}
				Page<? extends InvoiceParent> invoices = clientService.getInvoices(pageable, client, returnType, month, year);
				Double fieldValue = 0d;
				Double salesAmt = 0d, purchaseAmt = 0d;
				if (isNotEmpty(invoices)) {
					for (InvoiceParent invoice : invoices) {
						if (returnType.equals(MasterGSTConstants.GSTR2)
								|| returnType.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
							if (isNotEmpty(invoice.getTotalitc())) {
								fieldValue += invoice.getTotalitc();
							}
							if (isNotEmpty(invoice.getTotalamount())) {
								purchaseAmt += invoice.getTotalamount();
							}
						} else {
							if (isNotEmpty(invoice.getTotaltax())) {
								fieldValue += invoice.getTotaltax();
							}
							if (returnType.equals(GSTR1) && isNotEmpty(invoice.getTotalamount())) {
								salesAmt += invoice.getTotalamount();
							}
						}
					}
					if (isEmpty(summaryItem.getFieldValue())) {
						summaryItem.setFieldValue(fieldValue);
					} else {
						summaryItem.setFieldValue(summaryItem.getFieldValue() + fieldValue);
					}
				}
			}
		}
		return returnsSummuryList;
	}*/
	
	private Map<String, String> getSummaryMap(Pageable pageable, final Client client, int month, int year) throws Exception {
		Map<String, String> reportMap = Maps.newHashMap();
		Double salesAmt = 0d, purchaseAmt = 0d, taxAmt = 0d, salesTax = 0d, purchaseTax = 0d , igst = 0d, cgst = 0d, sgst = 0d , cess = 0d, exempted = 0d,tcs = 0d,tds = 0d;
		Page<? extends InvoiceParent> sinvoices = clientService.getInvoices(pageable, client, GSTR1, month, year, false);
		if (isNotEmpty(sinvoices)) {
			for (InvoiceParent invoice : sinvoices) {
				String gstStatus = "";
				if(isEmpty(invoice.getGstStatus())) {
					gstStatus = "";
				}else {
					gstStatus = invoice.getGstStatus();
				}
				if(!"CANCELLED".equalsIgnoreCase(gstStatus)) {
					if(isNotEmpty(invoice.getTcstdsAmount())) {
						tcs += invoice.getTcstdsAmount();
					}
					if (isNotEmpty(invoice.getTotaltax())) {
						taxAmt += invoice.getTotaltax();
						salesTax += invoice.getTotaltax();
					}
					List<? extends Item> items = invoice.getItems();
					if (isNotEmpty(invoice.getItems())){
						for(Item item : items){
							if(isNotEmpty(item.getIgstamount())){
								igst += item.getIgstamount();
							}
							if(isNotEmpty(item.getCgstamount())){
								cgst += item.getCgstamount();
							}
							if(isNotEmpty(item.getSgstamount())){
								sgst += item.getSgstamount();
							}
							if(isNotEmpty(item.getExmepted())) {
								exempted += item.getExmepted();
							}
						}
					}
					if (isNotEmpty(invoice.getTotaltaxableamount())) {
						if (isNotEmpty(invoice.getInvtype())
								&& invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
							if (isNotEmpty(((GSTR1) invoice).getCdnr())
									&& isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt())) {
								if (isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())
										&& ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty().equals("C")) {
									salesAmt -= invoice.getTotaltaxableamount();
								} else {
									salesAmt += invoice.getTotaltaxableamount();
								}
							}
						} else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
							if (isNotEmpty( invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0).getNtty()) && invoice.getCdnur().get(0).getNtty().equals("C")) {
									salesAmt -= invoice.getTotaltaxableamount();
								} else {
									salesAmt += invoice.getTotaltaxableamount();
								}
						}else {
							salesAmt += invoice.getTotaltaxableamount();
						}
					}
				}
			}
		}
		sinvoices = clientService.getInvoices(pageable, client, ANX1, month, year, false);
		if (isNotEmpty(sinvoices)) {
			for (InvoiceParent invoice : sinvoices) {
				String gstStatus = "";
				if(isEmpty(invoice.getGstStatus())) {
					gstStatus = "";
				}else {
					gstStatus = invoice.getGstStatus();
				}
				if(!"CANCELLED".equalsIgnoreCase(gstStatus)) {
					if(isNotEmpty(invoice.getTcstdsAmount())) {
						tcs += invoice.getTcstdsAmount();
					}
					if (isNotEmpty(invoice.getTotaltax())) {
						taxAmt += invoice.getTotaltax();
						salesTax += invoice.getTotaltax();
					}
					List<? extends Item> items = invoice.getItems();
					if (isNotEmpty(invoice.getItems())){
						for(Item item : items){
							if(isNotEmpty(item.getIgstamount())){
								igst += item.getIgstamount();
							}
							if(isNotEmpty(item.getCgstamount())){
								cgst += item.getCgstamount();
							}
							if(isNotEmpty(item.getSgstamount())){
								sgst += item.getSgstamount();
							}
							if(isNotEmpty(item.getExmepted())) {
								exempted += item.getExmepted();
							}
						}
					}
					if (isNotEmpty(invoice.getTotaltaxableamount())) {
						if (isNotEmpty(invoice.getInvtype())
								&& invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
							if (isNotEmpty(((GSTR1) invoice).getCdnr())
									&& isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt())) {
								if (isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())
										&& ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty().equals("C")) {
									salesAmt -= invoice.getTotaltaxableamount();
								} else {
									salesAmt += invoice.getTotaltaxableamount();
								}
							}
						} else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
							if (isNotEmpty( invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0).getNtty()) && invoice.getCdnur().get(0).getNtty().equals("C")) {
									salesAmt -= invoice.getTotaltaxableamount();
								} else {
									salesAmt += invoice.getTotaltaxableamount();
								}
						} else {
							salesAmt += invoice.getTotaltaxableamount();
						}
					}
				}
			}
		}
		Page<? extends InvoiceParent> pinvoices = clientService.getInvoices(pageable, client, PURCHASE_REGISTER, month, year,
				false);
		if (isNotEmpty(pinvoices)) {
			for (InvoiceParent invoice : pinvoices) {
				if(isNotEmpty(invoice.getTcstdsAmount())) {
					tds += invoice.getTcstdsAmount();
				}
				if (isNotEmpty(invoice.getTotalitc())) {
					taxAmt -= invoice.getTotalitc();
					
				}
				List<? extends Item> items = invoice.getItems();
				if (isNotEmpty(invoice.getItems())){
					for(Item item : items){
						if(isNotEmpty(item.getIgstamount())){
							igst += item.getIgstamount();
						}
						if(isNotEmpty(item.getCgstamount())){
							cgst += item.getCgstamount();
						}
						if(isNotEmpty(item.getSgstamount())){
							sgst += item.getSgstamount();
						}
						if(isNotEmpty(item.getIgstavltax())){
							purchaseTax += item.getIgstavltax();
						}
						if(isNotEmpty(item.getCgstavltax())){
							purchaseTax += item.getCgstavltax();
						}
						if(isNotEmpty(item.getSgstavltax())){
							purchaseTax += item.getSgstavltax();
						}
					}
				}
				if (isNotEmpty(invoice.getTotaltaxableamount())) {
					if (isNotEmpty(invoice.getInvtype())
							&& invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						if (isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt())) {
							if (isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())
									&& invoice.getCdn().get(0).getNt().get(0).getNtty().equals("D")) {
								purchaseAmt -= invoice.getTotaltaxableamount();
							} else {
								purchaseAmt += invoice.getTotaltaxableamount();
							}
						}
					}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
						if (isNotEmpty( invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0).getNtty()) && invoice.getCdnur().get(0).getNtty().equals("D")) {
							purchaseAmt -= invoice.getTotaltaxableamount();
						} else {
							purchaseAmt += invoice.getTotaltaxableamount();
						}
				} else {
						purchaseAmt += invoice.getTotaltaxableamount();
					}
				}
			}
		}
		Page<? extends InvoiceParent> gstr4invoices = clientService.getInvoices(pageable, client, GSTR4, month, year, false);
		if (isNotEmpty(gstr4invoices)) {
			for (InvoiceParent invoice : gstr4invoices) {
				if (isNotEmpty(invoice.getTotaltax())) {
					taxAmt += invoice.getTotaltax();
					salesTax += invoice.getTotaltax();
				}
				List<? extends Item> items = invoice.getItems();
				if (isNotEmpty(invoice.getItems())){
					for(Item item : items){
						if(isNotEmpty(item.getIgstamount())){
							igst += item.getIgstamount();
						}
						if(isNotEmpty(item.getCgstamount())){
							cgst += item.getCgstamount();
						}
						if(isNotEmpty(item.getSgstamount())){
							sgst += item.getSgstamount();
						}
					}
				}
				if (isNotEmpty(invoice.getTotaltaxableamount())) {
					if (isNotEmpty(invoice.getInvtype())
							&& invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						if (isNotEmpty(((GSTR4) invoice).getCdnr())
								&& isNotEmpty(((GSTR4) invoice).getCdnr().get(0).getNt())) {
							if (isNotEmpty(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getNtty())
									&& ((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getNtty().equals("C")) {
								salesAmt -= invoice.getTotaltaxableamount();
							} else {
								salesAmt += invoice.getTotaltaxableamount();
							}
						}
					} else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
						if (isNotEmpty( invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0).getNtty()) && invoice.getCdnur().get(0).getNtty().equals("C")) {
							salesAmt -= invoice.getTotaltaxableamount();
						} else {
							salesAmt += invoice.getTotaltaxableamount();
						}
				}else {
						salesAmt += invoice.getTotaltaxableamount();
					}
				}
			}
		}
		Page<? extends InvoiceParent> gstr5invoices = clientService.getInvoices(pageable, client, GSTR5, month, year, false);
		if (isNotEmpty(gstr5invoices)) {
			for (InvoiceParent invoice : gstr5invoices) {
				if (isNotEmpty(invoice.getTotaltax())) {
					taxAmt += invoice.getTotaltax();
					salesTax += invoice.getTotaltax();
				}
				List<? extends Item> items = invoice.getItems();
				if (isNotEmpty(invoice.getItems())){
					for(Item item : items){
						if(isNotEmpty(item.getIgstamount())){
							igst += item.getIgstamount();
						}
						if(isNotEmpty(item.getCgstamount())){
							cgst += item.getCgstamount();
						}
						if(isNotEmpty(item.getSgstamount())){
							sgst += item.getSgstamount();
						}
					}
				}
				if (isNotEmpty(invoice.getTotaltaxableamount())) {
					if (isNotEmpty(invoice.getInvtype())
							&& invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						if (isNotEmpty(((GSTR5) invoice).getCdnr())
								&& isNotEmpty(((GSTR5) invoice).getCdnr().get(0).getNt())) {
							if (isNotEmpty(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getNtty())
									&& ((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getNtty().equals("C")) {
								salesAmt -= invoice.getTotaltaxableamount();
							} else {
								salesAmt += invoice.getTotaltaxableamount();
							}
						}
					}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
						if (isNotEmpty( invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0).getNtty()) && invoice.getCdnur().get(0).getNtty().equals("C")) {
							salesAmt -= invoice.getTotaltaxableamount();
						} else {
							salesAmt += invoice.getTotaltaxableamount();
						}
				} else {
						salesAmt += invoice.getTotaltaxableamount();
					}
				}
			}
		}
		Page<? extends InvoiceParent> gstr6invoices = clientService.getInvoices(pageable, client, GSTR6, month, year,
				false);
		if (isNotEmpty(gstr6invoices)) {
			for (InvoiceParent invoice : gstr6invoices) {
				if (isNotEmpty(invoice.getTotalitc())) {
					taxAmt += invoice.getTotalitc();
					purchaseTax += invoice.getTotalitc();
				}
				List<? extends Item> items = invoice.getItems();
				if (isNotEmpty(invoice.getItems())){
					for(Item item : items){
						if(isNotEmpty(item.getIgstamount())){
							igst += item.getIgstamount();
						}
						if(isNotEmpty(item.getCgstamount())){
							cgst += item.getCgstamount();
						}
						if(isNotEmpty(item.getIgstamount())){
							sgst += item.getSgstamount();
						}
					}
				}
				if (isNotEmpty(invoice.getTotaltaxableamount())) {
					if (isNotEmpty(invoice.getInvtype())
							&& invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						if (isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt())) {
							if (isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())
									&& invoice.getCdn().get(0).getNt().get(0).getNtty().equals("D")) {
								purchaseAmt -= invoice.getTotaltaxableamount();
							} else {
								purchaseAmt += invoice.getTotaltaxableamount();
							}
						}
					}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
						if (isNotEmpty( invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0).getNtty()) && invoice.getCdnur().get(0).getNtty().equals("D")) {
							purchaseAmt -= invoice.getTotaltaxableamount();
						} else {
							purchaseAmt += invoice.getTotaltaxableamount();
						}
				} else {
						purchaseAmt += invoice.getTotaltaxableamount();
					}
				}
			}
		}
		reportMap.put("Sales", decimalFormat.format(salesAmt));
		reportMap.put("Purchase", decimalFormat.format(purchaseAmt));
		reportMap.put("Balance", decimalFormat.format(salesAmt - purchaseAmt));
		reportMap.put("Tax", decimalFormat.format(taxAmt));
		reportMap.put("SalesTax", decimalFormat.format(salesTax));
		reportMap.put("PurchaseTax", decimalFormat.format(purchaseTax));
		reportMap.put("igst", decimalFormat.format(igst));
		reportMap.put("cgst", decimalFormat.format(cgst));
		reportMap.put("sgst", decimalFormat.format(sgst));
		reportMap.put("exempted", decimalFormat.format(exempted));
		reportMap.put("tcsamount", decimalFormat.format(tcs));
		reportMap.put("tdsamount", decimalFormat.format(tds));
		return reportMap;
	}
	
	@RequestMapping(value = "/syncinv/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String syncInvData(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month, 
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "syncInvData::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		String rType = returntype;
		Client client = clientService.findById(clientid);
		ClientStatus clientStatus = clientService.getClientStatus(clientid, returntype, returnPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		if(returntype.endsWith("Amnd")) {
			returntype = returntype.replace("Amnd", "");
		}
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		User user = userService.findById(id);
		
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			User usr = userRepository.findById(userid);
			String errormsg = "";
			if(isNotEmpty(usr)) {
				errormsg = primaryHolderMessage(client,usr);
			}else {
				errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
			}
			  
			if(usrid.equals(user.getParentid())){
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else { 
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				clientService.syncInvoiceData(client, returntype, id, usertype, month, year);
			}
		}
		updateModel(model, id, fullname, usertype, month, year);
		if(rType.equals("GSTR1Amnd")){
			model.addAttribute("type", "dwnldgstr1a");
		}else{
			model.addAttribute("type", "dwnld");
		}
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);

		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);

		if (returntype.equals(GSTR1)) {
			String submissionYear = year + "-" + (year + 1);
			if (month > 3) {
				submissionYear = (year + 1) + "-" + (year + 2);
			}
			CompanyInvoices invoiceSubmissionData = profileService.getUserInvoiceSubmissionDetails(client.getId().toString(), submissionYear, null);
			if (isNotEmpty(invoiceSubmissionData)) {
				model.addAttribute("invoiceSubmissionData", invoiceSubmissionData);
			}
		}
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/all_invoice_view";
	}
	
	@RequestMapping(value = "/allitcupdt", method = RequestMethod.POST)
	public @ResponseBody String AllitcUpdate(@RequestBody ITCClaimVO records) throws Exception {
		final String method = "AllitcUpdate::";
		//Double totalitc = 0d;
		InvoiceParent invoice = null;
	
		for(String claiminv : records.getInvIds()) {
			invoice = clientService.getInvoice(claiminv, records.getRetType());
			Double totalitc = 0d;
		//System.out.println(invoice.getInvtype());
		if(isNotEmpty(invoice) && isNotEmpty(invoice.getInvtype()) && !invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ADVANCES) && !invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID) && !invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.NIL) &&
				!invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ISD) && !invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ITC_REVERSAL)) {
		if(isNotEmpty(invoice) && isNotEmpty(invoice.getMatchingId())) {
			Double gstr2totalitc = 0d;
			InvoiceParent gstr2invoice = clientService.getInvoice(invoice.getMatchingId(), "GSTR2");
			
			if(isNotEmpty(gstr2invoice) && isNotEmpty(gstr2invoice.getItems())) {
				for(Item item : gstr2invoice.getItems()) {
					item.setElg(records.getItctype());
					item.setElgpercent(records.getItcamt());
					if(isNotEmpty(item.getIgstamount())) {
						item.setIgstavltax(item.getIgstamount()*(records.getItcamt()/100));
						gstr2totalitc += item.getIgstavltax();
					}
					if(isNotEmpty(item.getCgstamount())) {
						item.setCgstavltax(item.getCgstamount()*(records.getItcamt()/100));
						gstr2totalitc += item.getCgstavltax();
					}
					if(isNotEmpty(item.getSgstamount())) {
						item.setSgstavltax(item.getSgstamount()*(records.getItcamt()/100));
						gstr2totalitc += item.getSgstavltax();
					}
					if(isNotEmpty(item.getCessamount())) {
						item.setCessavltax(item.getCessamount()*(records.getItcamt()/100));
						gstr2totalitc += item.getCessavltax();
					}
				}
				gstr2invoice.setTotalitc(gstr2totalitc);
				if(!records.getItctype().equalsIgnoreCase("pending")) {
					if(isNotEmpty(records.getClaimeddate())) {
						gstr2invoice.setDateofitcClaimed(records.getClaimeddate());
					}
				}
				List<InvoiceParent> list = Lists.newArrayList();
				list.add(gstr2invoice);
				clientService.saveInvoices(list, "GSTR2");
			}
		
		}
		if(isNotEmpty(invoice) && isNotEmpty(invoice.getItems())) {
			for(Item item : invoice.getItems()) {
				item.setElg(records.getItctype());
				item.setElgpercent(records.getItcamt());
				if(isNotEmpty(item.getIgstamount())) {
					item.setIgstavltax(item.getIgstamount()*(records.getItcamt()/100));
					totalitc += item.getIgstavltax();
				}
				if(isNotEmpty(item.getCgstamount())) {
					item.setCgstavltax(item.getCgstamount()*(records.getItcamt()/100));
					totalitc += item.getCgstavltax();
				}
				if(isNotEmpty(item.getSgstamount())) {
					item.setSgstavltax(item.getSgstamount()*(records.getItcamt()/100));
					totalitc += item.getSgstavltax();
				}
				if(isNotEmpty(item.getCessamount())) {
					item.setCessavltax(item.getCessamount()*(records.getItcamt()/100));
					totalitc += item.getCessavltax();
				}
			}
			invoice.setTotalitc(totalitc);
			if(!records.getItctype().equalsIgnoreCase("pending")) {
				if(isNotEmpty(records.getClaimeddate())) {
					invoice.setDateofitcClaimed(records.getClaimeddate());
				}
			}
			List<InvoiceParent> list = Lists.newArrayList();
			list.add(invoice);
			clientService.saveInvoices(list, records.getRetType());
		}
		}
		}
		return "sucess";
	}
	
	
	
	@RequestMapping(value = "/itcupdt/{invId}/{retType}/{itctype}/{itcamt}/{claimeddate}", method = RequestMethod.GET)
	public @ResponseBody Double itcUpdate(@PathVariable("invId") String invId, @PathVariable("itctype") String itctype,
			@PathVariable("retType") String retType, @PathVariable("itcamt") Double itcamt, @PathVariable("claimeddate") String claimeddate) throws Exception {
		final String method = "itcUpdate::";
		Double totalitc = 0d;
		SimpleDateFormat itcsdate = new SimpleDateFormat("dd-MM-yyyy");
		InvoiceParent invoice = clientService.getInvoice(invId, retType);
		if(isNotEmpty(invoice) && isNotEmpty(invoice.getMatchingId())) {
			Double gstr2totalitc = 0d;
			InvoiceParent gstr2invoice = clientService.getInvoice(invoice.getMatchingId(), "GSTR2");
			if(isNotEmpty(gstr2invoice) && isNotEmpty(gstr2invoice.getItems())) {
				for(Item item : gstr2invoice.getItems()) {
					item.setElg(itctype);
					item.setElgpercent(itcamt);
					if(isNotEmpty(item.getIgstamount())) {
						item.setIgstavltax(item.getIgstamount()*(itcamt/100));
						gstr2totalitc += item.getIgstavltax();
					}
					if(isNotEmpty(item.getCgstamount())) {
						item.setCgstavltax(item.getCgstamount()*(itcamt/100));
						gstr2totalitc += item.getCgstavltax();
					}
					if(isNotEmpty(item.getSgstamount())) {
						item.setSgstavltax(item.getSgstamount()*(itcamt/100));
						gstr2totalitc += item.getSgstavltax();
					}
					if(isNotEmpty(item.getCessamount())) {
						item.setCessavltax(item.getCessamount()*(itcamt/100));
						gstr2totalitc += item.getCessavltax();
					}
				}
				gstr2invoice.setTotalitc(gstr2totalitc);
				if(!itctype.equalsIgnoreCase("pending")) {
					gstr2invoice.setDateofitcClaimed(itcsdate.parse(claimeddate));
				}
				List<InvoiceParent> list = Lists.newArrayList();
				list.add(gstr2invoice);
				clientService.saveInvoices(list, "GSTR2");
			}
		}
		if(isNotEmpty(invoice) && isNotEmpty(invoice.getItems())) {
			for(Item item : invoice.getItems()) {
				item.setElg(itctype);
				item.setElgpercent(itcamt);
				if(isNotEmpty(item.getIgstamount())) {
					item.setIgstavltax(item.getIgstamount()*(itcamt/100));
					totalitc += item.getIgstavltax();
				}
				if(isNotEmpty(item.getCgstamount())) {
					item.setCgstavltax(item.getCgstamount()*(itcamt/100));
					totalitc += item.getCgstavltax();
				}
				if(isNotEmpty(item.getSgstamount())) {
					item.setSgstavltax(item.getSgstamount()*(itcamt/100));
					totalitc += item.getSgstavltax();
				}
				if(isNotEmpty(item.getCessamount())) {
					item.setCessavltax(item.getCessamount()*(itcamt/100));
					totalitc += item.getCessavltax();
				}
			}
			invoice.setTotalitc(totalitc);
			if(!itctype.equalsIgnoreCase("pending")) {
				invoice.setDateofitcClaimed(itcsdate.parse(claimeddate));
			}
			List<InvoiceParent> list = Lists.newArrayList();
			list.add(invoice);
			clientService.saveInvoices(list, retType);
		}
		return totalitc;
	}
	
	@RequestMapping(value = "/unclaimAllupdt/{returntype}", method = RequestMethod.POST)
	public @ResponseBody void unclaimUpdate(@RequestBody List<String> ids,@PathVariable String returntype) throws Exception {
		for(String invId : ids) {
			clientUtils.unclaimInvoices(invId, returntype);
		}
	}
	@RequestMapping(value = "/unclaimupdt/{invId}/{retType}", method = RequestMethod.GET)
	public @ResponseBody Double unclaimUpdate(@PathVariable("invId") String invId,
			@PathVariable("retType") String retType) throws Exception {
		final String method = "unclaimUpdate::";
		Double totalitc = 0d;
		clientUtils.unclaimInvoices(invId, retType);
		return totalitc;
	}

	@RequestMapping(value = "/alliview/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	/*@Caching(evict = {
			@CacheEvict(value="clientCache", key="#id"),
			@CacheEvict(value="clientMonoCache", key="#clientid")
	})*/
	public String allInvoiceView(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @RequestParam("type") String type,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model,
			HttpServletRequest request) throws Exception {
		final String method = "allInvoiceView::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		logger.debug(CLASSNAME + method + "returntype\t" + returntype);
		//for payment records
		model.addAttribute("paymentreturnType",returntype);
		String rType=returntype;
		if(returntype.equals(MasterGSTConstants.PROFORMAINVOICES) || returntype.equals(MasterGSTConstants.DELIVERYCHALLANS) || returntype.equals(MasterGSTConstants.ESTIMATES) || returntype.equals("SalesRegister")){
			model.addAttribute("otherreturn_type","additionalInv");
			model.addAttribute("otherreturnType",returntype);
			returntype = "GSTR1";
		}else if(returntype.equals(MasterGSTConstants.PURCHASEORDER) || returntype.equals("PurchaseRegister") || returntype.equals(MasterGSTConstants.EXPENSES)){
			model.addAttribute("otherreturn_type","additionalInv");
			if(returntype.equals(MasterGSTConstants.EXPENSES)) {
				model.addAttribute("otherreturnType","EXPENSES");
			}else {
				model.addAttribute("otherreturnType",returntype);
			}
			returntype = "GSTR2";
		}
		if(isNotEmpty(type) && type.equalsIgnoreCase("Exp")) {
			model.addAttribute("expType","EXPENSES");
		}
		HttpSession session = request.getSession(false);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		HSNDetails hsndetails = hsnSummaryRepository.findByClientidAndReturnPeriodAndReturnType(clientid,returnPeriod,returntype);
		if(isNotEmpty(hsndetails) && hsndetails.getHsnData().size()>0) {
			model.addAttribute("tallyHsnSummary","tallyHsnSummary");
		}
		if (isNotEmpty(session) && isNotEmpty(session.getAttribute("error.xls"))) {
			File file = (File) session.getAttribute("error.xls");
			try {
				file.delete();
			} catch (Exception e) {
			}
			session.removeAttribute("error.xls");
		}
		updateModel(model, id, fullname, usertype, month, year);
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		model.addAttribute("client_id", clientid);
		model.addAttribute("return_type",returntype);
		EwayBillConfigurations ewaybillconfig = clientService.getEwayBillConfig(clientid);
		if(isNotEmpty(ewaybillconfig) && isNotEmpty(ewaybillconfig.getConnStaus())) {
			model.addAttribute("connSttaus", ewaybillconfig.getConnStaus());
		}
		User user = userService.findById(id);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.size()>0){
					if(clntids.contains(clientid)){
						model.addAttribute("companyUser", companyUser);						
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		if (returntype.equals(PURCHASE_REGISTER) || returntype.equals(GSTR2)) {
			if("gstr2breconcile".equalsIgnoreCase(type)) {
				type = "gstr2breconcile";
			}else if("Exp".equalsIgnoreCase(type)) {
				type = "Exp";
			}
			/*else if(!"mmtch".equalsIgnoreCase(type)) {
				type = "prchse";
			}*/
			returntype = GSTR2;
			//List<ReconcileTemp> temp = reconcileTempRepository.findByClientid(clientid);
			ReconcileTemp temp = reconcileTempRepository.findByClientid(clientid);
			if(isNotEmpty(temp)) {
				long process = 1l;
				String reconcileType = MasterGSTConstants.MONTHLY;
				/*for(ReconcileTemp rec : temp){
				}*/
				/*if(isNotEmpty(temp.getProcessedinvoices())) {
					process += temp.getProcessedinvoices();
				}*/
				model.addAttribute("reconcileType", reconcileType);
				model.addAttribute("reconcileCounts", process);
			}
		} else if (returntype.equals(GSTR3B)) {
			return "redirect:/addsupinvoice/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + month
					+ "/" + year;
		} else if (returntype.equals(MasterGSTConstants.GSTR8)) {
			return "redirect:/addecominvoice/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + month
					+ "/" + year;
		}else if (returntype.equals(GSTR1)) {
			type = "inv";
			GSTR1DocumentIssue docIssue = clientService.getDocumentIssue(clientid, returnPeriod);
			if (isNotEmpty(docIssue)) {
				model.addAttribute("docIssue", docIssue);
				model.addAttribute("docId", docIssue.getId().toString());
			} else {
				model.addAttribute("docIssue", new GSTR1DocumentIssue());
				model.addAttribute("docId", "New");
			}
		}
		model.addAttribute("type", type);

		Client client = clientService.findById(clientid);
		if(isNotEmpty(client)) {
			if(isNotEmpty(client.getFilingoptions())) {
				String yr;
				if(month == 1 || month == 2 || month == 3) {
					yr = (year-1)+"-"+(year);
				}else {
					yr = year+"-"+(year+1);
				}
				client.getFilingoptions().forEach(options->{
					if(options.getYear().equalsIgnoreCase(yr)){
						client.setFilingOption(options.getOption());
						
					}
				});
			}
			accountingUtils.initiliazeGroupsAndLedgers(clientid, id);
			
			String name = "Main Branch";
			String baddress = "";
			if(isNotEmpty(client.getAddress())) {
				baddress = client.getAddress();
			}
			List<Branch> branches =client.getBranches();
			boolean branchexists = false;
			for(int i=0;i<branches.size();i++) {
				String bname = branches.get(i).getName();
				String baddr = branches.get(i).getAddress();
				if(name.equalsIgnoreCase(bname)) {
					branchexists =  true;
					break;
			   }else {
				   branchexists = false;
			   }
			}
			if(!branchexists) {
				Branch branch = new Branch();
				branch.setName("Main Branch");
				branch.setAddress(baddress);
				client.getBranches().add(branch);
				clientService.saveClient(client);
			}
			
		}
		ClientConfig clientConfig = clientService.getClientConfig(clientid);
		if(isNotEmpty(clientConfig) 
				&& isNotEmpty(clientConfig.getFilingOption())
				&& clientConfig.getFilingOption().keySet().contains(returnPeriod)) {
			client.setFilingOption(clientConfig.getFilingOption().get(returnPeriod));
		}
		
		model.addAttribute("clientConfig", clientConfig);
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		
		
		String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
		if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
			if((rType.equalsIgnoreCase(MasterGSTConstants.GSTR1) || rType.equalsIgnoreCase(MasterGSTConstants.GSTR2)) && !type.equalsIgnoreCase("mmtch")) {
				model.addAttribute("otperror", "Y");
				model.addAttribute("error", "Unauthorized User!");
			}
		}
		
		ClientStatus clientStatus = clientService.getClientStatus(clientid, returntype, returnPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		} else if (rType.equalsIgnoreCase(returntype)) {
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED") && rType.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
				
			//if(tokenError == null) { //returntype.equals(GSTR1) && 
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), returnPeriod, id,
					returntype, false);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							client.setStatus(trackResponse.getStatus());
							CompletableFuture<TrackResponse> future = CompletableFuture.supplyAsync(() -> trackResponse);
							future.thenAcceptAsync(trackResp -> {
								ClientStatus clntStatus = new ClientStatus();
								clntStatus.setClientId(client.getId().toString());
								clntStatus.setReturnPeriod(trackResp.getRetPeriod());
								clntStatus.setReturnType(trackResp.getRtntype());
								clntStatus.setStatus(trackResp.getStatus());
								clntStatus.setArn(trackResp.getArn());
								if(isNotEmpty(trackResp.getDof())) {
									SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
									try {
										clntStatus.setDof(dateFormat.parse(trackResp.getDof()));
										clientService.saveClientStatus(clntStatus);
									} catch (ParseException e) {
									}
								}
							});
						}
					}
				} else if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& !response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)
						&& NullUtil.isNotEmpty(response.getError())
						&& NullUtil.isNotEmpty(response.getError().getErrorcd())
						&& (response.getError().getErrorcd().equals("RET11402") 
								|| response.getError().getErrorcd().equals("RET11401")
								|| response.getError().getErrorcd().equals("RET11407")
								|| response.getError().getErrorcd().equals("RET13509"))) {
					model.addAttribute("error", response.getError().getMessage());
					//request.getSession().setAttribute("tokenError", response.getError().getMessage());
				}
			}
		}
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);

		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);
		if (returntype.equals(GSTR1)) {
			String submissionYear = year + "-" + (year + 1);
			if (month > 3) {
				submissionYear = (year + 1) + "-" + (year + 2);
			}
			CompanyInvoices invoiceSubmissionData = profileService.getInvoiceSubmissionDetails(id,
					client.getId().toString(), submissionYear, null);
			if (isNotEmpty(invoiceSubmissionData)) {
				model.addAttribute("invoiceSubmissionData", invoiceSubmissionData);
			}
		}

		logger.debug(CLASSNAME + method + END);
		return "client/all_invoice_view";
	}
	
	@RequestMapping(value = "/amndinv/{invid}/{returntype}", method = RequestMethod.GET)
	public @ResponseBody void editAsAmendment(@PathVariable("invid") String invid,
			@PathVariable("returntype") String returntype, ModelMap model) throws Exception {
		final String method = "editAsAmendment::";
		logger.debug(CLASSNAME + method + BEGIN);
		InvoiceParent invoiceParent = clientService.getInvoice(invid, returntype);
		if (isNotEmpty(invoiceParent)) {
			invoiceParent.setAmendment(true);
			if(isNotEmpty(invoiceParent.getB2b()) && isNotEmpty(invoiceParent.getB2b().get(0).getInv())) {
				invoiceParent.getB2b().get(0).getInv().get(0).setOinum(invoiceParent.getB2b().get(0).getInv().get(0).getInum());
				invoiceParent.getB2b().get(0).getInv().get(0).setOidt(invoiceParent.getB2b().get(0).getInv().get(0).getIdt());
			}
			if(isNotEmpty(invoiceParent.getCdn()) && isNotEmpty(invoiceParent.getCdn().get(0).getNt())) {
				invoiceParent.getCdn().get(0).getNt().get(0).setOntNum(invoiceParent.getCdn().get(0).getNt().get(0).getNtNum());
				invoiceParent.getCdn().get(0).getNt().get(0).setOntDt(invoiceParent.getCdn().get(0).getNt().get(0).getNtDt());
			}
			invoiceParent.setGstStatus("");
			clientService.saveGSTRInvoice(invoiceParent, returntype);
		}
	}

	@RequestMapping(value = "/invdef/{id}/{clientid}/{returntype}/{type}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody Map<String,Object> fetchInvoiceDefaults(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("type") String type,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "fetchInvoiceDefaults::";
		logger.debug(CLASSNAME + method + BEGIN);
		if(type.equalsIgnoreCase("Credit-Debit Notes") || type.equalsIgnoreCase("Credit-Debit Note for Unregistered Taxpayers")) {
			type=type.replace("-", "/");
		}
		String submissionYear = (year - 1) + "-" + (year);
		if (month > 3) {
			submissionYear = year + "-" + (year + 1);
		}
		return clientService.getDefaultInvoiceNo(clientid,id, returntype, type, submissionYear,month);
	}
	
	public String getMonthName(int month ){
		String monthString;
        switch (month) {
            case 1:  monthString = "JAN";      break;
            case 2:  monthString = "FEB";      break;
            case 3:  monthString = "MAR";      break;
            case 4:  monthString = "APR";      break;
            case 5:  monthString = "MAY";      break;
            case 6:  monthString = "JUN";      break;
            case 7:  monthString = "JUL";      break;
            case 8:  monthString = "AUG";      break;
            case 9:  monthString = "SEP";      break;
            case 10: monthString = "OCT";      break;
            case 11: monthString = "NOV";      break;
            case 12: monthString = "DEC";      break;
            default: monthString = "Invalid month"; break;
        }
		return monthString;
		
	}
	@RequestMapping(value = "/addsinv/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public ModelAndView addSalesInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @RequestParam("stype") String stype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addSalesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);

		Client client = clientService.findById(clientid);

		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("stype", stype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		InvoiceParent invoice = new GSTR1();
		if (isNotEmpty(returntype) && returntype.equals(GSTR4)) {
			invoice = new GSTR4();
		} else if (isNotEmpty(returntype) && returntype.equals(GSTR6)) {
			invoice = new GSTR6();
		} else if (isNotEmpty(returntype) && returntype.equals(ANX1)) {
			invoice = new Anx1();
		}
		CompanyBankDetails bankDetails = profileService.getBankDetails(clientid);
		if (isNotEmpty(bankDetails)) {
			invoice.setBankDetails(bankDetails);
		}
		logger.debug(CLASSNAME + method + END);
		return new ModelAndView("client/add_sales_invoice", "invoice", invoice);
	}

	@RequestMapping(value = "/addpinv/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public ModelAndView addPurchaseInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @RequestParam("stype") String stype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addPurchaseInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);

		Client client = clientService.findById(clientid);

		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("stype", stype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PurchaseRegister invoice = new PurchaseRegister();
		CompanyBankDetails bankDetails = profileService.getBankDetails(clientid);
		if (isNotEmpty(bankDetails)) {
			invoice.setBankDetails(bankDetails);
		}
		logger.debug(CLASSNAME + method + END);
		return new ModelAndView("client/add_purchase_invoice", "invoice", invoice);
	}

	@RequestMapping(value = "/editinv/{id}/{name}/{usertype}/{invid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public ModelAndView editInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("invid") String invid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "editInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("returntype", returntype);

		InvoiceParent invoiceParent = clientService.getInvoice(invid, returntype);
		if (isNotEmpty(invoiceParent)) {
			Client client = clientService.findById(invoiceParent.getClientid());
			model.addAttribute("client", client);
			model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));

			List<GSTRCreditDebitNotes> notes = null;
			List<GSTRAdvanceTax> at = null;
			if (returntype.equals(GSTR1)) {
				notes = ((GSTR1) invoiceParent).getCdnr();
				at = ((GSTR1) invoiceParent).getAt();
			} else if (returntype.equals(GSTR2) || returntype.equals(MasterGSTConstants.GSTR2A)) {
				notes = ((GSTR2) invoiceParent).getCdn();
				at = ((GSTR2) invoiceParent).getTxi();
				model.addAttribute("b2bur", ((GSTR2) invoiceParent).getB2bur());
				model.addAttribute("impg", ((GSTR2) invoiceParent).getImpGoods());
				model.addAttribute("imps", ((GSTR2) invoiceParent).getImpServices());
				model.addAttribute("itcrvsl", ((GSTR2) invoiceParent).getItcRvsl());
			} else if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
				notes = ((PurchaseRegister) invoiceParent).getCdn();
				at = ((PurchaseRegister) invoiceParent).getTxi();
				model.addAttribute("b2bur", ((PurchaseRegister) invoiceParent).getB2bur());
				model.addAttribute("impg", ((PurchaseRegister) invoiceParent).getImpGoods());
				model.addAttribute("imps", ((PurchaseRegister) invoiceParent).getImpServices());
				model.addAttribute("itcrvsl", ((PurchaseRegister) invoiceParent).getItcRvsl());
			} else if (returntype.equals(GSTR4)) {
				notes = ((GSTR4) invoiceParent).getCdnr();
				at = ((GSTR4) invoiceParent).getAt();
			} else if (returntype.equals(GSTR6)) {
				notes = ((GSTR6) invoiceParent).getCdn();
				at = Lists.newArrayList();
			}
			if (isNotEmpty(at)) {
				if (isNotEmpty(at.get(0).getSplyTy())) {
					model.addAttribute("splyTy", at.get(0).getSplyTy());
				} else {
					model.addAttribute("splyTy", "");
				}
			}
			if (isNotEmpty(notes) && isNotEmpty(notes.get(0).getNt())) {
				if (isNotEmpty(notes.get(0).getNt().get(0).getNtty())) {
					model.addAttribute("ntty", notes.get(0).getNt().get(0).getNtty());
				} else {
					model.addAttribute("ntty", "");
				}
				if (isNotEmpty(notes.get(0).getNt().get(0).getNtNum())) {
					model.addAttribute("ntNum", notes.get(0).getNt().get(0).getNtNum());
				} else {
					model.addAttribute("ntNum", "");
				}
				if (isNotEmpty(notes.get(0).getNt().get(0).getNtDt())) {
					model.addAttribute("ntDt", notes.get(0).getNt().get(0).getNtDt());
				} else {
					model.addAttribute("ntDt", "");
				}
				if (isNotEmpty(notes.get(0).getNt().get(0).getRsn())) {
					model.addAttribute("rsn", notes.get(0).getNt().get(0).getRsn());
				} else {
					model.addAttribute("rsn", "");
				}
				if (isNotEmpty(notes.get(0).getNt().get(0).getpGst())) {
					model.addAttribute("pGst", notes.get(0).getNt().get(0).getpGst());
				} else {
					model.addAttribute("pGst", "");
				}
			} else {
				model.addAttribute("ntty", "");
				model.addAttribute("ntNum", "");
				model.addAttribute("ntDt", "");
				model.addAttribute("rsn", "");
				model.addAttribute("pGst", "");
			}
		}

		logger.debug(CLASSNAME + method + END);
		return new ModelAndView("client/edit_invoice", "invoice", invoiceParent);
	}

	@RequestMapping(value = "/editnsaveinv/{id}/{name}/{usertype}/{invid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public ModelAndView editNSaveInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("invid") String invid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "editNSaveInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("returntype", returntype);

		InvoiceParent invoiceParent = clientService.getInvoice(invid, returntype);
		if (isNotEmpty(invoiceParent)) {
			Client client = clientService.findById(invoiceParent.getClientid());
			model.addAttribute("client", client);
			if (isNotEmpty(invoiceParent.getInvtype()) && !invoiceParent.getInvtype().equals(MasterGSTConstants.B2B)
					&& !invoiceParent.getInvtype().equals(MasterGSTConstants.B2CL)) {
				model.addAttribute("stype", invoiceParent.getInvtype());
			} else {
				model.addAttribute("stype", "");
			}
			model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
			if (isEmpty(invoiceParent.getBankDetails()) || isEmpty(invoiceParent.getBankDetails().getAccountnumber())) {
				CompanyBankDetails bankDetails = profileService.getBankDetails(invoiceParent.getClientid());
				if (isNotEmpty(bankDetails)) {
					invoiceParent.setBankDetails(bankDetails);
				}
			}
		}

		logger.debug(CLASSNAME + method + END);
		String strPage = "client/add_sales_invoice";
		if (returntype.equals(MasterGSTConstants.PURCHASE_REGISTER)) {
			strPage = "client/add_purchase_invoice";
		}
		return new ModelAndView(strPage, "invoice", invoiceParent);
	}
	
	@RequestMapping(value = "/getunclaimed", method = RequestMethod.GET)
	public @ResponseBody List<PurchaseRegister> getUnClaimed(
			@RequestParam(value = "clientId", required = true) String clientId,
			@RequestParam(value = "month", required = true) int month,
			@RequestParam(value = "year", required = true) int year)
					throws Exception {
		final String method = "getUnClaimed::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<PurchaseRegister> purchases = clientService.getUnclaimedInvoices(clientId, month, year);
		if(isNotEmpty(purchases)) {
			for(PurchaseRegister purchase : purchases) {
				purchase.setUserid(purchase.getId().toString());
			}
		}
		return purchases;
	}

	@RequestMapping(value = "/savesinv/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveSalesInvoice(@ModelAttribute("invoice") GSTR1 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year,@RequestParam("type") String type, ModelMap model) throws Exception {
		final String method = "saveSalesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id {}", invoice.getId());
		String retType = "";
		if("SalesRegister".equals(returntype)){
			retType = returntype;
			returntype = "GSTR1";
		}else{
			retType = returntype;
		}
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = gstr1repository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,retType,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,retType,oldinvoice,invoice);
		}
		if("journal".equals(type)) {
		return "redirect:/journaldetails/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + month + "/" + year + "?type=Monthly";
		}else if("ledgerreport".equals(type)) {
			return "redirect:/ledgerreports/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/" + invoice.getClientid() + "/" + month + "/" + year;
		}else {
			return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
					+ invoice.getClientid() + "/" + retType + "/" + month + "/" + year + "?type=inv";
		}
	}

	@RequestMapping(value = "/savedeliverychallan/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveDeliveryChallanInvoice(@ModelAttribute("invoice") DeliveryChallan invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveDeliveryChallanInvoice::";
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = deliveryChallanRepository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=dc";
	}
	
	@RequestMapping(value = "/saveGSTR4/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveGSTR4Invoice(@ModelAttribute("invoice") GSTR4 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveGSTR4Invoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = gstr4Repository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}

	@RequestMapping(value = "/saveGSTR6/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveGSTR6Invoice(@ModelAttribute("invoice") GSTR6 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveGSTR6Invoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = gstr6Repository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}
	
	@RequestMapping(value = "/saveGSTR5/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveGSTR5Invoice(@ModelAttribute("invoice") GSTR5 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveGSTR5Invoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = gstr5Repository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}

	@RequestMapping(value = "/saveterms/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody void saveTerms(@RequestBody MultiValueMap<String, String> formData,
			@PathVariable("clientid") String clientid) {
		final String method = "saveTerms::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		client.setNotes(formData.getFirst("notes"));
		client.setTerms(formData.getFirst("terms"));
		client.setAuthorisedSignatory(formData.getFirst("authorisedSignatory"));
		client.setDesignation(formData.getFirst("designation"));
		String e = formData.getFirst("enableSignatoryName");
		boolean enable;
		if("true".equals(e)) {
			enable = true;
		}else {
			enable = false;	
		}
		client.setEnableAuthorisedSignatory(enable);
		clientService.saveClient(client);
	}
	@RequestMapping(value = "/saveCutOffInvdate/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody void saveCutOffInvdate(@RequestBody MultiValueMap<String, String> formData,
			@PathVariable("clientid") String clientid) {
		final String method = "saveCutOffInvdate::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		client.setCutOffDateForSales(formData.getFirst("cutOffDateForSales"));
		client.setCutOffDateForPurchases(formData.getFirst("cutOffDateForPurchases"));
		clientService.saveClient(client);
	}
 @RequestMapping(value = "/saveewaybillconfig/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody EwayBillConfigurations saveEwayBillConfig(@RequestBody MultiValueMap<String, String> ebillData,
			@PathVariable("clientid") String clientid) throws UnsupportedEncodingException, UnknownHostException {
		final String method = "saveEwayBillConfig::";
		logger.debug(CLASSNAME + method + BEGIN);
		EwayBillConfigurations ebillform = new EwayBillConfigurations();
		Client client = clientService.findById(clientid);
		
		ebillform.setUserName(ebillData.getFirst("username"));
		ebillform.setPassword(Base64.getEncoder().encodeToString(ebillData.getFirst("password").getBytes(MasterGSTConstants.PASSWORD_ENCODE_FORMAT)));
		ebillform.setClientid(clientid);
			
		Response response = iHubConsumerService.authenticateEwayBillApi(client.getGstnnumber(), InetAddress.getLocalHost().getHostAddress(), ebillData.getFirst("username"), ebillData.getFirst("password"));
		if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
			ebillform.setConnStaus("Active");
		}else {
			ebillform.setConnStaus("InActive");
		}
		
		return  clientService.saveEwayBillConfigurations(ebillform);
	}
	
 
 @RequestMapping(value = "/authEbillConfig/{clientid}", method = RequestMethod.POST)
	public @ResponseBody String authEwaybillconfigdetails(@RequestBody MultiValueMap<String, String> ebillData,
			@PathVariable("clientid") String clientid, ModelMap model) throws Exception {
		final String method = "authEwaybillconfigdetails::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		//EwayBillConfigurations configdetails = ewayBillConfigurationRepository.findByClientid(clientid);
			EwayBillConfigurations ebillform = new EwayBillConfigurations();
			ebillform.setUserName(ebillData.getFirst("username"));
			ebillform.setPassword(Base64.getEncoder().encodeToString(ebillData.getFirst("password").getBytes(MasterGSTConstants.PASSWORD_ENCODE_FORMAT)));
			ebillform.setClientid(clientid);
			Response response = iHubConsumerService.authenticateEwayBillApi(client.getGstnnumber(), InetAddress.getLocalHost().getHostAddress(), ebillData.getFirst("username"), ebillData.getFirst("password"));
			ErrorCodeConfig errors=null;String desc="";
				if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					ebillform.setConnStaus("Active");
					model.addAttribute("ebillflag", response.getError());
				}else {
					ebillform.setConnStaus("InActive");
					
						 String jsonStr="";
						if(isNotEmpty(response) && isNotEmpty(response.getError()) && isNotEmpty(response.getError().getMessage())) {
					        jsonStr = response.getStatusdesc();
						}
			        JSONObject jsonObj = new JSONObject(jsonStr);
			        String code = jsonObj.getString("errorCodes");
			        String[] cd=code.split(",");
				        for(int i=0;i<cd.length;i++) {
				        	errors = errorCodesRepository.findByErrorCode(cd[i]);
				        	if(isNotEmpty(errors) && isNotEmpty(errors.getErrorDesc())) {
				        		desc=desc+", "+errors.getErrorDesc();
				        	}
				        	
				        
				        }
				
				}
				 clientService.saveEwayBillConfigurations(ebillform);
				return desc;
			
	}
	
	
	
	@RequestMapping(value = "/otherconfiglist/{clientid}")
	public @ResponseBody OtherConfigurations getOtherConfigList(@PathVariable("clientid") String clientid) {
	
		OtherConfigurations configdetails = otherConfigurationRepository.findByClientid(clientid);
		
		return configdetails;
	}
	
	
	@RequestMapping(value = "/saveothers/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody OtherConfigurations saveOthers(@RequestBody MultiValueMap<String, String> otherData,
			@PathVariable("clientid") String clientid) {
		final String method = "saveOthers::";
		logger.debug(CLASSNAME + method + BEGIN);
		OtherConfigurations otherform = new OtherConfigurations();
		//Client client = clientService.findById(clientid);
		
		otherform.setDrcr(otherData.getFirst("drcr"));
		otherform.setTransDate(otherData.getFirst("transdate"));
		otherform.setSalesFields(otherData.getFirst("salesfields"));
		otherform.setPurFields(otherData.getFirst("purfields"));
		
		otherform.setItcinput(otherData.getFirst("itcinput"));
		otherform.setItcinputService(otherData.getFirst("itcinputservice"));
		otherform.setItcCapgood(otherData.getFirst("itccapgood"));
		otherform.setClientid(clientid);
		
		  String dc=otherData.getFirst("enableDrcr"); 
		  String tr=otherData.getFirst("enableTransDate"); 
		  String cs=otherData.getFirst("enableCessQty"); 
		  String sf=otherData.getFirst("enableSalesFields"); 
		  String pf=otherData.getFirst("enablePurFields"); 
		  String lsf=otherData.getFirst("enableLedgerSalesField"); 
		  String lpf=otherData.getFirst("enableLedgerPurField");
		  String rsf=otherData.getFirst("enableRoundoffSalesField"); 
		  String rpf=otherData.getFirst("enableroundoffPurField");
		  String jour=otherData.getFirst("enablejournals");
		  String tcs=otherData.getFirst("enabletcs");
		
		  boolean enable; 
		  if("true".equals(dc)) { 
			  otherform.setEnableDrcr(true);
		  }else {
			  otherform.setEnableDrcr(false);
		  } 
		  if("true".equals(cs)) {
			  otherform.setEnableCessQty(true);
		  }else {
			  otherform.setEnableCessQty(false);
		  }
		  if("true".equals(tr)){
			  otherform.setEnableTransDate(true);
		  }else {
			  otherform.setEnableTransDate(false);
		  }
		  if("true".equals(sf)){
			  otherform.setEnableSalesFields(true);
		  }else {
			  otherform.setEnableSalesFields(false);
		  }
		  if("true".equals(pf)){
			  otherform.setEnablePurFields(true);
		  }else {
			  otherform.setEnablePurFields(false);
		  }
		  if("true".equals(lsf)){
			  otherform.setEnableLedgerSalesField(true);
		  }else {
			  otherform.setEnableLedgerSalesField(false);
		  }
		  if("true".equals(lpf)){
			  otherform.setEnableLedgerPurField(true);
		  }else {
			  otherform.setEnableLedgerPurField(false);
		  }
		  if("true".equals(rsf)) {
			  otherform.setEnableroundoffSalesField(true);
		  }else {
			  otherform.setEnableroundoffSalesField(false);
		  }
		  if("true".equals(rpf)) {
			  otherform.setEnableroundoffPurField(true);
		  }else {
			  otherform.setEnableroundoffPurField(false);
		  }
		  if("true".equals(jour)) {
			  otherform.setEnablejournals(true);
		  }else {
			  otherform.setEnablejournals(false);
		  }
		  if("true".equals(tcs)) {
			  otherform.setEnableTCS(true);
		  }else {
			  otherform.setEnableTCS(false);
		  }
		 return  clientService.saveOtherConfigurations(otherform);
	}

	
	
	
	@RequestMapping(value = "/saveprintconfig/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody void savePrintConfig(@RequestBody MultiValueMap<String, String> printData,
			@PathVariable("clientid") String clientid) {
		final String method = "savePrintConfig::";
		logger.debug(CLASSNAME + method + BEGIN);
		PrintConfiguration printform = new PrintConfiguration();
		Client client = clientService.findById(clientid);
		printform.setInvoiceText(printData.getFirst("invoicetext"));
		if(isNotEmpty(printData.getFirst("einvoiceheadertext"))) {
			printform.setEinvoiceHeaderText(printData.getFirst("einvoiceheadertext"));
		}
		printform.setQtyText(printData.getFirst("qtytext"));
		printform.setRateText(printData.getFirst("ratetext"));
		printform.setAuthSignText(printData.getFirst("authsigntext"));
		printform.setDiscount(printData.getFirst("discount"));
		printform.setQuantity(printData.getFirst("quantity"));
		printform.setRate(printData.getFirst("rate"));
		printform.setState(printData.getFirst("state"));
		printform.setPanno(printData.getFirst("panno"));
		printform.setPlaceOfSupply(printData.getFirst("placeofsupply"));
		printform.setClientid(clientid);
		
		  String d=printData.getFirst("enableDiscountField"); 
		  String r=printData.getFirst("enableRateField"); 
		  String q=printData.getFirst("enableQtyField"); 
		  String s=printData.getFirst("enableStateField"); 
		  String p=printData.getFirst("enablePanField"); 
		  String pos=printData.getFirst("enablePlaceOfSupplyField");
		  String fn=printData.getFirst("enableffooternotes");
		  String ra=printData.getFirst("enableRoundOffAmt");
		  boolean enable; 
		  if("true".equals(ra)) { 
			  printform.setEnableRoundOffAmt(true);  
		  }else {
			  printform.setEnableRoundOffAmt(false);
		  }
		  if("true".equals(fn)) { 
			  printform.setFooternotes(printData.getFirst("footernotes"));
			  printform.setIsfooternotescheck(true);
		  }else {
			  printform.setIsfooternotescheck(false);
		  } 
		  
		  if("true".equals(d)) { 
			  printform.setEnableDiscount(true);
		  }else {
			  printform.setEnableDiscount(false);
		  } 
		  if("true".equals(r)) { 
			  printform.setEnableRate(true);
		  }else {
			  printform.setEnableRate(false);
		  } 
		  if("true".equals(q)) { 
			  printform.setEnableQuantity(true);
		  }else {
			  printform.setEnableQuantity(false);
		  } 
		  if("true".equals(s)) { 
			  printform.setEnableState(true);
		  }else {
			  printform.setEnableState(false);
		  } 
		   if("true".equals(p)) { 
			  printform.setEnablePan(true);
		  }else {
			  printform.setEnablePan(false);
		  } 
		  if("true".equals(pos)) { 
			  printform.setEnablePlaceOfSupply(true);
		  }else {
			  printform.setEnablePlaceOfSupply(false);
		  } 
		
		profileService.savePrintConfiguration(printform);	
	}
	
	public void saveInvoice(InvoiceParent invoice, String returntype, String usertype, int month, int year,
			ModelMap model) throws Exception {
		final String method = "saveInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		if (isNotEmpty(invoice.getDateofinvoice())) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(invoice.getDateofinvoice());
			month = cal.get(Calendar.MONTH) + 1;
			year = cal.get(Calendar.YEAR);
		}
		String strMonth = month < 10 ? "0" + month : month + "";
		invoice.setFp(strMonth + year);
		if(isNotEmpty(invoice.getNotes())) {
			String notes = invoice.getNotes();
			notes = notes.substring(1);
			invoice.setNotes(notes);
		}
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);
		User user = userRepository.findOne(invoice.getUserid());
		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));

		if (isEmpty(invoice.getBranch()) && isNotEmpty(client.getBranches()) && client.getBranches().size() == 1) {
			invoice.setBranch(client.getBranches().get(0).getCode());
		}
		if (isEmpty(invoice.getVertical()) && isNotEmpty(client.getVerticals()) && client.getVerticals().size() == 1) {
			invoice.setVertical(client.getVerticals().get(0).getCode());
		}
		if(isNotEmpty(invoice.getStrAmendment()) && invoice.getStrAmendment().equals("true")) {
			//invoice.setAmendment(true);
			if(isNotEmpty(invoice.getInvtype()) && !invoice.getInvtype().endsWith("A")) {
				if(invoice.getInvtype().equals(MasterGSTConstants.B2B)) {
					invoice.setInvtype(MasterGSTConstants.B2BA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.B2CL)) {
					invoice.setInvtype(MasterGSTConstants.B2CLA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.B2C)) {
					invoice.setInvtype(MasterGSTConstants.B2CSA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.ADVANCES)) {
					invoice.setInvtype(MasterGSTConstants.TXPA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
					invoice.setInvtype(MasterGSTConstants.ATA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.EXPORTS)) {
					invoice.setInvtype(MasterGSTConstants.EXPA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					invoice.setInvtype(MasterGSTConstants.CDNA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
					invoice.setInvtype(MasterGSTConstants.CDNURA);
				}
			}
			if(isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
				if(isEmpty(invoice.getB2b().get(0).getInv().get(0).getOinum())) {
					invoice.setGstStatus("");
					invoice.getB2b().get(0).getInv().get(0).setOinum(invoice.getB2b().get(0).getInv().get(0).getInum());
					invoice.getB2b().get(0).getInv().get(0).setOidt(invoice.getB2b().get(0).getInv().get(0).getIdt());
				}
			}
			if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt())) {
				if(isEmpty(invoice.getCdn().get(0).getNt().get(0).getOntNum())) {
					invoice.setGstStatus("");
					invoice.getCdn().get(0).getNt().get(0).setOntNum(invoice.getCdn().get(0).getNt().get(0).getNtNum());
					invoice.getCdn().get(0).getNt().get(0).setOntDt(invoice.getCdn().get(0).getNt().get(0).getNtDt());
				}
			}
		}

		boolean isIntraState = true;
		if (isNotEmpty(invoice.getStatename())) {
			if (!invoice.getStatename().equals(client.getStatename())) {
				isIntraState = false;
			}
		}
		if (invoice.getInvtype().equals(MasterGSTConstants.EXPORTS) || invoice.getInvtype().equals(MasterGSTConstants.EXPA)) {
			List<GSTRExports> exp = invoice.getExp();
			if (isNotEmpty(exp)) {
				GSTRExports exps = exp.get(0);
				if (isNotEmpty(exps)) {
					if (exps.getExpTyp().equals("WPAY")) {
						isIntraState = false;
					} else {
						isIntraState = true;
					}
				}
			}
		}else if (invoice.getInvtype().equals(MasterGSTConstants.B2B) || invoice.getInvtype().equals(MasterGSTConstants.B2BA) || invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR) || invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA)) {
			if(isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp())) {
				String invtyp = invoice.getB2b().get(0).getInv().get(0).getInvTyp();
				if (invtyp.equals("SEWP") || invtyp.equals("SEWPC") || invtyp.equals("SEWOP")  || invtyp.equals("CBW")) {
					isIntraState = false;
				}
			}
			if(invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR) || invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA)) {
				if (isEmpty(invoice.getB2b()) || isEmpty(invoice.getB2b().get(0).getCtin())) {
					isIntraState = false;
					if(isNotEmpty(invoice.getCdnur()) && isNotEmpty(invoice.getCdnur().get(0)) && isNotEmpty(invoice.getCdnur().get(0).getTyp())) {
						if("B2CS".equalsIgnoreCase(invoice.getCdnur().get(0).getTyp())) {
							if (isNotEmpty(invoice.getStatename())) {
								if (!invoice.getStatename().equals(client.getStatename())) {
									isIntraState = false;
								}else {
									isIntraState = true;
								}
							}
						}
					}
				}
			}
		}
		
		InvoiceParent invoiceForJournal;
		if (isEmpty(returntype) || returntype.equals(GSTR1)) {
			invoiceForJournal = clientService.saveSalesInvoice(invoice, null, isIntraState);
			if(isNotEmpty(user) && isNotEmpty(user.isAccessANX1()) && user.isAccessANX1()) {
				saveAnx1(invoiceForJournal,invoice.getClientid(),returntype,isIntraState);
			}
		} else {
			invoiceForJournal = clientService.saveGSTRInvoice(invoice, returntype, isIntraState);
		}
		if (!returntype.equals(MasterGSTConstants.EWAYBILL)) {
			saveNewJournalEntries(invoiceForJournal,invoice.getClientid(),invoice.getUserid(),returntype,isIntraState);
		}
		logger.debug(CLASSNAME + method + END);
	}
	
	public void saveANXInvoice(InvoiceParent invoice, String returntype, String usertype, int month, int year,
			ModelMap model) throws Exception {
		final String method = "saveInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		if (isNotEmpty(invoice.getDateofinvoice())) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(invoice.getDateofinvoice());
			month = cal.get(Calendar.MONTH) + 1;
			year = cal.get(Calendar.YEAR);
		}
		String strMonth = month < 10 ? "0" + month : month + "";
		invoice.setFp(strMonth + year);
		if(isNotEmpty(invoice.getNotes())) {
			String notes = invoice.getNotes();
			notes = notes.substring(1);
			invoice.setNotes(notes);
		}
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);
		User user = userRepository.findOne(invoice.getUserid());
		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));

		if (isEmpty(invoice.getBranch()) && isNotEmpty(client.getBranches()) && client.getBranches().size() == 1) {
			invoice.setBranch(client.getBranches().get(0).getCode());
		}
		if (isEmpty(invoice.getVertical()) && isNotEmpty(client.getVerticals()) && client.getVerticals().size() == 1) {
			invoice.setVertical(client.getVerticals().get(0).getCode());
		}
		if(isNotEmpty(invoice.getStrAmendment()) && invoice.getStrAmendment().equals("true")) {
			//invoice.setAmendment(true);
			if(isNotEmpty(invoice.getInvtype()) && !invoice.getInvtype().endsWith("A")) {
				if(invoice.getInvtype().equals(MasterGSTConstants.B2B)) {
					invoice.setInvtype(MasterGSTConstants.B2BA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.B2CL)) {
					invoice.setInvtype(MasterGSTConstants.B2CLA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.B2C)) {
					invoice.setInvtype(MasterGSTConstants.B2CSA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.ADVANCES)) {
					invoice.setInvtype(MasterGSTConstants.TXPA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
					invoice.setInvtype(MasterGSTConstants.ATA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.EXPORTS)) {
					invoice.setInvtype(MasterGSTConstants.EXPA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
					invoice.setInvtype(MasterGSTConstants.CDNA);
				} else if(invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
					invoice.setInvtype(MasterGSTConstants.CDNURA);
				}
			}
			if(isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getInv())) {
				if(isEmpty(invoice.getB2b().get(0).getInv().get(0).getOinum())) {
					invoice.setGstStatus("");
					invoice.getB2b().get(0).getInv().get(0).setOinum(invoice.getB2b().get(0).getInv().get(0).getInum());
					invoice.getB2b().get(0).getInv().get(0).setOidt(invoice.getB2b().get(0).getInv().get(0).getIdt());
				}
			}
			if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0).getNt())) {
				if(isEmpty(invoice.getCdn().get(0).getNt().get(0).getOntNum())) {
					invoice.setGstStatus("");
					invoice.getCdn().get(0).getNt().get(0).setOntNum(invoice.getCdn().get(0).getNt().get(0).getNtNum());
					invoice.getCdn().get(0).getNt().get(0).setOntDt(invoice.getCdn().get(0).getNt().get(0).getNtDt());
				}
			}
		}

		boolean isIntraState = true;
		if (isNotEmpty(invoice.getStatename())) {
			if (!invoice.getStatename().equals(client.getStatename())) {
				isIntraState = false;
			}
		}
		if (invoice.getInvtype().equals(MasterGSTConstants.EXPORTS) || invoice.getInvtype().equals(MasterGSTConstants.EXPA)) {
			List<GSTRExports> exp = invoice.getExp();
			if (isNotEmpty(exp)) {
				GSTRExports exps = exp.get(0);
				if (isNotEmpty(exps)) {
					if (exps.getExpTyp().equals("WPAY")) {
						isIntraState = false;
					} else {
						isIntraState = true;
					}
				}
			}
		}
		
		InvoiceParent invoiceForJournal;
		invoiceForJournal = clientService.saveAnx1Invoice(invoice, isIntraState);
			if(isNotEmpty(user) && isNotEmpty(user.isAccessANX1()) && user.isAccessANX1()) {
				saveAnx1(invoiceForJournal,invoice.getClientid(),returntype,isIntraState);
			}
		logger.debug(CLASSNAME + method + END);
	}
	
	@Async
	public void saveJournalEntries(InvoiceParent invoiceForJournal, String clientid, String returntype,boolean isIntraState) {
		clientService.saveJournalInvoice(invoiceForJournal,clientid,returntype,isIntraState);
	}
	
	@Async
	public void saveNewJournalEntries(InvoiceParent invoiceForJournal, String clientid,String userid, String returntype,boolean isIntraState) {
		accountingJournalsUtils.createJournalsEntries(userid,clientid,returntype,invoiceForJournal,isIntraState);
	}
	
	@Async
	public void saveAnx1(InvoiceParent invoiceForJournal, String clientid, String returntype,boolean isIntraState) {
		anx1Service.saveAnx1Invoice(invoiceForJournal,clientid,returntype,isIntraState);
	}
	
	
	@RequestMapping(value = "/savepinv/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String savePurchaseInvoice(@ModelAttribute("invoice") PurchaseRegister invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year,@RequestParam("type") String type, ModelMap model) throws Exception {
		final String method = "savePurchaseInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		String retType = "";
		if("PurchaseRegister".equals(returntype)){
			retType = returntype;
			returntype = "GSTR2";
			
		}else{
			retType = returntype;
		}
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent aoldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			aoldinvoice = purchaseRepository.findOne(invoice.getId().toString());
		}
		if (isNotEmpty(invoice.getDateofinvoice())) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(invoice.getDateofinvoice());
			month = cal.get(Calendar.MONTH) + 1;
			year = cal.get(Calendar.YEAR);
		}
		String strMonth = month < 10 ? "0" + month : month + "";
		Client client = clientService.findById(invoice.getClientid());
		String pos = invoice.getStatename();
		String statename = "";
		if (isNotEmpty(invoice.getB2b().get(0).getCtin())) {
			String gstinNumber = invoice.getB2b().get(0).getCtin();
			List<StateConfig> states = configService.getStates();
			if (isNotEmpty(gstinNumber)) {
				gstinNumber = gstinNumber.substring(0,2);
				for (StateConfig state : states) {
					if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
						statename = state.getName();
						break;
					}
				}
			}
		}
		boolean isIntraState = true;
		if (isNotEmpty(statename)) {
			if (!statename.equals(client.getStatename())) {
				isIntraState = false;
			}
		}
		if("97-Other Territory".equalsIgnoreCase(pos) || "Other Territory".equalsIgnoreCase(pos)) {
			isIntraState = false;
		}
		
		if(invoice.getInvtype().equals(MasterGSTConstants.B2BUR) || invoice.getInvtype().equals(MasterGSTConstants.B2B) || invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR)){
			String revcharge = invoice.getRevchargetype();
			String subtype = invoice.getPrinterintra();
			if(isNotEmpty(revcharge) && ("Reverse".equalsIgnoreCase(revcharge) || "Y".equalsIgnoreCase(revcharge))) {
				if(isNotEmpty(invoice) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) && invoice.getB2b().get(0).getInv().get(0).getInvTyp().equalsIgnoreCase("SEWP")) {
					isIntraState = false;
				}else {
					if(invoice.getInvtype().equals(MasterGSTConstants.B2B)) {
						if (isEmpty(invoice.getB2b().get(0).getCtin())) {
							if(isNotEmpty(subtype) && "Inter".equalsIgnoreCase(subtype)) {
								isIntraState = false;
							}else {
								isIntraState = true;
							}
						}
					}else {
						if(isNotEmpty(subtype) && "Inter".equalsIgnoreCase(subtype)) {
							isIntraState = false;
						}else {
							isIntraState = true;
						}
					}
				}
			}else {
				if(isNotEmpty(invoice) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getInvTyp()) && invoice.getB2b().get(0).getInv().get(0).getInvTyp().equalsIgnoreCase("SEWP")) {
					isIntraState = false;
				}
			}
		}
		invoice.setFp(strMonth + year);
		if(invoice.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)){
			GSTRITCReversals gstritcreversal = new GSTRITCReversals(); 
			invoice.setItcRvsl(gstritcreversal);
		}
		if(isNotEmpty(client.getGstnnumber())) {
			invoice.setGstin(client.getGstnnumber());
		}
		List<String> invtypeArr = Arrays.asList(MasterGSTConstants.ADVANCES,MasterGSTConstants.ATPAID, MasterGSTConstants.ITC_REVERSAL,MasterGSTConstants.NIL,MasterGSTConstants.ISD);
		if(!invtypeArr.contains( invoice.getInvtype())) {
			if(isNotEmpty(invoice.getId())) {
				InvoiceParent oldinvoice = purchaseRepository.findOne(invoice.getId().toString());
				if(isNotEmpty(oldinvoice) && isNotEmpty(oldinvoice.getMatchingId())) {
					if(isNotEmpty(oldinvoice.getMatchingStatus()) && oldinvoice.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED)) {
						List<GSTR2> gstr2Lst = gstr2Repository.findByMatchingId(invoice.getId().toString());
						if(isNotEmpty(gstr2Lst)) {
							for(GSTR2 gstr2Inv : gstr2Lst) {
									gstr2Inv.setMatchingId(null);
									gstr2Inv.setMatchingStatus(null);
									gstr2Inv.setMannualMatchInvoices(null);
									gstr2Repository.save(gstr2Inv);
							}
						}
					}else {
						GSTR2 gstr2 = gstr2Repository.findOne(oldinvoice.getMatchingId());
						if(isNotEmpty(gstr2)) {
								gstr2.setMatchingId(null);
								gstr2.setMatchingStatus(null);
								gstr2Repository.save(gstr2);
						}
					}
				}
				
				if(isNotEmpty(oldinvoice) && isNotEmpty(oldinvoice.getGstr2bMatchingId())) {
					if(oldinvoice.getGstr2bMatchingId().size() > 0) {
						List<GSTR2BSupport> gstr2bLst = gstr2bSupportRepository.findByIdIn(oldinvoice.getGstr2bMatchingId());
						if(isNotEmpty(gstr2bLst) && gstr2bLst.size() > 0) {
							for(GSTR2BSupport inv : gstr2bLst) {
								inv.setGstr2bMatchingRsn(null);
								inv.setGstr2bMatchingId(null);
								inv.setGstr2bMatchingStatus(null);
								gstr2bSupportRepository.save(inv);
							}
						}
					}
				}
			}
		}
		InvoiceParent invoiceParent = clientService.savePurchaseRegister(invoice, isIntraState);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,retType,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,retType,aoldinvoice,invoiceParent);
		}
		accountingJournalsUtils.createJournalsEntries(invoice.getUserid(),invoice.getClientid(),returntype,invoiceParent,isIntraState);

		if (returntype.equals(PURCHASE_REGISTER)) {
			model.addAttribute("type", "prchse");
			returntype = GSTR2;
			retType = GSTR2;
		} else {
			model.addAttribute("type", "inv");
		}
		logger.debug(CLASSNAME + method + END);
		
		if("journal".equals(type)) {
			return "redirect:/journaldetails/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/" + invoice.getClientid() + "/" + month + "/" + year + "?type=Monthly";
		}else if("ledgerreport".equals(type)) {
			return "redirect:/ledgerreports/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"+ invoice.getClientid() + "/" + month + "/" + year;
		}else{
			return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"+ invoice.getClientid() + "/" + retType + "/" + month + "/" + year + "?type=inv";
		}
		
	}
	@RequestMapping(value = "/getfyinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getAllFYInvoices(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		Pageable pageable = null;
		Page<? extends InvoiceParent> invoices = clientService.getInvoices(pageable, client, id, returntype, month, year,MasterGSTConstants.FILING_OPTION_YEARLY);
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoices);
	}
	
	@RequestMapping(value = "/getMatchedAndPresentMonthfyinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getMatchedAndPresentMonthFYInvoices(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String fp = strMonth+year;
		Pageable pageable = null;
		
		Date mstDate = null;
		Date mendDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, month - 1, 0, 23, 59, 59);
		mstDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		mendDate = new java.util.Date(cal.getTimeInMillis());
		List<String> rtArray=Arrays.asList(fp);
		Page<? extends InvoiceParent> invoices = clientService.getPresentMonthfyinvsMatchingIdisNull(clientid, mstDate, mendDate);
		Page<? extends InvoiceParent> minvoices = clientService.getPresentMonthfyinvsMatchingIdisNotNull(clientid, mstDate, mendDate);
		Page<? extends InvoiceParent> monthlyinvoices = clientService.getPresentretperiodgstr2MatchingStatusisNotNull(clientid,rtArray);
		
		List<InvoiceParent> matchingstatusInvoices = Lists.newArrayList();
		List<InvoiceParent> mmatchingstatusInvoices = Lists.newArrayList();
		List<InvoiceParent> matchingstatus = Lists.newArrayList();
		if(isNotEmpty(invoices)) {
			matchingstatusInvoices = (List<InvoiceParent>) invoices.getContent();
		}
		
		if(isNotEmpty(minvoices)) {
			mmatchingstatusInvoices = (List<InvoiceParent>) minvoices.getContent();
		}
		
		List<String> mmatchingids = Lists.newArrayList();
		if(isNotEmpty(mmatchingstatusInvoices) && mmatchingstatusInvoices.size() > 0) {
			for(InvoiceParent inv : mmatchingstatusInvoices) {
				mmatchingids.add(inv.getMatchingId());
			}
		}
		List<InvoiceParent> monthlyInvoicess = Lists.newArrayList();
		if(isNotEmpty(invoices)) {
			monthlyInvoicess = (List<InvoiceParent>) monthlyinvoices.getContent();
		}
		List<String> matchingids = Lists.newArrayList();
		if(isNotEmpty(monthlyInvoicess) && monthlyInvoicess.size() > 0) {
			for(InvoiceParent inv : monthlyInvoicess) {
				if(isNotEmpty(inv.getMatchingStatus()) && !inv.getMatchingStatus().equalsIgnoreCase(MasterGSTConstants.GST_STATUS_MANNUAL_MATCHED)) {
				matchingids.add(inv.getId().toString());
				}else {
					matchingids.add(inv.getId().toString());
				}
			}
		}
		matchingids.addAll(mmatchingids);
		Page<? extends InvoiceParent> matchedinvoices = clientService.getgstr2MatchingIdsInvoices(clientid,matchingids);
		List<InvoiceParent> matchingInvoices = Lists.newArrayList();
		if(isNotEmpty(matchedinvoices)) {
			matchingInvoices = (List<InvoiceParent>) matchedinvoices.getContent();
		}
		if(isNotEmpty(matchingstatusInvoices) && matchingstatusInvoices.size() > 0) {
			matchingstatus.addAll(matchingstatusInvoices);
		}
		if(isNotEmpty(matchingInvoices) && matchingInvoices.size() > 0) {
			matchingstatus.addAll(matchingInvoices);
		} 
		Page<? extends InvoiceParent> allinvoices = new PageImpl<InvoiceParent>(matchingstatus);
		if(isNotEmpty(allinvoices)) {
			for(InvoiceParent invoiceParent : allinvoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(allinvoices);
	}
	
	
	@RequestMapping(value = "/getMannualMatchedAndPresentMonthfyinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getMannualMatchedAndPresentMonthFYInvoices(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String fp = strMonth+year;
		Pageable pageable = null;
		
		Date mstDate = null;
		Date mendDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, month - 1, 0, 23, 59, 59);
		mstDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		mendDate = new java.util.Date(cal.getTimeInMillis());
		
		List<String> rtArray=Arrays.asList(fp);
		Page<? extends InvoiceParent> minvoices = clientService.getPresentMonthfyinvsMannualMatchingIdisNotNull(clientid, mstDate, mendDate);
		Page<? extends InvoiceParent> monthlyinvoices = clientService.getPresentretperiodgstr2MannualMatchingStatus(clientid,rtArray);
		
		List<InvoiceParent> mmatchingstatusInvoices = Lists.newArrayList();
		List<InvoiceParent> matchingstatus = Lists.newArrayList();

		
		if(isNotEmpty(minvoices)) {
			mmatchingstatusInvoices = (List<InvoiceParent>) minvoices.getContent();
		}
		
		List<String> mmatchingids = Lists.newArrayList();
		if(isNotEmpty(mmatchingstatusInvoices) && mmatchingstatusInvoices.size() > 0) {
			for(InvoiceParent inv : mmatchingstatusInvoices) {
				mmatchingids.add(inv.getMatchingId());
			}
		}
		
		List<InvoiceParent> monthlyInvoicess = Lists.newArrayList();
		if(isNotEmpty(monthlyinvoices)) {
			monthlyInvoicess = (List<InvoiceParent>) monthlyinvoices.getContent();
		}
		List<String> matchingids = Lists.newArrayList();
		if(isNotEmpty(monthlyInvoicess) && monthlyInvoicess.size() > 0) {
			for(InvoiceParent inv : monthlyInvoicess) {
				matchingids.add(inv.getId().toString());
			}
		}
		matchingids.addAll(mmatchingids);
		Page<? extends InvoiceParent> matchedinvoices = clientService.getgstr2MatchingIdsMannualInvoices(clientid,matchingids);
		List<InvoiceParent> matchingInvoices = Lists.newArrayList();
		if(isNotEmpty(matchedinvoices)) {
			matchingInvoices = (List<InvoiceParent>) matchedinvoices.getContent();
		}
		if(isNotEmpty(matchingInvoices) && matchingInvoices.size() > 0) {
			matchingstatus.addAll(matchingInvoices);
		} 
		Page<? extends InvoiceParent> allinvoices = new PageImpl<InvoiceParent>(matchingstatus);
		if(isNotEmpty(allinvoices)) {
			for(InvoiceParent invoiceParent : allinvoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
	
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(allinvoices);
	}
	
	@RequestMapping(value = "/getgstr2Matchedfyinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getgstr2Matchedfyinvs(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String fp = strMonth+year;
		
		Date mstDate = null;
		Date mendDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, month - 1, 0, 23, 59, 59);
		mstDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		mendDate = new java.util.Date(cal.getTimeInMillis());
		
		Pageable pageable = null;
		List<String> rtArray=Arrays.asList(fp);
		Page<? extends InvoiceParent> invoices = clientService.getPresentretperiodgstr2MatchingStatusisNull(clientid,rtArray);
		
		Page<? extends InvoiceParent> notinpurchasesinvoices = clientService.getPresentretperiodgstr2MatchingStatus(clientid,rtArray);
		
		Page<? extends InvoiceParent> monthlypurchaseInvoices = clientService.getPresentMonthfyinvsMatchingIdisNotNull(clientid, mstDate,mendDate);
		
		List<InvoiceParent> monthlypurchasematchingstatusInvoices = Lists.newArrayList();
		if(isNotEmpty(monthlypurchaseInvoices)) {
			monthlypurchasematchingstatusInvoices = (List<InvoiceParent>) monthlypurchaseInvoices.getContent();
		}
		List<String> matchingids = Lists.newArrayList();
		if(isNotEmpty(monthlypurchasematchingstatusInvoices) && monthlypurchasematchingstatusInvoices.size() > 0) {
			for(InvoiceParent inv : monthlypurchasematchingstatusInvoices) {
				matchingids.add(inv.getMatchingId());
			}
		}
		
		List<InvoiceParent> monthlyInvoicess = Lists.newArrayList(gstr2Repository.findAll(matchingids));
		List<InvoiceParent> matchingstatusInvoices = Lists.newArrayList();
		List<InvoiceParent> notInPurchasesInvoices = Lists.newArrayList();
		List<InvoiceParent> matchingstatus = Lists.newArrayList();
		if(isNotEmpty(invoices)) {
			matchingstatusInvoices = (List<InvoiceParent>) invoices.getContent();
		}
		if(isNotEmpty(notinpurchasesinvoices)) {
			notInPurchasesInvoices = (List<InvoiceParent>) notinpurchasesinvoices.getContent();
		}
		if(isNotEmpty(matchingstatusInvoices) && matchingstatusInvoices.size() > 0) {
			matchingstatus.addAll(matchingstatusInvoices);
		}
		if(isNotEmpty(notInPurchasesInvoices) && notInPurchasesInvoices.size() > 0) {
			matchingstatus.addAll(notInPurchasesInvoices);
		}
		if(isNotEmpty(monthlyInvoicess) && monthlyInvoicess.size() > 0) {
			for(InvoiceParent gstr2 : monthlyInvoicess) {
				if(isNotEmpty(gstr2.isAmendment()) && gstr2.isAmendment()) {
					matchingstatus.add(gstr2);
				}
			}
			
		} 
		Page<? extends InvoiceParent> allinvoices = new PageImpl<InvoiceParent>(matchingstatus);
		if(isNotEmpty(allinvoices)) {
			for(InvoiceParent invoiceParent : allinvoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(allinvoices);
	}
	
	
	@RequestMapping(value = "/getgstr2MannualMatchedfyinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getgstr2MannualMatchedfyinvs(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String fp = strMonth+year;
		
		Date mstDate = null;
		Date mendDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, month - 1, 0, 23, 59, 59);
		mstDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		mendDate = new java.util.Date(cal.getTimeInMillis());
		
		Pageable pageable = null;
		List<String> rtArray=Arrays.asList(fp);
		Page<? extends InvoiceParent> notinpurchasesinvoices = clientService.getPresentretperiodgstr2MannualMatchingStatus(clientid,rtArray);
		
		Page<? extends InvoiceParent> monthlypurchaseInvoices = clientService.getPresentMonthfyinvsMannualMatchingIdisNotNull(clientid, mstDate,mendDate);
		
		List<InvoiceParent> monthlypurchasematchingstatusInvoices = Lists.newArrayList();
		if(isNotEmpty(monthlypurchaseInvoices)) {
			monthlypurchasematchingstatusInvoices = (List<InvoiceParent>) monthlypurchaseInvoices.getContent();
		}
		List<String> matchingids = Lists.newArrayList();
		if(isNotEmpty(monthlypurchasematchingstatusInvoices) && monthlypurchasematchingstatusInvoices.size() > 0) {
			for(InvoiceParent inv : monthlypurchasematchingstatusInvoices) {
				matchingids.add(inv.getMatchingId());
			}
		}
		List<InvoiceParent> monthlyInvoicess = Lists.newArrayList(gstr2Repository.findAll(matchingids));
		List<InvoiceParent> matchingstatusInvoices = Lists.newArrayList();
		List<InvoiceParent> notInPurchasesInvoices = Lists.newArrayList();
		List<InvoiceParent> matchingstatus = Lists.newArrayList();
		if(isNotEmpty(notinpurchasesinvoices)) {
			notInPurchasesInvoices = (List<InvoiceParent>) notinpurchasesinvoices.getContent();
		}
		if(isNotEmpty(matchingstatusInvoices) && matchingstatusInvoices.size() > 0) {
			matchingstatus.addAll(matchingstatusInvoices);
		}
		if(isNotEmpty(notInPurchasesInvoices) && notInPurchasesInvoices.size() > 0) {
			matchingstatus.addAll(notInPurchasesInvoices);
		}
		if(isNotEmpty(monthlyInvoicess) && monthlyInvoicess.size() > 0) {
			matchingstatus.addAll(monthlyInvoicess);
		} 
		Page<? extends InvoiceParent> allinvoices = new PageImpl<InvoiceParent>(matchingstatus);
		if(isNotEmpty(allinvoices)) {
			for(InvoiceParent invoiceParent : allinvoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(allinvoices);
	}
	
	@RequestMapping(value = "/getinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getInvoices(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		String retType = returntype;
		Pageable pageable = null;
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		Page<? extends InvoiceParent> invoices = clientService.getInvoices(pageable, client, id, retType,"notreports", month, year);
		 
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		} else if(isEmpty(invoices) && returntype.equals(MasterGSTConstants.GSTR1A)) {
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				String[] invTypes = {MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES};
				for(String invType : invTypes) {
					try {
						InvoiceParent gstr1a = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(),
								month, year, MasterGSTConstants.GSTR1A, invType, null, id, true);
						clientService.processGSTRData(gstr1a, client, "", returntype, invType, id, null, month, year);
					} catch (MasterGSTException exp) {
					}
				}
			}
			invoices = clientService.getInvoices(pageable, client, returntype, month, year);
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoices);
	}
	
	@RequestMapping(value = "/getAddtionalInvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getAdditionalInvoices(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, @RequestParam("booksOrReturns")String booksOrReturns,@RequestParam("reportType")String reportType,
			ModelMap model, HttpServletRequest request) throws ParseException, Exception{
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String st = request.getParameter("start");
		String booksorReturns = request.getParameter("booksOrReturns");
		if(isNotEmpty(booksorReturns)) {
			if(booksorReturns.equals(MasterGSTConstants.PROFORMAINVOICES) || booksorReturns.equals(MasterGSTConstants.DELIVERYCHALLANS) || booksorReturns.equals(MasterGSTConstants.ESTIMATES) || booksorReturns.equals("SalesRegister") || booksorReturns.equals(MasterGSTConstants.PURCHASEORDER) || booksorReturns.equals("PurchaseRegister")){
				if(booksorReturns.equals(MasterGSTConstants.PROFORMAINVOICES) || booksorReturns.equals(MasterGSTConstants.DELIVERYCHALLANS) || booksorReturns.equals(MasterGSTConstants.ESTIMATES) || booksorReturns.equals("SalesRegister")){
					reportType = "reports";
				}
				booksorReturns = "books";
			}			
		}
		InvoiceFilter filter = clientService.invoiceFilter(request);
		filter.setBooksOrReturns(booksorReturns);
		int start = StringUtils.isEmpty(st) ? 0 : Integer.parseInt(st);
		String len = request.getParameter("length");
		int length = StringUtils.isEmpty(len) ? 10 :  Integer.parseInt(len);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		String sortParam = "dateofinvoice";
		String sortOrder = "asc";
		sortOrder = request.getParameter("order[0][dir]");
		Client client = clientService.findById(clientid);
		
		if(isNotEmpty(client) && isNotEmpty(client.getInvoiceViewOption())) {
			
			if(client.getInvoiceViewOption().equalsIgnoreCase("Yearly")) {
				if(booksorReturns !="" && booksorReturns !=null && booksorReturns.equalsIgnoreCase("books")) {
					month = 0;
					++year;
				}else if(isNotEmpty(filter.getBooksOrReturns()) && filter.getBooksOrReturns().equalsIgnoreCase("books")) {
					month = 0;
					++year;
				}
			}
		}
		String retType = returntype;
		Pageable pageable = null;
		Map<String, Object> invoicesMap = clientService.getInvoices(pageable, client, id, retType, reportType, month, year, start, length, searchVal,sortParam,sortOrder, filter, true,booksOrReturns);
		Page<? extends InvoiceParent> invoices = (Page<? extends InvoiceParent>)invoicesMap.get("invoices");
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
				if(retType.equalsIgnoreCase(MasterGSTConstants.EWAYBILL)) {
					validDateSupport(invoiceParent);
				}
			}
		} 
		
		/*Map<String, Object> invoiceData = new HashMap<>();
		invoiceData.put("data", invoices);
		invoiceData.put("recordsFiltered", invoices.getTotalElements());
		invoiceData.put("recordsTotal", invoices.getTotalElements());
		invoiceData.put("draw", request.getParameter("draw"));*/
		
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoicesMap);
	}
	private void validDateSupport(InvoiceParent invoiceParent) throws ParseException {
        if(isNotEmpty(invoiceParent.getValidUpto()) && ((isNotEmpty(invoiceParent.getStatus()) && !(invoiceParent.getStatus()).equalsIgnoreCase("CNL")) || isEmpty(invoiceParent.getStatus()))) {
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss aa");
	        // Change the pattern into 24 hour format
	        DateFormat formate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	        Date time = null;
	        String output = "";
	        // Converting the input String to Date
	        time = dateFormat.parse(invoiceParent.getValidUpto());
	       
	        // Changing the format of date
	        // and storing it in
	        // String
	        output = formate.format(time);
			boolean flag = EwaybillValidator.validUpto(output);
			invoiceParent.setEbillValidator(flag);
        }
		//System.out.println(invoiceParent.getEwayBillNumber()+"-----"+flag);
	}

	@RequestMapping(value = "/getAddtionalInvsSupport/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Map<String, Object> getAdditionalInvoicesSupport(@PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		Map<String, Object> invoicesMap = clientService.getInvoicesSupport(client, returntype, "notreports", month, year);
		return invoicesMap;
	}
	
	@RequestMapping(value = "/updtamnddata/{clientid}/{returntype}/{acceptFlag}", method = RequestMethod.POST)
	public @ResponseBody void updateAmendmentData(@RequestBody List<String> invoiceIds,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("acceptFlag") boolean acceptFlag, ModelMap model) throws Exception {
		final String method = "updateAmendmentData ::";
		logger.debug(CLASSNAME + method + BEGIN);
		if(returntype.endsWith("Amnd")) {
			returntype = returntype.replace("Amnd", "");
		}
		List<? extends InvoiceParent> invoices = clientService.getInvoices(clientid, returntype, invoiceIds);
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoice : invoices) {
				if (isNotEmpty(invoice.getB2b())) {
					for (GSTRB2B gstrb2b : invoice.getB2b()) {
						if(isNotEmpty(gstrb2b.getInv())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrb2b.getInv()) {
								if(acceptFlag) {
									gstrInvoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_ACCEPT);
								} else {
									gstrInvoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_REJECT);
								}
							}
						}
					}
				} else if (returntype.equals(MasterGSTConstants.GSTR1A) && isNotEmpty(((GSTR1A)invoice).getCdnr())) {
					for (GSTRCreditDebitNotes gstrcdn : ((GSTR1A)invoice).getCdnr()) {
						if(isNotEmpty(gstrcdn.getNt())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
								if(acceptFlag) {
									gstrInvoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_ACCEPT);
								} else {
									gstrInvoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_REJECT);
								}
							}
						}
					}
				} else if (returntype.equals(MasterGSTConstants.GSTR1) && isNotEmpty(((GSTR1)invoice).getCdnr())) {
					for (GSTRCreditDebitNotes gstrcdn : ((GSTR1)invoice).getCdnr()) {
						if(isNotEmpty(gstrcdn.getNt())) {
							for (GSTRInvoiceDetails gstrInvoiceDetails : gstrcdn.getNt()) {
								if(acceptFlag) {
									gstrInvoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_ACCEPT);
								} else {
									gstrInvoiceDetails.setFlag(MasterGSTConstants.GST_FLAG_REJECT);
								}
							}
						}
					}
				}
			}
			clientService.saveInvoices(invoices, returntype);
		}
		logger.debug(CLASSNAME + method + END);
	}

	@RequestMapping(value = "/delinv/{id}/{returntype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody void deleteInvoice(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "deleteInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		String invoiceNo = clientService.deleteInvoice(id, returntype,"");
		AccountingJournal journal = accountingJournalRepository.findByInvoiceIdAndClientIdAndReturnType(id,clientid,returntype);
		if(isNotEmpty(journal)) {
			journal.setStatus("Deleted");
			accountingJournalRepository.save(journal);
		}
		if (isNotEmpty(invoiceNo)) {
			String submissionYear = (year - 1) + "-" + (year);
			if (month > 3) {
				submissionYear = year + "-" + (year + 1);
			}
			Client client = clientService.findById(clientid);
			List<CompanyInvoices> invoiceSubmissionDatas = profileService.getUserInvoiceSubmissionDetails(clientid,
					submissionYear);
			if (isNotEmpty(invoiceSubmissionDatas)) {
				for (CompanyInvoices invoiceSubmissionData : invoiceSubmissionDatas) {
					if (isNotEmpty(invoiceSubmissionData.getPrefix())
							&& invoiceNo.startsWith(invoiceSubmissionData.getPrefix())) {
						if (isEmpty(invoiceSubmissionData.getInvoiceType())) {
							invoiceSubmissionData.setInvoiceType("ALL");
						}
						String prefix = invoiceSubmissionData.getPrefix();
						Integer inv = -1;
						try {
							inv = Integer.parseInt(invoiceNo.replace(prefix, ""));
						} catch (NumberFormatException e) {
						}
						if (inv > 0) {
							Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, returntype,
									month, year);
							if(isNotEmpty(invoices)) {
								boolean updated = false;
								for (InvoiceParent invoice : invoices) {
									if (isNotEmpty(invoice.getInvoiceno()) && isNotEmpty(invoice.getInvtype())
											&& (invoice.getInvtype().equals(invoiceSubmissionData.getInvoiceType())
													|| invoiceSubmissionData.getInvoiceType().equals("ALL"))
											&& invoice.getInvoiceno().startsWith(prefix)) {
										try {
											Integer newInv = Integer.parseInt(invoice.getInvoiceno().replace(prefix, ""));
											if (newInv > inv) {
												newInv--;
											}
											invoice.setInvoiceno(prefix + newInv);
											updated = true;
										} catch (NumberFormatException e) {
										}
									}
								}
								if (updated) {
									clientService.saveInvoices(invoices, returntype);
								}
							}
						}
					}
				}
			}
		}
	}

	@RequestMapping(value = "/cancelinv/{userid}/{clientid}/{id}/{returntype}", method = RequestMethod.GET)
	public @ResponseBody void cancelInvoice(@PathVariable("userid") String userid,@PathVariable("clientid") String clientid,@PathVariable("id") String id,
			@PathVariable("returntype") String returntype,@RequestParam("booksOrReturns") String booksOrReturns, ModelMap model) throws Exception {
		final String method = "cancelInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		AccountingJournal journal = accountingJournalRepository.findByInvoiceIdAndClientIdAndReturnType(id,clientid,returntype);
		if(isNotEmpty(journal)) {
			journal.setStatus("Cancelled");
			accountingJournalRepository.save(journal);
		}
		InvoiceParent invoice = clientService.getInvoice(id,returntype);
		if(isNotEmpty(invoice) && isNotEmpty(invoice.getInvoiceno())) {
			auditlogService.saveAuditLog(userid, clientid,invoice.getInvoiceno(),AuditLogConstants.CANCELLED,returntype,null,null);
		}
		clientService.cancelInvoice(id, returntype,booksOrReturns);
	}

	@RequestMapping(value = "/delclnt/{clientid}/{userid}", method = RequestMethod.GET)
	public @ResponseBody void deleteClient(@PathVariable("clientid") String clientid, 
			@PathVariable("userid") String userid, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "deleteClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<String> clientIds = (List<String>) request.getSession().getAttribute("clientIds");
		if (isNotEmpty(clientIds) && clientIds.contains(clientid)) {
			clientIds.remove(clientid);
			request.getSession().setAttribute("clientIds", clientIds);
		}
		clientService.deleteClient(userid, clientid);
	}

	@RequestMapping(value = "/delAllclnts/{userid}", method = RequestMethod.GET)
	public @ResponseBody void deleteAllClient(@PathVariable("userid") String userid, 
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "deleteClient::";
		logger.debug(CLASSNAME + method + BEGIN);
		request.getSession().setAttribute("clientIds", Lists.newArrayList());
		clientService.deleteAllClient(userid);
	}

	@RequestMapping(value = "/dwnldinv/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String downloadInvoices(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "downloadInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);

		Client client = clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		ClientStatus clientStatus = clientService.getClientStatus(clientid, returntype, strMonth + year);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else { 
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				List<String> invTypes=Lists.newArrayList();
				if(!returntype.equalsIgnoreCase(MasterGSTConstants.ANX2)) {
					invTypes.add(MasterGSTConstants.B2B);
					invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
					invTypes.add(MasterGSTConstants.ISD);
					invTypes.add(MasterGSTConstants.B2BA);
					invTypes.add(MasterGSTConstants.CDNA);
					invTypes.add(MasterGSTConstants.IMP_GOODS);
					invTypes.add(MasterGSTConstants.IMPGSEZ);
				}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6A)) {
					invTypes.add(MasterGSTConstants.ISDA);
					invTypes.add(MasterGSTConstants.B2BA);
					invTypes.add(MasterGSTConstants.CDNA);
					invTypes.add(MasterGSTConstants.ISD);
					invTypes.add(MasterGSTConstants.B2B);
					invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
				}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR4A)) {
					invTypes.add(MasterGSTConstants.B2B);
					invTypes.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
					invTypes.add(MasterGSTConstants.B2BA);
					invTypes.add(MasterGSTConstants.CDNA);
				}else {
					invTypes.add(MasterGSTConstants.B2B);
					invTypes.add(MasterGSTConstants.DE);
					invTypes.add(MasterGSTConstants.SEZWP);
					invTypes.add(MasterGSTConstants.SEZWOP);
					invTypes.add(MasterGSTConstants.ISDC);
				}
				
				for (String invType : invTypes) {
					if(!returntype.equalsIgnoreCase(MasterGSTConstants.ANX2)) {
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6A)) {
							gstr6Utils.performGSTR6Reconcile(client, invType, strMonth + year, clientid, id, month, year);
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR4A)) {
							gstr4AnnualService.performGSTR4Reconcile(client, invType, strMonth + year, clientid, id, month, year);
						}else {
							performReconcile(client, invType, strMonth + year, clientid, id, month, year);
						}
					}else {
						performAnx2Reconcile(client, invType, strMonth + year, clientid, id, month, year);
					}
				}
			}
		}
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("type", "dwnldgstr2a");

		model.addAttribute("client", client);
		if(returntype.equals(GSTR2A)){
			returntype = GSTR2;
		}
		model.addAttribute("returntype", returntype);
		
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);
		if (returntype.equals(GSTR1)) {
			String submissionYear = year + "-" + (year + 1);
			if (month > 3) {
				submissionYear = (year + 1) + "-" + (year + 2);
			}
			CompanyInvoices invoiceSubmissionData = profileService.getUserInvoiceSubmissionDetails(client.getId().toString(), submissionYear, null);
			if (isNotEmpty(invoiceSubmissionData)) {
				model.addAttribute("invoiceSubmissionData", invoiceSubmissionData);
			}
		}

		logger.debug(CLASSNAME + method + END);
		return "client/all_invoice_view";
	}
	
	@Async
	private void performAnx2Reconcile(Client client, String invType, String fp, String clientid, String userid, int month,int year) {
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
	
		try {
			AnxInvoiceSupport anx2 = iHubConsumerService.getANX2Invoices(client, client.getGstnnumber(), month, year,
					MasterGSTConstants.ANX2, invType, null, userid, true);
			clientService.processAnx2Data(anx2, client, MasterGSTConstants.ANX2, invType, userid, month, year);
		}catch (MasterGSTException exp) {
			}

	}
		
	@RequestMapping(value = "/reconcileinv/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String reconcileInvoices(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "reconcileInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
		Client client = clientService.findById(clientid);
		Date reconciledDate = new Date();
		client.setReconcileDate(simpleDateFormat.format(reconciledDate));
		clientService.saveClient(client);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth+year;
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		User user = userService.findById(id);
		ReconcileTemp reconcileTemp = new ReconcileTemp();
		reconcileTemp.setClientid(clientid);
		reconcileTemp.setMonthlyoryearly("Monthly");
		if(isNotEmpty(user)) {
			reconcileTemp.setUserid(new ObjectId(id));
			reconcileTemp.setInitiateduserid(id);
			if(isNotEmpty(user.getFullname())) {
				reconcileTemp.setFullname(user.getFullname());
			}
		}
		reconcileTempRepository.save(reconcileTemp);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid()) && usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else {
			//String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			//otpcheck = "OTP_VERIFIED";
			List<String> matchingstatus = Lists.newArrayList();
			matchingstatus.add("");
			matchingstatus.add(null);
			matchingstatus.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
			List<String> inv = Lists.newArrayList();
			inv.add(MasterGSTConstants.B2B);
			inv.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
			inv.add(MasterGSTConstants.IMP_GOODS);
			List<String> rtarray = Lists.newArrayList();
			rtarray.add(retPeriod);
			long gstr2aList = invoicesMappingDao.findByClientidAndFpInAndInvtypeAndIsAmendments(clientid, rtarray, inv,matchingstatus, true);
			ReconcileTemp recon = reconcileTempRepository.findByClientid(clientid);
			recon.setTotalinvoices((Long)gstr2aList);
			recon = reconcileTempRepository.save(recon);
			//if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				String[] invTypes = {MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,MasterGSTConstants.IMP_GOODS};
				OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(clientid);
				Boolean billdate = false;
				if(isNotEmpty(otherconfig)){
					billdate = otherconfig.isEnableTransDate();
				}
				
				for (String invType : invTypes) {
					ReconcileTemp temp = reconcileTempRepository.findByClientid(clientid);
					List<String> invoic = Lists.newArrayList();
					invoic.add(invType);
					long gstr2ainvList = 0l;
					gstr2ainvList = invoicesMappingDao.findByClientidAndFpInAndInvtypeAndIsAmendments(clientid, rtarray, invoic,matchingstatus, true);
					if(invType.equals(MasterGSTConstants.B2B)) {
						temp.setTotalb2binvoices((Long)gstr2ainvList);
					}else if(invType.equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						temp.setTotalcreditinvoices(gstr2ainvList);
					}else if(invType.equals(MasterGSTConstants.IMP_GOODS)) {
						temp.setTotalimpginvoices(gstr2ainvList);
					}
					reconcileTempRepository.save(temp);
					if(isEmpty(otherconfig) || !billdate) {
						clientService.updateMismatchStatus(clientid, invType, client.getGstnnumber(), retPeriod, month, year, "monthly",true);
					}else {
						clientService.updateMismatchStatus(clientid, invType, client.getGstnnumber(), retPeriod, month, year, "monthly",false);
					}
				}
			//}
		}
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("type", "mmtchinv");
		ClientConfig clientConfig = clientService.getClientConfig(clientid);
		model.addAttribute("clientConfig", clientConfig);
		model.addAttribute("client", client);
		if(returntype.equals(GSTR2A)){
			returntype = GSTR2;
		}
		model.addAttribute("returntype", returntype);
		
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);
		ReconcileTemp temp = reconcileTempRepository.findByClientid(clientid);
		if(isNotEmpty(temp)) {
			reconcileTempRepository.delete(temp);
			logger.info("reconcile temp deleted");
			
		}
		logger.debug(CLASSNAME + method + END);
		return "client/all_invoice_view";
	}

	@RequestMapping(value = "/prfmmismatch/{acceptFlag}", method = RequestMethod.POST)
	public @ResponseBody void performMismatch(@RequestBody List<MisMatchVO> records,
			@PathVariable("acceptFlag") boolean acceptFlag, ModelMap model) throws Exception {
		final String method = "performMismatch ::";
		logger.debug(CLASSNAME + method + BEGIN);
		clientService.updateMismatchRecords(records, acceptFlag);
	}	
	
	@RequestMapping(value = "/dwnldmismatchxls/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadMismatchExcelData(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("month") int month, @PathVariable("year") int year, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		if(NullUtil.isNotEmpty(client)) {
			gstnumber = client.getGstnnumber();
		}
		response.setHeader("Content-Disposition", "inline; filename='MGST_Mismatched_"+gstnumber+"_"+month+year+".xls");
		Page<? extends InvoiceParent> purchases = clientService.getInvoices(null, client, id, PURCHASE_REGISTER,"notreports", month, year);
		Page<? extends InvoiceParent> gstr2List = clientService.getInvoices(null, client, id, GSTR2,"notreports", month, year);
		List<InvoiceVO> invoiceVOList = Lists.newArrayList();
		List<String> matchedArray = Lists.newArrayList();
		if(isNotEmpty(purchases)) {
			for (InvoiceParent invoice : purchases) {
				if(isNotEmpty(invoice.getMatchingId())) {
					matchedArray.add(invoice.getMatchingId());
				}
				if (isNotEmpty(invoice.getItems())) {
					for (Item item : invoice.getItems()) {
						InvoiceVO invo = new InvoiceVO();
						if(isEmpty(gstr2List)) {
							invo.setStatus(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
						} else if(isEmpty(invoice.getMatchingStatus()) || !invoice.getMatchingStatus().equals(MasterGSTConstants.GST_STATUS_MATCHED)) {
							if(isEmpty(invoice.getMatchingStatus())) {
								invo.setStatus(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
							} else if(isNotEmpty(invoice.getMatchingId())) {
								invo.setStatus(MasterGSTConstants.GST_STATUS_MISMATCHED);
							}
						} else {
							invo.setStatus(MasterGSTConstants.GST_STATUS_MATCHED);
						}
						if (isNotEmpty(invoice.getBilledtoname())) {
							invo.setCustomerName(invoice.getBilledtoname());
						}
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
							invo.setCustomerGSTIN(invoice.getB2b().get(0).getCtin());
						}
						if (isNotEmpty(item.getTaxablevalue())) {
							invo.setTaxableValue(item.getTaxablevalue());
						}
						if (isNotEmpty(item.getIgstrate())) {
							invo.setIgstRate(item.getIgstrate());
						}
						if (isNotEmpty(item.getIgstamount())) {
							invo.setIgstAmount(item.getIgstamount());
						}
						if (isNotEmpty(item.getIgstavltax())) {
							invo.setIgstTax(item.getIgstavltax());
						}
						if (isNotEmpty(item.getCgstrate())) {
							invo.setCgstRate(item.getCgstrate());
						}
						if (isNotEmpty(item.getCgstamount())) {
							invo.setCgstAmount(item.getCgstamount());
						}
						if (isNotEmpty(item.getCgstavltax())) {
							invo.setCgstTax(item.getCgstavltax());
						}
						if (isNotEmpty(item.getSgstrate())) {
							invo.setSgstRate(item.getSgstrate());
						}
						if (isNotEmpty(item.getSgstamount())) {
							invo.setSgstAmount(item.getSgstamount());
						}
						if (isNotEmpty(item.getSgstavltax())) {
							invo.setSgstTax(item.getSgstavltax());
						}
						if (isNotEmpty(item.getCessrate())) {
							invo.setCessRate(item.getCessrate());
						}
						if (isNotEmpty(item.getCessamount())) {
							invo.setCessAmount(item.getCessamount());
						}
						if (isNotEmpty(item.getCessavltax())) {
							invo.setCessTax(item.getCessavltax());
						}
						if (isNotEmpty(invoice.getStatename())) {
							invo.setState(invoice.getStatename());
						}
						if (isNotEmpty(invoice.getInvoiceno())) {
							invo.setInvoiceNo(invoice.getInvoiceno());
						}
						invo.setInvoiceDate(invoice.getDateofinvoice());
						invo.setReturnPeriod(invoice.getFp());
						invo.setType(invoice.getInvtype());
						invo.setTotalValue(invoice.getTotalamount());
						invo.setTotaltax(invoice.getTotaltax());
						invo.setTotalItc(invoice.getTotalitc());
						invoiceVOList.add(invo);
					}
				}
			}
		} 
		
		if(isNotEmpty(gstr2List)) {
			for (InvoiceParent invoice : gstr2List) {
				if (isNotEmpty(invoice.getItems()) && !matchedArray.contains(invoice.getId().toString())) {
					for (Item item : invoice.getItems()) {
						InvoiceVO invo = new InvoiceVO();
						invo.setStatus(MasterGSTConstants.GST_STATUS_NOTINPURCHASES);
						if (isNotEmpty(invoice.getBilledtoname())) {
							invo.setCustomerName(invoice.getBilledtoname());
						}
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
							invo.setCustomerGSTIN(invoice.getB2b().get(0).getCtin());
						}
						if (isNotEmpty(item.getTaxablevalue())) {
							invo.setTaxableValue(item.getTaxablevalue());
						}
						if (isNotEmpty(item.getIgstrate())) {
							invo.setIgstRate(item.getIgstrate());
						}
						if (isNotEmpty(item.getIgstamount())) {
							invo.setIgstAmount(item.getIgstamount());
						}
						if (isNotEmpty(item.getIgstavltax())) {
							invo.setIgstTax(item.getIgstavltax());
						}
						if (isNotEmpty(item.getCgstrate())) {
							invo.setCgstRate(item.getCgstrate());
						}
						if (isNotEmpty(item.getCgstamount())) {
							invo.setCgstAmount(item.getCgstamount());
						}
						if (isNotEmpty(item.getCgstavltax())) {
							invo.setCgstTax(item.getCgstavltax());
						}
						if (isNotEmpty(item.getSgstrate())) {
							invo.setSgstRate(item.getSgstrate());
						}
						if (isNotEmpty(item.getSgstamount())) {
							invo.setSgstAmount(item.getSgstamount());
						}
						if (isNotEmpty(item.getSgstavltax())) {
							invo.setSgstTax(item.getSgstavltax());
						}
						if (isNotEmpty(item.getCessrate())) {
							invo.setCessRate(item.getCessrate());
						}
						if (isNotEmpty(item.getCessamount())) {
							invo.setCessAmount(item.getCessamount());
						}
						if (isNotEmpty(item.getCessavltax())) {
							invo.setCessTax(item.getCessavltax());
						}
						if (isNotEmpty(invoice.getStatename())) {
							invo.setState(invoice.getStatename());
						}
						if (isNotEmpty(invoice.getInvoiceno())) {
							invo.setInvoiceNo(invoice.getInvoiceno());
						}
						invo.setInvoiceDate(invoice.getDateofinvoice());
						invo.setReturnPeriod(invoice.getFp());
						invo.setType(invoice.getInvtype());
						invo.setTotalValue(invoice.getTotalamount());
						invo.setTotaltax(invoice.getTotaltax());
						invo.setTotalItc(invoice.getTotalitc());
						invoiceVOList.add(invo);
					}
				}
			}
		}
		logger.debug(invoiceVOList);
		File file = new File("MGST_"+returntype+"_"+gstnumber+"_"+month+year+".xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = Arrays.asList("Status","Invoice Date", "Invoice No", "GSTIN", "CustomerName", "Return Period",
					"Invoice Type", "State", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
					"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount", "ITC Available");
			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, invoiceVOList,
					"status, invoiceDate, invoiceNo, customerGSTIN, customerName, returnPeriod, type, state, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totalItc",
					fos);
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadMismatchExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_Mismatch_"+gstnumber+"_"+month+year+".xls"));
	}

	@RequestMapping(value = "/addsupinvoice/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String addSuppliesInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "addSuppliesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		model.addAttribute("returntype", GSTR3B);

		Client client = clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		ClientStatus clientStatus = clientService.getClientStatus(clientid, GSTR3B, retPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		GSTR3B gstr3b = clientService.getSuppliesInvoice(clientid, retPeriod);
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else {
			if (isEmpty(clientStatus)) {
				String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
				if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), retPeriod, id, GSTR3B,
						true);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							client.setStatus(trackResponse.getStatus());
							CompletableFuture<TrackResponse> future = CompletableFuture.supplyAsync(() -> trackResponse);
							future.thenAcceptAsync(trackResp -> {
								ClientStatus clntStatus = new ClientStatus();
								clntStatus.setClientId(client.getId().toString());
								clntStatus.setReturnPeriod(trackResp.getRetPeriod());
								clntStatus.setReturnType(trackResp.getRtntype());
								clntStatus.setStatus(trackResp.getStatus());
								clntStatus.setArn(trackResp.getArn());
								if(isNotEmpty(trackResp.getDof())) {
								SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
								try {
										clntStatus.setDof(dateFormat.parse(trackResp.getDof()));
										clientService.saveClientStatus(clntStatus);
								} catch (ParseException e) {
								}
							}
							});
						}
					}
				} else if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& !response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)
						&& NullUtil.isNotEmpty(response.getError())
						&& NullUtil.isNotEmpty(response.getError().getErrorcd())
						&& (response.getError().getErrorcd().equals("RET11402") 
								|| response.getError().getErrorcd().equals("RET11401")
								|| response.getError().getErrorcd().equals("RET11407")
								|| response.getError().getErrorcd().equals("RET13509"))) {
					model.addAttribute("error", response.getError().getMessage());
					//request.getSession().setAttribute("tokenError", response.getError().getMessage());
				}
			}else {
				model.addAttribute("otperror", "Y");
				model.addAttribute("error", "Unauthorized User!");
			}
			}
			ClientStatus clientStatuss = clientService.getClientStatus(clientid, GSTR3B, retPeriod);
			
			if(isNotEmpty(clientStatuss) && isNotEmpty(clientStatuss.getStatus()) && (clientStatuss.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_FILED) || clientStatuss.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED))) {
				gstr3b = new GSTR3B();
				try {
					Response response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, id,
							GSTR3B, true);
					if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
						if (isNotEmpty(response.getData().getSupDetails())) {
							gstr3b.setSupDetails(response.getData().getSupDetails());
						}
						if (isNotEmpty(response.getData().getInterSup())) {
							gstr3b.setInterSup(response.getData().getInterSup());
						}
						if (isNotEmpty(response.getData().getInwardSup())) {
							gstr3b.setInwardSup(response.getData().getInwardSup());
						}
						if (isNotEmpty(response.getData().getItcElg())) {
							gstr3b.setItcElg(response.getData().getItcElg());
						}
						if (isNotEmpty(response.getData().getIntrLtfee())
								&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
							gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
						}
						if (isNotEmpty(response.getData().getTaxPymt())) {
							gstr3b.setOffLiab(new GSTR3BOffsetLiability());
							if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
								gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
								gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
								gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
							}
						}
					} else {
						GSTR3BDetails itcAvlIMPG = new GSTR3BDetails();
						itcAvlIMPG.setTy("IMPG");
						gstr3b.getItcElg().getItcAvl().add(itcAvlIMPG);
						GSTR3BDetails itcAvlIMPS = new GSTR3BDetails();
						itcAvlIMPS.setTy("IMPS");
						gstr3b.getItcElg().getItcAvl().add(itcAvlIMPS);
						GSTR3BDetails itcAvlISRC = new GSTR3BDetails();
						itcAvlISRC.setTy("ISRC");
						gstr3b.getItcElg().getItcAvl().add(itcAvlISRC);
						GSTR3BDetails itcAvlISD = new GSTR3BDetails();
						itcAvlISD.setTy("ISD");
						gstr3b.getItcElg().getItcAvl().add(itcAvlISD);
						GSTR3BDetails itcAvlOTH = new GSTR3BDetails();
						itcAvlOTH.setTy("OTH");
						gstr3b.getItcElg().getItcAvl().add(itcAvlOTH);
	
						GSTR3BDetails itcRevRUL = new GSTR3BDetails();
						itcRevRUL.setTy("RUL");
						gstr3b.getItcElg().getItcRev().add(itcRevRUL);
						GSTR3BDetails itcRevOTH = new GSTR3BDetails();
						itcRevOTH.setTy("OTH");
						gstr3b.getItcElg().getItcRev().add(itcRevOTH);
	
						GSTR3BDetails itcInElgRUL = new GSTR3BDetails();
						itcInElgRUL.setTy("RUL");
						gstr3b.getItcElg().getItcInelg().add(itcInElgRUL);
						GSTR3BDetails itcInElgOTH = new GSTR3BDetails();
						itcInElgOTH.setTy("OTH");
						gstr3b.getItcElg().getItcInelg().add(itcInElgOTH);
	
						GSTR3BDetails intrDetails = new GSTR3BDetails();
						gstr3b.getIntrLtfee().setIntrDetails(intrDetails);
					}
					String returnPeriod = strMonth + year;
					gstr3b.setRetPeriod(returnPeriod);
					gstr3b.setGstin(client.getGstnnumber());
					gstr3b.setCreatedDate(new Date());
					gstr3b.setClientid(clientid);
					gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);
					List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(id,clientid, retPeriod);
					gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
					
						GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
						status.setUserid(id);
						status.setClientid(clientid);
						status.setReturnperiod(retPeriod);
						status.setStatus("DOWNLOAD");
						status.setFinancialyear(year + "");
						status.setCurrrentmonth(strMonth);
						gstr3BDowloadService.savedownloadstatus(status);
					
				} catch (Exception e) {
					logger.error(CLASSNAME + method + " ERROR", e);
					model.addAttribute("error", e.getMessage());
				}
		}else {
			if (isEmpty(gstr3b)) {
				gstr3b = new GSTR3B();
				try {
					Response response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, id,
							GSTR3B, true);
					if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
						if (isNotEmpty(response.getData().getSupDetails())) {
							gstr3b.setSupDetails(response.getData().getSupDetails());
						}
						if (isNotEmpty(response.getData().getInterSup())) {
							gstr3b.setInterSup(response.getData().getInterSup());
						}
						if (isNotEmpty(response.getData().getInwardSup())) {
							gstr3b.setInwardSup(response.getData().getInwardSup());
						}
						if (isNotEmpty(response.getData().getItcElg())) {
							gstr3b.setItcElg(response.getData().getItcElg());
						}
						if (isNotEmpty(response.getData().getIntrLtfee())
								&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
							gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
						}
						if (isNotEmpty(response.getData().getTaxPymt())) {
							gstr3b.setOffLiab(new GSTR3BOffsetLiability());
							if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
								gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
								gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
								gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
							}
						}
					} else {
						GSTR3BDetails itcAvlIMPG = new GSTR3BDetails();
						itcAvlIMPG.setTy("IMPG");
						gstr3b.getItcElg().getItcAvl().add(itcAvlIMPG);
						GSTR3BDetails itcAvlIMPS = new GSTR3BDetails();
						itcAvlIMPS.setTy("IMPS");
						gstr3b.getItcElg().getItcAvl().add(itcAvlIMPS);
						GSTR3BDetails itcAvlISRC = new GSTR3BDetails();
						itcAvlISRC.setTy("ISRC");
						gstr3b.getItcElg().getItcAvl().add(itcAvlISRC);
						GSTR3BDetails itcAvlISD = new GSTR3BDetails();
						itcAvlISD.setTy("ISD");
						gstr3b.getItcElg().getItcAvl().add(itcAvlISD);
						GSTR3BDetails itcAvlOTH = new GSTR3BDetails();
						itcAvlOTH.setTy("OTH");
						gstr3b.getItcElg().getItcAvl().add(itcAvlOTH);
	
						GSTR3BDetails itcRevRUL = new GSTR3BDetails();
						itcRevRUL.setTy("RUL");
						gstr3b.getItcElg().getItcRev().add(itcRevRUL);
						GSTR3BDetails itcRevOTH = new GSTR3BDetails();
						itcRevOTH.setTy("OTH");
						gstr3b.getItcElg().getItcRev().add(itcRevOTH);
	
						GSTR3BDetails itcInElgRUL = new GSTR3BDetails();
						itcInElgRUL.setTy("RUL");
						gstr3b.getItcElg().getItcInelg().add(itcInElgRUL);
						GSTR3BDetails itcInElgOTH = new GSTR3BDetails();
						itcInElgOTH.setTy("OTH");
						gstr3b.getItcElg().getItcInelg().add(itcInElgOTH);
	
						GSTR3BDetails intrDetails = new GSTR3BDetails();
						gstr3b.getIntrLtfee().setIntrDetails(intrDetails);
					}
					String returnPeriod = strMonth + year;
					gstr3b.setRetPeriod(returnPeriod);
					gstr3b.setGstin(client.getGstnnumber());
					gstr3b.setCreatedDate(new Date());
					gstr3b.setClientid(clientid);
					gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);
					List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(id,clientid, retPeriod);
					gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
					
						GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
						status.setUserid(id);
						status.setClientid(clientid);
						status.setReturnperiod(retPeriod);
						status.setStatus("DOWNLOAD");
						status.setFinancialyear(year + "");
						status.setCurrrentmonth(strMonth);
						gstr3BDowloadService.savedownloadstatus(status);

				} catch (Exception e) {
					logger.error(CLASSNAME + method + " ERROR", e);
					model.addAttribute("error", e.getMessage());
				}
			}
		}
		}
		OtherConfigurations configdetails = otherConfigurationRepository.findByClientid(clientid);
		model.addAttribute("configdetails", configdetails);
		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr3b);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/add_supplies_invoice";
	}
	
	@RequestMapping(value = "/addAnnualinvoice/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String addAnnualInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addAnnaulInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		model.addAttribute("returntype", GSTR9);

		Client client = clientService.findById(clientid);
		
		String retPeriod = "";
		if(month > 3) {
			retPeriod = "03"+(year+1);
		}else {
			retPeriod = "03"+(year);
		}
		
		ClientStatus clientStatus = clientService.getClientStatus(clientid, GSTR9, retPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		GSTR9 gstr9 = clientService.getAnnualInvoice(clientid, retPeriod);
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				model.addAttribute("error", errormsg);
			} else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		}else {
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				model.addAttribute("error", "Unauthorized User!");
			}
		}

		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr9);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/add_gstr9_invoice";
	}
	
	@RequestMapping(value = "/populate9/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String populateGSTR9Data(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "populateGSTR9Data::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("returntype", GSTR9);
		Client client = clientService.findById(clientid);
		String retPeriod = "";
		if(month > 3) {
			retPeriod = "03"+(year+1);
		}else {
			retPeriod = "03"+(year);
		}
		GSTR9 gstr9 = clientService.getAnnualInvoice(clientid, retPeriod);
		if(isEmpty(gstr9)) {
			gstr9 = new GSTR9();
			gstr9.setClientid(clientid);
			gstr9.setUserid(id);
			gstr9.setLegalName(client.getBusinessname());
			gstr9.setGstin(client.getGstnnumber());
		}
		GSTRCommonResponse response = iHubConsumerService.getAutoCalculatedDetails(client, GSTR9, client.getGstnnumber(), retPeriod);
		  if (isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE) && isNotEmpty(response.getData())) {
			ObjectMapper mapper = new ObjectMapper();
			  GSTR9AutoCal gstr9AutoCal = response.getData();
			 if(isNotEmpty(gstr9AutoCal.getTable4())) { 
				  gstr9.setTable4(gstr9AutoCal.getTable4());
				  	Double table4AtoGtxval = 0d;
				  	Double table4AtoGcamt = 0d;
					Double table4AtoGsamt = 0d;
					Double table4AtoGiamt = 0d;
					Double table4AtoGcsamt = 0d;
				  
				  GSTR9Table4OtherThanExpSezDetails table4AtoG = new GSTR9Table4OtherThanExpSezDetails();
				  if(isNotEmpty(gstr9AutoCal.getTable4().getB2c())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2c().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getB2c().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2c().getCamt())) {
						  table4AtoGcamt = table4AtoGcamt + gstr9AutoCal.getTable4().getB2c().getCamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2c().getSamt())) {
						  table4AtoGsamt = table4AtoGsamt + gstr9AutoCal.getTable4().getB2c().getSamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2c().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getB2c().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2c().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getB2c().getCsamt();
					  }
				  }
				  
				  if(isNotEmpty(gstr9AutoCal.getTable4().getB2b())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2b().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getB2b().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2b().getCamt())) {
						  table4AtoGcamt = table4AtoGcamt + gstr9AutoCal.getTable4().getB2b().getCamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2b().getSamt())) {
						  table4AtoGsamt = table4AtoGsamt + gstr9AutoCal.getTable4().getB2b().getSamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2b().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getB2b().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getB2b().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getB2b().getCsamt();
					  }
				  }
				  
				  if(isNotEmpty(gstr9AutoCal.getTable4().getExp())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getExp().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getExp().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getExp().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getExp().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getExp().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getExp().getCsamt();
					  }
				  }
				  
				  if(isNotEmpty(gstr9AutoCal.getTable4().getSez())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getSez().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getSez().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getSez().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getSez().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getSez().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getSez().getCsamt();
					  }
				  }
				  
				  if(isNotEmpty(gstr9AutoCal.getTable4().getDeemed())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getDeemed().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getDeemed().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getDeemed().getCamt())) {
						  table4AtoGcamt = table4AtoGcamt + gstr9AutoCal.getTable4().getDeemed().getCamt();
		}
					  if(isNotEmpty(gstr9AutoCal.getTable4().getDeemed().getSamt())) {
						  table4AtoGsamt = table4AtoGsamt + gstr9AutoCal.getTable4().getDeemed().getSamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getDeemed().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getDeemed().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getDeemed().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getDeemed().getCsamt();
					  }
				  }
				  
				  if(isNotEmpty(gstr9AutoCal.getTable4().getAt())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getAt().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getAt().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getAt().getCamt())) {
						  table4AtoGcamt = table4AtoGcamt + gstr9AutoCal.getTable4().getAt().getCamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getAt().getSamt())) {
						  table4AtoGsamt = table4AtoGsamt + gstr9AutoCal.getTable4().getAt().getSamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getAt().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getAt().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getAt().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getAt().getCsamt();
					  }
				  }
				  
				  if(isNotEmpty(gstr9AutoCal.getTable4().getRchrg())) {
					  if(isNotEmpty(gstr9AutoCal.getTable4().getRchrg().getTxval())) {
						  table4AtoGtxval = table4AtoGtxval + gstr9AutoCal.getTable4().getRchrg().getTxval();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getRchrg().getCamt())) {
						  table4AtoGcamt = table4AtoGcamt + gstr9AutoCal.getTable4().getRchrg().getCamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getRchrg().getSamt())) {
						  table4AtoGsamt = table4AtoGsamt + gstr9AutoCal.getTable4().getRchrg().getSamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getRchrg().getIamt())) {
						  table4AtoGiamt = table4AtoGiamt + gstr9AutoCal.getTable4().getRchrg().getIamt();
					  }
					  if(isNotEmpty(gstr9AutoCal.getTable4().getRchrg().getCsamt())) {
						  table4AtoGcsamt = table4AtoGcsamt + gstr9AutoCal.getTable4().getRchrg().getCsamt();
					  }
				  }
				  table4AtoG.setTxval(table4AtoGtxval);
				  table4AtoG.setCamt(table4AtoGcamt);
				  table4AtoG.setSamt(table4AtoGsamt);
				  table4AtoG.setIamt(table4AtoGiamt);
				  table4AtoG.setCsamt(table4AtoGcsamt);
				  gstr9.setTable4AtoG(table4AtoG);
			 
				  GSTR9Table4OtherThanExpSezDetails table4ItoL = new GSTR9Table4OtherThanExpSezDetails();
				  	Double table4ItoLtxval = 0d;
				  	Double table4ItoLcamt = 0d;
					Double table4ItoLsamt = 0d;
					Double table4ItoLiamt = 0d;
					Double table4ItoLcsamt = 0d;
					
					if(isNotEmpty(gstr9AutoCal.getTable4().getDrNt())) {
						  if(isNotEmpty(gstr9AutoCal.getTable4().getDrNt().getTxval())) {
							  table4ItoLtxval = table4ItoLtxval + gstr9AutoCal.getTable4().getDrNt().getTxval();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getDrNt().getCamt())) {
							  table4ItoLcamt = table4ItoLcamt + gstr9AutoCal.getTable4().getDrNt().getCamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getDrNt().getSamt())) {
							  table4ItoLsamt = table4ItoLsamt + gstr9AutoCal.getTable4().getDrNt().getSamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getDrNt().getIamt())) {
							  table4ItoLiamt = table4ItoLiamt + gstr9AutoCal.getTable4().getDrNt().getIamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getDrNt().getCsamt())) {
							  table4ItoLcsamt = table4ItoLcsamt + gstr9AutoCal.getTable4().getDrNt().getCsamt();
						  }
					  }
					
					if(isNotEmpty(gstr9AutoCal.getTable4().getAmdPos())) {
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdPos().getTxval())) {
							  table4ItoLtxval = table4ItoLtxval + gstr9AutoCal.getTable4().getAmdPos().getTxval();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdPos().getCamt())) {
							  table4ItoLcamt = table4ItoLcamt + gstr9AutoCal.getTable4().getAmdPos().getCamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdPos().getSamt())) {
							  table4ItoLsamt = table4ItoLsamt + gstr9AutoCal.getTable4().getAmdPos().getSamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdPos().getIamt())) {
							  table4ItoLiamt = table4ItoLiamt + gstr9AutoCal.getTable4().getAmdPos().getIamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdPos().getCsamt())) {
							  table4ItoLcsamt = table4ItoLcsamt + gstr9AutoCal.getTable4().getAmdPos().getCsamt();
						  }
					  }
					
					if(isNotEmpty(gstr9AutoCal.getTable4().getCrNt())) {
						  if(isNotEmpty(gstr9AutoCal.getTable4().getCrNt().getTxval())) {
							  table4ItoLtxval = table4ItoLtxval - gstr9AutoCal.getTable4().getCrNt().getTxval();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getCrNt().getCamt())) {
							  table4ItoLcamt = table4ItoLcamt - gstr9AutoCal.getTable4().getCrNt().getCamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getCrNt().getSamt())) {
							  table4ItoLsamt = table4ItoLsamt - gstr9AutoCal.getTable4().getCrNt().getSamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getCrNt().getIamt())) {
							  table4ItoLiamt = table4ItoLiamt - gstr9AutoCal.getTable4().getCrNt().getIamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getCrNt().getCsamt())) {
							  table4ItoLcsamt = table4ItoLcsamt - gstr9AutoCal.getTable4().getCrNt().getCsamt();
						  }
					  }
					
					if(isNotEmpty(gstr9AutoCal.getTable4().getAmdNeg())) {
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdNeg().getTxval())) {
							  table4ItoLtxval = table4ItoLtxval - gstr9AutoCal.getTable4().getAmdNeg().getTxval();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdNeg().getCamt())) {
							  table4ItoLcamt = table4ItoLcamt - gstr9AutoCal.getTable4().getAmdNeg().getCamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdNeg().getSamt())) {
							  table4ItoLsamt = table4ItoLsamt - gstr9AutoCal.getTable4().getAmdNeg().getSamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdNeg().getIamt())) {
							  table4ItoLiamt = table4ItoLiamt - gstr9AutoCal.getTable4().getAmdNeg().getIamt();
						  }
						  if(isNotEmpty(gstr9AutoCal.getTable4().getAmdNeg().getCsamt())) {
							  table4ItoLcsamt = table4ItoLcsamt - gstr9AutoCal.getTable4().getAmdNeg().getCsamt();
						  }
					  }
					
				  table4ItoL.setTxval(table4ItoLtxval);
				  table4ItoL.setCamt(table4ItoLcamt);
				  table4ItoL.setSamt(table4ItoLsamt);
				  table4ItoL.setIamt(table4ItoLiamt);
				  table4ItoL.setCsamt(table4ItoLcsamt);
				  gstr9.setTable4ItoL(table4ItoL);
				  
				  GSTR9Table4OtherThanExpSezDetails table4HtoM = new GSTR9Table4OtherThanExpSezDetails();
				  table4HtoM.setTxval(table4AtoGtxval + table4ItoLtxval);
				  table4HtoM.setCamt(table4AtoGcamt + table4ItoLcamt);
				  table4HtoM.setSamt(table4AtoGsamt + table4ItoLsamt);
				  table4HtoM.setIamt(table4AtoGiamt + table4ItoLiamt);
				  table4HtoM.setCsamt(table4AtoGcsamt + table4ItoLcsamt);
				  gstr9.setTable4HtoM(table4HtoM);
			 }
			  
			  if(isNotEmpty(gstr9AutoCal.getTable5())) {
				  gstr9.setTable5(gstr9AutoCal.getTable5());
				  
				  GSTR9Table5ItemDetails table5AtoF = new GSTR9Table5ItemDetails();
				  Double table5AtoFtxval = 0d;
				  if(isNotEmpty(gstr9AutoCal.getTable5().getZeroRtd()) && isNotEmpty(gstr9AutoCal.getTable5().getZeroRtd().getTxval())) {
					  table5AtoFtxval = table5AtoFtxval + gstr9AutoCal.getTable5().getZeroRtd().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getSez()) && isNotEmpty(gstr9AutoCal.getTable5().getSez().getTxval())) {
					  table5AtoFtxval = table5AtoFtxval + gstr9AutoCal.getTable5().getSez().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getRchrg()) && isNotEmpty(gstr9AutoCal.getTable5().getRchrg().getTxval())) {
					  table5AtoFtxval = table5AtoFtxval + gstr9AutoCal.getTable5().getRchrg().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getExmt()) && isNotEmpty(gstr9AutoCal.getTable5().getExmt().getTxval())) {
					  table5AtoFtxval = table5AtoFtxval + gstr9AutoCal.getTable5().getExmt().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getNil()) && isNotEmpty(gstr9AutoCal.getTable5().getNil().getTxval())) {
					  table5AtoFtxval = table5AtoFtxval + gstr9AutoCal.getTable5().getNil().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getNonGst()) && isNotEmpty(gstr9AutoCal.getTable5().getNonGst().getTxval())) {
					  table5AtoFtxval = table5AtoFtxval + gstr9AutoCal.getTable5().getNonGst().getTxval();
				  }
				  table5AtoF.setTxval(table5AtoFtxval);
				  gstr9.setTable5AtoF(table5AtoF);
				  
				  GSTR9Table5ItemDetails table5HtoK = new GSTR9Table5ItemDetails();
				  Double table5HtoKtxval = 0d;
				  if(isNotEmpty(gstr9AutoCal.getTable5().getDrNt()) && isNotEmpty(gstr9AutoCal.getTable5().getDrNt().getTxval())) {
					  table5HtoKtxval = table5HtoKtxval + gstr9AutoCal.getTable5().getDrNt().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getAmdPos()) && isNotEmpty(gstr9AutoCal.getTable5().getAmdPos().getTxval())) {
					  table5HtoKtxval = table5HtoKtxval + gstr9AutoCal.getTable5().getAmdPos().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getCrNt()) && isNotEmpty(gstr9AutoCal.getTable5().getCrNt().getTxval())) {
					  table5HtoKtxval = table5HtoKtxval - gstr9AutoCal.getTable5().getCrNt().getTxval();
				  }
				  if(isNotEmpty(gstr9AutoCal.getTable5().getAmdNeg()) && isNotEmpty(gstr9AutoCal.getTable5().getAmdNeg().getTxval())) {
					  table5HtoKtxval = table5HtoKtxval - gstr9AutoCal.getTable5().getAmdNeg().getTxval();
				  }
				  
				  table5HtoK.setTxval(table5HtoKtxval);
				  gstr9.setTable5HtoK(table5HtoK);
				  
				  GSTR9Table5ItemDetails turnoverOnTaxNotPaid = new GSTR9Table5ItemDetails();
				  turnoverOnTaxNotPaid.setTxval(table5AtoFtxval + table5HtoKtxval);
				  gstr9.setTurnoverOnTaxNotPaid(turnoverOnTaxNotPaid);
				  
				  GSTR9Table4OtherThanExpSezDetails totalTurnOver = new GSTR9Table4OtherThanExpSezDetails();
				  totalTurnOver.setTxval(gstr9.getTable4HtoM().getTxval() + table5AtoFtxval + table5HtoKtxval - gstr9AutoCal.getTable4().getRchrg().getTxval());
				  totalTurnOver.setCamt(gstr9.getTable4HtoM().getCamt() - gstr9AutoCal.getTable4().getRchrg().getCamt());
				  totalTurnOver.setSamt(gstr9.getTable4HtoM().getSamt() - gstr9AutoCal.getTable4().getRchrg().getSamt());
				  totalTurnOver.setIamt(gstr9.getTable4HtoM().getIamt() - gstr9AutoCal.getTable4().getRchrg().getIamt());
				  totalTurnOver.setCsamt(gstr9.getTable4HtoM().getCsamt() - gstr9AutoCal.getTable4().getRchrg().getCsamt());
				  gstr9.setTotalTurnOver(totalTurnOver);
			  }
			  if(isNotEmpty(gstr9AutoCal.getTable9())) {
				  	GSTR9Table9Details table9 = new GSTR9Table9Details();
				  	GSTR9Table9SummaryDetails iamt = new GSTR9Table9SummaryDetails();
					GSTR9Table9SummaryDetails camt = new GSTR9Table9SummaryDetails();
					GSTR9Table9SummaryDetails samt = new GSTR9Table9SummaryDetails();
					GSTR9Table9SummaryDetails csamt = new GSTR9Table9SummaryDetails();
					GSTR9Table9SummaryDetails intr = new GSTR9Table9SummaryDetails();
					GSTR9Table9SummaryDetails fee = new GSTR9Table9SummaryDetails();
					
					GSTR9Table9AllDetails t9iamt = new GSTR9Table9AllDetails();
					GSTR9Table9AllDetails t9camt = new GSTR9Table9AllDetails();
					GSTR9Table9AllDetails t9samt = new GSTR9Table9AllDetails();
					GSTR9Table9AllDetails t9csamt = new GSTR9Table9AllDetails();
					GSTR9Table9AllDetails t9intr = new GSTR9Table9AllDetails();
					GSTR9Table9AllDetails t9fee = new GSTR9Table9AllDetails();
					if(isNotEmpty(gstr9AutoCal.getTable9().getIamt())) {
						iamt.setTxpyble(gstr9AutoCal.getTable9().getIamt().getTxpyble());
						t9iamt.setTxpaidCash(gstr9AutoCal.getTable9().getIamt().getTxpaidCash());
						t9iamt.setTaxPaidItcIamt(gstr9AutoCal.getTable9().getIamt().getTaxPaidItcIamt());
						t9iamt.setTaxPaidItcSamt(gstr9AutoCal.getTable9().getIamt().getTaxPaidItcSamt());
						t9iamt.setTaxPaidItcCamt(gstr9AutoCal.getTable9().getIamt().getTaxPaidItcCamt());
					}
					if(isNotEmpty(gstr9AutoCal.getTable9().getCamt())) {
						camt.setTxpyble(gstr9AutoCal.getTable9().getCamt().getTxpyble());
						t9camt.setTxpaidCash(gstr9AutoCal.getTable9().getCamt().getTxpaidCash());
						t9camt.setTaxPaidItcIamt(gstr9AutoCal.getTable9().getCamt().getTaxPaidItcIamt());
						t9camt.setTaxPaidItcCamt(gstr9AutoCal.getTable9().getCamt().getTaxPaidItcCamt());
					}
					if(isNotEmpty(gstr9AutoCal.getTable9().getSamt())) {
						samt.setTxpyble(gstr9AutoCal.getTable9().getSamt().getTxpyble());
						t9samt.setTxpaidCash(gstr9AutoCal.getTable9().getSamt().getTxpaidCash());
						t9samt.setTaxPaidItcIamt(gstr9AutoCal.getTable9().getSamt().getTaxPaidItcIamt());
						t9samt.setTaxPaidItcSamt(gstr9AutoCal.getTable9().getSamt().getTaxPaidItcSamt());
					}
					if(isNotEmpty(gstr9AutoCal.getTable9().getCsamt())) {
						csamt.setTxpyble(gstr9AutoCal.getTable9().getCsamt().getTxpyble());
						t9csamt.setTxpaidCash(gstr9AutoCal.getTable9().getCsamt().getTxpaidCash());
						t9csamt.setTaxPaidItcCsamt(gstr9AutoCal.getTable9().getCsamt().getTaxPaidItcCsamt());
					}
					if(isNotEmpty(gstr9AutoCal.getTable9().getIntr())) {
						intr.setTxpyble(gstr9AutoCal.getTable9().getIntr().getTxpyble());
						t9intr.setTxpaidCash(gstr9AutoCal.getTable9().getIntr().getTxpaidCash());
					}
					if(isNotEmpty(gstr9AutoCal.getTable9().getFee())) {
						fee.setTxpyble(gstr9AutoCal.getTable9().getFee().getTxpyble());
						t9fee.setTxpaidCash(gstr9AutoCal.getTable9().getFee().getTxpaidCash());
					}
					table9.setIamt(iamt);
					table9.setCamt(camt);
					table9.setSamt(samt);
					table9.setCsamt(csamt);
					table9.setIntr(intr);
					table9.setFee(fee);
					gstr9.setTable9(table9);
					
					gstr9.setIamt(t9iamt);
					gstr9.setCamt(t9camt);
					gstr9.setSamt(t9samt);
					gstr9.setCsamt(t9csamt);
					gstr9.setIntr(t9intr);
					gstr9.setFee(t9fee);
			  }
			  	
				if(isNotEmpty(gstr9AutoCal.getTable8()) && isNotEmpty(gstr9AutoCal.getTable8().getItc2a())) {
					gstr9.setItc2a(gstr9AutoCal.getTable8().getItc2a());
				}
				if(isNotEmpty(gstr9AutoCal.getTable6())) {
					
					Double table6Jcamt = 0d;
					Double table6Jsamt = 0d;
					Double table6Jiamt = 0d;
					Double table6Jcsamt = 0d;
					
					if(isNotEmpty(gstr9AutoCal.getTable6().getItc3b())) {
						gstr9.setItc3b(gstr9AutoCal.getTable6().getItc3b());
						
						if(isNotEmpty(gstr9AutoCal.getTable6().getItc3b().getCamt())) {
							table6Jcamt = table6Jcamt+gstr9AutoCal.getTable6().getItc3b().getCamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getItc3b().getSamt())) {
							table6Jsamt = table6Jsamt+gstr9AutoCal.getTable6().getItc3b().getSamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getItc3b().getIamt())) {
							table6Jiamt  = table6Jiamt+gstr9AutoCal.getTable6().getItc3b().getIamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getItc3b().getCsamt())) {
							table6Jcsamt = table6Jcsamt+gstr9AutoCal.getTable6().getItc3b().getCsamt();
						}
					}
					
					GSTR9Table4OtherThanExpSezDetails table6BtoH = new GSTR9Table4OtherThanExpSezDetails();
					Double table6BtoHcamt = 0d;
					Double table6BtoHsamt = 0d;
					Double table6BtoHiamt = 0d;
					Double table6BtoHcsamt = 0d;
					
					
					
					if(isNotEmpty(gstr9AutoCal.getTable6().getIsd())) {
						gstr9.getTable6().setIsd(gstr9AutoCal.getTable6().getIsd());
						if(isNotEmpty(gstr9AutoCal.getTable6().getIsd().getCamt())) {
							table6BtoHcamt = table6BtoHcamt+gstr9AutoCal.getTable6().getIsd().getCamt();
							table6Jcamt = table6Jcamt - gstr9AutoCal.getTable6().getIsd().getCamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getIsd().getSamt())) {
							table6BtoHsamt = table6BtoHsamt+gstr9AutoCal.getTable6().getIsd().getSamt();
							table6Jsamt = table6Jsamt - gstr9AutoCal.getTable6().getIsd().getSamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getIsd().getIamt())) {
							table6BtoHiamt  = table6BtoHiamt+gstr9AutoCal.getTable6().getIsd().getIamt();
							table6Jiamt = table6Jiamt - gstr9AutoCal.getTable6().getIsd().getIamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getIsd().getCsamt())) {
							table6BtoHcsamt = table6BtoHcsamt+gstr9AutoCal.getTable6().getIsd().getCsamt();
							table6Jcsamt = table6Jcsamt - gstr9AutoCal.getTable6().getIsd().getCsamt();
						}
					}
					table6BtoH.setCamt(table6BtoHcamt);
					table6BtoH.setSamt(table6BtoHsamt);
					table6BtoH.setIamt(table6BtoHiamt);
					table6BtoH.setCsamt(table6BtoHcsamt);
					gstr9.setTable6BtoH(table6BtoH);
					GSTR9Table4OtherThanExpSezDetails table6J = new GSTR9Table4OtherThanExpSezDetails();
					table6J.setCamt(table6BtoHcamt - table6Jcamt);
					table6J.setSamt(table6BtoHsamt - table6Jsamt);
					table6J.setIamt(table6BtoHiamt - table6Jiamt);
					table6J.setCsamt(table6BtoHcsamt - table6Jcsamt);
					gstr9.setTable6J(table6J);
					GSTR9Table4OtherThanExpSezDetails table6N = new GSTR9Table4OtherThanExpSezDetails();
					Double table6Ncamt = 0d;
					Double table6Nsamt = 0d;
					Double table6Niamt = 0d;
					Double table6Ncsamt = 0d;
					if(isNotEmpty(gstr9AutoCal.getTable6().getTran2())) {
						gstr9.getTable6().setTran2(gstr9AutoCal.getTable6().getTran2());
						if(isNotEmpty(gstr9AutoCal.getTable6().getTran2().getCamt())) {
							table6Ncamt = table6Ncamt + gstr9AutoCal.getTable6().getTran2().getCamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getTran2().getSamt())) {
							table6Nsamt = table6Nsamt + gstr9AutoCal.getTable6().getTran2().getSamt();
						}
					}
					if(isNotEmpty(gstr9AutoCal.getTable6().getTran1())) {
						gstr9.getTable6().setTran1(gstr9AutoCal.getTable6().getTran1());
						if(isNotEmpty(gstr9AutoCal.getTable6().getTran1().getCamt())) {
							table6Ncamt = table6Ncamt + gstr9AutoCal.getTable6().getTran1().getCamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getTran1().getSamt())) {
							table6Nsamt = table6Nsamt + gstr9AutoCal.getTable6().getTran1().getSamt();
						}
					}
					
					if(isNotEmpty(gstr9AutoCal.getTable6().getOther())) {
						gstr9.getTable6().setOther(gstr9AutoCal.getTable6().getOther());
						if(isNotEmpty(gstr9AutoCal.getTable6().getOther().getCamt())) {
							table6Ncamt = table6Ncamt + gstr9AutoCal.getTable6().getOther().getCamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getOther().getSamt())) {
							table6Nsamt = table6Nsamt + gstr9AutoCal.getTable6().getOther().getSamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getOther().getIamt())) {
							table6Niamt = table6Niamt + gstr9AutoCal.getTable6().getOther().getIamt();
						}
						if(isNotEmpty(gstr9AutoCal.getTable6().getOther().getCsamt())) {
							table6Ncsamt = table6Ncsamt + gstr9AutoCal.getTable6().getOther().getCsamt();
						}
					}
					table6N.setCamt(table6Ncamt);
					table6N.setSamt(table6Nsamt);
					table6N.setIamt(table6Niamt);
					table6N.setCsamt(table6Ncsamt);
					gstr9.setTable6N(table6N);
					GSTR9Table4OtherThanExpSezDetails table6O = new GSTR9Table4OtherThanExpSezDetails();
					table6O.setCamt(table6BtoHcamt + table6Ncamt);
					table6O.setSamt(table6BtoHsamt + table6Nsamt);
					table6O.setIamt(table6BtoHiamt + table6Niamt);
					table6O.setCsamt(table6BtoHcsamt + table6Ncsamt);
					gstr9.setTable6O(table6O);
				}
		  }
		 
		  gstr9Repository.save(gstr9);
		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr9);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/add_gstr9_invoice";
	}	
	
	@RequestMapping(value = "/populate3b/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String populate3BData(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "populate3BData::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("returntype", GSTR3B);
		Client client = clientService.findById(clientid);
		GSTR3B gstr3b = clientService.populateGSTR3BDetailss(client, month, year);
		gstr3b.setFullname(fullname);
		gstr3b.setUserid(id);
		gstr3b.setClientid(clientid);
		gstr3BRepository.save(gstr3b);
		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr3b);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
		if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
			model.addAttribute("error", "Unauthorized User!");
		}
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		OtherConfigurations configdetails = otherConfigurationRepository.findByClientid(clientid);
		model.addAttribute("configdetails", configdetails);
		logger.debug(CLASSNAME + method + END);
		return "client/add_supplies_invoice";
	}	
	
	@RequestMapping(value = "/populateOffsetLiablity/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String populateOffsetLiablity(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "populate3BData::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("returntype", GSTR3B);
		Client client = clientService.findById(clientid);
		GSTR3B gstr3b = clientService.populateGSTR3BOffsetLiabilityDetails(client, month, year,id);
		gstr3b.setFullname(fullname);
		gstr3b.setUserid(id);
		gstr3b.setClientid(clientid);
		gstr3BRepository.save(gstr3b);
		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr3b);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
		if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
			model.addAttribute("error", "Unauthorized User!");
		}
		model.addAttribute("offsetliability", "offsetliability");
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		OtherConfigurations configdetails = otherConfigurationRepository.findByClientid(clientid);
		model.addAttribute("configdetails", configdetails);
		logger.debug(CLASSNAME + method + END);
		return "client/add_supplies_invoice";
	}
	
	@RequestMapping(value = "/populateOffsetLiablitys/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody Response populateOffsetLiablitys(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "populate3BData::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		Client client = clientService.findById(clientid);
		GSTR3B gstr3b = clientService.populateGSTR3BOffsetLiabilityDetails(client, month, year,id);
		gstr3b.setFullname(fullname);
		gstr3b.setUserid(id);
		gstr3b.setClientid(clientid);
		gstr3BRepository.save(gstr3b);
		
		Response response = new Response();
		if(isNotEmpty(gstr3b.getOffLiab())) {
			ResponseData responsedata = new ResponseData();
			responsedata.setTaxPymt(gstr3b.getOffLiab());
			response.setData(responsedata);
		}
		String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
		if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
			model.addAttribute("error", "Unauthorized User!");
		}
		logger.debug(CLASSNAME + method + END);
		return response;
	}

	@RequestMapping(value = "/invprint/{id}/{name}/{usertype}/{clientid}/{returntype}/{invId}", method = RequestMethod.GET)
	public String printInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("invId") String invId, @PathVariable("returntype") String returntype, ModelMap model)
					throws Exception {
		final String method = "printInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		model.addAttribute("id", id);
		model.addAttribute("fullname", fullname);
		model.addAttribute("usertype", usertype);
		model.addAttribute("returntype", returntype);
		User usr = userService.findById(id);
		Client client = clientService.findById(clientid);
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		model.addAttribute("client", client);
		if(isNotEmpty(client.getStatename())){
			String[] state = client.getStatename().split("-");
			model.addAttribute("state_code", state[0]);
		}
		InvoiceParent invoiceParent = clientService.getInvoice(invId, returntype);
		String invNumberText = "";
		String invDateText = "";
		String invText = "";
		String reverseChargeText = "";
		String sezText = "";
		if(isNotEmpty(invoiceParent.getStatename())){
			String[] state = invoiceParent.getStatename().split("-");
			model.addAttribute("istate_code", state[0]);
		}
		if(returntype.equals(MasterGSTConstants.PROFORMAINVOICES)) {
			invText =  "PROFORMA INVOICE";
			invNumberText="Proforma Invoice No";
			invDateText= "Proforma Invoice Date";
		}else if(returntype.equals(MasterGSTConstants.ESTIMATES)) {
			invText =  "ESTIMATE";
			invNumberText="Estimate No";
			invDateText= "Estimate Date";
		}else if(returntype.equals(MasterGSTConstants.DELIVERYCHALLANS)) {
			invText = "DELIVERY CHALLAN";
			invNumberText="Delivery Challan No";
			invDateText= "Delivery Challan Date";
		}else if(returntype.equals(MasterGSTConstants.PURCHASEORDER)) {
			invText= "PURCHASE ORDER";
			invNumberText="Purchase Order No";
			invDateText= "Purchase Order Date";
		}else {
		if(invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)){
			if("GSTR1".equals(returntype)){
				invText = "ADVANCE RECEIPT VOUCHER";
				invNumberText="Advance Receipt No";
				invDateText= "Advance Receipt Date";
			}else if("GSTR2".equals(returntype) || "Purchase Register".equals(returntype)){
				invText = "ADVANCE PAYMENT";
				invNumberText="Advance Payment No";
				invDateText= "Advance Payment Date";
			}
		}else if(invoiceParent.getInvtype().equals(MasterGSTConstants.NIL)){
			invNumberText="Bill No";
			invDateText= "Bill Date";
			invText="BILL OF SUPPLY";
		}else if(invoiceParent.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
			String docType = "";String originalInvNo = ""; String originalInvDate="";
			if("GSTR1".equals(returntype)){
				docType = ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getNtty();
				originalInvNo = ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getInum();
				originalInvDate = ((GSTR1) invoiceParent).getCdnr().get(0).getNt().get(0).getIdt();
			}else if("GSTR2".equals(returntype) || "Purchase Register".equals(returntype)){
				docType = ((GSTR2) invoiceParent).getCdn().get(0).getNt().get(0).getNtty();
				originalInvNo = ((GSTR2) invoiceParent).getCdn().get(0).getNt().get(0).getInum();
				originalInvDate = ((GSTR2) invoiceParent).getCdn().get(0).getNt().get(0).getIdt();
			}
			
			model.addAttribute("originalInvNo", originalInvNo);
			model.addAttribute("originalInvDate", originalInvDate);
			if(docType.equals("C")){
				invText="CREDIT NOTE";
				invNumberText="Credit Note.No";
				invDateText= "Credit Note Date";
			}else if(docType.equals("D")){
				invText="DEBIT NOTE";
				invNumberText="Debit Note.No";
				invDateText= "Debit Note Date";
			}else if(docType.equals("R")){
				invText="REFUND NOTE";
				invNumberText="Refund Voucher No";
				invDateText= "Refund Voucher Date";
			}
		}else if(invoiceParent.getInvtype().equals(MasterGSTConstants.CDNUR)){
			String docType = invoiceParent.getCdnur().get(0).getNtty();
			String originalInvNo = invoiceParent.getCdnur().get(0).getInum();
			String originalInvDate = invoiceParent.getCdnur().get(0).getIdt();
			model.addAttribute("originalInvNo", originalInvNo);
			model.addAttribute("originalInvDate", originalInvDate);
			if(docType.equals("C")){
				invText="CREDIT NOTE";
				invNumberText="Credit Note.No";
				invDateText= "Credit Note Date";
			}else if(docType.equals("D")){
				invText="DEBIT NOTE";
				invNumberText="Debit Note.No";
				invDateText= "Debit Note Date";
			}else if(docType.equals("R")){
				invText="REFUND NOTE";
				invNumberText="Refund Voucher No";
				invDateText= "Refund Voucher Date";
			}
		}else{
			invNumberText="Invoice Number";
			invDateText= "Invoice Date";
			if(invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)){
				invText = "EXPORT INVOICE";
			}else{
				if(isNotEmpty(pconfig) && isNotEmpty(pconfig.getInvoiceText())){
					invText =  pconfig.getInvoiceText();
				}else{
					invText = "TAX INVOICE";
				}
			}
		}
	}
		
		if(isNotEmpty(invoiceParent.getRevchargetype()) && "Reverse".equals(invoiceParent.getRevchargetype())){
			reverseChargeText="**Tax to be paid on Reverse Charge";
		}
		
		
		if(isNotEmpty(invoiceParent.getB2b()) && isNotEmpty(invoiceParent.getB2b().get(0)) && isNotEmpty(invoiceParent.getB2b().get(0).getInv()) && isNotEmpty(invoiceParent.getB2b().get(0).getInv().get(0))  &&  isNotEmpty(invoiceParent.getB2b().get(0).getInv().get(0).getInvTyp())){
			if("SEWP".equals(invoiceParent.getB2b().get(0).getInv().get(0).getInvTyp()) || "SEWPC".equals(invoiceParent.getB2b().get(0).getInv().get(0).getInvTyp())){
					sezText ="**Supply To Sez Unit Or Sez Developer For Authorised Operations On Payment Of Integrated Tax";
				}else if("SEWOP".equals(invoiceParent.getB2b().get(0).getInv().get(0).getInvTyp())){
					sezText = "**Supply To Sez Unit Or Sez Developer For Authorised Operations Under Bond Or Letter Of Undertaking Without Payment of Integrated Tax";
				}else{
					sezText = "";
				}
		}
			if(invoiceParent.getInvtype().equals(MasterGSTConstants.EXPORTS)){
				if(isNotEmpty(invoiceParent.getExp()) && isNotEmpty(invoiceParent.getExp().get(0))){
					if("WPAY".equals(invoiceParent.getExp().get(0).getExpTyp())){
						sezText= "**Supply Meant For Export on Payment Of Integrated Tax";
					}else if("WOPAY".equals(invoiceParent.getExp().get(0).getExpTyp())){
						sezText = "**Supply Meant For Export Under Bond Or Letter Of Undertaking Without Payment Of Integrated Tax";
					}else{
						sezText = "";
					}
				}else{
					sezText = "";
				}
			}
		
			String amountinwords="";
			if(isNotEmpty(invoiceParent.getRoundOffAmount()) && invoiceParent.getRoundOffAmount() != 0d) {
				Double totamount = 0d;
				if(invoiceParent.isTdstcsenable() && isNotEmpty(invoiceParent.getNotroundoftotalamount())) {
					totamount = invoiceParent.getNotroundoftotalamount();
					if(isNotEmpty(invoiceParent.getTcstdsAmount())) {
						totamount += invoiceParent.getTcstdsAmount();
					}
				}else if(isNotEmpty(invoiceParent.getTotalamount())) {
					totamount = invoiceParent.getTotalamount();
					if(isNotEmpty(invoiceParent.getTcstdsAmount())) {
						totamount += invoiceParent.getTcstdsAmount();
					}
				}
				amountinwords=MoneyConverterUtil.getMoneyIntoWords(totamount).toUpperCase();
			}else if(isNotEmpty(invoiceParent.getTotalamount())) {
				Double totamount = invoiceParent.getTotalamount();
				if(isNotEmpty(invoiceParent.getTcstdsAmount())) {
					totamount += invoiceParent.getTcstdsAmount();
				}
				amountinwords=MoneyConverterUtil.getMoneyIntoWords(totamount).toUpperCase();
			}
			if(invoiceParent.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)) {
				List<Item> itcitms = invoiceParent.getItems();
				for(Item item : itcitms) {
				if(isNotEmpty(item)) {
					if(isNotEmpty(item.getItcRevtype())) {
						if(item.getItcRevtype().equals("rule2_2")) {
							item.setItcRevtype("Amount in terms of rule 37(2)");
						} else if(item.getItcRevtype().equals("rule7_1_m")) {
							item.setItcRevtype("Amount in terms of rule 42(1)(m)");
						} else if(item.getItcRevtype().equals("rule8_1_h")) {
							item.setItcRevtype("Amount in terms of rule 43(1)(h)");
						} else if(item.getItcRevtype().equals("rule7_2_a")) {
							item.setItcRevtype("Amount in terms of rule 42(2)(a)");
						} else if(item.getItcRevtype().equals("rule7_2_b")) {
							item.setItcRevtype("Amount in terms of rule 42(2)(b)");
						} else if(item.getItcRevtype().equals("revitc")) {
							item.setItcRevtype("On account of amount paid subsequent to reversal of ITC");
						}  else if(item.getItcRevtype().equals("other")) {
							item.setItcRevtype("Any other liability (Pl specify)");
						}
					}
				}
				}
			}
			String amountcurrency = "";
			if(isNotEmpty(invoiceParent.getAddcurrencyCode())) {
				//Currency c1 = Currency.getInstance(invoiceParent.getAddcurrencyCode());
				Double.parseDouble(df2.format(invoiceParent.getTotalCurrencyAmount()));
				Currencycodes currencycode = currencycodesRepository.findByCode(invoiceParent.getAddcurrencyCode());
				String currencySymbol = "";
				String mainunit="";
				String fractionunit = "";
				if(isNotEmpty(currencycode) && isNotEmpty(currencycode.getSymbolcode())) {
					currencySymbol = currencycode.getSymbolcode();
				}
				if(isNotEmpty(currencycode) && isNotEmpty(currencycode.getMainunit())) {
					mainunit = currencycode.getMainunit();
				}
				if(isNotEmpty(currencycode) && isNotEmpty(currencycode.getFractionunit())) {
					fractionunit = currencycode.getFractionunit();
				}
				
				if(isNotEmpty(invoiceParent.getTotalCurrencyAmount())) {
					amountcurrency=MoneyConverterUtil.convertNumber(invoiceParent.getTotalCurrencyAmount(),mainunit,fractionunit).toUpperCase();
				}
				model.addAttribute("currencyTotal", currencySymbol+" "+Double.parseDouble(df2.format(invoiceParent.getTotalCurrencyAmount())));
			}
			if(isNotEmpty(pconfig) && isNotEmpty(pconfig.getAuthSignText())) {
				model.addAttribute("signatureText", pconfig.getAuthSignText());
			}else {
				model.addAttribute("signatureText", "Authorised Signature");
			}
			if(isNotEmpty(invoiceParent.getTermDays())) {
				if(!invoiceParent.getTermDays().equalsIgnoreCase("0")) {
					String term = "Net "+invoiceParent.getTermDays()+" days";
					if(isNotEmpty(invoiceParent.getDueDate())) {
						term = term+" - " +new SimpleDateFormat("dd/MM/yyyy").format(invoiceParent.getDueDate()); 
					}
					invoiceParent.setTerms(term);
				}
			}
		model.addAttribute("amountinwords", amountinwords);
		model.addAttribute("invoiceNumberText", invNumberText);
		model.addAttribute("invoiceDateText", invDateText);
		model.addAttribute("invoiceText", invText);
		model.addAttribute("reverseChargeText", reverseChargeText);
		model.addAttribute("sezText", sezText);
		model.addAttribute("amountcurrency", amountcurrency);
		model.addAttribute("invoice", invoiceParent);
		CustomFields customFields = customFieldsRepository.findByClientid(clientid);
		if(isNotEmpty(customFields)) {
			if(returntype.equalsIgnoreCase("GSTR1")) {
				model.addAttribute("customFieldList", customFields.getSales());
			}else if(returntype.equalsIgnoreCase("Purchase Register")){
				model.addAttribute("customFieldList", customFields.getPurchase());
			}
		}
		logger.debug(CLASSNAME + method + END);
		if(isNotEmpty(usr) && isNotEmpty(usr.getEmail()) && (usr.getEmail().endsWith("@oceansparkle.in") || usr.getEmail().endsWith("@kvrco.in"))) {
			return "client/print_osl";
		}else if("Exports".equalsIgnoreCase(invoiceParent.getInvtype())) {
			return "client/print_exports";
		}else {
			return "client/print";
		}
	}
	
	/**
	 * Print Invoice PDF
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/invprintpdf/{id}/{name}/{usertype}/{clientid}/{returntype}/{invId}", method = RequestMethod.GET, 
			produces = MediaType.APPLICATION_PDF_VALUE)
	public HttpEntity<byte[]>  printInvoicePdf(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("invId") String invId, @PathVariable("returntype") String returntype, ModelMap model)
					throws Exception {
		logger.debug("START :: printInvoicePdf.");
		try {
			Client client = clientService.findById(clientid);
			User usr = userService.findById(id);
			InvoiceParent invoiceParent = clientService.getInvoice(invId, returntype);
			String filename = invoiceParent.getInvoiceno();
			
			if(isNotEmpty(invoiceParent.getDateofinvoice())) {
				filename  += new SimpleDateFormat("dd-MM-yyyy").format(invoiceParent.getDateofinvoice());
			} 
			// Set param values.
			Map<String, Object> params = printService.getReportParams(client, invoiceParent,returntype);
			PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
			String xmlPath = "classpath:/report/invoice";
			if((Boolean)params.get("isIGST") && !(Boolean)params.get("isCGST")) {
				xmlPath = "classpath:/report/invoice-igst";
			} else if(!(Boolean)params.get("isIGST") && (Boolean)params.get("isCGST")) {
				xmlPath = "classpath:/report/invoice-cgst";
			}
			CustomFields customFields = customFieldsRepository.findByClientid(client.getId().toString());
			boolean custfields = false;
			if(isNotEmpty(customFields)) {
				if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
					if(isNotEmpty(customFields.getSales())) {
						for(CustomData customdata : customFields.getSales()){
							if(isNotEmpty(customdata.getDisplayInPrint()) && customdata.getDisplayInPrint()) {
								custfields = true;
								break;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equals("PurchaseRegister") || returntype.equals(MasterGSTConstants.GSTR2)) {
					if(isNotEmpty(customFields.getPurchase())) {
						for(CustomData customdata : customFields.getPurchase()){
							if(isNotEmpty(customdata.getDisplayInPrint()) && customdata.getDisplayInPrint()) {
								custfields = true;
								break;
							}
						}
					}
				}
			}
			
			
			if(isNotEmpty(usr) && isNotEmpty(usr.getEmail()) && (usr.getEmail().endsWith("@oceansparkle.in") || usr.getEmail().endsWith("@kvrco.in"))) {
				xmlPath += "-OSL.jrxml";
			}else {
				if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
					if(invoiceParent.isTdstcsenable()) {
						xmlPath += "-tcs";
					}
				}
				if(invoiceParent.getInvtype().equals(MasterGSTConstants.ADVANCES)){
					xmlPath += "-adv-disc-qty-rate";
					if(isEmpty(invoiceParent.getConsigneeaddress())){
						xmlPath += "-ship";
					}
					if("GSTR1".equals(returntype) && isNotEmpty(invoiceParent.getBankDetails())){
						if(isEmpty(invoiceParent.getBankDetails().getBankname()) && isEmpty(invoiceParent.getBankDetails().getAccountnumber())){
						xmlPath += "-bank";
						}
					}
					if(custfields) {
						xmlPath += "-cust";
					}
					if(!xmlPath.endsWith("jrxml")) {
						xmlPath += ".jrxml";
					}
				}else {
					if(!invoiceParent.getInvtype().equals(MasterGSTConstants.ISD) || !invoiceParent.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)) {
				if(isNotEmpty(pconfig)) {
					if((Boolean)params.get("isIGST") || (Boolean)params.get("isCGST")){
					if(!pconfig.isEnableDiscount()) {
						xmlPath += "-disc";
					}
					if(!pconfig.isEnableQuantity()) {
						xmlPath += "-qty";
					}
					if(!pconfig.isEnableRate()) {
						xmlPath += "-rate";
					}
					if(isEmpty(invoiceParent.getConsigneeaddress())){
						xmlPath += "-ship";
					}
					if(("GSTR1".equals(returntype) || "DELIVERYCHALLANS".equals(returntype) || "PROFORMAINVOICES".equals(returntype) || "ESTIMATES".equals(returntype)) && isNotEmpty(invoiceParent.getBankDetails())){
						if(isEmpty(invoiceParent.getBankDetails().getBankname()) && isEmpty(invoiceParent.getBankDetails().getAccountnumber())){
						xmlPath += "-bank";
						}
					}else {
						xmlPath += "-bank";
					}
					if(custfields) {
						xmlPath += "-cust";
					}
					if(!xmlPath.endsWith("jrxml")) {
						xmlPath += ".jrxml";
					}
					}else{
						if(!pconfig.isEnableDiscount()) {
							xmlPath += "-disc";
						}
						if(!pconfig.isEnableQuantity()) {
							xmlPath += "-qty";
						}
						if(!pconfig.isEnableRate()) {
							xmlPath += "-rate";
						}
						if(isEmpty(invoiceParent.getConsigneeaddress())){
							xmlPath += "-ship";
						}
						if(("GSTR1".equals(returntype)  || "DELIVERYCHALLANS".equals(returntype) || "PROFORMAINVOICES".equals(returntype) || "ESTIMATES".equals(returntype)) && isNotEmpty(invoiceParent.getBankDetails())){
							if(isEmpty(invoiceParent.getBankDetails().getBankname()) && isEmpty(invoiceParent.getBankDetails().getAccountnumber())){
							xmlPath += "-bank";
							}
						}else {
							xmlPath += "-bank";
						}
						if(custfields) {
							xmlPath += "-cust";
						}
						if(!xmlPath.endsWith("jrxml")) {
							xmlPath += ".jrxml";
						}
					}
				}else{
					if(custfields) {
						xmlPath += "-cust";
					}
					if(!xmlPath.endsWith("jrxml")) {
						xmlPath += ".jrxml";
					}
				}
				}
			}
				if(invoiceParent.getInvtype().equals(MasterGSTConstants.ISD)){
					if(custfields) {
						xmlPath = "classpath:/report/invoice-isd-cust.jrxml";
					}else{
						xmlPath = "classpath:/report/invoice-isd.jrxml";
					}
				}else if(invoiceParent.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)) {
					if(custfields) {
						xmlPath = "classpath:/report/invoice-itc-cust.jrxml";
					}else{
						xmlPath = "classpath:/report/invoice-itc.jrxml";
					}
				}
			
		}
			if(invoiceParent.getInvtype().equals(MasterGSTConstants.ITC_REVERSAL)) {
				List<Item> itcitms = invoiceParent.getItems();
				for(Item item : itcitms) {
				if(isNotEmpty(item)) {
					if(isNotEmpty(item.getItcRevtype())) {
						if(item.getItcRevtype().equals("rule2_2")) {
							item.setItcRevtype("Amount in terms of rule 37(2)");
						} else if(item.getItcRevtype().equals("rule7_1_m")) {
							item.setItcRevtype("Amount in terms of rule 42(1)(m)");
						} else if(item.getItcRevtype().equals("rule8_1_h")) {
							item.setItcRevtype("Amount in terms of rule 43(1)(h)");
						} else if(item.getItcRevtype().equals("rule7_2_a")) {
							item.setItcRevtype("Amount in terms of rule 42(2)(a)");
						} else if(item.getItcRevtype().equals("rule7_2_b")) {
							item.setItcRevtype("Amount in terms of rule 42(2)(b)");
						} else if(item.getItcRevtype().equals("revitc")) {
							item.setItcRevtype("On account of amount paid subsequent to reversal of ITC");
						}  else if(item.getItcRevtype().equals("other")) {
							item.setItcRevtype("Any other liability (Pl specify)");
						}
					}
				}
				}
			}
			if(isNotEmpty(invoiceParent) && isNotEmpty(invoiceParent.getInvtype()) && "Exports".equalsIgnoreCase(invoiceParent.getInvtype())) {
				if((Boolean)params.get("isIGST") && !(Boolean)params.get("isCGST")) {
					if(isNotEmpty(invoiceParent.getAddcurrencyCode())) {
						xmlPath = "classpath:/report/invoice-exports-currency-igst.jrxml";
					}
				} else{
					if(isNotEmpty(invoiceParent.getAddcurrencyCode())) {
						xmlPath = "classpath:/report/invoice-exports-currency.jrxml";
					}
				}
			}
			System.out.println(xmlPath);
			Resource config = resourceLoader.getResource(xmlPath);
			// get report file and then load into jasperDesign
			JasperDesign jasperDesign = JRXmlLoader.load(config.getInputStream());
			// compile the jasperDesign
			JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
			if(isNotEmpty(pconfig) && isNotEmpty(pconfig.getInvoiceText())) {
				params.put("title", pconfig.getInvoiceText());
			} else {
				params.put("title", "INVOICE");
			}
			if(isNotEmpty(pconfig) && isNotEmpty(pconfig.getQtyText())) {
				params.put("invqty", pconfig.getQtyText());
			} else {
				params.put("invqty", "Qty");
			}
			if(isNotEmpty(pconfig) && isNotEmpty(pconfig.getRateText())) {
				params.put("invrate", pconfig.getRateText());
			} else {
				params.put("invrate", "Rate");
			}
			params.put(JRParameter.REPORT_LOCALE, new Locale("en", "IN")); 
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params,
					new JRBeanCollectionDataSource(invoiceParent.getItems()));
			// export to pdf
			byte[] data = JasperExportManager.exportReportToPdf(jasperPrint);
			HttpHeaders header = new HttpHeaders();
			header.setContentType(MediaType.APPLICATION_PDF);
			header.set(HttpHeaders.CONTENT_DISPOSITION, "inline; filename="+filename+".pdf");
			header.setContentLength(data.length);
			logger.debug("END :: printInvoicePdf");
			return new HttpEntity<byte[]>(data, header);
		} catch (Exception e) {
			logger.error("printInvoicePdf :: id "+id, e);
			return new ResponseEntity<>( HttpStatus.INTERNAL_SERVER_ERROR );
		}
	}
	
	/**
	 * Print Invoice PDF
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/invprintxls/{id}/{name}/{usertype}/{clientid}/{returntype}/{invId}", method = RequestMethod.GET, 
			produces = MediaType.APPLICATION_PDF_VALUE)
	public HttpEntity<byte[]>  printInvoiceXls(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("invId") String invId, @PathVariable("returntype") String returntype, ModelMap model)
					throws Exception {
		logger.debug("START :: printInvoiceXls");
		try {
			Client client = clientService.findById(clientid);
			User usr = userService.findById(id);
			InvoiceParent invoiceParent = clientService.getInvoice(invId, returntype);
			// Set param values.
			Map<String, Object> params = printService.getReportParams(client, invoiceParent,returntype);
			PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
			String xmlPath = "classpath:/report/invoice";
			if((Boolean)params.get("isIGST") && !(Boolean)params.get("isCGST")) {
				xmlPath = "classpath:/report/invoice-igst";
			} else if(!(Boolean)params.get("isIGST") && (Boolean)params.get("isCGST")) {
				xmlPath = "classpath:/report/invoice-cgst";
			}
			
			if(isNotEmpty(pconfig)) {
				if((Boolean)params.get("isIGST") || (Boolean)params.get("isCGST")){
				if(!pconfig.isEnableDiscount()) {
					xmlPath += "-disc";
				}
				if(!pconfig.isEnableQuantity()) {
					xmlPath += "-qty";
				}
				if(!pconfig.isEnableRate()) {
					xmlPath += "-rate";
				}
				if(isEmpty(invoiceParent.getConsigneeaddress())){
					xmlPath += "-ship";
				}
				if(("GSTR1".equals(returntype) || "DELIVERYCHALLANS".equals(returntype) || "PROFORMAINVOICES".equals(returntype) || "ESTIMATES".equals(returntype)) && isNotEmpty(invoiceParent.getBankDetails())){
					if(isEmpty(invoiceParent.getBankDetails().getBankname()) && isEmpty(invoiceParent.getBankDetails().getAccountnumber())){
					xmlPath += "-bank";
					}
				}
				if(!xmlPath.endsWith("jrxml")) {
					xmlPath += ".jrxml";
				}
				}else{
					if(!pconfig.isEnableDiscount()) {
						xmlPath += "-disc";
					}
					if(!pconfig.isEnableQuantity()) {
						xmlPath += "-qty";
					}
					if(!pconfig.isEnableRate()) {
						xmlPath += "-rate";
					}
					if(isEmpty(invoiceParent.getConsigneeaddress())){
						xmlPath += "-ship";
					}
					if(("GSTR1".equals(returntype) || "DELIVERYCHALLANS".equals(returntype) || "PROFORMAINVOICES".equals(returntype) || "ESTIMATES".equals(returntype)) && isNotEmpty(invoiceParent.getBankDetails())){
						if(isEmpty(invoiceParent.getBankDetails().getBankname()) && isEmpty(invoiceParent.getBankDetails().getAccountnumber())){
						xmlPath += "-bank";
						}
					}
					if(!xmlPath.endsWith("jrxml")) {
						xmlPath += ".jrxml";
					}
				}
			}else{
				if(!xmlPath.endsWith("jrxml")) {
					xmlPath += ".jrxml";
				}
			}
			Resource config = resourceLoader.getResource(xmlPath);
			// get report file and then load into jasperDesign
			JasperDesign jasperDesign = JRXmlLoader.load(config.getInputStream());
			// compile the jasperDesign
			JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
			if(isNotEmpty(pconfig) && isNotEmpty(pconfig.getInvoiceText())) {
				params.put("title", pconfig.getInvoiceText());
			} else {
				params.put("title", "INVOICE");
			}
			
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params,
					new JRBeanCollectionDataSource(invoiceParent.getItems()));
			// export to pdf
			JRXlsxExporter xlsxExporter = new JRXlsxExporter();
			final byte[] data;
			
			try(ByteArrayOutputStream xlsReport = new ByteArrayOutputStream()){
				xlsxExporter.setExporterInput(new SimpleExporterInput(jasperPrint));
				xlsxExporter.setExporterOutput(new SimpleOutputStreamExporterOutput(xlsReport));
				xlsxExporter.exportReport();

				data = xlsReport.toByteArray();
			}
			HttpHeaders header = new HttpHeaders();
			header.setContentType(MediaType.parseMediaType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));
			header.set(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=Invoice"+id+".xlsx");
			header.setContentLength(data.length);
			logger.debug("END :: printInvoiceXls");
			return new HttpEntity<byte[]>(data, header);
		} catch (Exception e) {
			logger.error("printInvoiceXls :: id "+id, e);
			return new ResponseEntity<>( HttpStatus.INTERNAL_SERVER_ERROR );
		}
	}

	@RequestMapping(value = "/getinv/{invId}/{returntype}", method = RequestMethod.GET)
	public @ResponseBody String getInvoice(@PathVariable("invId") String invId,
			@PathVariable("returntype") String returntype, ModelMap model) throws Exception {
		final String method = "getInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		if(returntype.equals(MasterGSTConstants.ANX1)) {
			AnxInvoiceParent invoiceParent = anx1Service.getInvoice(invId, returntype);
			if(invoiceParent != null){
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
			ObjectMapper mapper = new ObjectMapper();
			mapper.disable(MapperFeature.USE_ANNOTATIONS);
			ObjectWriter writer=null;
			if(returntype.equals(GSTR1)) {
				FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
				writer=mapper.writer(filters);
			} else {
				writer=mapper.writer();
			}
			
			return writer.writeValueAsString(invoiceParent);
		}else {
			InvoiceParent invoiceParent = clientService.getInvoice(invId, returntype);
			if(invoiceParent != null){
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
			ObjectMapper mapper = new ObjectMapper();
			mapper.disable(MapperFeature.USE_ANNOTATIONS);
			ObjectWriter writer=null;
			if(returntype.equals(GSTR1)) {
				FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
				writer=mapper.writer(filters);
			} else {
				writer=mapper.writer();
			}
			
			return writer.writeValueAsString(invoiceParent);
		}
	}

	@RequestMapping(value = "/savedocissue/{id}/{name}/{usertype}/{clientid}/{docId}/{returntype}/{month}/{year}", method = RequestMethod.POST)
	public String saveDocumentIssue(@ModelAttribute("docIssue") GSTR1DocumentIssue docIssue,
			@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("docId") String docId, @PathVariable("returntype") String returntype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addSuppliesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		
		GSTR1DocumentIssue docissue = clientService.getDocumentIssue(clientid, returnPeriod);
		List<GSTR1DocIssueDetails> docList = Lists.newArrayList();
		for (GSTR1DocIssueDetails docItem : docIssue.getDocDet()) {
			if (isNotEmpty(docItem.getDocs())) {
				List<GSTR1DocDetails> docs = Lists.newArrayList();
				for (GSTR1DocDetails doc : docItem.getDocs()) {
					if (isNotEmpty(doc.getTotnum()) && isNotEmpty(doc.getFrom())) {
						doc.setNum(docs.size() + 1);
						if(isEmpty(doc.getCancel())) {
							doc.setCancel(0);
						}
						docs.add(doc);
					}
				}
				if (isNotEmpty(docs)) {
					docItem.setDocs(docs);
					docList.add(docItem);
				}
			}
		}
		if(isNotEmpty(docissue)) {
			docissue.setDocDet(docList);
		}else {
			docissue =  new GSTR1DocumentIssue(); 
			if (isNotEmpty(docId) && docId.equals("New")) {
				docissue.setId(new ObjectId());
			}
			docissue.setClientid(clientid);
			docissue.setReturnPeriod(returnPeriod);
			docissue.setDocDet(docList);
		}
		
		clientService.saveDocumentIssue(docissue);
		logger.debug(CLASSNAME + method + END);
		return "redirect:/alliview/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + returntype + "/"
				+ month + "/" + year + "?type=inv";
	}

	@RequestMapping(value = "/savesupinvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String addSuppliesInvoice(@ModelAttribute("invoice") GSTR3B invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addSuppliesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);

		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		invoice.setRetPeriod(returnPeriod);
		invoice = clientService.saveSuppliesInvoice(invoice, returntype);

		logger.debug(CLASSNAME + method + END);
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}
	
	@RequestMapping(value = "/saveAnnualinvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveAnnualInvoice(@ModelAttribute("invoice") GSTR9 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveAnnualinvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);

		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
	String fp = "03"+(year);
		
		invoice.setGstin(client.getGstnnumber());
		invoice.setFp(fp);
		invoice.setLegalName(client.getBusinessname());

		
		invoice = clientService.saveAnnualInvoice(invoice);

		logger.debug(CLASSNAME + method + END);
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}
	
	@RequestMapping(value = "/saveAnnual9Cinvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveAnnual9CInvoice(@ModelAttribute("invoice") GSTR9C invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addSuppliesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);

		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String fp = "03"+(year);
		invoice.setReturnPeriod(fp);
		invoice.getAuditedData().setFp(fp);
		invoice.getAuditedData().setGstin(client.getGstnnumber());
		//GSTR9 gstr9inv = gstr9Repository.findByClientidAndFp(invoice.getClientid(), fp);
		
		invoice = clientService.saveAnnual9CInvoice(invoice);

		logger.debug(CLASSNAME + method + END);
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=inv";
	}
	
	@RequestMapping(value = "/saveoffliab/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveOffsetLiability(@ModelAttribute("invoice") GSTR3B invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveOffsetLiability::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);

		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		if (isNotEmpty(invoice.getId())) {
			GSTR3B gstr3B = clientService.getSuppliesInvoice(invoice.getId().toString());
			gstr3B.setOffLiab(invoice.getOffLiab());
			clientService.saveSuppliesInvoice(gstr3B, MasterGSTConstants.GSTR3B);
		}

		logger.debug(CLASSNAME + method + END);
		return "redirect:/addsupinvoice/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + month + "/" + year;
	}
	
	@RequestMapping(value = "/getoldinvs/{id}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getOldInvoices(@PathVariable("id") String id, @PathVariable("usertype") String usertype,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("month") int month, 
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getOldInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<? extends InvoiceParent> filteredList = clientService.getOldInvoices(clientid, returntype, month, year);
		if(isNotEmpty(filteredList)) {
			for(InvoiceParent invoiceParent : filteredList) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		} 
		if(filteredList.size() > 0) {
			ObjectMapper mapper = new ObjectMapper();
			mapper.disable(MapperFeature.USE_ANNOTATIONS);
			ObjectWriter writer=null;
			if(returntype.equals(GSTR1)) {
				FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
				writer=mapper.writer(filters);
			} else {
				writer=mapper.writer();
			}
			logger.debug(CLASSNAME + method + END);
			return writer.writeValueAsString(filteredList);
		}
		return "";
	}
	
	@RequestMapping(value = "/getamnddata/{id}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getAmendmentDetails(@PathVariable("id") String id, @PathVariable("usertype") String usertype,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("month") int month, 
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getAmendmentDetails::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		if(returntype.endsWith("Amnd")) {
			returntype = returntype.replace("Amnd", "");
		}
		List<String> invTypes = Lists.newArrayList();
		invTypes.add(MasterGSTConstants.B2BA);
		invTypes.add(MasterGSTConstants.CDNA);
		if(returntype.equals(GSTR1)) {
			invTypes.add(MasterGSTConstants.B2CSA);
			invTypes.add(MasterGSTConstants.B2CLA);
			invTypes.add(MasterGSTConstants.EXPA);
			invTypes.add(MasterGSTConstants.ATA);
			invTypes.add(MasterGSTConstants.TXPA);
			invTypes.add(MasterGSTConstants.CDNURA);
		}
		Page<? extends InvoiceParent> filteredList = clientService.getAmendments(null, client.getId().toString(), returntype, month, year);
		String error = "";
		if(isNotEmpty(filteredList)) {
			if(filteredList.getTotalElements() == 0) {
				String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
				if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
					for(String invType : invTypes) {
						try {
							InvoiceParent invoice = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(),
								month, year, returntype, invType, null, id, false);
							if(isNotEmpty(invoice)) {
								clientService.processGSTRData(invoice, client, "", returntype, invType, id, usertype, month, year);
							}
						} catch (MasterGSTException exp) {
							error = exp.getMessage();
						}
					}
					filteredList = clientService.getAmendments(null, client.getId().toString(), returntype, month, year);
				} else {
					error = "Unauthorized User!";
				}
				if(isEmpty(filteredList)) {
					return error;
				}
			}
			if(filteredList.getTotalElements() > 0) {
				ObjectMapper mapper = new ObjectMapper();
				mapper.disable(MapperFeature.USE_ANNOTATIONS);
				ObjectWriter writer=null;
				if(returntype.equals(GSTR1)) {
					FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
					writer=mapper.writer(filters);
				} else {
					writer=mapper.writer();
				}
				logger.debug(CLASSNAME + method + END);
				return writer.writeValueAsString(filteredList.getContent());
			} else {
				return error;
			}
		}
		return error;
	}
	
	@RequestMapping(value = "/saveinvoiceviewoptn/{clientid}/{option}", method = RequestMethod.GET)
	public @ResponseBody void saveInvoiceViewOption(
			@PathVariable String clientid, @PathVariable String option) throws Exception {
		final String method = "saveInvoiceViewOption::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		
		Client client = clientService.findById(clientid);
		client.setInvoiceViewOption(option);
			clientService.saveClient(client);
		
		logger.debug(CLASSNAME + method + END);
	}
	
	
	@RequestMapping(value = "/saveflngoptn/{clientid}/{option}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody void saveFilingOption(@PathVariable("clientid") String clientid,
			@PathVariable("option") String option, @PathVariable("month") int month, 
			@PathVariable("year") int year) throws Exception {
		final String method = "saveFilingOption::";
		logger.debug(CLASSNAME + method + BEGIN);
		ClientConfig clientConfig = clientService.getClientConfig(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		if (isNotEmpty(clientConfig)) {
			boolean present = false;
			if(isNotEmpty(clientConfig.getFilingOption())
					&& clientConfig.getFilingOption().keySet().contains(returnPeriod)) {
				clientConfig.getFilingOption().put(returnPeriod, option);
			}
			if(!present) {
				Map<String, String> filingOption = Maps.newHashMap();
				filingOption.put(returnPeriod, option);
			}
			clientService.updateClientConfig(clientConfig);
		} else {
			clientConfig = new ClientConfig();
			clientConfig.setClientId(clientid);
			Map<String, String> filingOption = Maps.newHashMap();
			filingOption.put(returnPeriod, option);
			clientService.updateClientConfig(clientConfig);
		}
		Client client = clientService.findById(clientid);
		List<FilingOptions> filingOptions=new ArrayList<FilingOptions>();
		List<String> filingyears=new ArrayList<String>();
		//String yr=year+"-"+(year+1);
		String yr;
		if(month == 1 || month == 2 || month == 3) {
			yr = (year-1)+"-"+(year);
		}else {
			yr = year+"-"+(year+1);
		}
		if (isNotEmpty(client)) {
			if(isNotEmpty(client.getFilingoptions())) {
				client.getFilingoptions().forEach(optns->{
					filingyears.add(optns.getYear());
				});
				if(!filingyears.contains(yr)){
					FilingOptions filng_option=new FilingOptions();
					filng_option.setId(new ObjectId());
					filng_option.setOption(option);
					filng_option.setYear(yr);
					filingOptions.add(filng_option);
				}
				client.getFilingoptions().forEach(optns->{
					if(yr.equalsIgnoreCase(optns.getYear())){
						optns.setOption(option);
					}
					filingOptions.add(optns);
				});
			}else {
				FilingOptions filng_option=new FilingOptions();
				filng_option.setId(new ObjectId());
				filng_option.setOption(option);
				filng_option.setYear(yr);
				filingOptions.add(filng_option);
				//client.setFilingOption(option);
			}
			client.setFilingoptions(filingOptions);
			clientService.saveClient(client);
		}
		logger.debug(CLASSNAME + method + END);
	}

	@RequestMapping(value = "/clntactive/{clientid}", method = RequestMethod.GET)
	public @ResponseBody void updateClientActive(@PathVariable("clientid") String clientid,
			@RequestParam("active") String active, ModelMap model) throws Exception {
		final String method = "updateClientActive::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		if (isNotEmpty(client)) {
			client.setActive(active);
			clientService.saveClient(client);
		}
		logger.debug(CLASSNAME + method + END);
	}

	@RequestMapping(value = "/clntreturns/{clientid}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody void updateClientReturns(@PathVariable("clientid") String clientid,
			@RequestBody Map<String, String> returns, @PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model) throws Exception {
		final String method = "updateClientReturns::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		if (isNotEmpty(client)) {
			List<GSTReturnSummary> returnsSummuryList = clientService.getGSTReturnsSummary(client, month, year, false);
			if (isNotEmpty(returnsSummuryList)) {
				for (GSTReturnSummary returnSummary : returnsSummuryList) {
					if (returns.containsKey(returnSummary.getReturntype())) {
						returnSummary.setActive(returns.get(returnSummary.getReturntype()));
					}
				}
				client.setReturnsSummary(returnsSummuryList);
				clientService.saveClient(client);
			}
		}
		logger.debug(CLASSNAME + method + END);
	}

	@RequestMapping(value = "/clntgstsubmiton/{clientid}", method = RequestMethod.GET)
	public @ResponseBody void updateClientSubmitOn(@PathVariable("clientid") String clientid,
			@RequestParam("submiton") String submiton, ModelMap model) throws Exception {
		final String method = "updateClientSubmitOn::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		if (isNotEmpty(client)) {
			client.setGstsubmiton(submiton);
			clientService.saveClient(client);
		}
		logger.debug(CLASSNAME + method + END);
	}
	
	
	@RequestMapping(value = "/digitalSign/{clientid}", method = RequestMethod.GET)
	public @ResponseBody void updateDigitalSign(@PathVariable("clientid") String clientid,
			@RequestParam("digitalSign") boolean digitalSign, ModelMap model) throws Exception {
		final String method = "updateDigitalSign::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		if (isNotEmpty(client)) {
			client.setDigitalSignOn(digitalSign);
			clientService.saveClient(client);
		}
		logger.debug(CLASSNAME + method + END);
	}

	@RequestMapping(value = "/clntrearrangeInvoice/{clientid}", method = RequestMethod.GET)
	public @ResponseBody void updateClientRearrangeInvoice(@PathVariable("clientid") String clientid,
			@RequestParam("reArrangeInvoiceNo") String reArrangeInvoiceNo, ModelMap model) throws Exception {
		final String method = "updateClientSubmitOn::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		if (isNotEmpty(client)) {
			client.setReArrangeInvoiceNo(reArrangeInvoiceNo);
			clientService.saveClient(client);
		}
		logger.debug(CLASSNAME + method + END);
	}
	
	@RequestMapping(value = "/dreports/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String reportView(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "Report::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.size() > 0){
					if(clntids.contains(clientid)){
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		Client client = clientService.findById(clientid);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "reports/reports";
	}
	
	@RequestMapping(value = "/treports/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String reportTravelView(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "Report::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.size() > 0){
					if(clntids.contains(clientid)){
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		Client client = clientService.findById(clientid);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "travel/reports";
	}

	@RequestMapping(value = "/invoicereports/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String invoicereportView(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, @RequestParam("type") String type,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "Report::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.size() > 0){
					if(clntids.contains(clientid)){
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		Client client = clientService.findById(clientid);
		model.addAttribute("client", client);
		model.addAttribute("type", type);
		logger.debug(CLASSNAME + method + END);
		return "reports/reports-requirements";
	}
			
	private Map<String, String> getMultimonthGSTR2ASummaryMap(final Client client, int month, int year,String returntype) throws Exception {
		Map<String, String> reportMap = Maps.newHashMap();
		Double purchaseAmt = 0d, salesAmt = 0d, taxAmt = 0d, salesTax = 0d, purchaseTax = 0d, igst = 0d, cgst = 0d, sgst = 0d, totalTaxableValue = 0d;
		int totalInvoices = 0;
		Page<? extends InvoiceParent> pinvoices = clientService.getInvoices(null, client, returntype, month, year,
				false);
		if(isNotEmpty(pinvoices)){
			totalInvoices = pinvoices.getNumberOfElements();
		}
		if("GSTR2".equals(returntype)){
		if (isNotEmpty(pinvoices)) {
			for (InvoiceParent invoice : pinvoices) {
				if (isNotEmpty(invoice.getTotalitc())) {
					purchaseTax += invoice.getTotalitc();
				}
				if (isNotEmpty(invoice.getTotaltax())) {
					taxAmt += invoice.getTotaltax();
				}
				List<? extends Item> items = invoice.getItems();
				if (isNotEmpty(invoice.getItems())){
					for(Item item : items){
						if(isNotEmpty(item.getIgstamount())){
							igst += item.getIgstamount();
						}
						if(isNotEmpty(item.getCgstamount())){
							cgst += item.getCgstamount();
						}
						if(isNotEmpty(item.getSgstamount())){
							sgst += item.getSgstamount();
						}
					}
				}
				if (isNotEmpty(invoice.getTotalamount())) {
						purchaseAmt += invoice.getTotalamount();
					
				}
				if (isNotEmpty(invoice.getTotaltaxableamount())) {
					totalTaxableValue += invoice.getTotaltaxableamount();
				}
			}
		}
		}else if("GSTR1".equals(returntype)){
			if (isNotEmpty(pinvoices)) {
				for (InvoiceParent invoice : pinvoices) {
					if (isNotEmpty(invoice.getTotaltax())) {
						taxAmt += invoice.getTotaltax();
						salesTax += invoice.getTotaltax();
					}
					List<? extends Item> items = invoice.getItems();
					if (isNotEmpty(invoice.getItems())){
						for(Item item : items){
							if(isNotEmpty(item.getIgstamount())){
								igst += item.getIgstamount();
							}
							if(isNotEmpty(item.getCgstamount())){
								cgst += item.getCgstamount();
							}
							if(isNotEmpty(item.getSgstamount())){
								sgst += item.getSgstamount();
							}
						}
					}
					if (isNotEmpty(invoice.getTotalamount())) {
							salesAmt += invoice.getTotalamount();
					}
					if (isNotEmpty(invoice.getTotaltaxableamount())) {
						totalTaxableValue += invoice.getTotaltaxableamount();
					}
				}
			}
			
		}else if("Purchase Register".equals(returntype)){
			if (isNotEmpty(pinvoices)) {
				for (InvoiceParent invoice : pinvoices) {
					if (isNotEmpty(invoice.getTotalitc())) {
						purchaseTax += invoice.getTotalitc();
					}
					if (isNotEmpty(invoice.getTotaltax())) {
						taxAmt += invoice.getTotaltax();
					}
					List<? extends Item> items = invoice.getItems();
					if (isNotEmpty(invoice.getItems())){
						for(Item item : items){
							if(isNotEmpty(item.getIgstamount())){
								igst += item.getIgstamount();
							}
							if(isNotEmpty(item.getCgstamount())){
								cgst += item.getCgstamount();
							}
							if(isNotEmpty(item.getSgstamount())){
								sgst += item.getSgstamount();
							}
						}
					}
					if (isNotEmpty(invoice.getTotalamount())) {
							purchaseAmt += invoice.getTotalamount();
					}
					if (isNotEmpty(invoice.getTotaltaxableamount())) {
						totalTaxableValue += invoice.getTotaltaxableamount();
					}
				}
			}
		}
		reportMap.put("Purchase", decimalFormat.format(purchaseAmt));
		reportMap.put("PurchaseTax", decimalFormat.format(purchaseTax));
		reportMap.put("Sales", decimalFormat.format(salesAmt));
		reportMap.put("salesTax", decimalFormat.format(salesTax));
		reportMap.put("TotalTaxableValue", decimalFormat.format(totalTaxableValue));
		reportMap.put("TotalTax", decimalFormat.format(taxAmt));
		reportMap.put("igst", decimalFormat.format(igst));
		reportMap.put("cgst", decimalFormat.format(cgst));
		reportMap.put("sgst", decimalFormat.format(sgst));
		reportMap.put("totalinvoices", totalInvoices+"");
		return reportMap;
	}
	
	@RequestMapping(value = "/getmonthlyinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getMonthlyInvoices(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		String retType = returntype;
		if(returntype.equals(MasterGSTConstants.GSTR2A)) {
			retType = MasterGSTConstants.GSTR2;
		}
		Page<? extends InvoiceParent> invoices = clientService.getHSNInvoices(null, client, id, retType,"reports", month, year);
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/getyearlyinvs/{id}/{clientid}/{returntype}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getYearlyInvoices(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		String retType = returntype;
		Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, id, retType, year);
		
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		Map<String, Map<String, String>> summaryMap = Maps.newHashMap();
		for (int i : monthArray) {
			Map<String, String> reportMap = null;
			if (i < 4) {
				reportMap = getSummaryMap(null, client, i, year + 1);
				summaryMap.put(i + "", reportMap);
			} else {
				reportMap = getSummaryMap(null, client, i, year);
				summaryMap.put(i + "", reportMap);
			}
		}
		model.addAttribute("summaryMap", summaryMap);
		
		
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/getmultimonthinvs/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getMultiMonthYearlyInvoices(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid,@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getMultiMonthYearlyInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String st = request.getParameter("start");
		InvoiceFilter filter = new InvoiceFilter();
		//filter.setBooksOrReturns(request.getParameter("booksorReturns"));
		filter.setPaymentStatus(request.getParameter("paymentStatus"));
		filter.setInvoiceType(request.getParameter("invoiceType"));
		String user = request.getParameter("user");
		if(isNotEmpty(user)) {
			if(user.contains("-mgst-")) {
				user = user.replaceAll("-mgst-", "&");
			}
		}
		filter.setUser(user);
		String vendor = request.getParameter("vendor");
		if(isNotEmpty(vendor)) {
			if(vendor.contains("-mgst-")) {
				vendor = vendor.replaceAll("-mgst-", "&");
			}
		}
		filter.setVendor(vendor);
		filter.setBranch(request.getParameter("branch"));
		filter.setVertical(request.getParameter("vertical"));
		filter.setReverseCharge(request.getParameter("reverseCharge"));
		filter.setSupplyType(request.getParameter("supplyType"));
		filter.setDocumentType(request.getParameter("documentType"));
		filter.setGstr2aFilingStatus(request.getParameter("gstr2aFilingStatus"));
		int start = StringUtils.isEmpty(st) ? 0 : Integer.parseInt(st);
		String len = request.getParameter("length");
		int length = StringUtils.isEmpty(len) ? 10 :  Integer.parseInt(len);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		
		Client client = clientService.findById(clientid);
		Pageable pageable = null;
		
		Map<String, Object> invoicesMap = clientService.getMultiMonthReport(pageable, client, id, returntype, month, year, start, length, searchVal, filter);
		Page<? extends InvoiceParent> invoices = (Page<? extends InvoiceParent>)invoicesMap.get("invoices");
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoicesMap);
	}
	
	
	@RequestMapping(value = "/getmultimonthInvsSupport/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Map<String, Object> getMultiMonthInvoicesSupport(@PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		Map<String, Object> invoicesMap = clientService.getMultimonthInvoicesSupport(client, returntype, month, year);
		return invoicesMap;
	}
	
	
	@RequestMapping(value = "/getcustominvs/{id}/{clientid}/{returntype}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody String getCustomInvoices(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("fromtime") String fromtime, @PathVariable("totime") String totime, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		String retType = returntype;
		if(returntype.equals(MasterGSTConstants.GSTR2A)) {
			retType = MasterGSTConstants.GSTR2;
		}
		Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, id, retType, fromtime,totime);
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/mdfyclntMonthlygstr2a/{returntype}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Map<String, String>> getClientMonthlygstr2aReturnSummary(@PathVariable("returntype") String returntype,
			@RequestParam(value = "clientid", required = true) String clientid,
			@RequestParam(value = "year", required = true) int year, ModelMap model) throws Exception {
		final String method = "getClientReturnSummary::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		model.addAttribute("dealertype", client.getDealertype());
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		Map<String, Map<String, String>> summaryMap = Maps.newHashMap();
		String retType = "GSTR1";
		if("Purchase Register".equals(returntype)){
			retType = "Purchase Register";
		}else if("GSTR2A".equals(returntype)){
			retType = "GSTR2";
		}
		for (int i : monthArray) {
			Map<String, String> reportMap = null;
			if (i < 4) {
				reportMap = getMultimonthGSTR2ASummaryMap(client, i, year + 1,retType);
				summaryMap.put(i + "", reportMap);
			} else {
				reportMap = getMultimonthGSTR2ASummaryMap(client, i, year,retType);
				summaryMap.put(i + "", reportMap);
			}
		}
		return summaryMap;
	}
	
	@RequestMapping(value="/getclientstatus/{id}/{returntype}/{monthyear}",method=RequestMethod.GET)
	public @ResponseBody String checkClientStatusFiledOrNot(@PathVariable("id") String id,@PathVariable("returntype") String returntype, @PathVariable("monthyear") String monthyear) {
		ClientStatus clientStatus=clientService.getClientStatus(id, returntype, monthyear);
		if(NullUtil.isNotEmpty(clientStatus)) {
			return clientStatus.getStatus();
		}else {
			return "Pending";
		}
	}
	
	@RequestMapping(value = "/subscriptionCheck/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Response evcOTP(@PathVariable("id") String id) {
		logger.debug(CLASSNAME + "evcOTP:: Begin");
		Response errorResponse;
		if (!subscriptionService.allowUploadInvoices(id, 1l)) {
			errorResponse = new Response();
			errorResponse.setStatuscd("0");
			errorResponse.setStatusdesc("Your subscription has expired. Kindly subscribe to proceed further!");
			return errorResponse;
		}else{
			errorResponse = new Response();
			errorResponse.setStatuscd("1");
			errorResponse.setStatusdesc("Your subscription is Not expired!");
			return errorResponse;
		}	
	}
	
	
	@RequestMapping(value = "/subscriptionCheck/{clientid}/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Response subscriptionCheck(@PathVariable("id") String id,@PathVariable("clientid") String clientid) {
		logger.debug(CLASSNAME + "subscriptionCheck:: Begin");
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
			}
		}
		String userid = userid(id,clientid);
		Client client = clientService.findById(clientid);
		
		Response errorResponse;
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			errorResponse = new Response();
			errorResponse.setStatuscd("0");
			if(usrid.equals(user.getParentid())) {
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				errorResponse.setStatusdesc(errormsg);
			}else {
			errorResponse.setStatusdesc("Your subscription has expired. Kindly subscribe to proceed further!");
			}
			
			return errorResponse;
		}else{
			errorResponse = new Response();
			errorResponse.setStatuscd("1");
			String otpcheck = "";
			if(isNotEmpty(client.getGstname())) {
				otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			}
			errorResponse.setStatusdesc(otpcheck);
			return errorResponse;
		}	
	}
		
	@RequestMapping("/countrieslist")
	public @ResponseBody List<CountryConfig> getCountriesList() {
		return clientService.getCountriesList();
	}
	
	@RequestMapping("/invtypes/{invType}/{returnType}")
	public @ResponseBody List<String> getInvTypeRules(@PathVariable("invType") String invType,@PathVariable("returnType") String returnType) {
		Map<String, List<String>> invTypes = Maps.newHashMap();
		List<String> itcReversalRules = Lists.newArrayList();
		itcReversalRules.add("Rule 2(2)");
		itcReversalRules.add("Rule 7(1)(m)");
		itcReversalRules.add("Rule 8(1)(h)");
		itcReversalRules.add("Rule 7(2)(a)");
		itcReversalRules.add("Rule 7(2)(b)");
		itcReversalRules.add("Reversal ITC");
		itcReversalRules.add("Other");
		invTypes.put(MasterGSTConstants.ITC_REVERSAL, itcReversalRules);
		List<String> nilSuppliestype = Lists.newArrayList();
		nilSuppliestype.add("Nil Rated");
		nilSuppliestype.add("Exempted");
		nilSuppliestype.add("Non-GST");
		if(returnType.equalsIgnoreCase(GSTR2)
				|| returnType.equalsIgnoreCase(PURCHASE_REGISTER)) {
			nilSuppliestype.add("From Compounding Dealer");
		}
		invTypes.put(MasterGSTConstants.NIL, nilSuppliestype);
		List<String> types = invTypes.get(invType);
		return types;
	}
	
	@RequestMapping(value = "/invoiceNumbercheck/{invoiceNumber}/{returnType}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody boolean checkInvoiceNumber(@PathVariable("invoiceNumber") String invoiceNumber,@PathVariable("returnType") String returnType,@PathVariable("clientid") String clientid,
			@PathVariable("month") int month,@PathVariable("year") int year,@RequestParam("editinv") String editinv,@RequestParam("gstno") String gstno) throws Exception {
		final String method = "checkInvoiceNumber::";
		logger.debug(method);
		if(invoiceNumber.contains("invNumCheck")){
			invoiceNumber = invoiceNumber.replaceAll("invNumCheck", "/");
		}
		if(isNotEmpty(gstno)) {
			gstno = gstno.trim().toUpperCase();
		}
		Date mstDate = null;
		Date mendDate = null;
		if(returnType.equals(MasterGSTConstants.PURCHASE_REGISTER) || returnType.equals(MasterGSTConstants.GSTR2) || returnType.equalsIgnoreCase("PurchaseRegister")) {
			mstDate = null;
			mendDate = null;
			Calendar cal = Calendar.getInstance();
			cal.set(year, month - 1, 0, 23, 59, 59);
			mstDate = new java.util.Date(cal.getTimeInMillis());
			cal = Calendar.getInstance();
			cal.set(year, month, 0, 23, 59, 59);
			mendDate = new java.util.Date(cal.getTimeInMillis());
		}
		
		if(month <= 3){
			year--;
		}
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(year, 3, 1, 0, 0, 0);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year+1, 3, 0, 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		if(isEmpty(editinv)){
			if(returnType.equals(MasterGSTConstants.PURCHASE_REGISTER) || returnType.equals(MasterGSTConstants.GSTR2) || returnType.equalsIgnoreCase("PurchaseRegister")) {
				
				return clientService.purchaseInvoiceNoCheck(clientid,invoiceNumber, returnType, gstno,  stDate, endDate,false);
			}else {
			return clientService.invoiceNumberCheckInEdit(invoiceNumber, returnType, clientid, stDate, endDate,false);
			}
		}else{
			if(returnType.equals(MasterGSTConstants.PURCHASE_REGISTER) || returnType.equals(MasterGSTConstants.GSTR2) || returnType.equalsIgnoreCase("PurchaseRegister")) {
				return clientService.purchaseInvoiceNoCheck(clientid,invoiceNumber, returnType, gstno, stDate, endDate,true);
			}else {
			return clientService.invoiceNumberCheckInEdit(invoiceNumber, returnType, clientid, stDate, endDate,true);
		}
		}
		
	}
	
	@RequestMapping(value = "/allrecordpayments/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody List<Payments> allRecordPayments(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "Report::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if (NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())) {
			InvoiceParent invoiceparent = clientService.recordPaymentDetais(clientid, returntype);
			model.addAttribute("invoiceParent", invoiceparent);
		}
		Client client = clientService.findById(clientid);
		List<Payments> paymentslist = clientService.findByClientid(clientid, returntype);
		if(isNotEmpty(paymentslist)) {
			for(Payments payment : paymentslist) {
				payment.setUserid(payment.getId().toString());
				if(isEmpty(payment.getInvtype())) {
					if(isNotEmpty(payment.getInvoiceid())) {
						InvoiceParent invoiceparent=	clientService.recordPaymentDetais(payment.getInvoiceid(), returntype);
						if(isNotEmpty(invoiceparent) && isNotEmpty(invoiceparent.getInvtype())) {
							payment.setInvtype(invoiceparent.getInvtype());
						}
					}
					
				}
			}
		}
		if(month < 4) {
			year --;
		}
		Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, id, returntype, year);
		double invoicesTotalAmount=0;
		if(isNotEmpty(invoices.getContent())) {	
			for(InvoiceParent invoice:invoices.getContent() ) {
				if(isNotEmpty(invoice.getTotalamount())) {
					invoicesTotalAmount+=invoice.getTotalamount();
				}	
			}	
		}
		
		model.addAttribute("invoicesTotalAmount", invoicesTotalAmount);
		model.addAttribute("paymentslist", paymentslist);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		logger.debug(CLASSNAME + method + END);
		return paymentslist;
	}

	@RequestMapping(value = "/paymentslist/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public  @ResponseBody List<Payments> paymentsList(@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "paymentsList::";
		logger.debug(CLASSNAME + method + BEGIN);
		List<Payments> paymentslist = clientService.findByClientid(clientid);
		return paymentslist;
	}
		@RequestMapping(value = "/csyncdata/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String clientSyncData(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype,@PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year,ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "clientSyncData::";
		logger.debug(CLASSNAME + method + BEGIN);
		updateModel(model, id, fullname, usertype, month, year);
		Client client = clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		if(isNotEmpty(client.getGstname())) {
			
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			model.addAttribute("otpcheck", otpcheck);
		}	
		model.addAttribute("clientname",client.getBusinessname());
		model.addAttribute("clientid",clientid);
		model.addAttribute("clientvalue", "syncclient");
			model.addAttribute("client",client);
			PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
			model.addAttribute("pconfig", pconfig);
		return "client/clientsyncdata";
	}
	
	
	@RequestMapping(value = "/subscriptiondata/{userid}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String subscriptionPayment(@PathVariable("userid") String userid,
			@PathVariable String clientid, @PathVariable int month,@PathVariable int year, HttpServletRequest request){
		final String method = "subscriptionPayment::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		String verifivationStatus=null;
		String usrid = userid(userid,clientid);
		boolean flag=subscriptionService.allowUploadInvoices(usrid, 1l);
		if(flag) {
			String strMonth = month < 10 ? "0" + month : month + "";
			String returnPeriod = strMonth + year;
			Client client=clientService.findById(clientid);
			if(isNotEmpty(client.getGstname())) {
				String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
				verifivationStatus=  otpcheck;
			}
		}else {
			verifivationStatus="expired";
		}
		return verifivationStatus;
	}
	
	@RequestMapping(value = "/downloadsyncdata/{userid}/{fullname}/{usertype}/{returntype}/{clientid}/{month}/{financialyear}", method = RequestMethod.GET)
	public @ResponseBody String downloadSyncData(@PathVariable("userid") String userid, @PathVariable("fullname") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("financialyear") int financialyear, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "clientSyncData::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + "syncInvoiceData : Begin");
		logger.debug(CLASSNAME + "syncInvoiceData : returnType {}", returntype);
		logger.debug(CLASSNAME + "syncInvoiceData : month {}", month);
		logger.debug(CLASSNAME + "syncInvoiceData : year {}", financialyear);
		String returnStr=null;
		String status = null;
		Client client=clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + financialyear;
		
		if(NullUtil.isNotEmpty(client)) {
			ClientStatus clientStatus = clientService.getClientStatus(client.getId().toString(), returntype, retPeriod);
			if (isEmpty(clientStatus) || isNotEmpty(userid)) {
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), retPeriod, userid,MasterGSTConstants.GSTR1, false);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							status = trackResponse.getStatus();
							client.setStatus(status);
							if(isEmpty(clientStatus)) {
								clientStatus = new ClientStatus();
								clientStatus.setClientId(client.getId().toString());
								clientStatus.setReturnPeriod(trackResponse.getRetPeriod());
								clientStatus.setReturnType(trackResponse.getRtntype());
							}
							clientStatus.setStatus(trackResponse.getStatus());
							clientStatus.setArn(trackResponse.getArn());
							if(isNotEmpty(trackResponse.getDof())) {
								SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
								try {
									clientStatus.setDof(dateFormat.parse(trackResponse.getDof()));
									clientService.saveClientStatus(clientStatus);
								} catch (ParseException e) {
								}
							}
						}
					}
				}
			}
			if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR3B)) {
			
				String dwndstatus_gstr3b=getGSTR3BData_download(userid,fullname,usertype,clientid,month,financialyear);
			}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2A)){
				String[] invTypes = { MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, MasterGSTConstants.B2BA, MasterGSTConstants.CDNA };
				for (String invType : invTypes) {
					String dwndstatus_gstr2a=performDownloadGSTR2AData(client, invType, retPeriod, clientid, userid, month, financialyear);
				}
			}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)){
				//clientService.syncInvoiceData(client, returntype, userid, usertype, month, financialyear);
				String dwndstatus_gstr1="NODATA_FOUND";
				if(isEmpty(userid)) {
					List<ClientUserMapping> mappings = clientUserMappingRepository.findByClientid(client.getId().toString());
					if(isNotEmpty(mappings)) {
						userid = mappings.get(0).getUserid();
					}
				}
				//TODO : Add applicable inv types
				String[] invTypes = { B2B, B2C, B2CL, CREDIT_DEBIT_NOTES, EXPORTS, ADVANCES, ATPAID, CDNUR, NIL, B2BA, B2CSA,
						B2CLA, CDNA, CDNURA, ATA, EXPA, TXPA };
					//{MasterGSTConstants.B2B, MasterGSTConstants.B2C, MasterGSTConstants.B2CL, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.EXPORTS, MasterGSTConstants.ADVANCES, MasterGSTConstants.ATPAID, MasterGSTConstants.CDNUR, MasterGSTConstants.NIL};
				
				for(String invType : invTypes) {
					try {
						InvoiceParent invoice = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(), month, financialyear, MasterGSTConstants.GSTR1, invType, null, userid, true);
						
						if(isNotEmpty(invoice)) {
							clientService.processGSTRData(invoice, client, status, MasterGSTConstants.GSTR1, invType, userid, usertype, month, financialyear);
							dwndstatus_gstr1="DATA_FOUND";
						}
					} catch(MasterGSTException e) {
						downloadGSTRXStatus(returntype,userid,clientid, retPeriod,financialyear,"NODATA_FOUND", strMonth);
						logger.debug(CLASSNAME + "syncInvoiceData : ERROR", e);
					}
				}
				downloadGSTRXStatus(returntype,userid,clientid, retPeriod,financialyear,dwndstatus_gstr1, strMonth);
				logger.debug(CLASSNAME + "syncInvoiceData : End");
			}
			returnStr= "success";
		}else {
			returnStr= "failed";
		}
		return returnStr;
	}
	private void downloadGSTRXStatus(String returnType,String userid, String clientid, String retPeriod,int financialyear,String dwndstatus, String strMonth) {
		logger.info("downloadGSTRXStatus  ::"+dwndstatus+returnType+" returnperiod :: "+retPeriod);
		if(returnType.equalsIgnoreCase(MasterGSTConstants.GSTR2A)) {
			List<GSTR2ADownloadStatus> gstr2ADownloadStatuss = gstr2ADowloadService.getGSTR2ADownloadStatus(userid, clientid,retPeriod);
			gstr2ADowloadService.deleteGSTR2ADownloadStatus(gstr2ADownloadStatuss);
			
			GSTR2ADownloadStatus gstr2ADownloadStatus = new GSTR2ADownloadStatus();
				gstr2ADownloadStatus.setClientid(clientid);
				gstr2ADownloadStatus.setUserid(userid);
				gstr2ADownloadStatus.setStatus("DOWNLOAD");
				gstr2ADownloadStatus.setReturnperiod(retPeriod);
				gstr2ADownloadStatus.setFinancialyear(financialyear + "");
				gstr2ADownloadStatus.setCurrrentmonth(strMonth);
				if("DATA_FOUND".equals(dwndstatus)) {
					gstr2ADownloadStatus.setInvoicedata("invoices available");
				}else {
					gstr2ADownloadStatus.setInvoicedata("invoices not available");
				}
				gstr2ADowloadService.savedownloadstatus(gstr2ADownloadStatus);			
		}else if(returnType.equalsIgnoreCase(MasterGSTConstants.GSTR3B)) {
			List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(userid,clientid, retPeriod);
			gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
				GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
				status.setUserid(userid);
				status.setClientid(clientid);
				status.setReturnperiod(retPeriod);
				status.setStatus("DOWNLOAD");
				status.setFinancialyear(financialyear + "");
				status.setCurrrentmonth(strMonth);
				gstr3BDowloadService.savedownloadstatus(status);
		}else {
			List<GSTR1DownloadStatus> gstr1DownloadStatus = gstr1DowloadService.getGSTR1DownloadStatus(userid, clientid, retPeriod);
			gstr1DowloadService.deleteGSTR1DownloadStatus(gstr1DownloadStatus);
			
				GSTR1DownloadStatus dwnldstatus = new GSTR1DownloadStatus();
				dwnldstatus.setUserid(userid);
				dwnldstatus.setClientid(clientid);
				dwnldstatus.setReturnperiod(retPeriod);
				dwnldstatus.setStatus("DOWNLOAD");
				dwnldstatus.setFinancialyear(financialyear + "");
				dwnldstatus.setCurrrentmonth(strMonth);
				if("DATA_FOUND".equals(dwndstatus)) {
					dwnldstatus.setInvoicedata("invoices available");
				}else {
					dwnldstatus.setInvoicedata("invoices not available");
				}
				gstr1DowloadService.savedownloadstatus(dwnldstatus);	
		}
	}
	/*@RequestMapping(value = "/invoivepaymenthistory/{invoiceid}/{returntype}")
	public @ResponseBody List<Payments> invoicePaymentsHistory(@PathVariable("invoiceid") String invoiceid,
			@PathVariable("returntype") String returntype, ModelMap model) throws Exception {
		InvoiceParent invoiceparent = clientService.recordPaymentDetais(invoiceid, returntype);
		List<Payments> recpayments = null;
		if(NullUtil.isNotEmpty(invoiceparent)) {
			if(isNotEmpty(invoiceparent.getClientid()) && isNotEmpty(invoiceparent.getId().toString())) {
				recpayments=clientService.recordPaymentsHistory(invoiceparent.getClientid(),	invoiceparent.getId().toString());
			}
			
		}
		return recpayments;
	}*/
	
	@RequestMapping(value = "/invoivepaymenthistory/{invoiceid}/{clientid}")
	public @ResponseBody List<Payments> invoicePaymentsHistory(@PathVariable("invoiceid") String invoiceid,	@PathVariable("clientid") String clientid, ModelMap model) throws Exception {
		//InvoiceParent invoiceparent = clientService.recordPaymentDetais(invoiceid, returntype);
		List<Payments> recpayments = null;
		//if(NullUtil.isNotEmpty(invoiceparent)) {
			if(isNotEmpty(clientid) && isNotEmpty(invoiceid)) {
				recpayments=clientService.recordPaymentsHistory(clientid,invoiceid);
			}
		//}
		return recpayments;
	}
	
	
	@RequestMapping(value = "/getGSTR3BYearlyinvs/{id}/{clientid}/{returntype}/{year}", method = RequestMethod.GET)
	public @ResponseBody Map<String, String> getGSTR3BYearlyInvoices(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		Map<String, String> summaryMap = Maps.newHashMap();
		for (int i : monthArray) {
			GSTR3B reportMap = null;
			if (i < 4) {
				String retPeriod = (i < 10 ? "0" + i : i + "")+(year+1);
				reportMap = clientService.getSuppliesInvoice(clientid, retPeriod);
				ObjectMapper mapper = new ObjectMapper();
				mapper.disable(MapperFeature.USE_ANNOTATIONS);
				ObjectWriter writer=null;
				FilterProvider filters = new SimpleFilterProvider().addFilter("gstr3bFilter", SimpleBeanPropertyFilter.serializeAll());
				writer=mapper.writer(filters);
				summaryMap.put(i + "", writer.writeValueAsString(reportMap));
			} else {
				String retPeriod = (i < 10 ? "0" + i : i + "")+year;
				reportMap = clientService.getSuppliesInvoice(clientid, retPeriod);
				ObjectMapper mapper = new ObjectMapper();
				mapper.disable(MapperFeature.USE_ANNOTATIONS);
				ObjectWriter writer=null;
				FilterProvider filters = new SimpleFilterProvider().addFilter("gstr3bFilter", SimpleBeanPropertyFilter.serializeAll());
				writer=mapper.writer(filters);
				summaryMap.put(i + "", writer.writeValueAsString(reportMap));
			}
		}
		
		
		return summaryMap;
	}
	
@RequestMapping(value = "/updtclntconfig/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
public @ResponseBody void updateClientConfig(@RequestBody MultiValueMap<String, String> reconcileData, @PathVariable("clientid") String clientid,
		 ModelMap model) throws Exception {
	final String method = "updateClientConfig::";
	logger.debug(CLASSNAME + method + BEGIN);
	ClientConfig reconcileForm = clientService.getClientConfig(clientid);
	if(isEmpty(reconcileForm)) {
		reconcileForm = new ClientConfig();
		reconcileForm.setClientId(clientid);
	}
	
	reconcileForm.setReconcileDiff(Double.parseDouble(reconcileData.getFirst("diffamt")));
	reconcileForm.setAllowedDays(Double.parseDouble(reconcileData.getFirst("alloweddays")));
	String im=reconcileData.getFirst("enableInvoiceMatchField"); 
	String ih=reconcileData.getFirst("enableIgnoreHyphenField"); 
	String is=reconcileData.getFirst("enableIgnoreSlashField");
	String iz=reconcileData.getFirst("enableIgnoreZeroField"); 
	String ii=reconcileData.getFirst("enableIgnoreIField"); 
	String il=reconcileData.getFirst("enableIgnoreLField");
	
		 if("true".equals(im)) {
			 reconcileForm.setEnableInvoiceMatch(true); 
		 }else {
		 reconcileForm.setEnableInvoiceMatch(false); 
		 } 
		 
	  if("true".equals(ih)) { 
		  reconcileForm.setEnableIgnoreHyphen(true);
	  }else {
		  reconcileForm.setEnableIgnoreHyphen(false);
	  } 
	  if("true".equals(is)) { 
		  reconcileForm.setEnableIgnoreSlash(true);
	  }else {
		  reconcileForm.setEnableIgnoreSlash(false);
	  } 
	  if("true".equals(iz)) { 
		  reconcileForm.setEnableIgnoreZero(true);
	  }else {
		  reconcileForm.setEnableIgnoreZero(false);
	  } 
	  if("true".equals(ii)) { 
		  reconcileForm.setEnableIgnoreI(true);
	  }else {
		  reconcileForm.setEnableIgnoreI(false);
	  } 
	  if("true".equals(il)) { 
		  reconcileForm.setEnableIgnoreL(true);
	  }else {
		  reconcileForm.setEnableIgnoreL(false);
	  } 
	clientService.updateClientConfig(reconcileForm);
	
}

	@CrossOrigin(origins = "*")
	@RequestMapping(value = "/updtitemcategory/{returnType}/{month}/{year}")
	public @ResponseBody void updateItemCategory(@PathVariable("returnType") String returnType,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "updateItemCategory::";
		logger.debug(CLASSNAME + method + BEGIN);
		clientService.updateCategory(returnType, month, year);
		logger.debug(CLASSNAME + method + END);
	}
	
	@CrossOrigin(origins = "*")
	@RequestMapping(value = "/invoiceNumbers/{month}/{year}/{returntype}/{invtype}", method = RequestMethod.GET)
	public @ResponseBody String invoiceData(ModelMap model,@PathVariable("month") int month, @PathVariable("year") int year,@PathVariable("returntype") String returntype,@PathVariable("invtype") String invtype,
			@RequestParam(value = "query", required = true) String query,@RequestParam(value = "clientid", required = true) String clientid, HttpServletRequest request) throws Exception {
		final String method = "invoiceData::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + query);
		if(invtype.equalsIgnoreCase("Credit_Debit Notes") || invtype.equalsIgnoreCase("Credit_Debit Note for Unregistered Taxpayers")) {
			invtype=invtype.replace("_", "/");
		}
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
			if(month < 10) {
				cal.set(year-1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}else {
				cal.set(year, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
		String billedtoname = request.getParameter("billedToName");
		List<? extends InvoiceParent> invoicelist=clientService.getSearchedInvoiceData(returntype,invtype,stDate,endDate,clientid, billedtoname, query);
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoicelist);
		
	}
	
	@CrossOrigin(origins = "*")
	@RequestMapping(value = "/advReceiptInvoiceNumbers/{month}/{year}/{returntype}/{invtype}", method = RequestMethod.GET)
	public @ResponseBody String advReceiptInvoiceNumbers(ModelMap model,@PathVariable("month") int month, @PathVariable("year") int year,@PathVariable("returntype") String returntype,@PathVariable("invtype") String invtype,
			@RequestParam(value = "query", required = true) String query,@RequestParam(value = "clientid", required = true) String clientid) throws Exception {
		final String method = "invoiceData::";
		logger.debug(CLASSNAME + method + BEGIN);
		if(invtype.equalsIgnoreCase("Credit_Debit Notes") || invtype.equalsIgnoreCase("Credit_Debit Note for Unregistered Taxpayers")) {
			invtype=invtype.replace("_", "/");
		}
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
			if(month < 10) {
				cal.set(year-1, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}else {
				cal.set(year, 3, 1, 0, 0, 0);
				stDate = new java.util.Date(cal.getTimeInMillis());
				cal = Calendar.getInstance();
				cal.set(year, month, 0, 23, 59, 59);
				endDate = new java.util.Date(cal.getTimeInMillis());
			}
		List<? extends InvoiceParent> invoicelist=clientService.getSearchedAdvReceiptInvoiceData(returntype,invtype,stDate,endDate,clientid, query);
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoicelist);
		
	}

	/*
	 * save proforma invoices
	 */
	@RequestMapping(value = "/saveproformainvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveProformaInvoice(@ModelAttribute("invoice")ProformaInvoices invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveProformaInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id {}", invoice.getId());
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = proformaInvoicesRepository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=pi";
	}
	
	/*
	 * save estimates invoices
	 */
	@RequestMapping(value = "/saveestimatesinvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saveEstimatesInvoice(@ModelAttribute("invoice")Estimates invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saveEstimatesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id {}", invoice.getId());
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = estimatesRepository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=est";
	}
	
	@RequestMapping(value = "/savepurchaseorderinvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String savePurchaseOrderInvoice(@ModelAttribute("invoice")PurchaseOrder invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "savePurchaseOrderInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id {}", invoice.getId());
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = purchaseOrderRepository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=po";
	}
	
	@RequestMapping(value = "/saveewaybillinvoiceasdraft/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String saverewaybillinvoiceasdraft(@ModelAttribute("invoice")EWAYBILL invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "saverewaybillinvoiceasdraft::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id {}", invoice.getId());
		String action = invoice.getId() != null ? AuditLogConstants.EDITANDSAVE : AuditLogConstants.SAVEINVOICE;
		String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
		InvoiceParent oldinvoice = null;
		if(action.equalsIgnoreCase(AuditLogConstants.EDITANDSAVE)) {
			oldinvoice = ewayBillRepository.findOne(invoice.getId().toString());
		}
		invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
		inventoryService.updateStockAdjustments(invoice, MasterGSTConstants.EWAYBILL);
		if(action.equalsIgnoreCase(AuditLogConstants.SAVEINVOICE)) {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,null,null);
		}else {
			auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,returntype,oldinvoice,invoice);
		}
		return "redirect:/alliview/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/"
				+ invoice.getClientid() + "/" + returntype + "/" + month + "/" + year + "?type=ebill";
	}
	
	@RequestMapping(value = "/saveEwayBillinvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String saveEwayBillinvoice(@ModelAttribute("invoice")EWAYBILL invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
			final String method = "saveEWAYBILLInvoice::";
			Client client = null;String desc="";
			if(isNotEmpty(invoice.getClientid())) {
				client = clientService.findById(invoice.getClientid());
			}
			
			EwayBillResponseData resData = clientService.genEwayBillResponseData(invoice, client);
			GenerateEwayBillResponse gresponse = iHubConsumerService.generateEwayBill(client.getGstnnumber(), InetAddress.getLocalHost().getHostAddress(), resData);
			ErrorCodeConfig errors=null;
			if(isNotEmpty(gresponse) && isNotEmpty(gresponse.getStatuscd()) && gresponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
				Date edate=new SimpleDateFormat("dd/MM/yyyy").parse(gresponse.getData().getEwayBillDate());
				invoice.setEwayBillNumber(gresponse.getData().getEwayBillNo().toString());
				invoice.seteBillDate(edate);
				invoice.setValidUpto(gresponse.getData().getValidUpto());
				invoice.setSrctype("MGSTWEB");
				String usrid = userid(invoice.getUserid(),client.getId().toString());
				clientService.changeSubscriptionData(usrid,usertype);
				String action = AuditLogConstants.GENERATEEWAYBIll;
				String invoiceNumber = invoice.getB2b() != null ? invoice.getB2b().get(0) != null ? invoice.getB2b().get(0).getInv() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() != null ? invoice.getB2b().get(0).getInv().get(0).getInum() : "" : "" : "" : "";
				auditlogService.saveAuditLog(invoice.getUserid(), invoice.getClientid(),invoiceNumber,action,MasterGSTConstants.EWAYBILL,null,null);
				invoiceSaveUtils.saveInvoice(invoice, returntype, usertype, month, year, model);
			}else {
				 String jsonStr="";
				if(isNotEmpty(gresponse) && isNotEmpty(gresponse.getError()) && isNotEmpty(gresponse.getError().getMessage())) {
					String ecodes = gresponse.getError().getMessage();
			        jsonStr = gresponse.getError().getMessage();
				}
				if(jsonStr.contains("JSON validation failed due to")) {
					desc =jsonStr; 
				}else {
			        JSONObject jsonObj = new JSONObject(jsonStr);
			        String code = jsonObj.getString("errorCodes");
			        String[] cd=code.split(",");
			        for(int i=0;i<cd.length;i++) {
			        	errors = errorCodesRepository.findByErrorCode(cd[i]);
			        	if(isNotEmpty(errors) && isNotEmpty(errors.getErrorDesc())) {
			        		desc=desc+", "+errors.getErrorDesc();
			        	}
			        }
				}
			}
			return desc;
		}
	
	
	public List<InvoiceVO> invoiceListItems(Page<? extends InvoiceParent> invoices, String returntype){
		if(returntype.equals("Unclaimed")) {
			returntype = MasterGSTConstants.PURCHASE_REGISTER;
		}
		List<StateConfig> states = configService.getStates();
		List<InvoiceVO> invoiceVOList = Lists.newArrayList();
		List<InvoiceVO> invoiceVOCancelledList = Lists.newArrayList();
		Double totisgt = 0d;
		Double totcsgt = 0d;
		Double totssgt = 0d;
		Double totcess = 0d;
		Double tottaxable = 0d;
		Double tottax = 0d;
		Double tottotal = 0d;
		Double totExempted = 0d;
		Double totAss = 0d;
		Double totStateCess = 0d;
		Double totCessNonAdvol = 0d;
		
		Double ctotisgt = 0d;
		Double ctotcsgt = 0d;
		Double ctotssgt = 0d;
		Double ctotcess = 0d;
		Double ctottaxable = 0d;
		Double ctottax = 0d;
		Double ctottotal = 0d;
		Double ctotExempted = 0d;
		Double ctotAss = 0d;
		Double ctotStateCess = 0d;
		Double ctotCessNonAdvol = 0d;
		
		List<String> refids = Lists.newArrayList();
		if(isNotEmpty(invoices) && isNotEmpty(invoices.getContent())) {
			invoices.getContent().stream().forEach(inv -> {if(isNotEmpty(inv.getAmendmentRefId())){
				refids.addAll(inv.getAmendmentRefId());
			}});
		}
		
		if(isNotEmpty(invoices)) {
			for (InvoiceParent invoice : invoices) {
				
				String clientid = invoice.getClientid();
				Client client = clientService.findById(clientid);
				if (isNotEmpty(invoice.getItems())) {
					for (Item item : invoice.getItems()) {
						InvoiceVO invo = new InvoiceVO();
						if(isNotEmpty(invoice.getCustomField1())) {
							invo.setCustomField1(invoice.getCustomField1());
						}
						if(isNotEmpty(invoice.getCustomField2())) {
							invo.setCustomField2(invoice.getCustomField2());
						}
						if(isNotEmpty(invoice.getCustomField3())) {
							invo.setCustomField3(invoice.getCustomField3());
						}
						if(isNotEmpty(invoice.getCustomField4())) {
							invo.setCustomField4(invoice.getCustomField4());
						}
						if("Reverse".equalsIgnoreCase(invoice.getRevchargetype())) {
							if(isNotEmpty(invoice.getRevchargeNo())) {
								invo.setRevChargeNo(invoice.getRevchargeNo());
							}
						}
						if(isNotEmpty(invoice.getBillDate())) {
							invo.setTransactionDate(invoice.getBillDate());
						}
						if(isNotEmpty(invoice.getRevchargetype())) {
							if("Regular".equalsIgnoreCase(invoice.getRevchargetype()) || "N".equalsIgnoreCase(invoice.getRevchargetype())) {
								invo.setRecharge("No");
							}else {
								invo.setRecharge("Yes");
							}
						}
						if(isNotEmpty(invoice.getAckNo())) {
							invo.setAckno(invoice.getAckNo());
						}
						if(isNotEmpty(invoice.getEinvStatus())) {
							invo.setEinvstatus(invoice.getEinvStatus());
						}
						if(isNotEmpty(invoice.getAckDt())) {
							SimpleDateFormat idt1 = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
							SimpleDateFormat idt2 = new SimpleDateFormat("dd-MM-yyyy");
							Date irnDate =null;
							try {
								irnDate = idt1.parse(invoice.getAckDt());
							} catch (ParseException e) {
								e.printStackTrace();
							}
							invo.setAckdt(invoice.getAckDt());
							if(isNotEmpty(irnDate)){
								invo.setIrndt(idt2.format(irnDate));
							}
						}
						if(isNotEmpty(invoice.getGstStatus())) {
							if(invoice.getGstStatus().equalsIgnoreCase("Uploaded") || invoice.getGstStatus().equalsIgnoreCase("SUCCESS")) {
								invo.setGstStatus("Uploaded");
							}else if(invoice.getGstStatus().equalsIgnoreCase("Submitted")) {
								invo.setGstStatus("Submitted");
							}else if(invoice.getGstStatus().equalsIgnoreCase("Filed")) {
								invo.setGstStatus("Filed");
							}else if(invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
								invo.setGstStatus("Cancelled");
							}else if(invoice.getGstStatus().equalsIgnoreCase("Failed")) {
								invo.setGstStatus("Failed");
							}else {
								invo.setGstStatus("Pending");
							}
						}else {
							invo.setGstStatus("Pending");
						}
						if(returntype.equals(MasterGSTConstants.EINVOICE)) {
							String docType="";
							if(isNotEmpty(invoice) && isNotEmpty(invoice.getTyp())) {
								if(("INV").equalsIgnoreCase(invoice.getTyp())) {
									docType =  "INVOICE";
								}else if(("CRN").equalsIgnoreCase(invoice.getTyp())) {
									docType =  "CREDIT NOTE";
								}else if(("DBN").equalsIgnoreCase(invoice.getTyp())) {
									docType =  "DEBIT NOTE";
								}else {
									docType =  "INVOICE";
								}
							}
							if(isNotEmpty(invoice.getTyp())) {
								invo.setDocType(docType);
							}
							if(isNotEmpty(invoice.getIrnNo())) {
								invo.setIrnNo(invoice.getIrnNo());
							}
							if(isNotEmpty(invoice.getIrnStatus())) {
								invo.setIrnStatus(invoice.getIrnStatus());
							}else {
								invo.setIrnStatus("Not Generated");
							}
						}
						if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
							String supplyType="";
							String subSupplyType="";
							String docType="";
							String vehicleType="";
							if(isNotEmpty(invoice) && isNotEmpty(invoice.getSupplyType())) {
								if(("I").equalsIgnoreCase(invoice.getSupplyType())) {
									supplyType =  "Inward";
								}else if(("O").equalsIgnoreCase(invoice.getSupplyType())) {
									supplyType =  "Outward";
								}
							}
							String sText[] = {"Supply","Import","Export","Job Work","For Own Use","Job work Returns","Sales Return","Others","SKD/CKD","Line Sales","Recipient Not Known","Exhibition or Fairs"};
							if(isNotEmpty(invoice) && isNotEmpty(invoice.getSubSupplyType())) {
								subSupplyType = sText[Integer.parseInt(invoice.getSubSupplyType().trim())-1];
							}
							if(isNotEmpty(invoice) && isNotEmpty(invoice.getDocType())) {
								if(("INV").equalsIgnoreCase(invoice.getDocType())) {
									docType =  "Tax Invoice";
								}else if(("CHN").equalsIgnoreCase(invoice.getDocType())) {
									docType =  "Delivery Challan";
								}else if(("BIL").equalsIgnoreCase(invoice.getDocType())) {
									docType =  "Bill of Supply";
								}else if(("BOE").equalsIgnoreCase(invoice.getDocType())) {
									docType =  "Bill of Entry";
								}else if(("CNT").equalsIgnoreCase(invoice.getDocType())) {
									docType =  "Credit Note";
								}else if(("OTH").equalsIgnoreCase(invoice.getDocType())) {
									docType =  "Others";
								}
							}
							if(isNotEmpty(invoice) && isNotEmpty(invoice.getVehicleType())) {
								if(("R").equalsIgnoreCase(invoice.getVehicleType())) {
									vehicleType =  "Regular";
								}else if(("O").equalsIgnoreCase(invoice.getVehicleType())) {
									vehicleType =  "Over Dimensional Cargo";
								}
							}
							if(isNotEmpty(invoice.getEwayBillNumber())) {
								invo.setEwayBillNo(invoice.getEwayBillNumber());
							}
							if(isNotEmpty(invoice.geteBillDate())) {
								invo.setEwayBillDate(invoice.geteBillDate());
							}
							if(isNotEmpty(invoice.getSupplyType())) {
								invo.setSupplyType(supplyType);
							}
							if(isNotEmpty(invoice.getSubSupplyType())) {
								invo.setSubSupplyType(subSupplyType);
							}
							if(isNotEmpty(invoice.getDocType())) {
								invo.setDocType(docType);
							}
							if(isNotEmpty(invoice.getFromGstin())) {
								invo.setFromGstin(invoice.getFromGstin());
							}
							if(isNotEmpty(invoice.getFromTrdName())) {
								invo.setFromTrdName(invoice.getFromTrdName());
							}
							if(isNotEmpty(invoice.getFromAddr1())) {
								invo.setFromAddr1(invoice.getFromAddr1());
							}
							if(isNotEmpty(invoice.getFromAddr2())) {
								invo.setFromAddr2(invoice.getFromAddr2());
							}
							if(isNotEmpty(invoice.getFromPlace())) {
								invo.setFromPlace(invoice.getFromPlace());
							}
							if(isNotEmpty(invoice.getFromPincode())) {
								invo.setFromPincode(invoice.getFromPincode());
							}
							if(isNotEmpty(invoice.getFromStateCode())) {
								invo.setFromStateCode(invoice.getFromStateCode());
							}
							if(isNotEmpty(invoice.getToGstin())) {
								invo.setToGstin(invoice.getToGstin());
							}
							if(isNotEmpty(invoice.getToTrdName())) {
								invo.setToTrdName(invoice.getToTrdName());
							}
							if(isNotEmpty(invoice.getToAddr1())) {
								invo.setToAddr1(invoice.getToAddr1());
							}
							if(isNotEmpty(invoice.getToAddr2())) {
								invo.setToAddr2(invoice.getToAddr2());
							}
							if(isNotEmpty(invoice.getToPincode())) {
								invo.setToPincode(invoice.getToPincode());
							}
							if(isNotEmpty(invoice.getToPlace())) {
								invo.setToPlace(invoice.getToPlace());
							}
							if(isNotEmpty(invoice.getToStateCode())) {
								invo.setToStateCode(invoice.getToStateCode());
							}
							if(isNotEmpty(invoice.getTransporterId())) {
								invo.setTransporterId(invoice.getTransporterId());
							}
							if(isNotEmpty(invoice.getTransporterName())) {
								invo.setTransporterName(invoice.getTransporterName());
							}
							if(isNotEmpty(invoice.getStatus())) {
								invo.setStatus(invoice.getStatus());
							}
							if(isNotEmpty(invoice.getActualDist())) {
								invo.setActualDist(invoice.getActualDist());
							}
							if(isNotEmpty(invoice.getNoValidDays())) {
								invo.setNoValidDays(invoice.getNoValidDays());
							}
							if(isNotEmpty(invoice.getValidUpto())) {
								invo.setValidUpto(invoice.getValidUpto());
							}
							if(isNotEmpty(invoice.getExtendedTimes())) {
								invo.setExtendedTimes(invoice.getExtendedTimes());
							}
							if(isNotEmpty(invoice.getRejectStatus())) {
								invo.setRejectStatus(invoice.getRejectStatus());
							}
							if(isNotEmpty(vehicleType)) {
								invo.setVehicleType(vehicleType);
							}
							if(isNotEmpty(invoice.getTransactionType())) {
								invo.setTransactionType(invoice.getTransactionType());
							}
							if(isNotEmpty(invoice.getOtherValue())) {
								invo.setOtherValue(invoice.getOtherValue());
							}
							if(isNotEmpty(invoice.getCessNonAdvolValue())) {
								invo.setCessNonAdvolValue(invoice.getCessNonAdvolValue());
							}
						}
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)  || returntype.equalsIgnoreCase("Unclaimed")) {
							if(invoice.getInvtype().equals(MasterGSTConstants.B2B) || invoice.getInvtype().equals(MasterGSTConstants.B2C) || invoice.getInvtype().equals(MasterGSTConstants.B2CL)
									|| invoice.getInvtype().equals(MasterGSTConstants.EXPORTS) || invoice.getInvtype().equals(MasterGSTConstants.NIL)) {
								invo.setDocType("INV");
							}else if(invoice.getInvtype().equals(MasterGSTConstants.ADVANCES) || invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
								invo.setDocType("ADV");
							}else if(invoice.getInvtype().equals(MasterGSTConstants.IMP_GOODS)) {
								invo.setDocType("IMPG");
							}else if(invoice.getInvtype().equals(MasterGSTConstants.IMP_SERVICES)) {
								invo.setDocType("IMPS");
							}
						}
						if(isNotEmpty(item.getItemno())) {
							invo.setItemname(item.getItemno());
						}
						if(isNotEmpty(item.getItemNotescomments())) {
							invo.setItemNotesComments(item.getItemNotescomments());
						}
						if(isNotEmpty(client.getGstnnumber())) {
							invo.setCompanyGSTIN(client.getGstnnumber());
						}
						if(isNotEmpty(client.getStatename())) {
							invo.setCompanyStatename(client.getStatename());
						}
						if (isNotEmpty(invoice.getBilledtoname())) {
							invo.setCustomerName(invoice.getBilledtoname());
						}
						if ((returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2A)) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS) && isNotEmpty(((GSTR2)invoice).getImpGoods()) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0)) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0).getStin())) {
							invo.setCustomerGSTIN(((GSTR2)invoice).getImpGoods().get(0).getStin());
						}else if ((returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS) && isNotEmpty(((PurchaseRegister)invoice).getImpGoods()) && isNotEmpty(((PurchaseRegister)invoice).getImpGoods().get(0)) && isNotEmpty(((PurchaseRegister)invoice).getImpGoods().get(0).getStin())) {
							invo.setCustomerGSTIN(((PurchaseRegister)invoice).getImpGoods().get(0).getStin());
						}else {
							if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
								invo.setCustomerGSTIN(invoice.getB2b().get(0).getCtin());
							}
						}
						
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2)  || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2A)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
								if(isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0)) && isNotEmpty(invoice.getCdn().get(0).getCfs())) {
									if("Y".equalsIgnoreCase(invoice.getCdn().get(0).getCfs())) {
										invo.setCounterFilingStatus("Filed");
									}else {
										invo.setCounterFilingStatus("Pending");
									}
								}else {
									invo.setCounterFilingStatus("Pending");
								}
							}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2B)) {
								if(isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getCfs())) {
									if("Y".equalsIgnoreCase(invoice.getB2b().get(0).getCfs())) {
										invo.setCounterFilingStatus("Filed");
									}else {
										invo.setCounterFilingStatus("Pending");
									}
								}else {
									invo.setCounterFilingStatus("Pending");
								}
							}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
								if(isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getCfs())) {
									if("Y".equalsIgnoreCase(((GSTR2)invoice).getCdna().get(0).getCfs())) {
										invo.setCounterFilingStatus("Filed");
									}else {
										invo.setCounterFilingStatus("Pending");
									}
								}else {
									invo.setCounterFilingStatus("Pending");
								}
								if(isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntNum())) {
									invo.setOriginalInvoiceNo(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntNum());
								}
								if(isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntDt())) {
									invo.setOriginalInvoiceDate(Utility.getFormatedDateStr(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntDt()));
								}
							}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2BA)) {
								if(isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getCfs())) {
									if("Y".equalsIgnoreCase(((GSTR2)invoice).getB2ba().get(0).getCfs())) {
										invo.setCounterFilingStatus("Filed");
									}else {
										invo.setCounterFilingStatus("Pending");
									}
								}else {
									invo.setCounterFilingStatus("Pending");
								}
								if(isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOinum())) {
									invo.setOriginalInvoiceNo(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOinum());
								}
								if(isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOidt())) {
									invo.setOriginalInvoiceDate(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOidt());
								}
							}
						}
						
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2A)) {
							if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2B) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getPos())) {
									String gstinNumber = invoice.getB2b().get(0).getInv().get(0).getPos();
									for (StateConfig state : states) {
										if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
											invo.setPlaceOfSupply(state.getName());
											break;
										}
									}
							}
							if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2BA) && isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getPos())) {
								String gstinNumber = ((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getPos();
								for (StateConfig state : states) {
									if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
										invo.setPlaceOfSupply(state.getName());
										break;
									}
								}
							}
							if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) && isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getPos())) {
								String gstinNumber = invoice.getCdn().get(0).getNt().get(0).getPos();
								for (StateConfig state : states) {
									if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
										invo.setPlaceOfSupply(state.getName());
										break;
									}
								}
							}
							if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA) && isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getPos())) {
								String gstinNumber = ((GSTR2)invoice).getCdna().get(0).getNt().get(0).getPos();
								for (StateConfig state : states) {
									if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
										invo.setPlaceOfSupply(state.getName());
										break;
									}
								}
							}
							
							if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS) && isNotEmpty(((GSTR2)invoice).getImpGoods()) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0)) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0).getStin())) {
								String gstinNumber = ((GSTR2)invoice).getImpGoods().get(0).getStin().trim();
								gstinNumber = gstinNumber.substring(0,2);
								for (StateConfig state : states) {
									if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
										invo.setPlaceOfSupply(state.getName());
										break;
									}
								}
							}
						}
						if (isNotEmpty(item.getIgstrate())) {
							invo.setIgstRate(item.getIgstrate());
						}
						if(isEmpty(item.getExmepted())) {
							invo.setExemptedVal(0d);
						}
						if(isEmpty(item.getIgstamount())){
							item.setIgstamount(0d);
						}
						if(isEmpty(item.getSgstamount())){
							item.setSgstamount(0d);
						}
						if(isEmpty(item.getCgstamount())){
							item.setCgstamount(0d);
						}
						if(isEmpty(item.getCessamount())){
							item.setCessamount(0d);
						}
						if(isNotEmpty(item.getElgpercent())) {
							invo.setEligiblePercentage(item.getElgpercent()+"");
						}
						if(isNotEmpty(invoice.getDateofitcClaimed())) {
							invo.setDateOfItcClaimed(invoice.getDateofitcClaimed());
						}
						if (isNotEmpty(item.getElg())) {
							String itcType = "";
							String elg = item.getElg();
							if("cp".equals(elg)){
								itcType = "Capital Good";
							}else if("ip".equals(elg)){
								itcType = "Inputs";
							}else if("is".equals(elg)){
								itcType = "Input Service";
							}else if("no".equals(elg)){
								itcType = "Ineligible";
							}else if("pending".equals(elg)){
								itcType = "Not Selected";
							}
							
							invo.setItcType(itcType);
						}else {
							//Nill Supplies itc type not applicable, but end-users asks don't empty keep Ineligible.
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.NIL) && (returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER))) {
								invo.setItcType("Ineligible");
							}else {
								invo.setItcType("");								
							}
						}
						
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
									|| isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)
										|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getInum())) {
										invo.setOriginalInvoiceNo(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
										|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getInum())) {
										invo.setOriginalInvoiceNo(((GSTR1) invoice).getCdnur().get(0).getInum());
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(((GSTR1) invoice).getCdnur().get(0).getIdt());
									}
								}
								
								if(docType.equalsIgnoreCase("C")) {
									invo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotisgt = ctotisgt-item.getIgstamount();
											}else {
												totisgt = totisgt-item.getIgstamount();
											}
										}
										//System.out.println("C --->"+totisgt);
									}
									if(isNotEmpty(item.getExmepted())) {
										invo.setExemptedVal(-item.getExmepted());
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctottaxable = ctottaxable-item.getTaxablevalue();
											}else {
												tottaxable = tottaxable-item.getTaxablevalue();
											}
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotcsgt = ctotcsgt-item.getCgstamount();
											}else {
												totcsgt = totcsgt-item.getCgstamount();
											}
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotssgt = ctotssgt-item.getSgstamount();
											}else {
												totssgt = totssgt-item.getSgstamount();
											}
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotcess = ctotcess-item.getCessamount();
											}else {
												totcess = totcess-item.getCessamount();
											}
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctottotal = ctottotal-item.getTotal();
											}else {
												tottotal = tottotal-item.getTotal();
											}
										}
									}
									
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotisgt = ctotisgt+item.getIgstamount();
											}else {
												totisgt = totisgt+item.getIgstamount();
											}
										}
										//System.out.println("D --->"+totisgt);
									}
									if(isNotEmpty(item.getExmepted())) {
										invo.setExemptedVal(item.getExmepted());
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctottaxable = ctottaxable+item.getTaxablevalue();
											}else {
												tottaxable = tottaxable+item.getTaxablevalue();
											}
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotcsgt = ctotcsgt+item.getCgstamount();
											}else {
												totcsgt = totcsgt+item.getCgstamount();
											}
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotssgt = ctotssgt+item.getSgstamount();
											}else {
												totssgt = totssgt+item.getSgstamount();
											}
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotcess = ctotcess+item.getCessamount();
											}else {
												totcess = totcess+item.getCessamount();
											}
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctottotal = ctottotal+item.getTotal();
											}else {
												tottotal = tottotal+item.getTotal();
											}
										}
									}
									
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotisgt = ctotisgt+item.getIgstamount();
											}else {
												totisgt = totisgt+item.getIgstamount();
											}
										}
									}
									if(isNotEmpty(item.getExmepted())) {
										invo.setExemptedVal(item.getExmepted());
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctottaxable = ctottaxable+item.getTaxablevalue();
											}else {
												tottaxable = tottaxable+item.getTaxablevalue();
											}
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotcsgt = ctotcsgt+item.getCgstamount();
											}else {
												totcsgt = totcsgt+item.getCgstamount();
											}
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotssgt = ctotssgt+item.getSgstamount();
											}else {
												totssgt = totssgt+item.getSgstamount();
											}
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctotcess = ctotcess+item.getCessamount();
											}else {
												totcess = totcess+item.getCessamount();
											}
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(!refids.contains(invoice.getId().toString())){
											if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
												ctottotal = ctottotal+item.getTotal();
											}else {
												tottotal = tottotal+item.getTotal();
											}
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else if(isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.TXPA))){
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(-item.getIgstamount());
									if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
									}
									//System.out.println("C --->"+totisgt);
								}
								if(isNotEmpty(item.getExmepted())) {
									invo.setExemptedVal(-item.getExmepted());
								}
								if (isNotEmpty(item.getAdvadjustedAmount())) {
									invo.setTaxableValue(-item.getAdvadjustedAmount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable-item.getAdvadjustedAmount();
									}else {
										tottaxable = tottaxable-item.getAdvadjustedAmount();
									}}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(-item.getCgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt-item.getCgstamount();
									}else {
										totcsgt = totcsgt-item.getCgstamount();
									}}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(-item.getSgstamount());
									if(!refids.contains(invoice.getId().toString())){if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt-item.getSgstamount();
									}else {
										totssgt = totssgt-item.getSgstamount();
									}}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(-item.getCessamount());
									if(!refids.contains(invoice.getId().toString())){if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess-item.getCessamount();
									}else {
										totcess = totcess-item.getCessamount();
									}}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(-item.getTotal());
									if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
								}
								
								invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}}
								}
								if(isNotEmpty(item.getExmepted())) {
									invo.setExemptedVal(item.getExmepted());
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}}
								}
								if (isNotEmpty(item.getCessamount())) {
									
									invo.setCessAmount(item.getCessamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}}
								}
								
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
								
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())) {
										docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getInum())) {
										invo.setOriginalInvoiceNo(invoice.getCdn().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(invoice.getCdn().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(invoice.getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(invoice.getCdnur().get(0).getInum())) {
										invo.setOriginalInvoiceNo(invoice.getCdnur().get(0).getInum());
									}
									if(isNotEmpty(invoice.getCdnur().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(invoice.getCdnur().get(0).getIdt());
									}
								}
								
								if(docType.equalsIgnoreCase("C")) {
									invo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}
								}
								
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR4)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getInum())) {
										invo.setOriginalInvoiceNo(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(((GSTR4)invoice).getCdnur().get(0).getNtty())) {
										docType = ((GSTR4)invoice).getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnur().get(0).getInum())) {
										invo.setOriginalInvoiceNo(((GSTR4) invoice).getCdnur().get(0).getInum());
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnur().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(((GSTR4) invoice).getCdnur().get(0).getIdt());
									}
								}
								
								if(docType.equalsIgnoreCase("C")) {
									invo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
										//System.out.println("C --->"+totisgt);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
										//System.out.println("D --->"+totisgt);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}
								}
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR5)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getInum())) {
										invo.setOriginalInvoiceNo(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(((GSTR5)invoice).getCdnur().get(0).getNtty())) {
										docType = ((GSTR5)invoice).getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnur().get(0).getInum())) {
										invo.setOriginalInvoiceNo(((GSTR5) invoice).getCdnur().get(0).getInum());
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnur().get(0).getIdt())) {
										invo.setOriginalInvoiceDate(((GSTR5) invoice).getCdnur().get(0).getIdt());
									}
								}
								if(docType.equalsIgnoreCase("C")) {
									invo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
										//System.out.println("C --->"+totisgt);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
										//System.out.println("D --->"+totisgt);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}
								}
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else {
							if (isNotEmpty(item.getIgstamount())) {
								invo.setIgstAmount(item.getIgstamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotisgt = ctotisgt+item.getIgstamount();
								}else {
									totisgt = totisgt+item.getIgstamount();
								}}
							}
							if (isNotEmpty(item.getTaxablevalue())) {
								invo.setTaxableValue(item.getTaxablevalue());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottaxable = ctottaxable+item.getTaxablevalue();
								}else {
									tottaxable = tottaxable+item.getTaxablevalue();
								}}
							}
							if(isNotEmpty(item.getFreeQty())) {
								invo.setFreeQty(item.getFreeQty());
							}
							if(isNotEmpty(item.getAssAmt())) {
								invo.setAssAmt(item.getAssAmt());
								totAss  = totAss+item.getAssAmt();
							}
							if(isNotEmpty(item.getStateCess())) {
								invo.setStateCess(item.getStateCess());
								totStateCess  = totStateCess + item.getStateCess();
							}
							if(isNotEmpty(item.getCessNonAdvol())) {
								invo.setCessnonAdvol(item.getCessNonAdvol());
								totCessNonAdvol  = totCessNonAdvol + item.getCessNonAdvol();
							}
							if (isNotEmpty(item.getCgstamount())) {
								invo.setCgstAmount(item.getCgstamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotcsgt = ctotcsgt+item.getCgstamount();
								}else {
									totcsgt = totcsgt+item.getCgstamount();
								}}
							}
							if (isNotEmpty(item.getSgstamount())) {
								invo.setSgstAmount(item.getSgstamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotssgt = ctotssgt+item.getSgstamount();
								}else {
									totssgt = totssgt+item.getSgstamount();
								}}
							}
							if (isNotEmpty(item.getCessamount())) {
								invo.setCessAmount(item.getCessamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotcess = ctotcess+item.getCessamount();
								}else {
									totcess = totcess+item.getCessamount();
								}}
							}
							if(isNotEmpty(item.getTotal())){
								invo.setTotalValue(item.getTotal());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottotal = ctottotal+item.getTotal();
								}else {
									tottotal = tottotal+item.getTotal();
								}}
							}
							invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
						}
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
								if(isNotEmpty(invoice.getCdn().get(0).getCfs())) {
									if("Y".equalsIgnoreCase(invoice.getCdn().get(0).getCfs())) {
										invo.setCounterFilingStatus("Filed");
									}else {
										invo.setCounterFilingStatus("Pending");
									}
								}else {
									invo.setCounterFilingStatus("Pending");
								}
							}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2B)) {
								if(isNotEmpty(invoice.getB2b().get(0).getCfs())) {
									if("Y".equalsIgnoreCase(invoice.getB2b().get(0).getCfs())) {
										invo.setCounterFilingStatus("Filed");
									}else {
										invo.setCounterFilingStatus("Pending");
									}
								}else {
									invo.setCounterFilingStatus("Pending");
								}
							}
						}
						double totalitc = 0d;
						if (isNotEmpty(item.getIgstavltax())) {
							invo.setIgstTax(item.getIgstavltax());
							totalitc += item.getIgstavltax();
						}
						if (isNotEmpty(item.getCgstrate())) {
							invo.setCgstRate(item.getCgstrate());
						}
						if (isNotEmpty(item.getCgstavltax())) {
							invo.setCgstTax(item.getCgstavltax());
							totalitc += item.getCgstavltax();
						}
						if (isNotEmpty(item.getSgstrate())) {
							invo.setSgstRate(item.getSgstrate());
						}
						if (isNotEmpty(item.getSgstavltax())) {
							invo.setSgstTax(item.getSgstavltax());
							totalitc += item.getSgstavltax();
						}
						if (isNotEmpty(item.getCessrate())) {
							invo.setCessRate(item.getCessrate());
						}
						if (isNotEmpty(item.getCessavltax())) {
							invo.setCessTax(item.getCessavltax());
							totalitc += item.getCessavltax();
						}
						
						double ineligibleitc = 0d;
						double totalitctax = item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount();
						ineligibleitc = totalitctax - totalitc;
						
						if(isNotEmpty(item.getQuantity())){
							invo.setQuantity(item.getQuantity());
						}
						if(isNotEmpty(item.getUqc())){
							invo.setUqc(item.getUqc());
						}
						if(isNotEmpty(item.getHsn())){
							invo.setHsnCode(item.getHsn());
						}
						if(isNotEmpty(item.getRateperitem())){
							invo.setRateperitem(item.getRateperitem());
						}
						if(isNotEmpty(item.getCategory())){
							invo.setCategory(item.getCategory());
						}
						if (isNotEmpty(invoice.getStatename())) {
							invo.setState(invoice.getStatename());
						}
						if (isNotEmpty(invoice.getInvoiceno())) {
							invo.setInvoiceNo(invoice.getInvoiceno());
						}
						invo.setInvoiceDate(invoice.getDateofinvoice());
						invo.setReturnPeriod(invoice.getFp());
						if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR)
								|| isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA)) {
							String docType = "";
							if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
								if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
										|| isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA)){
									if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)
											|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
										if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
											docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
										}
									}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
											|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
										if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
											docType = invoice.getCdnur().get(0).getNtty();
										}
									}
								}
							}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
									if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
										if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())) {
											docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
										}
									}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
										if(isNotEmpty(invoice.getCdnur().get(0).getNtty())) {
											docType = invoice.getCdnur().get(0).getNtty();
										}
									}
								}
							}
							if("C".equals(docType)) {
								invo.setType("Credit Note");
								invo.setTotalItc(-totalitc);
								invo.setTotalinItc(-ineligibleitc);
							}else if("D".equals(docType)) {
								invo.setType("Debit Note");
								invo.setTotalItc(totalitc);
								invo.setTotalinItc(ineligibleitc);
							}else {
								invo.setType(invoice.getInvtype());
								invo.setTotalItc(totalitc);
								invo.setTotalinItc(ineligibleitc);
							}
						}else {
							invo.setType(invoice.getInvtype());
							invo.setTotalItc(totalitc);
							invo.setTotalinItc(ineligibleitc);
						}	
						
						
						if(invo.getGstStatus().equalsIgnoreCase("Cancelled")) {
							invoiceVOCancelledList.add(invo);
						}else {
							invoiceVOList.add(invo);
						}
					}
				}
					if(isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR)
							|| invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA))) {
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
									|| isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
								}
								if("C".equals(docType)) {
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax-invoice.getTotaltax();
									}else {
										tottax = tottax-invoice.getTotaltax();
									}}
								}else {
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax+invoice.getTotaltax();
									}else {
										tottax = tottax+invoice.getTotaltax();
									}}
								}
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
								
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())) {
										docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(invoice.getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
								}
								if("C".equals(docType)) {
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax-invoice.getTotaltax();
									}else {
										tottax = tottax-invoice.getTotaltax();
									}
								}else {
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax+invoice.getTotaltax();
									}else {
										tottax = tottax+invoice.getTotaltax();
									}
								}
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR4)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(((GSTR4)invoice).getCdnur().get(0).getNtty())) {
										docType = ((GSTR4)invoice).getCdnur().get(0).getNtty();
									}
								}
								if("C".equals(docType)) {
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax-invoice.getTotaltax();
									}else {
										tottax = tottax-invoice.getTotaltax();
									}
								}else {
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax+invoice.getTotaltax();
									}else {
										tottax = tottax+invoice.getTotaltax();
									}
								}
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR5)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(((GSTR5)invoice).getCdnur().get(0).getNtty())) {
										docType = ((GSTR5)invoice).getCdnur().get(0).getNtty();
									}
								}
								if("C".equals(docType)) {
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax-invoice.getTotaltax();
									}else {
										tottax = tottax-invoice.getTotaltax();
									}
								}else {
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottax = ctottax+invoice.getTotaltax();
									}else {
										tottax = tottax+invoice.getTotaltax();
									}
								}
							}
						}
					}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)  || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.TXPA)){
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
							if(!refids.contains(invoice.getId().toString())){if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
								ctottax = ctottax-invoice.getTotaltax();
							}else {
								tottax = tottax-invoice.getTotaltax();
							}}
						}else {
							if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
								ctottax = ctottax+invoice.getTotaltax();
							}else {
								tottax = tottax+invoice.getTotaltax();
							}
						}
					}else {
						if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
							ctottax = ctottax+invoice.getTotaltax();
						}else {
							tottax = tottax+invoice.getTotaltax();
						}
					}
			}
		}
		InvoiceVO totalinvo = new InvoiceVO();
		totalinvo.setIgstAmount(totisgt);
		totalinvo.setCgstAmount(totcsgt);
		totalinvo.setSgstAmount(totssgt);
		totalinvo.setCessAmount(totcess);
		totalinvo.setTotaltax(tottax);
		totalinvo.setTaxableValue(tottaxable);
		if(isNotEmpty(totAss)) {
			totalinvo.setAssAmt(totAss);
		}
		if(isNotEmpty(totStateCess)) {
			totalinvo.setStateCess(totStateCess);
		}
		if(isNotEmpty(totCessNonAdvol)) {
			totalinvo.setCessnonAdvol(totCessNonAdvol);
		}
		totalinvo.setTotalValue(tottotal);
		invoiceVOList.add(totalinvo);
		if(invoiceVOCancelledList.size() > 0) {
			InvoiceVO emptyinvo = new InvoiceVO();
			InvoiceVO emptyinvo1 = new InvoiceVO();
			emptyinvo1.setCompanyStatename("Cancelled Invoices");
			invoiceVOList.add(emptyinvo);
			invoiceVOList.add(emptyinvo1);
			invoiceVOList.addAll(invoiceVOCancelledList);
			InvoiceVO ctotalinvo = new InvoiceVO();
			ctotalinvo.setIgstAmount(ctotisgt);
			ctotalinvo.setCgstAmount(ctotcsgt);
			ctotalinvo.setSgstAmount(ctotssgt);
			ctotalinvo.setCessAmount(ctotcess);
			ctotalinvo.setTotaltax(ctottax);
			ctotalinvo.setTaxableValue(ctottaxable);
			ctotalinvo.setTotalValue(ctottotal);
			invoiceVOList.add(ctotalinvo);
		}
		return invoiceVOList;
	}
		
	@RequestMapping(value = "/dwnldcustomerxls/{id}/{clientid}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadCustomerExcelData(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
		}
		response.setHeader("Content-Disposition", "inline; filename=MGST_CustomerTemplate.xls");
		List<CompanyCustomers> CustomerList = profileService.getCustomers(clientid);
		List<CompanyCustomers> companycustList = customerListItems(CustomerList);
		logger.debug(companycustList);
		File file = new File("MGST_CustomerTemplate.xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
			
			headers = Arrays.asList("Business Name","Type", "GSTIN","Contact Person","Email Id","CustomerId","Mobile Number", "State","Address", "Pincode", "City","Landline Number","Country", "PAN Number", "TAN Number(PAN based)","TAN Number","Customer Notes","Credit Period","Credit Amount","Opening Balance","Bank Name","Account Number","Account Name","Branch Name","IFSC Code");
			
			SimpleExporter exporter = new SimpleExporter();
			
			exporter.gridExport(headers, companycustList,
					"name, type,gstnnumber, contactperson, email,customerId, mobilenumber, state, address,pincode,city,landline,country,customerPanNumber,customerTanPanNumber,customerTanNumber,customerterms,creditPeriod,creditAmount,openingbalance,customerBankName,customerAccountNumber,customerAccountName,customerBranchName,customerBankIfscCode",
					fos);
			
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_CustomerTemplate.xls"));
	}
	
	@RequestMapping(value = "/dwnldsupplierxls/{id}/{clientid}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadSupplierExcelData(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
		}
		response.setHeader("Content-Disposition", "inline; filename=MGST_SupplierTemplate.xls");
		List<CompanySuppliers> SupplierList = profileService.getSuppliers(clientid);
		List<CompanySuppliers> companysupplierList = supplierListItems(SupplierList);
		logger.debug(companysupplierList);
		File file = new File("MGST_SupplierTemplate.xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
			
			headers = Arrays.asList("Business Name","Type", "GSTIN","Contact Person","Email Id","supplierCustomerId","Mobile Number", "State","Address", "Pincode", "City","Landline Number","Country", "PAN Number", "TAN Number(PAN based)","TAN Number","Supplier Notes","Fax Number","Full Time Employees","Company Reg No","Date Of Inception","Nature Of Expertise","TurnOver","Programs And Certf","Applicability Of Micro,Small,Medium","Beneficiary Name","Bank Name","Branch Address","Account Number"," IFSC Code","Account Type","MICR Code");
			
			SimpleExporter exporter = new SimpleExporter();
			
			exporter.gridExport(headers, companysupplierList,
					"name, type,gstnnumber, contactperson, email,supplierCustomerId, mobilenumber, state, address,pincode,city,landline,country,supplierPanNumber,supplierTanPanNumber,supplierTanNumber,supplierterms,faxNo,fulltimeEmployees,companyRegNo,dateofInception,natuteOfExpertise,turnover,programsAndCert,applicability,beneficiaryName,bankName,branchAddress,accountNumber,ifscCode,accountType,micrCode",
					fos);
			
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_SupplierTemplate.xls"));
	}
	
	public List<CompanyCustomers> customerListItems(List<CompanyCustomers> customers){
		List<CompanyCustomers> customerList = Lists.newArrayList();
		if(isNotEmpty(customers)) {
			for(CompanyCustomers customer : customers) {
				CompanyCustomers compcustomers = new CompanyCustomers();
				if(isNotEmpty(customer.getName())) {
					compcustomers.setName(customer.getName());
				}
				if(isNotEmpty(customer.getAddress())) {
					compcustomers.setAddress(customer.getAddress());
				}
				if(isNotEmpty(customer.getGstnnumber())) {
					compcustomers.setGstnnumber(customer.getGstnnumber());
				}
				if(isNotEmpty(customer.getContactperson())) {
					compcustomers.setContactperson(customer.getContactperson());
				}
				if(isNotEmpty(customer.getCity())) {
					compcustomers.setCity(customer.getCity());
				}
				if(isNotEmpty(customer.getAddress())) {
					compcustomers.setAddress(customer.getAddress());
				}
				if(isNotEmpty(customer.getPincode())) {
					compcustomers.setPincode(customer.getPincode());
				}
				if(isNotEmpty(customer.getEmail())) {
					compcustomers.setEmail(customer.getEmail());
				}
				if(isNotEmpty(customer.getLandline())) {
					compcustomers.setLandline(customer.getLandline());
				}
				if(isNotEmpty(customer.getType())) {
					compcustomers.setType(customer.getType());
				}
				if(isNotEmpty(customer.getFullname())) {
					compcustomers.setFullname(customer.getFullname());
				}
				if(isNotEmpty(customer.getMobilenumber())) {
					compcustomers.setMobilenumber(customer.getMobilenumber());
				}
				if(isNotEmpty(customer.getState())) {
					compcustomers.setState(customer.getState());
				}
				if(isNotEmpty(customer.getCustomerId())) {
					compcustomers.setCustomerId(customer.getCustomerId());
				}
				if(isNotEmpty(customer.getCustomerAccountName())) {
					compcustomers.setCustomerAccountName(customer.getCustomerAccountName());
				}
				if(isNotEmpty(customer.getCustomerAccountNumber())) {
					compcustomers.setCustomerAccountNumber(customer.getCustomerAccountNumber());
				}
				if(isNotEmpty(customer.getCustomerBankIfscCode())) {
					compcustomers.setCustomerBankIfscCode(customer.getCustomerBankIfscCode());
				}
				if(isNotEmpty(customer.getCustomerBankName())) {
					compcustomers.setCustomerBankName(customer.getCustomerBankName());
				}
				if(isNotEmpty(customer.getCustomerBranchName())) {
					compcustomers.setCustomerBranchName(customer.getCustomerBranchName());
				}
				if(isNotEmpty(customer.getCustomerPanNumber())) {
					compcustomers.setCustomerPanNumber(customer.getCustomerPanNumber());
				}
				if(isNotEmpty(customer.getCustomerTanNumber())) {
					compcustomers.setCustomerTanNumber(customer.getCustomerTanNumber());
				}
				if(isNotEmpty(customer.getCustomerTanPanNumber())) {
					compcustomers.setCustomerTanPanNumber(customer.getCustomerTanPanNumber());
				}
				if(isNotEmpty(customer.getCustomerBankName())) {
					compcustomers.setCustomerBankName(customer.getCustomerBankName());
				}
				if(isNotEmpty(customer.getCustomerAccountNumber())) {
					compcustomers.setCustomerAccountNumber(customer.getCustomerAccountNumber());
				}
				if(isNotEmpty(customer.getCustomerBranchName())) {
					compcustomers.setCustomerBranchName(customer.getCustomerBranchName());
				}
				if(isNotEmpty(customer.getCustomerAccountName())) {
					compcustomers.setCustomerAccountName(customer.getCustomerAccountName());
				}
				if(isNotEmpty(customer.getCustomerBankIfscCode())) {
					compcustomers.setCustomerBankIfscCode(customer.getCustomerBankIfscCode());
				}
				if(isNotEmpty(customer.getIsCustomerTermsDetails())) {
					if(isNotEmpty(customer.getCustomerterms())) {
						compcustomers.setCustomerterms(customer.getCustomerterms());
					}
				}
			}
		}
		customerList.addAll(customers);
		
		return customerList;
		
	}
	
	public List<CompanySuppliers> supplierListItems(List<CompanySuppliers> suppliers){
		List<CompanySuppliers> supplierList = Lists.newArrayList();
		if(isNotEmpty(suppliers)) {
			for(CompanySuppliers supplier : suppliers) {
				CompanySuppliers compcustomers = new CompanySuppliers();
				if(isNotEmpty(supplier.getName())) {
					compcustomers.setName(supplier.getName());
				}
				if(isNotEmpty(supplier.getAddress())) {
					compcustomers.setAddress(supplier.getAddress());
				}
				if(isNotEmpty(supplier.getGstnnumber())) {
					compcustomers.setGstnnumber(supplier.getGstnnumber());
				}
				if(isNotEmpty(supplier.getContactperson())) {
					compcustomers.setContactperson(supplier.getContactperson());
				}
				if(isNotEmpty(supplier.getCity())) {
					compcustomers.setCity(supplier.getCity());
				}
				if(isNotEmpty(supplier.getAddress())) {
					compcustomers.setAddress(supplier.getAddress());
				}
				if(isNotEmpty(supplier.getPincode())) {
					compcustomers.setPincode(supplier.getPincode());
				}
				if(isNotEmpty(supplier.getEmail())) {
					compcustomers.setEmail(supplier.getEmail());
				}
				if(isNotEmpty(supplier.getLandline())) {
					compcustomers.setLandline(supplier.getLandline());
				}
				if(isNotEmpty(supplier.getType())) {
					compcustomers.setType(supplier.getCity());
				}
				if(isNotEmpty(supplier.getFullname())) {
					compcustomers.setFullname(supplier.getFullname());
				}
				if(isNotEmpty(supplier.getMobilenumber())) {
					compcustomers.setMobilenumber(supplier.getMobilenumber());
				}
				if(isNotEmpty(supplier.getState())) {
					compcustomers.setState(supplier.getState());
				}
				if(isNotEmpty(supplier.getSupplierCustomerId())) {
					compcustomers.setSupplierCustomerId(supplier.getSupplierCustomerId());
				}
				
				if(isNotEmpty(supplier.getSupplierPanNumber())) {
					compcustomers.setSupplierPanNumber(supplier.getSupplierPanNumber());
				}
				if(isNotEmpty(supplier.getSupplierTanNumber())) {
					compcustomers.setSupplierTanNumber(supplier.getSupplierTanNumber());
				}
				if(isNotEmpty(supplier.getSupplierTanPanNumber())) {
					compcustomers.setSupplierTanPanNumber(supplier.getSupplierTanPanNumber());
				}
				if(isNotEmpty(supplier.getFaxNo())) {
					compcustomers.setFaxNo(supplier.getFaxNo());
				}
				if(isNotEmpty(supplier.getCompanyRegNo())) {
					compcustomers.setCompanyRegNo(supplier.getCompanyRegNo());
				}
				if(isNotEmpty(supplier.getFulltimeEmployees())) {
					compcustomers.setFulltimeEmployees(supplier.getFulltimeEmployees());
				}
				if(isNotEmpty(supplier.getDateofInception())) {
					compcustomers.setDateofInception(supplier.getDateofInception());
				}
				if(isNotEmpty(supplier.getNatuteOfExpertise())) {
					compcustomers.setNatuteOfExpertise(supplier.getNatuteOfExpertise());
				}
				if(isNotEmpty(supplier.getTurnover())) {
					compcustomers.setTurnover(supplier.getTurnover());
				}
				if(isNotEmpty(supplier.getProgramsAndCert())) {
					compcustomers.setProgramsAndCert(supplier.getProgramsAndCert());
				}
				if(isNotEmpty(supplier.getApplicability())) {
					compcustomers.setApplicability(supplier.getApplicability());
				}
				if(isNotEmpty(supplier.getBeneficiaryName())) {
					compcustomers.setBeneficiaryName(supplier.getBeneficiaryName());
				}
				if(isNotEmpty(supplier.getAccountNumber())) {
					compcustomers.setAccountNumber(supplier.getAccountNumber());
				}
				if(isNotEmpty(supplier.getAccountType())) {
					compcustomers.setAccountType(supplier.getAccountType());
				}
				if(isNotEmpty(supplier.getBankName())) {
					compcustomers.setBankName(supplier.getBankName());
				}
				if(isNotEmpty(supplier.getBranchAddress())) {
					compcustomers.setBranchAddress(supplier.getBranchAddress());
				}
				if(isNotEmpty(supplier.getIfscCode())) {
					compcustomers.setIfscCode(supplier.getIfscCode());
				}
				if(isNotEmpty(supplier.getMicrCode())) {
					compcustomers.setMicrCode(supplier.getMicrCode());
				}
				
				if(isNotEmpty(supplier.getIsSupplierTermsDetails())) {
					if(isNotEmpty(supplier.getSupplierterms())) {
						compcustomers.setSupplierterms(supplier.getSupplierterms());
					}
				}	
			}
		}
		supplierList.addAll(suppliers);
		
		return supplierList;
		
	}
	
	
	@RequestMapping(value = "/getselectedclientinvoicesmonthly/{returntype}/{listofclients}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getAdminSalesReportMonthlyInvoices(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);

		Page<? extends InvoiceParent> invoices = clientService.getAdminGroupReportInvoicesMonthly(null,returntype, listofclients,
				month, year);
		if (isNotEmpty(invoices)) {
			for (InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer = null;

		FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter",
				SimpleBeanPropertyFilter.serializeAll());
		writer = mapper.writer(filters);
		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/getgstr1selectedclientinvoicesmonthly/{returntype}/{listofclients}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getAdminGSTR1ReportMonthlyInvoices(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);

		Page<? extends InvoiceParent> invoices = clientService.getGSTR1AdminGroupReportInvoicesMonthly(null,returntype, listofclients,
				month, year);
		if (isNotEmpty(invoices)) {
			for (InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer = null;

		FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter",
				SimpleBeanPropertyFilter.serializeAll());
		writer = mapper.writer(filters);
		return writer.writeValueAsString(invoices.getContent());
	}

	@RequestMapping(value = "/getselectedclientinvoicesyearly/{returntype}/{listofclients}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getAdminSalesYearlyInvoices(@PathVariable("listofclients") List<String> listofclients,
			@PathVariable String returntype, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);

		Page<? extends InvoiceParent> invoices = clientService.getAdminGroupReportInvoicesYearly(null,returntype, listofclients,
				year);
		if (isNotEmpty(invoices)) {
			for (InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}

		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer = null;
		FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter",
				SimpleBeanPropertyFilter.serializeAll());
		writer = mapper.writer(filters);

		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/getgstr1selectedclientinvoicesyearly/{returntype}/{listofclients}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getGSTR1AdminSalesYearlyInvoices(@PathVariable("listofclients") List<String> listofclients,
			@PathVariable String returntype, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);

		Page<? extends InvoiceParent> invoices = clientService.getGSTR1AdminGroupReportInvoicesYearly(null,returntype, listofclients,
				year);
		if (isNotEmpty(invoices)) {
			for (InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}

		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer = null;
		FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter",
				SimpleBeanPropertyFilter.serializeAll());
		writer = mapper.writer(filters);

		return writer.writeValueAsString(invoices.getContent());
	}

	@RequestMapping(value = "/getselectedclientinvoicescustom/{returntype}/{listofclients}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody String getAdminSalesCustomInvoices(@PathVariable("listofclients") List<String> listofclients,
			@PathVariable String returntype, @PathVariable("fromtime") String fromtime, @PathVariable("totime") String totime, ModelMap model,
			HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Page<? extends InvoiceParent> invoices = clientService.getAdminGroupReportInvoicesCustom(null,returntype, listofclients,
				fromtime, totime);
		if (isNotEmpty(invoices)) {
			for (InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer = null;
		FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter",
				SimpleBeanPropertyFilter.serializeAll());
		writer = mapper.writer(filters);
		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/getgstr1selectedclientinvoicescustom/{returntype}/{listofclients}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody String getGSTR1AdminSalesCustomInvoices(@PathVariable("listofclients") List<String> listofclients,
			@PathVariable String returntype, @PathVariable("fromtime") String fromtime, @PathVariable("totime") String totime, ModelMap model,
			HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Page<? extends InvoiceParent> invoices = clientService.getGSTR1AdminGroupReportInvoicesCustom(null,returntype, listofclients,
				fromtime, totime);
		if (isNotEmpty(invoices)) {
			for (InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer = null;
		FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter",SimpleBeanPropertyFilter.serializeAll());
		writer = mapper.writer(filters);
		return writer.writeValueAsString(invoices.getContent());
	}
		
	@RequestMapping(value = "/gstr3bstatus/{userid}/{clientid}/{finacialyear}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR3BDownloadStatus> gstr3bDownloadStatus(@PathVariable("userid") String userid,
			@PathVariable("clientid") String clientid, @PathVariable("finacialyear") String finacialyear)
			throws Exception {
		final String method = "gstr3bDownloadStatus::";
		logger.debug(CLASSNAME + method + BEGIN);

		List<GSTR3BDownloadStatus> data = gstr3BDowloadService.findAllData(userid, clientid, finacialyear);
		logger.debug(CLASSNAME + method + END);
		return data;
	}

	@RequestMapping(value = "/gstr2bstatus/{userid}/{clientid}/{finacialyear}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR2ADownloadStatus> gstr2ADownloadStatus(@PathVariable("userid") String userid,
			@PathVariable("clientid") String clientid, @PathVariable("finacialyear") String finacialyear)
			throws Exception {
		final String method = "gstr2ADownloadStatus::";
		logger.debug(CLASSNAME + method + BEGIN);

		List<GSTR2ADownloadStatus> data = gstr2ADowloadService.findAllData(userid, clientid, finacialyear);
		logger.debug(CLASSNAME + method + END);
		return data;
	}
	
	@RequestMapping(value = "/gstr1status/{userid}/{clientid}/{finacialyear}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR1DownloadStatus> gstr1DownloadStatus(@PathVariable("userid") String userid,
			@PathVariable("clientid") String clientid, @PathVariable("finacialyear") String finacialyear)
			throws Exception {
		final String method = "gstr1DownloadStatus::";
		logger.debug(CLASSNAME + method + BEGIN);

		List<GSTR1DownloadStatus> data = gstr1DowloadService.findAllData(userid, clientid, finacialyear);
		logger.debug(CLASSNAME + method + END);
		return data;
	}
	
	@RequestMapping(value = "/returndownloadstatus/{userid}/{clientid}/{returntype}/{financialyear}", method = RequestMethod.GET)
	public @ResponseBody List<ReturnsDownloadStatus> returnsDownloadStatus(@PathVariable("userid") String userid,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, @PathVariable("financialyear") String financialyear)
			throws Exception {
		final String method = "returnsDownloadStatus::";
		logger.debug(CLASSNAME + method + BEGIN);

		List<ReturnsDownloadStatus> data = returnsDownloadStatusService.findAllData(userid, clientid, returntype, financialyear);
		logger.debug(CLASSNAME + method + END);
		return data;
	}

	@RequestMapping(value = "/dwnldgstr2Asummary/{userid}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody GSTR2ADownloadStatus dwnldGstr2ASummary(@PathVariable("userid") String userid,
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "dwnldxls3b::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		Client client = clientService.findById(clientid);
	
		ClientStatus clientStatus = clientService.getClientStatus(clientid, MasterGSTConstants.GSTR2A, strMonth + year);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		String dwndstatus_gstr2a=null;
		User user = userService.findById(userid);
		String usrid = userid;
		if (NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())) {
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if (isNotEmpty(companyUser.getCompany())) {
					if (companyUser.getCompany().contains(clientid)) {
						usrid = user.getParentid();
					}
				}
			}
		}
		String userids = userid(userid,clientid);
		if (!subscriptionService.allowUploadInvoices(userids, 1l)) {
			if (usrid.equals(user.getParentid())) {
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);;
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				model.addAttribute("error",	errormsg);
			} else {
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else {
			String[] invTypes = { MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD,
					MasterGSTConstants.B2BA, MasterGSTConstants.CDNA, MasterGSTConstants.IMP_GOODS,MasterGSTConstants.IMPGSEZ };
			for (String invType : invTypes) {
				dwndstatus_gstr2a=performDownloadGSTR2AData(client, invType, retPeriod, clientid, userid, month, year);
			}
		}
		List<GSTR2ADownloadStatus> gstr2ADownloadStatuss = gstr2ADowloadService.getGSTR2ADownloadStatus(userid, clientid,retPeriod);
		gstr2ADowloadService.deleteGSTR2ADownloadStatus(gstr2ADownloadStatuss);
		
		GSTR2ADownloadStatus gstr2ADownloadStatus = new GSTR2ADownloadStatus();
			gstr2ADownloadStatus.setClientid(clientid);
			gstr2ADownloadStatus.setUserid(userid);
			gstr2ADownloadStatus.setStatus("DOWNLOAD");
			gstr2ADownloadStatus.setReturnperiod(retPeriod);
			gstr2ADownloadStatus.setFinancialyear(year + "");
			gstr2ADownloadStatus.setCurrrentmonth(strMonth);
			if("DATA_FOUND".equals(dwndstatus_gstr2a)) {
				gstr2ADownloadStatus.setInvoicedata("invoices available");
			}else {
				gstr2ADownloadStatus.setInvoicedata("invoices not available");
			}
			gstr2ADowloadService.savedownloadstatus(gstr2ADownloadStatus);			
			logger.debug(CLASSNAME + method + END);

			return gstr2ADownloadStatus;
	}

	@Async
	private void performReconcile(Client client, String invType, String fp, String clientid, String userid, int month,
			int year) {

		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		List<GSTR2ADownloadStatus> gstr2ADownloadStatus = gstr2ADowloadService.getGSTR2ADownloadStatus(userid, clientid,retPeriod);
		try {
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				InvoiceParent gstr2a = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(), month, year, MasterGSTConstants.GSTR2A, invType, null, userid, true);
				logger.debug(CLASSNAME + "performReconcile : gstr2a\t" + gstr2a);
				if (isNotEmpty(gstr2a)) {
					List<String> matchingIds = Lists.newArrayList();
					if(invType.equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
						List<GSTR2> gstr2ainvs = gstr2Dao.findByClientidAndInvoiceTypeAndMonthAndYearIMPG(clientid, retPeriod, invType);
						
						if(isNotEmpty(gstr2ainvs)) {
							gstr2ainvs.forEach(inv -> {
									matchingIds.add(inv.getId().toString());
							});
							delinkPurchaseRegisterMatchingIds(matchingIds);
						}
						gstr2Repository.delete(gstr2ainvs);
					}else if(invType.equalsIgnoreCase(MasterGSTConstants.IMPGSEZ)){
						List<GSTR2> gstr2ainvs = gstr2Dao.findByClientidAndInvoiceTypeAndMonthAndYearIMPG(clientid, retPeriod, invType);
						if(isNotEmpty(gstr2ainvs)) {
							gstr2ainvs.forEach(inv -> {
									matchingIds.add(inv.getId().toString());
							});
							delinkPurchaseRegisterMatchingIds(matchingIds);
						}
						gstr2Repository.delete(gstr2ainvs);
					}else {
						List<GSTR2> gstr2ainvs = gstr2Repository.findByClientidAndFpAndInvtype(clientid, retPeriod, invType);
						//List<GSTR2> gstr2ainvs = gstr2Repository.findByClientidAndFpAndIsAmendmentAndInvtype(clientid,retPeriod,true,invType);
						if(isNotEmpty(gstr2ainvs)) {
							gstr2ainvs.forEach(inv -> {
								matchingIds.add(inv.getId().toString());
							});
							delinkPurchaseRegisterMatchingIds(matchingIds);
						}
						gstr2Repository.delete(gstr2ainvs);
					}
					gstr2a.setUserid(userid);
					gstr2a.setClientid(clientid);
					gstr2a.setAmendment(true);
					clientService.updateGSTR2AReturnData(gstr2a, invType, client.getGstnnumber(), clientid, fp, month, year);
					
					gstr2ADowloadService.deleteGSTR2ADownloadStatus(gstr2ADownloadStatus);
						GSTR2ADownloadStatus status = new GSTR2ADownloadStatus();
						status.setUserid(userid);
						status.setClientid(clientid);
						status.setReturnperiod(retPeriod);
						status.setStatus("DOWNLOAD");
						status.setFinancialyear(year + "");
						status.setCurrrentmonth(strMonth);
						status.setInvoicedata("invoices available");
						gstr2ADowloadService.savedownloadstatus(status);
					
				}
			}
		} catch (MasterGSTException exp) {
			// model.addAttribute("error", exp.getMessage());
		}

	}
	@Async
	private void delinkPurchaseRegisterMatchingIds(List<String> matchingIds) {
		
		if(isNotEmpty(matchingIds)) {
			int length = 500;
			for(int i = 0; i < Integer.MAX_VALUE ; i++) {
				Pageable pageable = new PageRequest(0, length);
				Page<PurchaseRegister> invoices = purchaseRepository.findByMatchingIdIn(matchingIds, pageable);
				
				if(isEmpty(invoices.getContent())) {
					break;
				}
				List<PurchaseRegister> prList = Lists.newArrayList();
				for(PurchaseRegister inv : invoices) {
					inv.setMatchingId(null);
					inv.setMatchingStatus(null);
					inv.setMannualMatchInvoices(null);
					prList.add(inv);
				}
				int batchCount = 2000;
				if(prList.size() > batchCount) {
					int index = 0;
					while((prList.size()-index) > batchCount) {
						List<PurchaseRegister> subList = prList.subList(index, index+batchCount);
						purchaseRepository.save(subList);
						index=index+batchCount;
					}
					purchaseRepository.save(prList.subList(index, prList.size()));
				} else {
					purchaseRepository.save(prList);
				}
			}
		}
	}

	@RequestMapping(value = "/dwnldgstr3bsummary/{userid}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody GSTR3BDownloadStatus dwnldGstr3bSummary(@PathVariable("userid") String userid,
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model) throws Exception {
		final String method = "dwnldxls3b::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;

		Client client = clientService.findById(clientid);
		Response response = null;
		if (isNotEmpty(client)) {
			GSTR3B gstr3b = new GSTR3B();
			try {
				response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, userid, GSTR3B,
						true);
				if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
					if (isNotEmpty(response.getData().getSupDetails())) {
						gstr3b.setSupDetails(response.getData().getSupDetails());
					}
					if (isNotEmpty(response.getData().getInterSup())) {
						gstr3b.setInterSup(response.getData().getInterSup());
					}
					if (isNotEmpty(response.getData().getInwardSup())) {
						gstr3b.setInwardSup(response.getData().getInwardSup());
					}
					if (isNotEmpty(response.getData().getItcElg())) {
						gstr3b.setItcElg(response.getData().getItcElg());
					}
					if (isNotEmpty(response.getData().getIntrLtfee())
							&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
						gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
					}
					if (isNotEmpty(response.getData().getTaxPymt())) {
						gstr3b.setOffLiab(new GSTR3BOffsetLiability());
						if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
							gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
						}
						if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
							gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
						}
						if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
							gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
						}
					}
				} else {
					GSTR3BDetails itcAvlIMPG = new GSTR3BDetails();
					itcAvlIMPG.setTy("IMPG");
					gstr3b.getItcElg().getItcAvl().add(itcAvlIMPG);
					GSTR3BDetails itcAvlIMPS = new GSTR3BDetails();
					itcAvlIMPS.setTy("IMPS");
					gstr3b.getItcElg().getItcAvl().add(itcAvlIMPS);
					GSTR3BDetails itcAvlISRC = new GSTR3BDetails();
					itcAvlISRC.setTy("ISRC");
					gstr3b.getItcElg().getItcAvl().add(itcAvlISRC);
					GSTR3BDetails itcAvlISD = new GSTR3BDetails();
					itcAvlISD.setTy("ISD");
					gstr3b.getItcElg().getItcAvl().add(itcAvlISD);
					GSTR3BDetails itcAvlOTH = new GSTR3BDetails();
					itcAvlOTH.setTy("OTH");
					gstr3b.getItcElg().getItcAvl().add(itcAvlOTH);

					GSTR3BDetails itcRevRUL = new GSTR3BDetails();
					itcRevRUL.setTy("RUL");
					gstr3b.getItcElg().getItcRev().add(itcRevRUL);
					GSTR3BDetails itcRevOTH = new GSTR3BDetails();
					itcRevOTH.setTy("OTH");
					gstr3b.getItcElg().getItcRev().add(itcRevOTH);

					GSTR3BDetails itcInElgRUL = new GSTR3BDetails();
					itcInElgRUL.setTy("RUL");
					gstr3b.getItcElg().getItcInelg().add(itcInElgRUL);
					GSTR3BDetails itcInElgOTH = new GSTR3BDetails();
					itcInElgOTH.setTy("OTH");
					gstr3b.getItcElg().getItcInelg().add(itcInElgOTH);

					GSTR3BDetails intrDetails = new GSTR3BDetails();
					gstr3b.getIntrLtfee().setIntrDetails(intrDetails);
				}
				String returnPeriod = strMonth + year;
				gstr3b.setRetPeriod(returnPeriod);
				gstr3b.setGstin(client.getGstnnumber());
				gstr3b.setCreatedDate(new Date());
				gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);

			} catch (Exception e) {
				logger.error(CLASSNAME + method + " ERROR", e);
				model.addAttribute("error", e.getMessage());
			}
		}
		
		List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(userid,clientid, retPeriod);
		gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
		
			GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
			status.setUserid(userid);
			status.setClientid(clientid);
			status.setReturnperiod(retPeriod);
			status.setStatus("DOWNLOAD");
			status.setFinancialyear(year + "");
			status.setCurrrentmonth(strMonth);
			gstr3BDowloadService.savedownloadstatus(status);
		
		
			return status;
	}

	@Async
	@RequestMapping(value ="/sendmessages/{clientid}/{userid}", method = RequestMethod.POST)
	public @ResponseBody void sendMessages(@RequestBody Messages messageData,@PathVariable("clientid") String clientid, 
			@PathVariable("userid") String userid,@RequestParam(value = "invoiceIds", required = true) List<String> invoiceIds) throws MasterGSTException {
		Messages messages = null;
		Client client = clientService.findById(clientid);
		User user = userRepository.findOne(userid);
		String fullname = "";
		if(isNotEmpty(user) && isNotEmpty(user.getFullname())) {
			fullname = user.getFullname();
		}
		messages = new Messages();
		messages.setClientid(clientid);
		messages.setSubject(messageData.getSubject());
		messages.setMessages(messageData.getMessages());
		messages.setSuplierName(messageData.getSuplierName());
		messages.setUserid(userid);
		messages.setEmailid(messageData.getEmailid());
		messages.setCc(messageData.getCc());
    	clientService.saveMessages(messages);
    	InvoiceParent invoiceparent =null;
    	Map<String,String> clientDetails = Maps.newHashMap();
    	if(isNotEmpty(client)) {
    		if(isNotEmpty(client.getBusinessname())) {
    			clientDetails.put("clientName", client.getBusinessname());
    		}
    		if(isNotEmpty(client.getEmail())) {
    			clientDetails.put("clientEmail", client.getEmail());
    		}else {
    			clientDetails.put("clientEmail", "");
    		}
    		if(isNotEmpty(client.getMobilenumber())) {
    			clientDetails.put("clientMobileNumber",client.getMobilenumber());
    		}else {
    			clientDetails.put("clientMobileNumber","");
    		}
    	}
    	Map<String, List<SendMsgsSummary>> invmap = Maps.newHashMap();
    	String placeofSupply="";
    	for(String invids : invoiceIds) {
    		SupplierComments supComments = new SupplierComments();
    		supComments.setInvoiceid(invids);
    		supComments.setClientid(clientid);
    		supComments.setUserid(userid);
    		supComments.setCommentDate(new Date());
    		supComments.setSupcomments(messageData.getMessages());
    		supComments.setAddedby(fullname);
    		clientService.saveSupplierComments(supComments);
    		
    		List<SendMsgsSummary> invsummary=new ArrayList<SendMsgsSummary>();
    	 invoiceparent = clientService.recordPaymentDetais(invids, "GSTR2");
    	 SendMsgsSummary ssum= new SendMsgsSummary();
    	 if(isNotEmpty(invoiceparent)) {
    		 if(isNotEmpty(invoiceparent.getStatename())) {
    			 placeofSupply=invoiceparent.getStatename();
    		 }else {
    			 placeofSupply="";
    		 }
    		 ssum.setType("Purchase Register");
	    	 Date date = invoiceparent.getDateofinvoice();  
	    	 DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");  
	    	 ssum.setInvType(invoiceparent.getInvtype());
	    	 if(isNotEmpty(invoiceparent.getBilledtoname())) {
	    		 ssum.setSupplierName(invoiceparent.getBilledtoname());
	    	 }
	    	 ssum.setGstin(invoiceparent.getB2b().get(0).getCtin());
	    	 String strDate = dateFormat.format(date);  
	    	 ssum.setInvNo(invoiceparent.getInvoiceno());
	    	 ssum.setInvDate(strDate);
	    	 ssum.setTaxableAmt(invoiceparent.getTotaltaxableamount());
	    	 if(isNotEmpty(invoiceparent.getTotalIgstAmount())) {
	    		 ssum.setTotalIGSTAmt(invoiceparent.getTotalIgstAmount());
	    	 }else {
	    		 ssum.setTotalIGSTAmt(0d);
	    	 }
	    	 if(isNotEmpty(invoiceparent.getTotalCgstAmount())) {
	    		 ssum.setTotalCGSTAmt(invoiceparent.getTotalCgstAmount());
	    	 }else {
	    		 ssum.setTotalCGSTAmt(0d);
	    	 }
	    	 if(isNotEmpty(invoiceparent.getTotalSgstAmount())) {
	    		 ssum.setTotalSGSTAmt(invoiceparent.getTotalSgstAmount());
	    	 }else {
	    		 ssum.setTotalSGSTAmt(0d);
	    	 }
	    	 ssum.setTotalTaxAmt(invoiceparent.getTotaltax());
	    	 ssum.setTotalAmt(invoiceparent.getTotalamount());
	    	 invsummary.add(ssum);
	    	 if(isNotEmpty(invoiceparent.getMatchingId())) {
	    		 InvoiceParent gstr2ainv= gstr2Repository.findOne(invoiceparent.getMatchingId());
	    		 SendMsgsSummary gstr2asum= new SendMsgsSummary();
	        	 if(isNotEmpty(gstr2ainv)) {
	        		 gstr2asum.setType("GSTR 2A");
	    	    	  date = gstr2ainv.getDateofinvoice();  
	    	    	  dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	    	    	  gstr2asum.setInvType(gstr2ainv.getInvtype());
	    	    	 if(isNotEmpty(gstr2ainv.getBilledtoname())) {
	    	    		 gstr2asum.setSupplierName(gstr2ainv.getBilledtoname());
	    	    	 }
	    	    	 gstr2asum.setGstin(gstr2ainv.getB2b().get(0).getCtin());
	    	    	  strDate = dateFormat.format(date);  
	    	    	  gstr2asum.setInvNo(gstr2ainv.getInvoiceno());
	    	    	 gstr2asum.setInvDate(strDate);
	    	    	 gstr2asum.setTaxableAmt(gstr2ainv.getTotaltaxableamount());
	    	    	 gstr2asum.setTotalTaxAmt(gstr2ainv.getTotaltax());
	    	    	 if(isNotEmpty(gstr2ainv.getTotalIgstAmount())) {
	    	    		 gstr2asum.setTotalIGSTAmt(gstr2ainv.getTotalIgstAmount());
	    	    	 }else {
	    	    		 gstr2asum.setTotalIGSTAmt(0d);
	    	    	 }
	    	    	 if(isNotEmpty(gstr2ainv.getTotalCgstAmount())) {
	    	    		 gstr2asum.setTotalCGSTAmt(gstr2ainv.getTotalCgstAmount());
	    	    	 }else {
	    	    		 gstr2asum.setTotalCGSTAmt(0d);
	    	    	 }
	    	    	 if(isNotEmpty(gstr2ainv.getTotalSgstAmount())) {
	    	    		 gstr2asum.setTotalSGSTAmt(gstr2ainv.getTotalSgstAmount());
	    	    	 }else {
	    	    		 gstr2asum.setTotalSGSTAmt(0d);
	    	    	 }
	    	    	 gstr2asum.setTotalAmt(gstr2ainv.getTotalamount());
	    	    	 invsummary.add(gstr2asum);
	        	 }
	    		 
	    		 
	    	 }
	    	 invmap.put(invoiceparent.getInvoiceno(), invsummary);
    	 }
    	
    	}
    	  for(String mail : messageData.getEmailid()) {
    		  emailService.sendEnrollEmail(mail, VmUtil.velocityTemplate("supplieremail.vm", invmap, placeofSupply,clientDetails,messageData.getSuplierName(),messageData.getMessages()),messageData.getSubject(),messageData.getCc());
    	  }
	}
	@RequestMapping(value="/invoice_details/{retutntype}", method = RequestMethod.POST)
	public @ResponseBody Map<String, List<InvoiceParent>> getInvoiceParentData(@RequestBody List<SendMessageVO> records,@PathVariable String retutntype) {
		Map<String, List<InvoiceParent>> map = Maps.newHashMap();
		List<InvoiceParent> inv =Lists.newArrayList();
		InvoiceParent invoiceparent=null;InvoiceParent invparent=null;
		CompanySuppliers cmpy_supplier=null;
		CompanySuppliers cmpysuppliers=new CompanySuppliers();
		
		if (isNotEmpty(records)) {
			for (SendMessageVO record : records) {
				if(isNotEmpty(record.getInvId())) {	
					invoiceparent = clientService.recordPaymentDetais(record.getInvId(), retutntype);
					if(isNotEmpty(invoiceparent)) {
						invoiceparent.setRevchargetype(invoiceparent.getId().toString());
						if(isNotEmpty(invoiceparent) && isNotEmpty(invoiceparent.getBilledtoname()) && isNotEmpty(invoiceparent.getClientid())) {
							cmpy_supplier=profileService.getCompanySupplierData( invoiceparent.getClientid(), invoiceparent.getBilledtoname());
						}
						if(isNotEmpty(cmpy_supplier) && isNotEmpty(cmpy_supplier.getName())) {
							invoiceparent.setToAddr1(cmpy_supplier.getName());
						}
						if(isNotEmpty(cmpy_supplier) && isNotEmpty(cmpy_supplier.getEmail())) {
							invoiceparent.setToAddr2(cmpy_supplier.getEmail());
						}
						invoiceparent.setReferenceNumber("BOOKS");
						inv.add(invoiceparent);
					}
				}
				if(isNotEmpty(invoiceparent) && isNotEmpty(invoiceparent.getMatchingId())) {
					invparent = clientService.getInvoice(invoiceparent.getMatchingId(), "GSTR2");
					if(isNotEmpty(invoiceparent)) {
						invparent.setRevchargetype(invparent.getId().toString());
						invparent.setReferenceNumber("GSTR2A");
						inv.add(invparent);
					}
				}
			}
		}
		map.put("invoice",inv);
		return map;
	}
	
	
	@RequestMapping(value = "/get2a_vs_2Yearly/{id}/{clientid}/{year}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR2A_VS_GSTR2> getGSTR2A_vs_GSTR2_Yearly(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid,@PathVariable("year") int year, ModelMap model,
			HttpServletRequest request) {
		final String method = "getGSTR2A_vs_GSTR2_Details::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		/**
		 * don't remove this document ,,if any changes it is useful.
		 * GSTR2A --> PurchaseRegister
		 * GSTR2 --> GSTR2
		 */
		
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data(clientid,id,year,"year","year");

		return GSTR2A_VS_GSTR2Lst;
	}
	
	@RequestMapping(value = "/get2a_vs_2Custom/{id}/{clientid}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR2A_VS_GSTR2> getGSTR2A_vs_GSTR2Custom(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid,@PathVariable("fromtime") String fromtime,@PathVariable("totime") String totime, ModelMap model,
			HttpServletRequest request) {
		final String method = "getGSTR2A_vs_GSTR2_Details::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		/**
		 * don't remove this document ,if any changes it is useful.
		 * GSTR2A --> PurchaseRegister
		 * GSTR2 --> GSTR2
		 */
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data(clientid,id,0,fromtime,totime);
		
		return GSTR2A_VS_GSTR2Lst;
	}
	
	// Download Excels Purchase Register vs GSTR2
	
	@RequestMapping(value = "/get2a_vs_2Yearly_dwnldExcel/{id}/{clientid}/{year}", method = RequestMethod.GET,produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelGSTR2A_vs_GSTR2_Yearly(@PathVariable("id") String id, 
			@PathVariable("clientid") String clientid, @PathVariable("year") int year, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

		response.setHeader("Content-Disposition","inline; filename='MGST_GSTR2A_vs_GSTR2_" + year + ".xls");
		
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data(clientid,id,year,"year","year");
		
		logger.debug(GSTR2A_VS_GSTR2Lst);
		File file = new File("MGST_GSTR2A_vs_GSTR2_" + year + ".xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = Arrays.asList("GSTIN of Supplier", "Name of Supplier",
					"Invoice Value", "Taxable Value", "IGST", "CGST", "S/UT GST",
					"Invoice Value", "Taxable Value", "IGST", "CGST", "S/UT GST",
					"Invoice Value", "Taxable Value", "IGST", "CGST", "S/UT GST");

			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, GSTR2A_VS_GSTR2Lst,
					"gstin, fullname, gstr2AInvoiceValue, gstr2ATaxValue, gstr2AIGSTValue, gstr2ACGSTValue, gstr2ASGSTValue, gstr2InvoiceValue, gstr2TaxValue, gstr2IGSTValue, gstr2CGSTValue, gstr2SGSTValue, diffInvoiceValue, diffTaxValue, diffIGSTValue, diffCGSTValue, diffSGSTValue",
					fos);

			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_GSTR2A_vs_GSTR2__" + year + ".xls"));
	}
	

	@RequestMapping(value = "/get2a_vs_2Custom_dwnldExcel/{id}/{clientid}/{fromtime}/{totime}", method = RequestMethod.GET,produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelGSTR2A_vs_GSTR2_Custom(@PathVariable("id") String id, 
			@PathVariable("clientid") String clientid, @PathVariable("fromtime") String fromtime,@PathVariable("totime") String totime, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

		response.setHeader("Content-Disposition","inline; filename='MGST_GSTR2A_vs_GSTR2_" +fromtime+'_'+ totime + ".xls");
		
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data(clientid,id,0,fromtime,totime);
		
		logger.debug(GSTR2A_VS_GSTR2Lst);
		File file = new File("MGST_GSTR2A_vs_GSTR2_" +fromtime+'_'+ totime + ".xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = Arrays.asList("GSTIN of Supplier", "Name of Supplier",
					"Invoice Value", "Taxable Value", "IGST", "CGST ", "S/UT GST ",	"Invoice Value", "Taxable Value", "IGST", "CGST ", "S/UT GST ", "Invoice Value",
					"Taxable Value", "IGST", "CGST ", "S/UT GST ");

			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, GSTR2A_VS_GSTR2Lst,
					"gstin, fullname, gstr2AInvoiceValue, gstr2ATaxValue,gstr2AIGSTValue,gstr2ACGSTValue,gstr2ASGSTValue,gstr2InvoiceValue, gstr2TaxValue, gstr2IGSTValue, gstr2CGSTValue, gstr2SGSTValue,  diffInvoiceValue, diffTaxValue, diffIGSTValue, diffCGSTValue, diffSGSTValue",
					fos);

			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(
				new File("MGST_GSTR2A_vs_GSTR2__" +fromtime+'_'+ totime + ".xls"));
	}
	
	
	public List<GSTR2A_VS_GSTR2> comparision_GSTR2A_vs_GSTR2_Data(String clientid, String id, int year, String fromtime,
			String totime) {

		Client client = clientService.findById(clientid);
		Pageable pageable = null;
		/**
		 * don't remove this document ,if any changes it is useful. GSTR2A -->
		 * PurchaseRegister GSTR2 --> GSTR2
		 */
		Page<? extends InvoiceParent> purchase_register = null;
		Page<? extends InvoiceParent> gstr2 = null;
		if (fromtime.equalsIgnoreCase("year") && fromtime.equalsIgnoreCase("year")) {
			purchase_register = clientService.getGSTR2A_VS_GSTR2YearlyInvoices(pageable, clientid, MasterGSTConstants.PURCHASE_REGISTER, year);
			gstr2 = clientService.getGSTR2A_VS_GSTR2YearlyInvoices(pageable, clientid, MasterGSTConstants.GSTR2, year);

		} else {
			purchase_register = clientService.getGSTR2A_VS_GSTR2CustomInvoices(null, clientid, MasterGSTConstants.PURCHASE_REGISTER, totime, fromtime);
			gstr2 = clientService.getGSTR2A_VS_GSTR2CustomInvoices(null, clientid, MasterGSTConstants.GSTR2, totime, fromtime);
		}

		Map<String, GSTR2A_VS_GSTR2> pregisterMap = new LinkedHashMap<String, GSTR2A_VS_GSTR2>();
		Map<String, GSTR2A_VS_GSTR2> gstr2Map = new LinkedHashMap<String, GSTR2A_VS_GSTR2>();

		if (isNotEmpty(purchase_register)) {
			for (InvoiceParent parent : purchase_register) {
				double gstr2ATotalIGSTValue = 0d;
				double gstr2ATotalCGSTValue = 0d;
				double gstr2ATotalSGSTValue = 0d;
				if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
					if (pregisterMap.containsKey(parent.getB2b().get(0).getCtin())) {

						GSTR2A_VS_GSTR2 pr_data = pregisterMap.get(parent.getB2b().get(0).getCtin());
						if (isNotEmpty(parent.getBilledtoname())) {
							pr_data.setFullname(parent.getBilledtoname());
						}
						if (isNotEmpty(parent.getInvtype())) {
							if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(parent.getInvtype())) {
								if (isNotEmpty(parent.getCdn().get(0).getNt().get(0).getNtty())) {
									if ("C".equalsIgnoreCase(parent.getCdn().get(0).getNt().get(0).getNtty())) {
										pr_data.setGstr2AInvoiceValue(pr_data.getGstr2AInvoiceValue() - parent.getTotalamount());
										pr_data.setGstr2ATaxValue(pr_data.getGstr2ATaxValue() - parent.getTotaltaxableamount());
										for (Item item : parent.getItems()) {
											if (isNotEmpty(item.getIgstamount())) {
												pr_data.setGstr2AIGSTValue(pr_data.getGstr2AIGSTValue() - item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												pr_data.setGstr2ACGSTValue(pr_data.getGstr2ACGSTValue() - item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												pr_data.setGstr2ASGSTValue(pr_data.getGstr2ASGSTValue() - item.getSgstamount());
											}
										}
									} else {
										pr_data.setGstr2AInvoiceValue(pr_data.getGstr2AInvoiceValue() + parent.getTotalamount());
										pr_data.setGstr2ATaxValue(pr_data.getGstr2ATaxValue() + parent.getTotaltaxableamount());
										for (Item item : parent.getItems()) {
											if (isNotEmpty(item.getIgstamount())) {
												pr_data.setGstr2AIGSTValue(pr_data.getGstr2AIGSTValue() + item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												pr_data.setGstr2ACGSTValue(pr_data.getGstr2ACGSTValue() + item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												pr_data.setGstr2ASGSTValue(pr_data.getGstr2ASGSTValue() + item.getSgstamount());
											}
										}
									}
								}
							} else {
								pr_data.setGstr2AInvoiceValue(pr_data.getGstr2AInvoiceValue() + parent.getTotalamount());
								pr_data.setGstr2ATaxValue(pr_data.getGstr2ATaxValue() + parent.getTotaltaxableamount());
								
								if (isNotEmpty(parent.getBilledtoname())) {
									pr_data.setFullname(parent.getBilledtoname());
								}
								for (Item item : parent.getItems()) {
									if (isNotEmpty(item.getIgstamount())) {
										pr_data.setGstr2AIGSTValue(pr_data.getGstr2AIGSTValue() + item.getIgstamount());
									}
									if (isNotEmpty(item.getCgstamount())) {
										pr_data.setGstr2ACGSTValue(pr_data.getGstr2ACGSTValue() + item.getCgstamount());
									}
									if (isNotEmpty(item.getSgstamount())) {
										pr_data.setGstr2ASGSTValue(pr_data.getGstr2ASGSTValue() + item.getSgstamount());
									}
								}
							}
						}

						pregisterMap.put(parent.getB2b().get(0).getCtin(), pr_data);
					} else {
						GSTR2A_VS_GSTR2 pregistr = new GSTR2A_VS_GSTR2();
						if (isNotEmpty(parent.getBilledtoname())) {
							pregistr.setFullname(parent.getBilledtoname());
						}
						if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(parent.getInvtype())) {
							if (isNotEmpty(parent.getCdn().get(0).getNt().get(0).getNtty())) {
								if ("C".equalsIgnoreCase(parent.getCdn().get(0).getNt().get(0).getNtty())) {
									
									if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
										pregistr.setGstin(parent.getB2b().get(0).getCtin());
									}
									if (isNotEmpty(parent.getTotaltaxableamount())) {
										pregistr.setGstr2ATaxValue(-parent.getTotaltaxableamount());
									}
									if (isNotEmpty(parent.getTotalamount())) {
										pregistr.setGstr2AInvoiceValue(-parent.getTotalamount());
									}
									for (Item item : parent.getItems()) {
										if (isNotEmpty(item.getIgstamount())) {
											gstr2ATotalIGSTValue += item.getIgstamount();
										}
										if (isNotEmpty(item.getCgstamount())) {
											gstr2ATotalCGSTValue += item.getCgstamount();
										}

										if (isNotEmpty(item.getSgstamount())) {
											gstr2ATotalSGSTValue += item.getSgstamount();
										}
									}
									pregistr.setGstr2AIGSTValue(-gstr2ATotalIGSTValue);
									pregistr.setGstr2ACGSTValue(-gstr2ATotalCGSTValue);
									pregistr.setGstr2ASGSTValue(-gstr2ATotalSGSTValue);
								} else {
									if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
										pregistr.setGstin(parent.getB2b().get(0).getCtin());
									}
									if (isNotEmpty(parent.getTotaltaxableamount())) {
										pregistr.setGstr2ATaxValue(parent.getTotaltaxableamount());
									}
									if (isNotEmpty(parent.getTotalamount())) {
										pregistr.setGstr2AInvoiceValue(parent.getTotalamount());
									}
									for (Item item : parent.getItems()) {
										if (isNotEmpty(item.getIgstamount())) {
											gstr2ATotalIGSTValue += item.getIgstamount();
										}
										if (isNotEmpty(item.getCgstamount())) {
											gstr2ATotalCGSTValue += item.getCgstamount();
										}

										if (isNotEmpty(item.getSgstamount())) {
											gstr2ATotalSGSTValue += item.getSgstamount();
										}
									}
									pregistr.setGstr2AIGSTValue(gstr2ATotalIGSTValue);
									pregistr.setGstr2ACGSTValue(gstr2ATotalCGSTValue);
									pregistr.setGstr2ASGSTValue(gstr2ATotalSGSTValue);
								}
							}
						} else {
							if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
								pregistr.setGstin(parent.getB2b().get(0).getCtin());
							}
							if (isNotEmpty(parent.getTotaltaxableamount())) {
								pregistr.setGstr2ATaxValue(parent.getTotaltaxableamount());
							}
							if (isNotEmpty(parent.getTotalamount())) {
								pregistr.setGstr2AInvoiceValue(parent.getTotalamount());
							}
							for (Item item : parent.getItems()) {
								if (isNotEmpty(item.getIgstamount())) {
									gstr2ATotalIGSTValue += item.getIgstamount();
								}
								if (isNotEmpty(item.getCgstamount())) {
									gstr2ATotalCGSTValue += item.getCgstamount();
								}

								if (isNotEmpty(item.getSgstamount())) {
									gstr2ATotalSGSTValue += item.getSgstamount();
								}
							}
							pregistr.setGstr2AIGSTValue(gstr2ATotalIGSTValue);
							pregistr.setGstr2ACGSTValue(gstr2ATotalCGSTValue);
							pregistr.setGstr2ASGSTValue(gstr2ATotalSGSTValue);
						}
						pregisterMap.put(parent.getB2b().get(0).getCtin(), pregistr);
					}
				}

			}
		}
		if (isNotEmpty(gstr2)) {
			for (InvoiceParent parent : gstr2) {
				double gstr2TotalIGSTValue = 0d;
				double gstr2TotalCGSTValue = 0d;
				double gstr2TotalSGSTValue = 0d;
				if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
					if (gstr2Map.containsKey(parent.getB2b().get(0).getCtin())) {

						GSTR2A_VS_GSTR2 gstr2_data = gstr2Map.get(parent.getB2b().get(0).getCtin());
						if (isNotEmpty(parent.getBilledtoname())) {
							gstr2_data.setFullname(parent.getBilledtoname());
						}
						if (isNotEmpty(parent.getInvtype())) {
							if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(parent.getInvtype())) {
								if (isNotEmpty(parent.getCdn().get(0).getNt().get(0).getNtty())) {
									if ("C".equalsIgnoreCase(parent.getCdn().get(0).getNt().get(0).getNtty())) {
										gstr2_data.setGstr2InvoiceValue(gstr2_data.getGstr2InvoiceValue() - parent.getTotalamount());
										gstr2_data.setGstr2TaxValue(gstr2_data.getGstr2TaxValue() - parent.getTotaltaxableamount());
										for (Item item : parent.getItems()) {
											if (isNotEmpty(item.getIgstamount())) {
												gstr2_data.setGstr2IGSTValue(gstr2_data.getGstr2IGSTValue() - item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												gstr2_data.setGstr2CGSTValue(gstr2_data.getGstr2CGSTValue() - item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												gstr2_data.setGstr2SGSTValue(gstr2_data.getGstr2SGSTValue() - item.getSgstamount());
											}
										}
									} else {
										gstr2_data.setGstr2InvoiceValue(gstr2_data.getGstr2InvoiceValue() + parent.getTotalamount());
										gstr2_data.setGstr2TaxValue(gstr2_data.getGstr2TaxValue() + parent.getTotaltaxableamount());
										for (Item item : parent.getItems()) {
											if (isNotEmpty(item.getIgstamount())) {
												gstr2_data.setGstr2IGSTValue(gstr2_data.getGstr2IGSTValue() + item.getIgstamount());
											}
											if (isNotEmpty(item.getCgstamount())) {
												gstr2_data.setGstr2CGSTValue(gstr2_data.getGstr2CGSTValue() + item.getCgstamount());
											}
											if (isNotEmpty(item.getSgstamount())) {
												gstr2_data.setGstr2SGSTValue(gstr2_data.getGstr2SGSTValue() + item.getSgstamount());
											}
										}
									}
								}
							} else {
								gstr2_data.setGstr2InvoiceValue(gstr2_data.getGstr2InvoiceValue() + parent.getTotalamount());
								gstr2_data.setGstr2TaxValue(gstr2_data.getGstr2TaxValue() + parent.getTotaltaxableamount());
								for (Item item : parent.getItems()) {
									if (isNotEmpty(item.getIgstamount())) {
										gstr2_data.setGstr2IGSTValue(gstr2_data.getGstr2IGSTValue() + item.getIgstamount());
									}
									if (isNotEmpty(item.getCgstamount())) {
										gstr2_data.setGstr2CGSTValue(gstr2_data.getGstr2CGSTValue() + item.getCgstamount());
									}
									if (isNotEmpty(item.getSgstamount())) {
										gstr2_data.setGstr2SGSTValue(gstr2_data.getGstr2SGSTValue() + item.getSgstamount());
									}
								}
							}
						}
						gstr2Map.put(parent.getB2b().get(0).getCtin(), gstr2_data);
					} else {
						GSTR2A_VS_GSTR2 gstr2_data = new GSTR2A_VS_GSTR2();
						if (isNotEmpty(parent.getBilledtoname())) {
							gstr2_data.setFullname(parent.getBilledtoname());
						}
						if (MasterGSTConstants.CREDIT_DEBIT_NOTES.equalsIgnoreCase(parent.getInvtype())) {
							if (isNotEmpty(parent.getCdn().get(0).getNt().get(0).getNtty())) {
								if ("C".equalsIgnoreCase(parent.getCdn().get(0).getNt().get(0).getNtty())) {
									if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
										gstr2_data.setGstin(parent.getB2b().get(0).getCtin());
									}
									if (isNotEmpty(parent.getTotaltaxableamount())) {
										gstr2_data.setGstr2TaxValue(-parent.getTotaltaxableamount());
									}
									if (isNotEmpty(parent.getTotalamount())) {
										gstr2_data.setGstr2InvoiceValue(-parent.getTotalamount());
									}
									for (Item item : parent.getItems()) {
										if (isNotEmpty(item.getIgstamount())) {
											gstr2TotalIGSTValue += item.getIgstamount();
										}
										if (isNotEmpty(item.getCgstamount())) {
											gstr2TotalCGSTValue += item.getCgstamount();
										}

										if (isNotEmpty(item.getSgstamount())) {
											gstr2TotalSGSTValue += item.getSgstamount();
										}
									}
									gstr2_data.setGstr2IGSTValue(-gstr2TotalIGSTValue);
									gstr2_data.setGstr2CGSTValue(-gstr2TotalCGSTValue);
									gstr2_data.setGstr2SGSTValue(-gstr2TotalSGSTValue);
									gstr2Map.put(parent.getB2b().get(0).getCtin(), gstr2_data);
								} else {
									if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
										gstr2_data.setGstin(parent.getB2b().get(0).getCtin());
									}
									if (isNotEmpty(parent.getTotaltaxableamount())) {
										gstr2_data.setGstr2TaxValue(parent.getTotaltaxableamount());
									}
									if (isNotEmpty(parent.getTotalamount())) {
										gstr2_data.setGstr2InvoiceValue(parent.getTotalamount());
									}
									for (Item item : parent.getItems()) {
										if (isNotEmpty(item.getIgstamount())) {
											gstr2TotalIGSTValue += item.getIgstamount();
										}
										if (isNotEmpty(item.getCgstamount())) {
											gstr2TotalCGSTValue += item.getCgstamount();
										}

										if (isNotEmpty(item.getSgstamount())) {
											gstr2TotalSGSTValue += item.getSgstamount();
										}
									}
									gstr2_data.setGstr2IGSTValue(gstr2TotalIGSTValue);
									gstr2_data.setGstr2CGSTValue(gstr2TotalCGSTValue);
									gstr2_data.setGstr2SGSTValue(gstr2TotalSGSTValue);
									gstr2Map.put(parent.getB2b().get(0).getCtin(), gstr2_data);
								}
							}
						} else {
							if (isNotEmpty(parent.getB2b().get(0).getCtin())) {
								gstr2_data.setGstin(parent.getB2b().get(0).getCtin());
							}
							if (isNotEmpty(parent.getTotaltaxableamount())) {
								gstr2_data.setGstr2TaxValue(parent.getTotaltaxableamount());
							}
							if (isNotEmpty(parent.getTotalamount())) {
								gstr2_data.setGstr2InvoiceValue(parent.getTotalamount());
							}
							for (Item item : parent.getItems()) {
								if (isNotEmpty(item.getIgstamount())) {
									gstr2TotalIGSTValue += item.getIgstamount();
								}
								if (isNotEmpty(item.getCgstamount())) {
									gstr2TotalCGSTValue += item.getCgstamount();
								}

								if (isNotEmpty(item.getSgstamount())) {
									gstr2TotalSGSTValue += item.getSgstamount();
								}
							}
							gstr2_data.setGstr2IGSTValue(gstr2TotalIGSTValue);
							gstr2_data.setGstr2CGSTValue(gstr2TotalCGSTValue);
							gstr2_data.setGstr2SGSTValue(gstr2TotalSGSTValue);
							gstr2Map.put(parent.getB2b().get(0).getCtin(), gstr2_data);
						}
						gstr2Map.put(parent.getB2b().get(0).getCtin(), gstr2_data);
					}
				}

			}
		}
		List<String> same_invoices_numbers = new ArrayList<String>();
		List<String> pr_invoices_numbers = new ArrayList<String>();
		List<String> gstr2_invoices_numbers = new ArrayList<String>();

		pregisterMap.forEach((kpr, vpr) -> {
			if (gstr2Map.containsKey(kpr)) {
				same_invoices_numbers.add(kpr);
			} else {
				pr_invoices_numbers.add(kpr);
			}
		});
		gstr2Map.forEach((kg, vg) -> {
			if (!pregisterMap.containsKey(kg)) {
				gstr2_invoices_numbers.add(kg);
			}
		});

		List<GSTR2A_VS_GSTR2> cmprLst = new ArrayList<GSTR2A_VS_GSTR2>();

		same_invoices_numbers.forEach(num -> {
			GSTR2A_VS_GSTR2 pr_gst2 = new GSTR2A_VS_GSTR2();
			pregisterMap.forEach((kpr, vpr) -> {
				if (num.equalsIgnoreCase(kpr)) {
					pr_gst2.setFullname(vpr.getFullname());
					if (isNotEmpty(vpr.getGstin())) {
						pr_gst2.setGstin(vpr.getGstin());
					}
					pr_gst2.setGstr2AInvoiceValue(vpr.getGstr2AInvoiceValue());
					pr_gst2.setGstr2ATaxValue(vpr.getGstr2ATaxValue());
					pr_gst2.setGstr2AIGSTValue(vpr.getGstr2AIGSTValue());
					pr_gst2.setGstr2ACGSTValue(vpr.getGstr2ACGSTValue());
					pr_gst2.setGstr2ASGSTValue(vpr.getGstr2ASGSTValue());
				}
			});

			gstr2Map.forEach((kg, vg) -> {
				if (num.equalsIgnoreCase(kg)) {
					pr_gst2.setGstr2InvoiceValue(vg.getGstr2InvoiceValue());
					pr_gst2.setGstr2TaxValue(vg.getGstr2TaxValue());
					pr_gst2.setGstr2IGSTValue(vg.getGstr2IGSTValue());
					pr_gst2.setGstr2CGSTValue(vg.getGstr2CGSTValue());
					pr_gst2.setGstr2SGSTValue(vg.getGstr2SGSTValue());
				}
			});

			pr_gst2.setDiffInvoiceValue(pr_gst2.getGstr2AInvoiceValue() - pr_gst2.getGstr2InvoiceValue());
			pr_gst2.setDiffTaxValue(pr_gst2.getGstr2ATaxValue() - pr_gst2.getGstr2TaxValue());
			pr_gst2.setDiffIGSTValue(pr_gst2.getGstr2AIGSTValue() - pr_gst2.getGstr2IGSTValue());
			pr_gst2.setDiffCGSTValue(pr_gst2.getGstr2ACGSTValue() - pr_gst2.getGstr2CGSTValue());
			pr_gst2.setDiffSGSTValue(pr_gst2.getGstr2ASGSTValue() - pr_gst2.getGstr2SGSTValue());

			cmprLst.add(pr_gst2);
		});
		List<GSTR2A_VS_GSTR2> prLst = new ArrayList<GSTR2A_VS_GSTR2>();
		pr_invoices_numbers.forEach(num -> {
			GSTR2A_VS_GSTR2 pr_gst2 = new GSTR2A_VS_GSTR2();
			pregisterMap.forEach((kp, vp) -> {
				if (kp.equalsIgnoreCase(num)) {
					pr_gst2.setFullname(vp.getFullname());
					if (isNotEmpty(vp.getGstin())) {
						pr_gst2.setGstin(vp.getGstin());
					}
					pr_gst2.setGstr2AInvoiceValue(vp.getGstr2AInvoiceValue());
					pr_gst2.setGstr2ATaxValue(vp.getGstr2ATaxValue());
					pr_gst2.setGstr2AIGSTValue(vp.getGstr2AIGSTValue());
					pr_gst2.setGstr2ACGSTValue(vp.getGstr2ACGSTValue());
					pr_gst2.setGstr2ASGSTValue(vp.getGstr2ASGSTValue());
					pr_gst2.setGstr2InvoiceValue(0.0);
					pr_gst2.setGstr2TaxValue(0.0);
					pr_gst2.setGstr2IGSTValue(0.0);
					pr_gst2.setGstr2CGSTValue(0.0);
					pr_gst2.setGstr2SGSTValue(0.0);
					pr_gst2.setDiffInvoiceValue(vp.getGstr2AInvoiceValue());
					pr_gst2.setDiffTaxValue(vp.getGstr2ATaxValue());
					pr_gst2.setDiffIGSTValue(vp.getGstr2AIGSTValue());
					pr_gst2.setDiffCGSTValue(vp.getGstr2ACGSTValue());
					pr_gst2.setDiffSGSTValue(vp.getGstr2ASGSTValue());
				}
			});
			prLst.add(pr_gst2);
		});

		List<GSTR2A_VS_GSTR2> gstr2Lst = new ArrayList<GSTR2A_VS_GSTR2>();
		gstr2_invoices_numbers.forEach(num -> {
			GSTR2A_VS_GSTR2 pr_gst2 = new GSTR2A_VS_GSTR2();
			gstr2Map.forEach((kg, vg) -> {
				if (kg.equalsIgnoreCase(num)) {
					pr_gst2.setFullname(vg.getFullname());
					if (isNotEmpty(vg.getGstin())) {
						pr_gst2.setGstin(vg.getGstin());
					}
					pr_gst2.setGstr2AInvoiceValue(0.0);
					pr_gst2.setGstr2ATaxValue(0.0);
					pr_gst2.setGstr2AIGSTValue(0.0);
					pr_gst2.setGstr2ACGSTValue(0.0);
					pr_gst2.setGstr2ASGSTValue(0.0);
					pr_gst2.setGstr2InvoiceValue(vg.getGstr2InvoiceValue());
					pr_gst2.setGstr2TaxValue(vg.getGstr2TaxValue());
					pr_gst2.setGstr2IGSTValue(vg.getGstr2IGSTValue());
					pr_gst2.setGstr2CGSTValue(vg.getGstr2CGSTValue());
					pr_gst2.setGstr2SGSTValue(vg.getGstr2SGSTValue());
					pr_gst2.setDiffInvoiceValue(-vg.getGstr2InvoiceValue());
					pr_gst2.setDiffTaxValue(-vg.getGstr2TaxValue());
					pr_gst2.setDiffIGSTValue(-vg.getGstr2IGSTValue());
					pr_gst2.setDiffCGSTValue(-vg.getGstr2CGSTValue());
					pr_gst2.setDiffSGSTValue(-vg.getGstr2SGSTValue());
				}
			});
			gstr2Lst.add(pr_gst2);
		});
		cmprLst.addAll(prLst);
		cmprLst.addAll(gstr2Lst);

		return cmprLst;

	}
	
	
	
	@RequestMapping(value = "/get2a_vs_2Yearly_invoice/{id}/{clientid}/{year}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR2A_VS_GSTR2> getGSTR2A_vs_GSTR2_Yearly_invoice(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid,@PathVariable("year") int year, ModelMap model,
			HttpServletRequest request) {
		final String method = "getGSTR2A_vs_GSTR2_Details::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		/**
		 * don't remove this document ,,if any changes it is useful.
		 * GSTR2A --> PurchaseRegister
		 * GSTR2 --> GSTR2
		 */
		
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data_invoice(clientid,id,year,"year","year");

		return GSTR2A_VS_GSTR2Lst;
	}
	
	@RequestMapping(value = "/get2a_vs_2Custom_invoice/{id}/{clientid}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody List<GSTR2A_VS_GSTR2> getGSTR2A_vs_GSTR2Custom_invoice(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid,@PathVariable("fromtime") String fromtime,@PathVariable("totime") String totime, ModelMap model,
			HttpServletRequest request) {
		final String method = "getGSTR2A_vs_GSTR2Custom_invoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		/**
		 * don't remove this document ,if any changes it is useful.
		 * GSTR2A --> PurchaseRegister
		 * GSTR2 --> GSTR2
		 */
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data_invoice(clientid,id,0,fromtime,totime);
		
		return GSTR2A_VS_GSTR2Lst;
	}
	
	// Download Excels Purchase Register vs GSTR2
	
	@RequestMapping(value = "/get2a_vs_2Yearly_dwnldExcel_invoice/{id}/{clientid}/{year}", method = RequestMethod.GET,produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelGSTR2A_vs_GSTR2_Yearly_invoice(@PathVariable("id") String id, 
			@PathVariable("clientid") String clientid, @PathVariable("year") int year, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

		response.setHeader("Content-Disposition","inline; filename='MGST_GSTR2A_vs_GSTR2_" + year + ".xls");
		
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data_invoice(clientid,id,year,"year","year");
		
		logger.debug(GSTR2A_VS_GSTR2Lst);
		File file = new File("MGST_GSTR2A_vs_GSTR2_" + year + ".xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers= Arrays.asList("Invoice Date", "GSTIN of Supplier", "Name of Supplier", "Invoice Number",
					"Invoice Value", "Taxable Value", "IGST", "CGST", "S/UT GST","Invoice Number","Invoice Value", "Taxable Value", "IGST", "CGST", "S/UT GST","Invoice Number","Invoice Value", "Taxable Value", "IGST", "CGST", "S/UT GST");

			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, GSTR2A_VS_GSTR2Lst,
					"invoicedate, gstin, fullname, invoiceno, gstr2AInvoiceValue, gstr2ATaxValue,gstr2AIGSTValue,gstr2ACGSTValue,gstr2ASGSTValue, invoiceno,gstr2InvoiceValue, gstr2TaxValue, gstr2IGSTValue, gstr2CGSTValue, gstr2SGSTValue, invoiceno, diffInvoiceValue, diffTaxValue, diffIGSTValue, diffCGSTValue, diffSGSTValue"
					,fos);

			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_GSTR2A_vs_GSTR2__" + year + ".xls"));
	}
	

	@RequestMapping(value = "/get2a_vs_2Custom_dwnldExcel_invoice/{id}/{clientid}/{fromtime}/{totime}", method = RequestMethod.GET,produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelGSTR2A_vs_GSTR2_Custom_invoice(@PathVariable("id") String id, 
			@PathVariable("clientid") String clientid, @PathVariable("fromtime") String fromtime,@PathVariable("totime") String totime, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

		response.setHeader("Content-Disposition","inline; filename='MGST_GSTR2A_vs_GSTR2_" +fromtime+'_'+ totime + ".xls");
		
		List<GSTR2A_VS_GSTR2> GSTR2A_VS_GSTR2Lst=comparision_GSTR2A_vs_GSTR2_Data_invoice(clientid,id,0,fromtime,totime);
		
		logger.debug(GSTR2A_VS_GSTR2Lst);
		File file = new File("MGST_GSTR2A_vs_GSTR2_" +fromtime+'_'+ totime + ".xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = Arrays.asList("Invoice Date", "GSTIN of Supplier", "Name of Supplier", "Invoice Number",
					"Invoice Value", "Taxable Value", "IGST", "CGST ", "S/UT GST ","Invoice Number","Invoice Value", "Taxable Value", "IGST", "CGST ", "S/UT GST ","Invoice Number","Invoice Value", "Taxable Value", "IGST", "CGST ", "S/UT GST ");

			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, GSTR2A_VS_GSTR2Lst,
					"invoicedate, gstin, fullname, invoiceno, gstr2AInvoiceValue, gstr2ATaxValue,gstr2AIGSTValue,gstr2ACGSTValue,gstr2ASGSTValue,invoiceno,gstr2InvoiceValue, gstr2TaxValue, gstr2IGSTValue, gstr2CGSTValue, gstr2SGSTValue, invoiceno, diffInvoiceValue, diffTaxValue, diffIGSTValue, diffCGSTValue, diffSGSTValue",
					fos);

			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(
				new File("MGST_GSTR2A_vs_GSTR2__" +fromtime+'_'+ totime + ".xls"));
	}
	
	
	public List<GSTR2A_VS_GSTR2> comparision_GSTR2A_vs_GSTR2_Data_invoice(String clientid,String id,int year,String fromtime,String totime) {
		Pageable pageable = null;
		/**
		 * don't remove this document ,if any changes it is useful.
		 * GSTR2A --> PurchaseRegister
		 * GSTR2 --> GSTR2
		 */
		Page<? extends InvoiceParent> purchase_register=null;
		Page<? extends InvoiceParent> gstr2=null;
		if(fromtime.equalsIgnoreCase("year") && fromtime.equalsIgnoreCase("year")) {
			purchase_register = clientService.getGSTR2A_VS_GSTR2YearlyInvoices(pageable, clientid, MasterGSTConstants.PURCHASE_REGISTER, year);
			gstr2= clientService.getGSTR2A_VS_GSTR2YearlyInvoices(pageable, clientid, MasterGSTConstants.GSTR2,  year);
			
		}else {
			purchase_register = clientService.getGSTR2A_VS_GSTR2CustomInvoices(null, clientid, MasterGSTConstants.PURCHASE_REGISTER, totime, fromtime);
			gstr2 = clientService.getGSTR2A_VS_GSTR2CustomInvoices(null, clientid, MasterGSTConstants.GSTR2, totime, fromtime);
		}
		
		Map<String,GSTR2A_VS_GSTR2> pregisterMap=new LinkedHashMap<String,GSTR2A_VS_GSTR2>();
		Map<String,GSTR2A_VS_GSTR2> gstr2Map=new LinkedHashMap<String,GSTR2A_VS_GSTR2>();
		
		Double gstr2ATotalIGSTValue=0d;
		Double gstr2ATotalCGSTValue=0d;
		Double gstr2ATotalSGSTValue=0d;		
		Double gstr2TotalIGSTValue=0d;
		Double gstr2TotalCGSTValue=0d;
		Double gstr2TotalSGSTValue=0d;
		
		GSTR2A_VS_GSTR2 pregistr=null;
		if(isNotEmpty(purchase_register)) {
			for(InvoiceParent parent: purchase_register) {
				gstr2ATotalIGSTValue=0d;
				gstr2ATotalCGSTValue=0d;
				gstr2ATotalSGSTValue=0d;		
				pregistr=new GSTR2A_VS_GSTR2();
				
				if(isNotEmpty(parent.getInvoiceno()) && isNotEmpty(parent.getDateofinvoice())) {
					pregistr.setInvoiceno(parent.getInvoiceno());
					pregistr.setInvoicedate(parent.getDateofinvoice());
				}
				if(parent.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
					if(isNotEmpty(((PurchaseRegister)parent).getImpGoods()) && isNotEmpty(((PurchaseRegister)parent).getImpGoods().get(0)) && isNotEmpty(((PurchaseRegister)parent).getImpGoods().get(0).getStin())){
						pregistr.setGstin(parent.getB2b().get(0).getCtin());
					}		
				}else {
					if(isNotEmpty(parent.getB2b().get(0).getCtin())){
						pregistr.setGstin(parent.getB2b().get(0).getCtin());
					}
				}
				if(isNotEmpty(parent.getBilledtoname())){
					pregistr.setFullname(parent.getBilledtoname());
				}
				if(isNotEmpty(parent.getTotaltaxableamount())) {
					pregistr.setGstr2ATaxValue(parent.getTotaltaxableamount());
				}
				if(isNotEmpty(parent.getTotalamount())) {
					pregistr.setGstr2AInvoiceValue(parent.getTotalamount());
				}
				
				for(Item item: parent.getItems()) {
					if(isNotEmpty(item.getIgstamount())) {
						gstr2ATotalIGSTValue+=item.getIgstamount();
					}
					if(isNotEmpty(item.getCgstamount())) {
						gstr2ATotalCGSTValue+=item.getCgstamount();
					}

					if(isNotEmpty(item.getSgstamount())) {
						gstr2ATotalSGSTValue+=item.getSgstamount();
					}
				}
				pregistr.setGstr2AIGSTValue(gstr2ATotalIGSTValue);
				pregistr.setGstr2ACGSTValue(gstr2ATotalCGSTValue);
				pregistr.setGstr2ASGSTValue(gstr2ATotalSGSTValue);
				String ip = "";
				if(parent.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
					if(isNotEmpty(((PurchaseRegister)parent).getImpGoods()) && isNotEmpty(((PurchaseRegister)parent).getImpGoods().get(0)) && isNotEmpty(((PurchaseRegister)parent).getImpGoods().get(0).getStin())){
						ip = parent.getInvoiceno()+"-"+((PurchaseRegister)parent).getImpGoods().get(0).getStin()+"-"+new SimpleDateFormat("dd-MM-yyyy").format(parent.getDateofinvoice());
					}
				}else {
					ip = parent.getInvoiceno()+"-"+parent.getB2b().get(0).getCtin()+"-"+new SimpleDateFormat("dd-MM-yyyy").format(parent.getDateofinvoice());
				}
				
				pregisterMap.put(ip,pregistr);
			}
		}
		
		GSTR2A_VS_GSTR2 gstr_2=null;
		if(isNotEmpty(gstr2)) {
			for(InvoiceParent parent: gstr2) {
				gstr2TotalIGSTValue=0d;
				gstr2TotalCGSTValue=0d;
				gstr2TotalSGSTValue=0d;
				gstr_2=new GSTR2A_VS_GSTR2();
				
				if(isNotEmpty(parent.getInvoiceno()) && isNotEmpty(parent.getDateofinvoice())) {
					gstr_2.setInvoiceno(parent.getInvoiceno());
					gstr_2.setInvoicedate(parent.getDateofinvoice());
				}
				if(parent.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
					if(isNotEmpty(((GSTR2)parent).getImpGoods()) && isNotEmpty(((GSTR2)parent).getImpGoods().get(0)) && isNotEmpty(((GSTR2)parent).getImpGoods().get(0).getStin())){
							gstr_2.setGstin(((GSTR2)parent).getImpGoods().get(0).getStin());
					}
				}else {	
					if(isNotEmpty(parent.getB2b().get(0).getCtin())){
						gstr_2.setGstin(parent.getB2b().get(0).getCtin());
					}
				}
				if(isNotEmpty(parent.getBilledtoname())){
					gstr_2.setFullname(parent.getBilledtoname());
				}
				if(isNotEmpty(parent.getTotaltaxableamount())) {
					gstr_2.setGstr2TaxValue(parent.getTotaltaxableamount());
				}
				if(isNotEmpty(parent.getTotalamount())) {
					gstr_2.setGstr2InvoiceValue(parent.getTotalamount());
				}
				
				for(Item item: parent.getItems()) {
					if(isNotEmpty(item.getIgstamount())) {
						gstr2TotalIGSTValue+=item.getIgstamount();
					}
					if(isNotEmpty(item.getCgstamount())) {
						gstr2TotalCGSTValue+=item.getCgstamount();
					}
					if(isNotEmpty(item.getSgstamount())) {
						gstr2TotalSGSTValue+=item.getSgstamount();
					}
				}
				gstr_2.setGstr2IGSTValue(gstr2TotalIGSTValue);
				gstr_2.setGstr2CGSTValue(gstr2TotalCGSTValue);
				gstr_2.setGstr2SGSTValue(gstr2TotalSGSTValue);
				String ip = "";
				if(parent.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
					if(isNotEmpty(((GSTR2)parent).getImpGoods()) && isNotEmpty(((GSTR2)parent).getImpGoods().get(0)) && isNotEmpty(((GSTR2)parent).getImpGoods().get(0).getStin())){
						ip = parent.getInvoiceno()+"-"+((GSTR2)parent).getImpGoods().get(0).getStin()+"-"+new SimpleDateFormat("dd-MM-yyyy").format(parent.getDateofinvoice());
					}
				}else {
					ip = parent.getInvoiceno()+"-"+parent.getB2b().get(0).getCtin()+"-"+new SimpleDateFormat("dd-MM-yyyy").format(parent.getDateofinvoice());
				}	
				
				gstr2Map.put(ip,gstr_2);
			}
		}
		
		List<String> same_invoices_numbers=new ArrayList<String>();
		List<String> pr_invoices_numbers=new ArrayList<String>();
		List<String> gstr2_invoices_numbers=new ArrayList<String>();
		
		pregisterMap.forEach((kpr,vpr)->{
			if(gstr2Map.containsKey(kpr)){
				same_invoices_numbers.add(kpr);
			}else {
				pr_invoices_numbers.add(kpr);
			}
		});
		gstr2Map.forEach((kg,vg)->{
			if(!pregisterMap.containsKey(kg)){
				gstr2_invoices_numbers.add(kg);
			}
		});
		
		List<GSTR2A_VS_GSTR2> cmprLst=new ArrayList<GSTR2A_VS_GSTR2>();

		same_invoices_numbers.forEach(num->{
			GSTR2A_VS_GSTR2 pr_gst2=new GSTR2A_VS_GSTR2();
			pregisterMap.forEach((kpr,vpr)->{
				if(num.equalsIgnoreCase(kpr)) {
					pr_gst2.setFullname(vpr.getFullname());
					if(isNotEmpty(vpr.getGstin())) {
						pr_gst2.setGstin(vpr.getGstin());
					}
					pr_gst2.setInvoiceno(vpr.getInvoiceno());
					pr_gst2.setInvoicedate(vpr.getInvoicedate());
					pr_gst2.setGstr2AInvoiceValue(vpr.getGstr2AInvoiceValue());
					pr_gst2.setGstr2ATaxValue(vpr.getGstr2ATaxValue());
					pr_gst2.setGstr2AIGSTValue(vpr.getGstr2AIGSTValue());
					pr_gst2.setGstr2ACGSTValue(vpr.getGstr2ACGSTValue());
					pr_gst2.setGstr2ASGSTValue(vpr.getGstr2ASGSTValue());
				}
			});
			
			gstr2Map.forEach((kg,vg)->{
				if(num.equalsIgnoreCase(kg)) {
					pr_gst2.setGstr2InvoiceValue(vg.getGstr2InvoiceValue());
					pr_gst2.setGstr2TaxValue(vg.getGstr2TaxValue());
					pr_gst2.setGstr2IGSTValue(vg.getGstr2IGSTValue());
					pr_gst2.setGstr2CGSTValue(vg.getGstr2CGSTValue());
					pr_gst2.setGstr2SGSTValue(vg.getGstr2SGSTValue());
				}			
			});
			
			pr_gst2.setDiffInvoiceValue(pr_gst2.getGstr2AInvoiceValue()-pr_gst2.getGstr2InvoiceValue());
			pr_gst2.setDiffTaxValue(pr_gst2.getGstr2ATaxValue()-pr_gst2.getGstr2TaxValue());
			pr_gst2.setDiffIGSTValue(pr_gst2.getGstr2AIGSTValue()-pr_gst2.getGstr2IGSTValue());
			pr_gst2.setDiffCGSTValue(pr_gst2.getGstr2ACGSTValue()-pr_gst2.getGstr2CGSTValue());
			pr_gst2.setDiffSGSTValue(pr_gst2.getGstr2ASGSTValue()-pr_gst2.getGstr2SGSTValue());
			
			cmprLst.add(pr_gst2);
		});
		List<GSTR2A_VS_GSTR2> prLst=new ArrayList<GSTR2A_VS_GSTR2>();
		pr_invoices_numbers.forEach(num->{
			GSTR2A_VS_GSTR2 pr_gst2=new GSTR2A_VS_GSTR2();
			pregisterMap.forEach((kp,vp)->{
				if(kp.equalsIgnoreCase(num)) {
					pr_gst2.setFullname(vp.getFullname());
					if(isNotEmpty(vp.getGstin())) {
						pr_gst2.setGstin(vp.getGstin());
					}
					pr_gst2.setInvoiceno(vp.getInvoiceno());
					pr_gst2.setInvoicedate(vp.getInvoicedate());
					pr_gst2.setGstr2AInvoiceValue(vp.getGstr2AInvoiceValue());
					pr_gst2.setGstr2ATaxValue(vp.getGstr2ATaxValue());
					pr_gst2.setGstr2AIGSTValue(vp.getGstr2AIGSTValue());
					pr_gst2.setGstr2ACGSTValue(vp.getGstr2ACGSTValue());
					pr_gst2.setGstr2ASGSTValue(vp.getGstr2ASGSTValue());	
					pr_gst2.setGstr2InvoiceValue(0.0);
					pr_gst2.setGstr2TaxValue(0.0);
					pr_gst2.setGstr2IGSTValue(0.0);
					pr_gst2.setGstr2CGSTValue(0.0);
					pr_gst2.setGstr2SGSTValue(0.0);
					pr_gst2.setDiffInvoiceValue(vp.getGstr2AInvoiceValue());
					pr_gst2.setDiffTaxValue(vp.getGstr2ATaxValue());
					pr_gst2.setDiffIGSTValue(vp.getGstr2AIGSTValue());
					pr_gst2.setDiffCGSTValue(vp.getGstr2ACGSTValue());
					pr_gst2.setDiffSGSTValue(vp.getGstr2ASGSTValue());
				}			
			});
			prLst.add(pr_gst2);
		});
		
		List<GSTR2A_VS_GSTR2> gstr2Lst=new ArrayList<GSTR2A_VS_GSTR2>();
		gstr2_invoices_numbers.forEach(num->{
			GSTR2A_VS_GSTR2 pr_gst2=new GSTR2A_VS_GSTR2();
			gstr2Map.forEach((kg,vg)->{
				if(kg.equalsIgnoreCase(num)) {
					pr_gst2.setFullname(vg.getFullname());
					if(isNotEmpty(vg.getGstin())) {
						pr_gst2.setGstin(vg.getGstin());
					}
					pr_gst2.setInvoiceno(vg.getInvoiceno());
					pr_gst2.setInvoicedate(vg.getInvoicedate());
					pr_gst2.setGstr2AInvoiceValue(0.0);
					pr_gst2.setGstr2ATaxValue(0.0);
					pr_gst2.setGstr2AIGSTValue(0.0);
					pr_gst2.setGstr2ACGSTValue(0.0);
					pr_gst2.setGstr2ASGSTValue(0.0);	
					pr_gst2.setGstr2InvoiceValue(vg.getGstr2InvoiceValue());
					pr_gst2.setGstr2TaxValue(vg.getGstr2TaxValue());
					pr_gst2.setGstr2IGSTValue(vg.getGstr2IGSTValue());
					pr_gst2.setGstr2CGSTValue(vg.getGstr2CGSTValue());
					pr_gst2.setGstr2SGSTValue(vg.getGstr2SGSTValue());
					pr_gst2.setDiffInvoiceValue(-vg.getGstr2InvoiceValue());
					pr_gst2.setDiffTaxValue(-vg.getGstr2TaxValue());
					pr_gst2.setDiffIGSTValue(-vg.getGstr2IGSTValue());
					pr_gst2.setDiffCGSTValue(-vg.getGstr2CGSTValue());
					pr_gst2.setDiffSGSTValue(-vg.getGstr2SGSTValue());
				}			
			});
			gstr2Lst.add(pr_gst2);
		});
		cmprLst.addAll(prLst);
		cmprLst.addAll(gstr2Lst);

		return cmprLst;
	}
	
	
	public List<InvoiceVO> getInvoice_Wise_List(Page<? extends InvoiceParent> invoices, String returntype){
		if(returntype.equals("Unclaimed")) {
			returntype = MasterGSTConstants.PURCHASE_REGISTER;
		}
		List<StateConfig> states = configService.getStates();
		List<InvoiceVO> invoiceVOList = Lists.newArrayList();
		List<InvoiceVO> invoiceVOCancelledList = Lists.newArrayList();
		Double totisgt = 0d;
		Double totcsgt = 0d;
		Double totssgt = 0d;
		Double totcess = 0d;
		Double tottaxable = 0d;
		Double tottax = 0d;
		Double tottotal = 0d;
		Double totExempted = 0d;
		Double totAss = 0d;
		Double totStateCess = 0d;
		Double totCessNonAdvol = 0d;
		Double ctotisgt = 0d;
		Double ctotcsgt = 0d;
		Double ctotssgt = 0d;
		Double ctotcess = 0d;
		Double ctottaxable = 0d;
		Double ctottax = 0d;
		Double ctottotal = 0d;
		Double ctotExempted = 0d;
		Double ctotAss = 0d;
		Double ctotStateCess = 0d;
		Double ctotCessNonAdvol = 0d;
		List<String> refids = Lists.newArrayList();
		if(isNotEmpty(invoices) && isNotEmpty(invoices.getContent())) {
			invoices.getContent().stream().forEach(inv -> {if(isNotEmpty(inv.getAmendmentRefId())){
				refids.addAll(inv.getAmendmentRefId());
			}});
		}
		
		
		if(isNotEmpty(invoices)) {
			for (InvoiceParent invoice : invoices) {
				String clientid = invoice.getClientid();
				Client client = clientService.findById(clientid);
				
				if (isNotEmpty(invoice.getItems())) {
					
					InvoiceVO invoiceVo = new InvoiceVO();
					if(isNotEmpty(invoice.getCustomField1())) {
						invoiceVo.setCustomField1(invoice.getCustomField1());
					}
					if(isNotEmpty(invoice.getCustomField2())) {
						invoiceVo.setCustomField2(invoice.getCustomField2());
					}
					if(isNotEmpty(invoice.getCustomField3())) {
						invoiceVo.setCustomField3(invoice.getCustomField3());
					}
					if(isNotEmpty(invoice.getCustomField4())) {
						invoiceVo.setCustomField4(invoice.getCustomField4());
					}
					if("Reverse".equalsIgnoreCase(invoice.getRevchargetype())) {
						if(isNotEmpty(invoice.getRevchargeNo())) {
							invoiceVo.setRevChargeNo(invoice.getRevchargeNo());
						}
					}
					if(isNotEmpty(invoice.getBillDate())) {
						invoiceVo.setTransactionDate(invoice.getBillDate());
					}
					if(isNotEmpty(invoice.getRevchargetype())) {
						if("Regular".equalsIgnoreCase(invoice.getRevchargetype()) || "N".equalsIgnoreCase(invoice.getRevchargetype())) {
							invoiceVo.setRecharge("No");
						}else {
							invoiceVo.setRecharge("Yes");
						}
					}
					if(isNotEmpty(invoice.getGstStatus())) {
						if(invoice.getGstStatus().equalsIgnoreCase("Uploaded") || invoice.getGstStatus().equalsIgnoreCase("SUCCESS")) {
							invoiceVo.setGstStatus("Uploaded");
						}else if(invoice.getGstStatus().equalsIgnoreCase("Submitted")) {
							invoiceVo.setGstStatus("Submitted");
						}else if(invoice.getGstStatus().equalsIgnoreCase("Filed")) {
							invoiceVo.setGstStatus("Filed");
						}else if(invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
							invoiceVo.setGstStatus("Cancelled");
						}else if(invoice.getGstStatus().equalsIgnoreCase("Failed")) {
							invoiceVo.setGstStatus("Failed");
						}else {
							invoiceVo.setGstStatus("Pending");
						}
					}else {
						invoiceVo.setGstStatus("Pending");
					}
					if(isNotEmpty(client.getGstnnumber())) {
						invoiceVo.setCompanyGSTIN(client.getGstnnumber());
					}
					if(isNotEmpty(client.getStatename())) {
						invoiceVo.setCompanyStatename(client.getStatename());
					}
					if (isNotEmpty(invoice.getBilledtoname())) {
						invoiceVo.setCustomerName(invoice.getBilledtoname());
					}
					if(isNotEmpty(invoice.getAckNo())) {
						invoiceVo.setAckno(invoice.getAckNo());
					}
					if(isNotEmpty(invoice.getEinvStatus())) {
						invoiceVo.setEinvstatus(invoice.getEinvStatus());
					}
					if(isNotEmpty(invoice.getAckDt())) {
						SimpleDateFormat idt1 = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
						SimpleDateFormat idt2 = new SimpleDateFormat("dd-MM-yyyy");
						Date irnDate =null;
						try {
							irnDate = idt1.parse(invoice.getAckDt());
						} catch (ParseException e) {
							e.printStackTrace();
						}
						invoiceVo.setAckdt(invoice.getAckDt());
						if(isNotEmpty(irnDate)){
							invoiceVo.setIrndt(idt2.format(irnDate));
						}
					}
					if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
						String supplyType="";
						String subSupplyType="";
						String docType="";
						String vehicleType="";
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getSupplyType())) {
							if(("I").equalsIgnoreCase(invoice.getSupplyType())) {
								supplyType =  "Inward";
							}else if(("O").equalsIgnoreCase(invoice.getSupplyType())) {
								supplyType =  "Outward";
							}
						}
						String sText[] = {"Supply","Import","Export","Job Work","For Own Use","Job work Returns","Sales Return","Others","SKD/CKD","Line Sales","Recipient Not Known","Exhibition or Fairs"};
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getSubSupplyType())) {
							subSupplyType = sText[Integer.parseInt(invoice.getSubSupplyType().trim())-1];
						}
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getDocType())) {
							if(("INV").equalsIgnoreCase(invoice.getDocType())) {
								docType =  "Tax Invoice";
							}else if(("CHN").equalsIgnoreCase(invoice.getDocType())) {
								docType =  "Delivery Challan";
							}else if(("BIL").equalsIgnoreCase(invoice.getDocType())) {
								docType =  "Bill of Supply";
							}else if(("BOE").equalsIgnoreCase(invoice.getDocType())) {
								docType =  "Bill of Entry";
							}else if(("CNT").equalsIgnoreCase(invoice.getDocType())) {
								docType =  "Credit Note";
							}else if(("OTH").equalsIgnoreCase(invoice.getDocType())) {
								docType =  "Others";
							}
						}
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getVehicleType())) {
							if(("R").equalsIgnoreCase(invoice.getVehicleType())) {
								vehicleType =  "Regular";
							}else if(("O").equalsIgnoreCase(invoice.getVehicleType())) {
								vehicleType =  "Over Dimensional Cargo";
							}
						}
						if(isNotEmpty(invoice.getEwayBillNumber())) {
							invoiceVo.setEwayBillNo(invoice.getEwayBillNumber());
						}
						if(isNotEmpty(invoice.geteBillDate())) {
							invoiceVo.setEwayBillDate(invoice.geteBillDate());
						}
						if(isNotEmpty(invoice.getSupplyType())) {
							invoiceVo.setSupplyType(supplyType);
						}
						if(isNotEmpty(invoice.getSubSupplyType())) {
							invoiceVo.setSubSupplyType(subSupplyType);
						}
						if(isNotEmpty(invoice.getDocType())) {
							invoiceVo.setDocType(docType);
						}
						if(isNotEmpty(invoice.getFromGstin())) {
							invoiceVo.setFromGstin(invoice.getFromGstin());
						}
						if(isNotEmpty(invoice.getFromTrdName())) {
							invoiceVo.setFromTrdName(invoice.getFromTrdName());
						}
						if(isNotEmpty(invoice.getFromAddr1())) {
							invoiceVo.setFromAddr1(invoice.getFromAddr1());
						}
						if(isNotEmpty(invoice.getFromAddr2())) {
							invoiceVo.setFromAddr2(invoice.getFromAddr2());
						}
						if(isNotEmpty(invoice.getFromPlace())) {
							invoiceVo.setFromPlace(invoice.getFromPlace());
						}
						if(isNotEmpty(invoice.getFromPincode())) {
							invoiceVo.setFromPincode(invoice.getFromPincode());
						}
						if(isNotEmpty(invoice.getFromStateCode())) {
							invoiceVo.setFromStateCode(invoice.getFromStateCode());
						}
						if(isNotEmpty(invoice.getToGstin())) {
							invoiceVo.setToGstin(invoice.getToGstin());
						}
						if(isNotEmpty(invoice.getToTrdName())) {
							invoiceVo.setToTrdName(invoice.getToTrdName());
						}
						if(isNotEmpty(invoice.getToAddr1())) {
							invoiceVo.setToAddr1(invoice.getToAddr1());
						}
						if(isNotEmpty(invoice.getToAddr2())) {
							invoiceVo.setToAddr2(invoice.getToAddr2());
						}
						if(isNotEmpty(invoice.getToPincode())) {
							invoiceVo.setToPincode(invoice.getToPincode());
						}
						if(isNotEmpty(invoice.getToPlace())) {
							invoiceVo.setToPlace(invoice.getToPlace());
						}
						if(isNotEmpty(invoice.getToStateCode())) {
							invoiceVo.setToStateCode(invoice.getToStateCode());
						}
						if(isNotEmpty(invoice.getTransporterId())) {
							invoiceVo.setTransporterId(invoice.getTransporterId());
						}
						if(isNotEmpty(invoice.getTransporterName())) {
							invoiceVo.setTransporterName(invoice.getTransporterName());
						}
						if(isNotEmpty(invoice.getStatus())) {
							invoiceVo.setStatus(invoice.getStatus());
						}
						if(isNotEmpty(invoice.getActualDist())) {
							invoiceVo.setActualDist(invoice.getActualDist());
						}
						if(isNotEmpty(invoice.getNoValidDays())) {
							invoiceVo.setNoValidDays(invoice.getNoValidDays());
						}
						if(isNotEmpty(invoice.getValidUpto())) {
							invoiceVo.setValidUpto(invoice.getValidUpto());
						}
						if(isNotEmpty(invoice.getExtendedTimes())) {
							invoiceVo.setExtendedTimes(invoice.getExtendedTimes());
						}
						if(isNotEmpty(invoice.getRejectStatus())) {
							invoiceVo.setRejectStatus(invoice.getRejectStatus());
						}
						if(isNotEmpty(vehicleType)) {
							invoiceVo.setVehicleType(vehicleType);
						}
						if(isNotEmpty(invoice.getTransactionType())) {
							invoiceVo.setTransactionType(invoice.getTransactionType());
						}
						if(isNotEmpty(invoice.getOtherValue())) {
							invoiceVo.setOtherValue(invoice.getOtherValue());
						}
						if(isNotEmpty(invoice.getCessNonAdvolValue())) {
							invoiceVo.setCessNonAdvolValue(invoice.getCessNonAdvolValue());
						}
					}
					if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)  || returntype.equalsIgnoreCase("Unclaimed")) {
						if(invoice.getInvtype().equals(MasterGSTConstants.B2B) || invoice.getInvtype().equals(MasterGSTConstants.B2C) || invoice.getInvtype().equals(MasterGSTConstants.B2CL)
								|| invoice.getInvtype().equals(MasterGSTConstants.EXPORTS) || invoice.getInvtype().equals(MasterGSTConstants.NIL)) {
							invoiceVo.setDocType("INV");
						}else if(invoice.getInvtype().equals(MasterGSTConstants.ADVANCES) || invoice.getInvtype().equals(MasterGSTConstants.ATPAID)) {
							invoiceVo.setDocType("ADV");
						}else if(invoice.getInvtype().equals(MasterGSTConstants.IMP_GOODS)) {
							invoiceVo.setDocType("IMPG");
						}else if(invoice.getInvtype().equals(MasterGSTConstants.IMP_SERVICES)) {
							invoiceVo.setDocType("IMPS");
						}
					}
					if ((returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2A)) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
						if(isNotEmpty(((GSTR2)invoice).getImpGoods()) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0)) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0).getStin())) {
							invoiceVo.setCustomerGSTIN(((GSTR2)invoice).getImpGoods().get(0).getStin());
						}
					}else if ((returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
						if(isNotEmpty(((PurchaseRegister)invoice).getImpGoods()) && isNotEmpty(((PurchaseRegister)invoice).getImpGoods().get(0)) && isNotEmpty(((PurchaseRegister)invoice).getImpGoods().get(0).getStin())) {
							invoiceVo.setCustomerGSTIN(((PurchaseRegister)invoice).getImpGoods().get(0).getStin());
						}
					}else {
						if (isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0).getCtin())) {
							invoiceVo.setCustomerGSTIN(invoice.getB2b().get(0).getCtin());
						}
					}
					if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2A)) {
						if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2B) && isNotEmpty(invoice.getB2b()) && isNotEmpty(invoice.getB2b().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv()) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0)) && isNotEmpty(invoice.getB2b().get(0).getInv().get(0).getPos())) {
								String gstinNumber = invoice.getB2b().get(0).getInv().get(0).getPos();
								for (StateConfig state : states) {
									if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
										invoiceVo.setPlaceOfSupply(state.getName());
										break;
									}
								}
						}
						if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2BA) && isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getPos())) {
							String gstinNumber = ((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getPos();
							for (StateConfig state : states) {
								if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
									invoiceVo.setPlaceOfSupply(state.getName());
									break;
								}
							}
						}
						if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) && isNotEmpty(invoice.getCdn()) && isNotEmpty(invoice.getCdn().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt()) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0)) && isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getPos())) {
							String gstinNumber = invoice.getCdn().get(0).getNt().get(0).getPos();
							for (StateConfig state : states) {
								if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
									invoiceVo.setPlaceOfSupply(state.getName());
									break;
								}
							}
						}
						if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA) && isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getPos())) {
							String gstinNumber = ((GSTR2)invoice).getCdna().get(0).getNt().get(0).getPos();
							for (StateConfig state : states) {
								if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
									invoiceVo.setPlaceOfSupply(state.getName());
									break;
								}
							}
						}
						
						if (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.IMP_GOODS) && isNotEmpty(((GSTR2)invoice).getImpGoods()) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0)) && isNotEmpty(((GSTR2)invoice).getImpGoods().get(0).getStin())) {
							String gstinNumber = ((GSTR2)invoice).getImpGoods().get(0).getStin().trim();
							gstinNumber = gstinNumber.substring(0,2);
							for (StateConfig state : states) {
								if (state.getTin().equals(Integer.parseInt(gstinNumber))) {
									invoiceVo.setPlaceOfSupply(state.getName());
									break;
								}
							}
						}
						
					}
					if (isNotEmpty(invoice.getInvoiceno())) {
						invoiceVo.setInvoiceNo(invoice.getInvoiceno());
					}
					if (isNotEmpty(invoice.getStatename())) {
						invoiceVo.setState(invoice.getStatename());
					}
					if(returntype.equals(MasterGSTConstants.EINVOICE)) {
						String docType="INVOICE";
						if(isNotEmpty(invoice) && isNotEmpty(invoice.getTyp())) {
							if(("INV").equalsIgnoreCase(invoice.getTyp())) {
								docType =  "INVOICE";
							}else if(("CRN").equalsIgnoreCase(invoice.getTyp())) {
								docType =  "CREDIT NOTE";
							}else if(("DBN").equalsIgnoreCase(invoice.getTyp())) {
								docType =  "DEBIT NOTE";
							}else {
								docType =  "INVOICE";
							}
						}
						if(isNotEmpty(invoice.getTyp())) {
							invoiceVo.setDocType(docType);
						}else {
							invoiceVo.setDocType(docType);
						}
						if(isNotEmpty(invoice.getIrnNo())) {
							invoiceVo.setIrnNo(invoice.getIrnNo());
						}
						if(isNotEmpty(invoice.getIrnStatus())) {
							invoiceVo.setIrnStatus(invoice.getIrnStatus());
						}else {
							invoiceVo.setIrnStatus("Not Generated");
						}
						if(isNotEmpty(invoice.getSignedQrCode())) {
							invoiceVo.setQrcode(invoice.getSignedQrCode());
						}
					}
					if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2)) {
						if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
							if(isNotEmpty(invoice.getCdn().get(0).getCfs())) {
								if("Y".equalsIgnoreCase(invoice.getCdn().get(0).getCfs())) {
									invoiceVo.setCounterFilingStatus("Filed");
								}else {
									invoiceVo.setCounterFilingStatus("Pending");
								}
							}else {
								invoiceVo.setCounterFilingStatus("Pending");
							}
						}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2B)) {
							if(isNotEmpty(invoice.getB2b().get(0).getCfs())) {
								if("Y".equalsIgnoreCase(invoice.getB2b().get(0).getCfs())) {
									invoiceVo.setCounterFilingStatus("Filed");
								}else {
									invoiceVo.setCounterFilingStatus("Pending");
								}
							}else {
								invoiceVo.setCounterFilingStatus("Pending");
							}
						}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
							if(isNotEmpty(((GSTR2)invoice).getCdna().get(0).getCfs())) {
								if("Y".equalsIgnoreCase(((GSTR2)invoice).getCdna().get(0).getCfs())) {
									invoiceVo.setCounterFilingStatus("Filed");
								}else {
									invoiceVo.setCounterFilingStatus("Pending");
								}
							}else {
								invoiceVo.setCounterFilingStatus("Pending");
							}
							if(isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntNum())) {
								invoiceVo.setOriginalInvoiceNo(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntNum());
							}
							if(isNotEmpty(((GSTR2)invoice).getCdna()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt()) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0)) && isNotEmpty(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntDt())) {
								invoiceVo.setOriginalInvoiceDate(Utility.getFormatedDateStr(((GSTR2)invoice).getCdna().get(0).getNt().get(0).getOntDt()));
							}
						}else if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.B2BA)) {
							if(isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getCfs())) {
								if("Y".equalsIgnoreCase(((GSTR2)invoice).getB2ba().get(0).getCfs())) {
									invoiceVo.setCounterFilingStatus("Filed");
								}else {
									invoiceVo.setCounterFilingStatus("Pending");
								}
							}else {
								invoiceVo.setCounterFilingStatus("Pending");
							}
							if(isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOinum())) {
								invoiceVo.setOriginalInvoiceNo(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOinum());
							}
							if(isNotEmpty(((GSTR2)invoice).getB2ba()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv()) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0)) && isNotEmpty(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOidt())) {
								invoiceVo.setOriginalInvoiceDate(((GSTR2)invoice).getB2ba().get(0).getInv().get(0).getOidt());
							}
						}
					}
					Double quantity=0d;
					Double freeqty=0d;
					Double assAmt=0d;
					Double stateCess=0d;
					Double cessnonAdvol=0d;
					Double taxableValue=0d;
					Double igstRate=0d;
					Double igstAmount=0d;
					Double igstTax=0d;
					Double cgstRate=0d;
					Double cgstAmount=0d;
					Double cgstTax=0d;
					Double sgstRate=0d;
					Double sgstAmount=0d;
					Double sgstTax=0d;
					Double cessRate=0d;
					Double cessAmount=0d;
					Double cessTax=0d;
					Double rateperitem=0d;
					Double totaltax=0d;
					Double totalValue=0d;
					Double totalExemptedValue=0d;
					for (Item item : invoice.getItems()) {
						InvoiceVO invo = new InvoiceVO();
						
						if(isEmpty(item.getIgstamount())){
							item.setIgstamount(0d);
						}
						if(isEmpty(item.getSgstamount())){
							item.setSgstamount(0d);
						}
						if(isEmpty(item.getCgstamount())){
							item.setCgstamount(0d);
						}
						if(isEmpty(item.getCessamount())){
							item.setCessamount(0d);
						}
						if (isNotEmpty(item.getElg())) {
							String itcType = "";
							String elg = item.getElg();
							if("cp".equals(elg)){
								itcType = "Capital Good";
							}else if("ip".equals(elg)){
								itcType = "Inputs";
							}else if("is".equals(elg)){
								itcType = "Input Service";
							}else if("no".equals(elg)){
								itcType = "Ineligible";
							}else if("pending".equals(elg)){
								itcType = "Not Selected";
							}
							invo.setItcType(itcType);
						}
						
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
									|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(((GSTR1) invoice).getCdnur().get(0).getInum());
									}
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(((GSTR1) invoice).getCdnur().get(0).getIdt());
									}
								}
								
								if(docType.equalsIgnoreCase("C")) {
									invoiceVo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}}
									}
									if(isNotEmpty(item.getExmepted()) && isNotEmpty(item.getQuantity())) {
										totalExemptedValue = totalExemptedValue-((item.getQuantity())*(item.getExmepted()));

										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotExempted = ctotExempted-((item.getQuantity())*(item.getExmepted()));
										}else {
											totExempted = totExempted-((item.getQuantity())*(item.getExmepted()));
										}}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invoiceVo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}}
										//System.out.println("D --->"+totisgt);
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}}
									}
									if(isNotEmpty(item.getExmepted()) && isNotEmpty(item.getQuantity())) {
										totalExemptedValue += (item.getQuantity())*(item.getExmepted());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotExempted += (item.getQuantity())*(item.getExmepted());
										}else {
											totExempted += (item.getQuantity())*(item.getExmepted());
										}}
									}
									
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());

										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());

										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());

										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}}
									}
									if(isNotEmpty(item.getExmepted()) && isNotEmpty(item.getQuantity())) {
										totalExemptedValue += (item.getQuantity())*(item.getExmepted());
										if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotExempted += (item.getQuantity())*(item.getExmepted());
										}else {
											totExempted += (item.getQuantity())*(item.getExmepted());
										}}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else if(isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.TXPA))){
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(-item.getIgstamount());

									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt-item.getIgstamount();
									}else {
										totisgt = totisgt-item.getIgstamount();
									}}
								}
								if (isNotEmpty(item.getAdvadjustedAmount())) {
									invo.setTaxableValue(-item.getAdvadjustedAmount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable-item.getAdvadjustedAmount();
									}else {
										tottaxable = tottaxable-item.getAdvadjustedAmount();
									}}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(-item.getCgstamount());

									if(!refids.contains(invoice.getId().toString())){
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(-item.getSgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt-item.getSgstamount();
									}else {
										totssgt = totssgt-item.getSgstamount();
									}}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(-item.getCessamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess-item.getCessamount();
									}else {
										totcess = totcess-item.getCessamount();
									}}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(-item.getTotal());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal-item.getTotal();
									}else {
										tottotal = tottotal-item.getTotal();
									}}
								}
								if(isNotEmpty(item.getExmepted()) && isNotEmpty(item.getQuantity())) {
									totalExemptedValue = totalExemptedValue-((item.getQuantity())*(item.getExmepted()));
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotExempted = ctotExempted-((item.getQuantity())*(item.getExmepted()));
									}else {
										totExempted = totExempted-((item.getQuantity())*(item.getExmepted()));
									}}
								}
								invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}}
								}
								if(isNotEmpty(item.getExmepted()) && isNotEmpty(item.getQuantity())) {
									totalExemptedValue += (item.getQuantity())*(item.getExmepted());
									if(!refids.contains(invoice.getId().toString())){
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotExempted += (item.getQuantity())*(item.getExmepted());
									}else {
										totExempted += (item.getQuantity())*(item.getExmepted());
									}}
								}
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
								
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())) {
										docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(invoice.getCdn().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(invoice.getCdn().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(invoice.getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(invoice.getCdnur().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(invoice.getCdnur().get(0).getInum());
									}
									if(isNotEmpty(invoice.getCdnur().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(invoice.getCdnur().get(0).getIdt());
									}
								}
								
								if(docType.equalsIgnoreCase("C")) {
									invoiceVo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invoiceVo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}					
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}
								}
								
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR4)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(((GSTR4) invoice).getCdnr().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(((GSTR4)invoice).getCdnur().get(0).getNtty())) {
										docType = ((GSTR4)invoice).getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnur().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(((GSTR4) invoice).getCdnur().get(0).getInum());
									}
									if(isNotEmpty(((GSTR4) invoice).getCdnur().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(((GSTR4) invoice).getCdnur().get(0).getIdt());
									}
								}
								
								if(docType.equalsIgnoreCase("C")) {
									invoiceVo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invoiceVo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}
								}
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR5)) {
							if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								String docType = "";
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getInum());
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(((GSTR5) invoice).getCdnr().get(0).getNt().get(0).getIdt());
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(((GSTR5)invoice).getCdnur().get(0).getNtty())) {
										docType = ((GSTR5)invoice).getCdnur().get(0).getNtty();
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnur().get(0).getInum())) {
										invoiceVo.setOriginalInvoiceNo(((GSTR5) invoice).getCdnur().get(0).getInum());
									}
									if(isNotEmpty(((GSTR5) invoice).getCdnur().get(0).getIdt())) {
										invoiceVo.setOriginalInvoiceDate(((GSTR5) invoice).getCdnur().get(0).getIdt());
									}
								}
								if(docType.equalsIgnoreCase("C")) {
									invoiceVo.setDocType("CDN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(-item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt-item.getIgstamount();
										}else {
											totisgt = totisgt-item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(-item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable-item.getTaxablevalue();
										}else {
											tottaxable = tottaxable-item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(-item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt-item.getCgstamount();
										}else {
											totcsgt = totcsgt-item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(-item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt-item.getSgstamount();
										}else {
											totssgt = totssgt-item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(-item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess-item.getCessamount();
										}else {
											totcess = totcess-item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(-item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal-item.getTotal();
										}else {
											tottotal = tottotal-item.getTotal();
										}
									}
									invo.setTotaltax(-item.getIgstamount() - item.getSgstamount() - item.getCgstamount() - item.getCessamount());
								}else if(docType.equalsIgnoreCase("D")) {
									invoiceVo.setDocType("DBN");
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}else {
									if (isNotEmpty(item.getIgstamount())) {
										invo.setIgstAmount(item.getIgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotisgt = ctotisgt+item.getIgstamount();
										}else {
											totisgt = totisgt+item.getIgstamount();
										}
									}
									if (isNotEmpty(item.getTaxablevalue())) {
										invo.setTaxableValue(item.getTaxablevalue());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottaxable = ctottaxable+item.getTaxablevalue();
										}else {
											tottaxable = tottaxable+item.getTaxablevalue();
										}
									}
									if (isNotEmpty(item.getCgstamount())) {
										invo.setCgstAmount(item.getCgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcsgt = ctotcsgt+item.getCgstamount();
										}else {
											totcsgt = totcsgt+item.getCgstamount();
										}
									}
									if (isNotEmpty(item.getSgstamount())) {
										invo.setSgstAmount(item.getSgstamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotssgt = ctotssgt+item.getSgstamount();
										}else {
											totssgt = totssgt+item.getSgstamount();
										}
									}
									if (isNotEmpty(item.getCessamount())) {
										invo.setCessAmount(item.getCessamount());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctotcess = ctotcess+item.getCessamount();
										}else {
											totcess = totcess+item.getCessamount();
										}
									}
									if(isNotEmpty(item.getTotal())){
										invo.setTotalValue(item.getTotal());
										if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
											ctottotal = ctottotal+item.getTotal();
										}else {
											tottotal = tottotal+item.getTotal();
										}
									}
									invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
								}
							}else {
								if (isNotEmpty(item.getIgstamount())) {
									invo.setIgstAmount(item.getIgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotisgt = ctotisgt+item.getIgstamount();
									}else {
										totisgt = totisgt+item.getIgstamount();
									}
								}
								if (isNotEmpty(item.getTaxablevalue())) {
									invo.setTaxableValue(item.getTaxablevalue());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottaxable = ctottaxable+item.getTaxablevalue();
									}else {
										tottaxable = tottaxable+item.getTaxablevalue();
									}
								}
								if (isNotEmpty(item.getCgstamount())) {
									invo.setCgstAmount(item.getCgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcsgt = ctotcsgt+item.getCgstamount();
									}else {
										totcsgt = totcsgt+item.getCgstamount();
									}
								}
								if (isNotEmpty(item.getSgstamount())) {
									invo.setSgstAmount(item.getSgstamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotssgt = ctotssgt+item.getSgstamount();
									}else {
										totssgt = totssgt+item.getSgstamount();
									}
								}
								if (isNotEmpty(item.getCessamount())) {
									invo.setCessAmount(item.getCessamount());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctotcess = ctotcess+item.getCessamount();
									}else {
										totcess = totcess+item.getCessamount();
									}
								}
								if(isNotEmpty(item.getTotal())){
									invo.setTotalValue(item.getTotal());
									if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
										ctottotal = ctottotal+item.getTotal();
									}else {
										tottotal = tottotal+item.getTotal();
									}
								}
								invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
							}
						}else {
							if (isNotEmpty(item.getIgstamount())) {
								invo.setIgstAmount(item.getIgstamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotisgt = ctotisgt+item.getIgstamount();
								}else {
									totisgt = totisgt+item.getIgstamount();
								}}
							}
							if (isNotEmpty(item.getTaxablevalue())) {
								invo.setTaxableValue(item.getTaxablevalue());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottaxable = ctottaxable+item.getTaxablevalue();
								}else {
									tottaxable = tottaxable+item.getTaxablevalue();
								}}
							}
							if(isNotEmpty(item.getAssAmt())) {
								invo.setAssAmt(item.getAssAmt());
								totAss  = totAss+item.getAssAmt();
							}
							if(isNotEmpty(item.getStateCess())) {
								invo.setStateCess(item.getStateCess());
								totStateCess  = totStateCess + item.getStateCess();
							}
							if(isNotEmpty(item.getCessNonAdvol())) {
								invo.setCessnonAdvol(item.getCessNonAdvol());
								totCessNonAdvol  = totCessNonAdvol + item.getCessNonAdvol();
							}
							if (isNotEmpty(item.getCgstamount())) {
								invo.setCgstAmount(item.getCgstamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotcsgt = ctotcsgt+item.getCgstamount();
								}else {
									totcsgt = totcsgt+item.getCgstamount();
								}}
							}
							if (isNotEmpty(item.getSgstamount())) {
								invo.setSgstAmount(item.getSgstamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotssgt = ctotssgt+item.getSgstamount();
								}else {
									totssgt = totssgt+item.getSgstamount();
								}}
							}
							if (isNotEmpty(item.getCessamount())) {
								invo.setCessAmount(item.getCessamount());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctotcess = ctotcess+item.getCessamount();
								}else {
									totcess = totcess+item.getCessamount();
								}}
							}
							if(isNotEmpty(item.getTotal())){
								invo.setTotalValue(item.getTotal());
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottotal = ctottotal+item.getTotal();
								}else {
									tottotal = tottotal+item.getTotal();
								}}
							}
							invo.setTotaltax(item.getIgstamount() + item.getSgstamount() + item.getCgstamount() + item.getCessamount());
						}
						if (isNotEmpty(item.getIgstavltax())) {
							invo.setIgstTax(item.getIgstavltax());
						}
						if (isNotEmpty(item.getCgstavltax())) {
							invo.setCgstTax(item.getCgstavltax());
						}
						if (isNotEmpty(item.getSgstavltax())) {
							invo.setSgstTax(item.getSgstavltax());
						}
						if (isNotEmpty(item.getCessavltax())) {
							invo.setCessTax(item.getCessavltax());
						}
						
						if(isNotEmpty(item.getCategory())){
							invo.setCategory(item.getCategory());
						}
						
						if(isNotEmpty(invo.getTotaltax())) {
							totaltax+=invo.getTotaltax();
						}
						if(isNotEmpty(item.getTotal())){
							totalValue+=invo.getTotalValue();
						}
						
						if(isNotEmpty(invo.getQuantity())) {
							quantity+=invo.getQuantity();
						}
						if(isNotEmpty(invo.getTaxableValue())) {
							taxableValue+=invo.getTaxableValue();
						}
						if(isNotEmpty(invo.getIgstAmount())) {
							igstAmount+=invo.getIgstAmount();
						}
						
						if(isNotEmpty(invo.getIgstTax())) {
							igstTax+=invo.getIgstTax();
						}
						if(isNotEmpty(invo.getCgstAmount())) {
							cgstAmount+=invo.getCgstAmount();
						}
						
						if(isNotEmpty(invo.getCgstTax())) {
							cgstTax+=invo.getCgstTax();
						
						}
						if(isNotEmpty(invo.getSgstAmount())) {
							sgstAmount+=invo.getSgstAmount();
						}
						
						if(isNotEmpty(invo.getSgstTax())) {
							sgstTax+=invo.getSgstTax();
						}
					
						if(isNotEmpty(invo.getCessAmount())) {
							cessAmount+=invo.getCessAmount();
						}
						if(isNotEmpty(invo.getCessTax())) {
							cessTax+=invo.getCessTax();
						}
					}
					invoiceVo.setExemptedVal(totalExemptedValue);
					invoiceVo.setInvoiceDate(invoice.getDateofinvoice());
					invoiceVo.setReturnPeriod(invoice.getFp());
					if(isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR)
							|| invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA))) {
						String docType = "";
						if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
							if(isNotEmpty(invoice.getInvtype()) && (invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
									|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA))){
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
										docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
									if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
								}
							}
						}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
								if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
									if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())) {
										docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
									}
								}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
									if(isNotEmpty(invoice.getCdnur().get(0).getNtty())) {
										docType = invoice.getCdnur().get(0).getNtty();
									}
								}
							}
						}
						if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNA)){
							if("C".equals(docType)) {
								invoiceVo.setType("Credit Note");
								invoiceVo.setTotalItc(-invoice.getTotalitc());
								if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
									Double totalinitc = 0d;
									totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
									invoiceVo.setTotalinItc(-totalinitc);
								}
							}else if("D".equals(docType)) {
								invoiceVo.setType("Debit Note");
								invoiceVo.setTotalItc(invoice.getTotalitc());
								if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
									Double totalinitc = 0d;
									totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
									invoiceVo.setTotalinItc(totalinitc);
								}
							}else {
								invoiceVo.setType(invoice.getInvtype());
								invoiceVo.setTotalItc(invoice.getTotalitc());
								if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
									Double totalinitc = 0d;
									totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
									invoiceVo.setTotalinItc(totalinitc);
								}
							}
						}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
							if("C".equals(docType)) {
								invoiceVo.setType("Credit Note(UR)");
								invoiceVo.setTotalItc(-invoice.getTotalitc());
								if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
									Double totalinitc = 0d;
									totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
									invoiceVo.setTotalinItc(-totalinitc);
								}
							}else if("D".equals(docType)) {
								invoiceVo.setType("Debit Note(UR)");
								invoiceVo.setTotalItc(invoice.getTotalitc());
								if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
									Double totalinitc = 0d;
									totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
									invoiceVo.setTotalinItc(totalinitc);
								}
							}else {
								invoiceVo.setType(invoice.getInvtype());
								invoiceVo.setTotalItc(invoice.getTotalitc());
								if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
									Double totalinitc = 0d;
									totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
									invoiceVo.setTotalinItc(totalinitc);
								}
							}
						}
					}else {
						invoiceVo.setType(invoice.getInvtype());
						invoiceVo.setTotalItc(invoice.getTotalitc());
						if(isNotEmpty(invoice.getTotaltax()) && isNotEmpty(invoice.getTotalitc())) {
							Double totalinitc = 0d;
							totalinitc = invoice.getTotaltax() - invoice.getTotalitc();
							invoiceVo.setTotalinItc(totalinitc);
						}
					}
					
					if(isNotEmpty(totAss)) {
						invoiceVo.setAssAmt(totAss);
					}
					invoiceVo.setTaxableValue(taxableValue);
					invoiceVo.setIgstAmount(igstAmount);
					
					invoiceVo.setIgstTax(igstTax);
					invoiceVo.setCgstAmount(cgstAmount);
					
					invoiceVo.setCgstTax(cgstTax);
					invoiceVo.setSgstAmount(sgstAmount);
					
					invoiceVo.setSgstTax(sgstTax);
					
					invoiceVo.setCessAmount(cessAmount);
					
					invoiceVo.setCessTax(cessTax);
					
					invoiceVo.setTotaltax(totaltax);
					invoiceVo.setTotalValue(totalValue);
					if(isNotEmpty(invoice.getBranch())) {
						invoiceVo.setBranch(invoice.getBranch());
					}else {
						invoiceVo.setBranch("");
					}
					if(isNotEmpty(invoice.getDateofitcClaimed())) {
						invoiceVo.setDateOfItcClaimed(invoice.getDateofitcClaimed());
					}
					if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
						invoiceVOCancelledList.add(invoiceVo);
					}else {
						invoiceVOList.add(invoiceVo);
					}
				}
				if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
					if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
						if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
								|| isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equals(MasterGSTConstants.CDNA) || invoice.getInvtype().equals(MasterGSTConstants.CDNURA)){
							String docType = "";
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)
									|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
								if(isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
									docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
								}
							}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)
									|| invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNURA)){
								if(isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
									docType = invoice.getCdnur().get(0).getNtty();
								}
							}
							if("C".equals(docType)) {
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax-invoice.getTotaltax();
								}else {
									tottax = tottax-invoice.getTotaltax();
								}}
							}else {
								if(!refids.contains(invoice.getId().toString())){
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax+invoice.getTotaltax();
								}else {
									tottax = tottax+invoice.getTotaltax();
								}}
							}
						}
					}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR2) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase(MasterGSTConstants.GSTR6)) {
						if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)) {
							
							String docType = "";
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
								if(isNotEmpty(invoice.getCdn().get(0).getNt().get(0).getNtty())) {
									docType = invoice.getCdn().get(0).getNt().get(0).getNtty();
								}
							}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								if(isNotEmpty(invoice.getCdnur().get(0).getNtty())) {
									docType = invoice.getCdnur().get(0).getNtty();
								}
							}
							if("C".equals(docType)) {
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax-invoice.getTotaltax();
								}else {
									tottax = tottax-invoice.getTotaltax();
								}
							}else {
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax+invoice.getTotaltax();
								}else {
									tottax = tottax+invoice.getTotaltax();
								}
							}
						}
					}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR4)) {
						if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
							
							String docType = "";
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
								if(isNotEmpty(((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
									docType = ((GSTR4)invoice).getCdnr().get(0).getNt().get(0).getNtty();
								}
							}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								if(isNotEmpty(((GSTR4)invoice).getCdnur().get(0).getNtty())) {
									docType = ((GSTR4)invoice).getCdnur().get(0).getNtty();
								}
							}
							if("C".equals(docType)) {
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax-invoice.getTotaltax();
								}else {
									tottax = tottax-invoice.getTotaltax();
								}
							}else {
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax+invoice.getTotaltax();
								}else {
									tottax = tottax+invoice.getTotaltax();
								}
							}
						}
					}else if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR5)) {
						if(isNotEmpty(invoice.getInvtype()) && invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES) || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
							String docType = "";
							if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CREDIT_DEBIT_NOTES)){
								if(isNotEmpty(((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
									docType = ((GSTR5)invoice).getCdnr().get(0).getNt().get(0).getNtty();
								}
							}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.CDNUR)){
								if(isNotEmpty(((GSTR5)invoice).getCdnur().get(0).getNtty())) {
									docType = ((GSTR5)invoice).getCdnur().get(0).getNtty();
								}
							}
							if("C".equals(docType)) {
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax-invoice.getTotaltax();
								}else {
									tottax = tottax-invoice.getTotaltax();
								}
							}else {
								if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
									ctottax = ctottax+invoice.getTotaltax();
								}else {
									tottax = tottax+invoice.getTotaltax();
								}
							}
						}
					}
				}else if(invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.ATPAID)  || invoice.getInvtype().equalsIgnoreCase(MasterGSTConstants.TXPA)){
					if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {

						if(!refids.contains(invoice.getId().toString())){
							if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
							ctottax = ctottax-invoice.getTotaltax();
							}else {
								tottax = tottax-invoice.getTotaltax();
							}
						}
					}else {
						if(!refids.contains(invoice.getId().toString())){
						if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
							ctottax = ctottax+invoice.getTotaltax();
						}else {
							tottax = tottax+invoice.getTotaltax();
						}}
					}
				}else {
					if(!refids.contains(invoice.getId().toString())){
					if(isNotEmpty(invoice.getGstStatus()) && invoice.getGstStatus().equalsIgnoreCase("Cancelled")) {
						ctottax = ctottax+invoice.getTotaltax();
					}else {
						tottax = tottax+invoice.getTotaltax();
					}}
				}
				
			}
		}
		InvoiceVO totalinvo = new InvoiceVO();
		totalinvo.setIgstAmount(totisgt);
		totalinvo.setCgstAmount(totcsgt);
		totalinvo.setSgstAmount(totssgt);
		totalinvo.setCessAmount(totcess);
		totalinvo.setTotaltax(tottax);
		totalinvo.setTaxableValue(tottaxable);
		totalinvo.setTotalValue(tottotal);
		totalinvo.setExemptedVal(totExempted);
		if(isNotEmpty(totAss)) {
			totalinvo.setAssAmt(totAss);
		}
		invoiceVOList.add(totalinvo);
		if(invoiceVOCancelledList.size() > 0) {
			InvoiceVO cancelinvo = new InvoiceVO();
			InvoiceVO cancel1invo = new InvoiceVO();
			cancel1invo.setCompanyStatename("Cancelled Invoices");
			invoiceVOList.add(cancelinvo);
			invoiceVOList.add(cancel1invo);
			invoiceVOList.addAll(invoiceVOCancelledList);
			
			InvoiceVO ctotalinvo = new InvoiceVO();
			ctotalinvo.setIgstAmount(ctotisgt);
			ctotalinvo.setCgstAmount(ctotcsgt);
			ctotalinvo.setSgstAmount(ctotssgt);
			ctotalinvo.setCessAmount(ctotcess);
			ctotalinvo.setTotaltax(ctottax);
			ctotalinvo.setTaxableValue(ctottaxable);
			ctotalinvo.setTotalValue(ctottotal);
			ctotalinvo.setExemptedVal(ctotExempted);
			invoiceVOList.add(ctotalinvo);
		}
		
		return invoiceVOList;
	}
	
	@RequestMapping(value = "/populatetradename/{usertype}/{returntype}/{fullname}/{id}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String populatetradename(@PathVariable("id") String id,@PathVariable("usertype") String usertype,@PathVariable("returntype") String returntype,@PathVariable("fullname") String fullname,
			@PathVariable("clientid") String clientid, @PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model, HttpServletRequest request) throws Exception {
	
		Client client = clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		ClientStatus clientStatus = clientService.getClientStatus(clientid, GSTR2, strMonth + year);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		
			String[] invTypes = {MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.ISD, 
					MasterGSTConstants.B2BA, MasterGSTConstants.CDNA};
			for (String invType : invTypes) {
					clientService.updateGSTR2AReturnData_2A(invType, clientid, strMonth + year, month, year);
			}
		
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("type", "dwnldgstr2a");

		model.addAttribute("client", client);
		if(returntype.equals(GSTR2A)){
			returntype = GSTR2;
		}
		model.addAttribute("returntype", returntype);
		
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);
		if (returntype.equals(GSTR1)) {
			String submissionYear = year + "-" + (year + 1);
			if (month > 3) {
				submissionYear = (year + 1) + "-" + (year + 2);
			}
			CompanyInvoices invoiceSubmissionData = profileService.getUserInvoiceSubmissionDetails(client.getId().toString(), submissionYear, null);
			if (isNotEmpty(invoiceSubmissionData)) {
				model.addAttribute("invoiceSubmissionData", invoiceSubmissionData);
			}
		}

		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		return "client/all_invoice_view";
	}
	
	@RequestMapping(value = "/allInvMothlyTotals/{id}/{name}/{usertype}/{clientid}/{returntype}", method = RequestMethod.POST)
	public @ResponseBody Map<String, Double> allInvMothlyTotals(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,@PathVariable("returntype") String returntype,
			@RequestBody AllPaymentDetails allPaymentDetails,HttpServletRequest request) throws Exception {
			Client client = clientService.findById(clientid);
			 Map<String, Double> map = Maps.newHashMap(); 
			Double invoicesTotalAmount = 0d;Double purchseinvoicesTotalAmount = 0d;
			List<String> fpyears = Arrays.asList("2017","2018","2019" );
			List<String> month = allPaymentDetails.getMonth();
			List<String> year = allPaymentDetails.getYear();
			//System.out.println(month.size());
			if(year.size() > 0) {
				for(String fyear : year) {
					if(month.size() > 0) {
						for(String fmonth : month) {
							Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client,"GSTR1",Integer.parseInt(fmonth), Integer.parseInt(fyear));
							
								if(isNotEmpty(invoices.getContent())) {	
									for(InvoiceParent invoice:invoices.getContent()) {
										if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
												if (isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
													String docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
													if(isNotEmpty(invoice.getTotalamount())) {
														if ("C".equals(docType)) {
															invoicesTotalAmount -=invoice.getTotalamount();
														} else if ("D".equals(docType)) {
															invoicesTotalAmount+=invoice.getTotalamount();
														} else if ("R".equals(docType)) {
															invoicesTotalAmount+=invoice.getTotalamount();
														}
													}	
												}
										}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
											if (isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
												String docType = ((GSTR1) invoice).getCdnur().get(0).getNtty();
												if(isNotEmpty(invoice.getTotalamount())) {
													if ("C".equals(docType)) {
														invoicesTotalAmount -=invoice.getTotalamount();
													} else if ("D".equals(docType)) {
														invoicesTotalAmount+=invoice.getTotalamount();
													} else if ("R".equals(docType)) {
														invoicesTotalAmount+=invoice.getTotalamount();
													}
												}	
												
											}
										}else {
											if(isNotEmpty(invoice.getTotalamount())) {
												invoicesTotalAmount+=invoice.getTotalamount();
											}	
										}
									}
								}
								
						Page<? extends InvoiceParent> purchseinvoices = clientService.getInvoices(null, client,MasterGSTConstants.PURCHASE_REGISTER,Integer.parseInt(fmonth), Integer.parseInt(fyear));
								if(isNotEmpty(purchseinvoices.getContent())) {	
									for(InvoiceParent invoice:purchseinvoices.getContent()) {
										if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
												if (isNotEmpty(((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty())) {
													String docType = ((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty();
													if(isNotEmpty(invoice.getTotalamount())) {
														if ("C".equals(docType)){
															purchseinvoicesTotalAmount -=invoice.getTotalamount();
														} else if ("D".equals(docType)) {
															purchseinvoicesTotalAmount+=invoice.getTotalamount();
														} else if ("R".equals(docType)) {
															purchseinvoicesTotalAmount+=invoice.getTotalamount();
														}
													}	
												}
										}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
											if (isNotEmpty(((PurchaseRegister) invoice).getCdnur().get(0).getNtty())) {
												String docType = ((PurchaseRegister) invoice).getCdnur().get(0).getNtty();
												if(isNotEmpty(invoice.getTotalamount())) {
													if ("C".equals(docType)) {
														purchseinvoicesTotalAmount -=invoice.getTotalamount();
													} else if ("D".equals(docType)) {
														purchseinvoicesTotalAmount+=invoice.getTotalamount();
													} else if ("R".equals(docType)) {
														purchseinvoicesTotalAmount+=invoice.getTotalamount();
													}
												}	
												
											}
										}else {
											if(isNotEmpty(invoice.getTotalamount())) {
												purchseinvoicesTotalAmount+=invoice.getTotalamount();
											}	
										}
									}
								}
								
						}
					}else {
						Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, id, "GSTR1", Integer.parseInt(fyear));
						if(isNotEmpty(invoices.getContent())) {	
							for(InvoiceParent invoice:invoices.getContent()) {
								if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
										if (isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
											String docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
											if(isNotEmpty(invoice.getTotalamount())) {
												if ("C".equals(docType)) {
													invoicesTotalAmount -=invoice.getTotalamount();
												} else if ("D".equals(docType)) {
													invoicesTotalAmount+=invoice.getTotalamount();
												} else if ("R".equals(docType)) {
													invoicesTotalAmount+=invoice.getTotalamount();
												}
											}	
										}
								}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
									if (isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
										String docType = ((GSTR1) invoice).getCdnur().get(0).getNtty();
										if(isNotEmpty(invoice.getTotalamount())) {
											if ("C".equals(docType)) {
												invoicesTotalAmount -=invoice.getTotalamount();
											} else if ("D".equals(docType)) {
												invoicesTotalAmount+=invoice.getTotalamount();
											} else if ("R".equals(docType)) {
												invoicesTotalAmount+=invoice.getTotalamount();
											}
										}	
										
									}
								}else {
									if(isNotEmpty(invoice.getTotalamount())) {
										invoicesTotalAmount+=invoice.getTotalamount();
									}	
								}
							}
						}
					
					Page<? extends InvoiceParent> purchseinvoices = clientService.getInvoices(null, client, id, MasterGSTConstants.PURCHASE_REGISTER, Integer.parseInt(fyear));
						if(isNotEmpty(purchseinvoices.getContent())) {	
							for(InvoiceParent invoice:purchseinvoices.getContent()) {
								if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
										if (isNotEmpty(((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty())) {
											String docType = ((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty();
											if(isNotEmpty(invoice.getTotalamount())) {
												if ("C".equals(docType)){
													purchseinvoicesTotalAmount -=invoice.getTotalamount();
												} else if ("D".equals(docType)) {
													purchseinvoicesTotalAmount+=invoice.getTotalamount();
												} else if ("R".equals(docType)) {
													purchseinvoicesTotalAmount+=invoice.getTotalamount();
												}
											}	
										}
								}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
									if (isNotEmpty(((PurchaseRegister) invoice).getCdnur().get(0).getNtty())) {
										String docType = ((PurchaseRegister) invoice).getCdnur().get(0).getNtty();
										if(isNotEmpty(invoice.getTotalamount())) {
											if ("C".equals(docType)) {
												purchseinvoicesTotalAmount -=invoice.getTotalamount();
											} else if ("D".equals(docType)) {
												purchseinvoicesTotalAmount+=invoice.getTotalamount();
											} else if ("R".equals(docType)) {
												purchseinvoicesTotalAmount+=invoice.getTotalamount();
											}
										}	
										
									}
								}else {
									if(isNotEmpty(invoice.getTotalamount())) {
										purchseinvoicesTotalAmount+=invoice.getTotalamount();
									}	
								}
							}
						}
					}
				}	
			}else {
				for(String fyear : fpyears) {
					if(month.size() > 0) {
						for(String fmonth : month) {
							Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client,"GSTR1",Integer.parseInt(fmonth), Integer.parseInt(fyear));
							
								if(isNotEmpty(invoices.getContent())) {	
									for(InvoiceParent invoice:invoices.getContent()) {
										if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
												if (isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
													String docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
													if(isNotEmpty(invoice.getTotalamount())) {
														if ("C".equals(docType)) {
															invoicesTotalAmount -=invoice.getTotalamount();
														} else if ("D".equals(docType)) {
															invoicesTotalAmount+=invoice.getTotalamount();
														} else if ("R".equals(docType)) {
															invoicesTotalAmount+=invoice.getTotalamount();
														}
													}	
												}
										}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
											if (isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
												String docType = ((GSTR1) invoice).getCdnur().get(0).getNtty();
												if(isNotEmpty(invoice.getTotalamount())) {
													if ("C".equals(docType)) {
														invoicesTotalAmount -=invoice.getTotalamount();
													} else if ("D".equals(docType)) {
														invoicesTotalAmount+=invoice.getTotalamount();
													} else if ("R".equals(docType)) {
														invoicesTotalAmount+=invoice.getTotalamount();
													}
												}	
												
											}
										}else {
											if(isNotEmpty(invoice.getTotalamount())) {
												invoicesTotalAmount+=invoice.getTotalamount();
											}	
										}
									}
								}
								
								Page<? extends InvoiceParent> purchseinvoices = clientService.getInvoices(null, client,MasterGSTConstants.PURCHASE_REGISTER,Integer.parseInt(fmonth), Integer.parseInt(fyear));
								if(isNotEmpty(purchseinvoices.getContent())) {	
									for(InvoiceParent invoice:purchseinvoices.getContent()) {
										if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
												if (isNotEmpty(((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty())) {
													String docType = ((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty();
													if(isNotEmpty(invoice.getTotalamount())) {
														if ("C".equals(docType)){
															purchseinvoicesTotalAmount -=invoice.getTotalamount();
														} else if ("D".equals(docType)) {
															purchseinvoicesTotalAmount+=invoice.getTotalamount();
														} else if ("R".equals(docType)) {
															purchseinvoicesTotalAmount+=invoice.getTotalamount();
														}
													}	
												}
										}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
											if (isNotEmpty(((PurchaseRegister) invoice).getCdnur().get(0).getNtty())) {
												String docType = ((PurchaseRegister) invoice).getCdnur().get(0).getNtty();
												if(isNotEmpty(invoice.getTotalamount())) {
													if ("C".equals(docType)) {
														purchseinvoicesTotalAmount -=invoice.getTotalamount();
													} else if ("D".equals(docType)) {
														purchseinvoicesTotalAmount+=invoice.getTotalamount();
													} else if ("R".equals(docType)) {
														purchseinvoicesTotalAmount+=invoice.getTotalamount();
													}
												}	
												
											}
										}else {
											if(isNotEmpty(invoice.getTotalamount())) {
												purchseinvoicesTotalAmount+=invoice.getTotalamount();
											}	
										}
									}
								}
									
						}
					}else {
						
					}
				}	
			}
			map.put("mothlyInvoicesTotalAmount", invoicesTotalAmount);
			map.put("pTotalAmt", purchseinvoicesTotalAmount);
			return map;
	}
		
	
	@Transactional(readOnly=true)
	public Map<String,Double> getAllInvoicesTotals(final Client client, final String userid,	int year) {
		Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, userid, "GSTR1", year);
		 Map<String, Double> map = Maps.newHashMap();
		double invoicesTotalAmount=0;
		if(isNotEmpty(invoices.getContent())) {	
			for(InvoiceParent invoice:invoices.getContent()) {
				if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						if (isNotEmpty(((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty())) {
							String docType = ((GSTR1) invoice).getCdnr().get(0).getNt().get(0).getNtty();
							if(isNotEmpty(invoice.getTotalamount())) {
								if ("C".equals(docType)) {
									invoicesTotalAmount -=invoice.getTotalamount();
								} else if ("D".equals(docType)) {
									invoicesTotalAmount+=invoice.getTotalamount();
								} else if ("R".equals(docType)) {
									invoicesTotalAmount+=invoice.getTotalamount();
								}
							}	
						}
				}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
					if (isNotEmpty(((GSTR1) invoice).getCdnur().get(0).getNtty())) {
						String docType = ((GSTR1) invoice).getCdnur().get(0).getNtty();
						if(isNotEmpty(invoice.getTotalamount())) {
							if ("C".equals(docType)) {
								invoicesTotalAmount -=invoice.getTotalamount();
							} else if ("D".equals(docType)) {
								invoicesTotalAmount+=invoice.getTotalamount();
							} else if ("R".equals(docType)) {
								invoicesTotalAmount+=invoice.getTotalamount();
							}
						}	
						
					}
				}else {
					if(isNotEmpty(invoice.getTotalamount())) {
						invoicesTotalAmount+=invoice.getTotalamount();
					}	
				}
			}
		}
		
		Page<? extends InvoiceParent> purchseinvoices = clientService.getInvoices(null, client, userid, MasterGSTConstants.PURCHASE_REGISTER, year);
		double purchseinvoicesTotalAmount=0;
		
		if(isNotEmpty(purchseinvoices.getContent())) {	
			for(InvoiceParent invoice:purchseinvoices.getContent()) {
				if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CREDIT_DEBIT_NOTES)) {
						if (isNotEmpty(((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty())) {
							String docType = ((PurchaseRegister) invoice).getCdn().get(0).getNt().get(0).getNtty();
							if(isNotEmpty(invoice.getTotalamount())) {
								if ("C".equals(docType)){
									purchseinvoicesTotalAmount -=invoice.getTotalamount();
								} else if ("D".equals(docType)) {
									purchseinvoicesTotalAmount+=invoice.getTotalamount();
								} else if ("R".equals(docType)) {
									purchseinvoicesTotalAmount+=invoice.getTotalamount();
								}
							}	
						}
				}else if(isNotEmpty(invoice) && invoice.getInvtype().equals(MasterGSTConstants.CDNUR)) {
					if (isNotEmpty(((PurchaseRegister) invoice).getCdnur().get(0).getNtty())) {
						String docType = ((PurchaseRegister) invoice).getCdnur().get(0).getNtty();
						if(isNotEmpty(invoice.getTotalamount())) {
							if ("C".equals(docType)) {
								purchseinvoicesTotalAmount -=invoice.getTotalamount();
							} else if ("D".equals(docType)) {
								purchseinvoicesTotalAmount+=invoice.getTotalamount();
							} else if ("R".equals(docType)) {
								purchseinvoicesTotalAmount+=invoice.getTotalamount();
							}
						}	
						
					}
				}else {
					if(isNotEmpty(invoice.getTotalamount())) {
						purchseinvoicesTotalAmount+=invoice.getTotalamount();
					}	
				}
			}
		}
		map.put("invoicesTotalAmount", invoicesTotalAmount);
		map.put("purchseinvoicesTotalAmount", purchseinvoicesTotalAmount);
		
		
		return map;
	}
	@RequestMapping(value = "/payments_history/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String historyPayments(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,@PathVariable("returntype") String returntype,
			@PathVariable("month") int month, @PathVariable("year") int year, @RequestParam("type") String type, ModelMap model,
			HttpServletRequest request) throws Exception {
		
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		Client client = clientService.findById(clientid);
		//List<Payments> paymentslist = clientService.findByClientid(clientid);
		List<Payments> paymentslist =  null;
		if(isNotEmpty(paymentslist)) {
			for(Payments payments : paymentslist) {
				if(isEmpty(payments.getInvtype())) {
					if(isNotEmpty(payments.getInvoiceid())) {
						InvoiceParent invoiceparent=	clientService.recordPaymentDetais(payments.getInvoiceid(), returntype);
						if(isNotEmpty(invoiceparent) && isNotEmpty(invoiceparent.getInvtype())) {
							payments.setInvtype(invoiceparent.getInvtype());
						}
					}
					
				}
			}
		}
		if(month < 4) {
			year--;
		}
		//Map<String,Double> invoices = getAllInvoicesTotals(client,id,year);
		//model.addAttribute("invoicesTotalAmount", invoices.get("invoicesTotalAmount"));
		//model.addAttribute("purchseinvoicesTotalAmount", invoices.get("purchseinvoicesTotalAmount"));
		//model.addAttribute("paymentslist", paymentslist);
		model.addAttribute("client", client);
		model.addAttribute("type", type);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		return "client/payment_history";
	}
	
	@RequestMapping(value = "/purchasespayments_history/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String purchases_historyPayments(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,@PathVariable("returntype") String returntype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model,
			HttpServletRequest request) throws Exception {
		
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if (NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())) {
			InvoiceParent invoiceparent = clientService.recordPaymentDetais(clientid, returntype);
			model.addAttribute("invoiceParent", invoiceparent);
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		Client client = clientService.findById(clientid);
		List<Payments> paymentslist = clientService.findByClientid(clientid);
		model.addAttribute("paymentslist", paymentslist);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		return "client/purchasespayment_history";
	}
	
	@RequestMapping(value = "/PaymentReportsGroupData/{returntype}/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String PaymentReportsGroupDatasales(@PathVariable("id") String id, @PathVariable("name") String fullname, 
			@PathVariable  String returntype,
			@PathVariable("usertype") String usertype, @PathVariable("month") int month, 
			@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "profileCenterClients::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		
		List<Client> listOfClients= clientService.findByUserid(id);
		User user=userService.findById(id);
		List<Branch> branches=new ArrayList<>();
		List<Vertical> verticals=new ArrayList<>();
		
		listOfClients.stream().forEach(clnt->{
			if(isNotEmpty(clnt.getBranches())) {
				clnt.getBranches().stream().forEach(b->{
					branches.add(b);
				});
			}
			
		});
		
		listOfClients.stream().forEach(clnt->{
			if(isNotEmpty(clnt.getVerticals())) {
				clnt.getVerticals().stream().forEach(v->{
					verticals.add(v);
				});
			}
		});
		
		model.addAttribute("user", user);
		model.addAttribute("listOfClients", listOfClients);
		model.addAttribute("userLst", profileService.getAllUsersByUserid(id));
		model.addAttribute("branches", branches);
		model.addAttribute("verticals", verticals);
		
		if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1))
			return "profile/PaymentGroupReportssales";
		else
			return "profile/PaymentGroupReportspurchase";
	}
	
	
	@RequestMapping(value = "/getselectedclientpaymentsmonthly/{returntype}/{listofclients}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody List<Payments> getAdminSalesReportMonthlyPayments(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getPayments::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		
		return clientService.getAdminGroupReportPaymentsMonthly(null,returntype, listofclients,month, year).getContent();
	}
	
	@RequestMapping(value = "/getselectedclientpaymentsyearly/{returntype}/{listofclients}/{year}", method = RequestMethod.GET)
	public @ResponseBody List<Payments> getAdminSalesReportYearlyPayments(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, 
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getPayments::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		
		return clientService.getAdminGroupReportPaymentsYearly(null,returntype, listofclients, year).getContent();
	}
	@RequestMapping(value = "/getselectedclientpaymentscustom/{returntype}/{listofclients}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody List<Payments> getAdminSalesCustomPayments(@PathVariable("listofclients") List<String> listofclients,
			@PathVariable String returntype, @PathVariable("fromtime") String fromtime, @PathVariable("totime") String totime, ModelMap model,
			HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		return clientService.getAdminGroupReportPaymentsCustom(null,returntype, listofclients, fromtime, totime).getContent();
	}

	@RequestMapping(value = "/dwnldxlsmonthlyGroupPaymentsReceived/{returntype}/{listofclients}/{month}/{year}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelDataAdminPaymentsReceivedMonthly(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, @PathVariable("month") int month,
			@PathVariable("year") int year, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		response.setHeader("Content-Disposition", "inline; filename='MGST_"+returntype +"_"+month+ year +"PaymentsTemplate.xls");
		Page<Payments> payments = clientService.getAdminGroupReportPaymentsMonthly(null,returntype, listofclients,month, year);
		
		List<PaymentsVo> paymentvo = paymentexcelList(payments);
		
		File file = new File("MGST_PaymentsReceivedTemplate.xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
			headers = Arrays.asList("Payment Date","Payment ID", "Invoice Number","Customer Name","GSTIN","Tot. Amount Received","Payment Mode", "Reference Number");
			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, paymentvo,"paymentDate, voucherNumber,invoiceNumber, customerName, gstNumber,amount, modeOfPayment, referenceNumber",fos);
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_PaymentsReceivedTemplate.xls"));
	}
	@RequestMapping(value = "/dwnldxlsyearlyGroupPaymentsReceived/{returntype}/{listofclients}/{year}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelDataAdminPaymentsReceivedYearly(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, 
			@PathVariable("year") int year, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		response.setHeader("Content-Disposition", "inline; filename='MGST_"+returntype +"_"+year +"PaymentsTemplate.xls");
		Page<Payments> payments = clientService.getAdminGroupReportPaymentsYearly(null,returntype, listofclients, year);
		List<PaymentsVo> paymentvo = paymentexcelList(payments);
		File file = new File("MGST_PaymentsReceivedTemplate.xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
			headers = Arrays.asList("Payment Date","Payment ID", "Invoice Number","Customer Name","GSTIN","Tot. Amount Received","Payment Mode", "Reference Number");
			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, paymentvo,"paymentDate, voucherNumber,invoiceNumber, customerName, gstNumber,amount, modeOfPayment, referenceNumber",fos);
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_PaymentsReceivedTemplate.xls"));
	}

	@RequestMapping(value = "/dwnldxlscustomGroupPaymentsReceived/{returntype}/{listofclients}/{fromtime}/{totime}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadExcelDataAdminPaymentsReceivedCustom(@PathVariable String returntype,
			@PathVariable("listofclients") List<String> listofclients, @PathVariable("fromtime") String fromtime,
			@PathVariable("totime") String totime, HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		response.setHeader("Content-Disposition", "inline; filename='MGST_"+returntype +"PaymentsTemplate.xls");
		Page<Payments> payments = clientService.getAdminGroupReportPaymentsCustom(null,returntype, listofclients, fromtime, totime);
		List<PaymentsVo> paymentvo = paymentexcelList(payments);
		File file = new File("MGST_PaymentsReceivedTemplate.xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
			headers = Arrays.asList("Payment Date","Payment ID", "Invoice Number","Customer Name","GSTIN","Tot. Amount Received","Payment Mode", "Reference Number");
			SimpleExporter exporter = new SimpleExporter();
			exporter.gridExport(headers, paymentvo,"paymentDate, voucherNumber,invoiceNumber, customerName, gstNumber,amount, modeOfPayment, referenceNumber",fos);
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_PaymentsReceivedTemplate.xls"));
	}

	public List<PaymentsVo> paymentexcelList(Page<Payments> payments){
	List<PaymentsVo> paymentvo = Lists.newArrayList();
		
		if(isNotEmpty(payments)) {
			for(Payments payment : payments) {
				if(isNotEmpty(payment.getPaymentitems()) && payment.getPaymentitems().size() > 0) {
					for(PaymentItems paymentItemData : payment.getPaymentitems()) {
						PaymentsVo paymentVo = new PaymentsVo();
						if(isNotEmpty(payment.getPaymentDate())) {
							paymentVo.setPaymentDate(payment.getPaymentDate());
						}
						if(isNotEmpty(payment.getVoucherNumber())) {
							paymentVo.setVoucherNumber(payment.getVoucherNumber());
						}
						if(isNotEmpty(payment.getInvoiceNumber())) {
							paymentVo.setInvoiceNumber(payment.getInvoiceNumber());
						}
						if(isNotEmpty(payment.getCustomerName())) {
							paymentVo.setCustomerName(payment.getCustomerName());
						}
						if(isNotEmpty(payment.getGstNumber())) {
							paymentVo.setGstNumber(payment.getGstNumber());
						}
						if(isNotEmpty(paymentItemData.getAmount())) {
							paymentVo.setAmount(paymentItemData.getAmount());
						}
						if(isNotEmpty(paymentItemData.getModeOfPayment())) {
							paymentVo.setModeOfPayment(paymentItemData.getModeOfPayment());
						}
						if(isNotEmpty(paymentItemData.getReferenceNumber())) {
							paymentVo.setReferenceNumber(paymentItemData.getReferenceNumber());
						}
						paymentvo.add(paymentVo);
					}
				}else {
					PaymentsVo paymentVo = new PaymentsVo();
					if(isNotEmpty(payment.getPaymentDate())) {
						paymentVo.setPaymentDate(payment.getPaymentDate());
					}
					if(isNotEmpty(payment.getVoucherNumber())) {
						paymentVo.setVoucherNumber(payment.getVoucherNumber());
					}
					if(isNotEmpty(payment.getInvoiceNumber())) {
						paymentVo.setInvoiceNumber(payment.getInvoiceNumber());
					}
					if(isNotEmpty(payment.getCustomerName())) {
						paymentVo.setCustomerName(payment.getCustomerName());
					}
					if(isNotEmpty(payment.getGstNumber())) {
						paymentVo.setGstNumber(payment.getGstNumber());
					}
					if(isNotEmpty(payment.getAmount())) {
						paymentVo.setAmount(payment.getAmount());
					}
					if(isNotEmpty(payment.getModeOfPayment())) {
						paymentVo.setModeOfPayment(payment.getModeOfPayment());
					}
					if(isNotEmpty(payment.getReferenceNumber())) {
						paymentVo.setReferenceNumber(payment.getReferenceNumber());
					}
					paymentvo.add(paymentVo);
				}
			}
		}
		return paymentvo;
	}
	
	@RequestMapping(value = "/multiMonthreports3bvs1yearly/{id}/{name}/{usertype}/{clientid}/{month}/{year}/{filingoption}/{customyear}", method = RequestMethod.GET)
	public String multiMonthreportView3BVS1_yearly(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, 
			@PathVariable("filingoption") String filingoption,@PathVariable("customyear") int customyear, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "multiMonthreportView3BVS1::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		if (NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())) {
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			model.addAttribute("companyUser", companyUser);
			if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
				model.addAttribute("addClient", companyUser.getAddclient());
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);
		
		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH)+1;
		if(presentYear == customyear) {
			if(presentMonth < 4) {
				customyear--;
				year--;
			}
		}
		Client client = clientService.findById(clientid);
		model.addAttribute("customyear", customyear);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		//List<GSTR3B_VS_GSTR1> data=serviceUtils.getYearlyComparision_GSTR3B_VS_GSTR1(clientid, year);
		
		if("Quarterly".equalsIgnoreCase(filingoption)) {
			model.addAttribute("data",serviceUtils.getYearlySummaryComparision_GSTR3B_VS_GSTR1(clientid,id,month, customyear));
			
			model.addAttribute("gstr3bvsgstr1",serviceUtils.getYearlyQuartelyComparision_GSTR3B_VS_GSTR1(clientid,id, customyear));
			model.addAttribute("filingoption",filingoption);
		}else{
		model.addAttribute("data",serviceUtils.getYearlySummaryComparision_GSTR3B_VS_GSTR1(clientid,id,month, customyear));
		
		model.addAttribute("gstr3bvsgstr1",serviceUtils.getYearlyComparision_GSTR3B_VS_GSTR1(clientid,id, customyear));
			model.addAttribute("filingoption",filingoption);
		}
		
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		
		logger.debug(CLASSNAME + method + END);
		return "reports/multi_month_summary3BVS1_yearly";
	}
	
	@RequestMapping(value = "/compare_gstr3b_vs_gstr1/{clientid}/{userid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody GSTR3B_VS_GSTR1 comparision_GSTR3B_VS_GSTR1(@PathVariable String clientid,@PathVariable String userid,
			@PathVariable int month, @PathVariable int year) throws Exception {

		//return serviceUtils.getYearlySummaryComparision_GSTR3B_VS_GSTR1(clientid,"",month, year);
		return serviceUtils.comparision_GSTR3B_VS_GSTR1(clientid,userid, month, year);
	}
	
	@RequestMapping(value = "/record_payments/{id}/{clientid}/{returntype}/{name}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public String addPaymentDetails(@ModelAttribute("paymentform") Payments payments, @PathVariable("id") String id,@PathVariable("clientid") String clientid,@PathVariable("returntype") String returntype,
			@PathVariable("name") String fullname, @PathVariable("usertype") String usertype, @RequestParam("paymentStatus") String paymentStatus,
			@PathVariable("month") int month, @PathVariable("year") int year, @RequestParam("type") String type, ModelMap model) throws Exception {
		final String method = "RecordPayments::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		 logger.debug(CLASSNAME + method + "returntype\t" + returntype);
		if (NullUtil.isNotEmpty(payments.getId()) && new ObjectId(id).equals(payments.getId())) {
			payments.setId(null);
		}
		
		Client client = clientService.findById(clientid);
		Double previousPendingBalance = 0d;
		if(isNotEmpty(payments.getPreviousPendingBalance())) {
			previousPendingBalance = payments.getPreviousPendingBalance();
		}
		
		Double paidAmount = 0d;
		Double cashAmount = 0d;
		Double bankAmount = 0d;
		Double tdsItAmount = 0d;
		Double tdsGstAmount = 0d;
		Double discountAmount = 0d;
		Double othersAmount = 0d;
		
		if(isNotEmpty(payments.getPaymentitems())) {
			for(PaymentItems paymentDetails : payments.getPaymentitems()) {
				paymentDetails.setPendingBalance(previousPendingBalance - paymentDetails.getAmount());
				previousPendingBalance = previousPendingBalance-paymentDetails.getAmount();
				paidAmount += paymentDetails.getAmount();
				if("Cash".equalsIgnoreCase(paymentDetails.getModeOfPayment())) {
					cashAmount += paymentDetails.getAmount();
				}else if("Bank".equalsIgnoreCase(paymentDetails.getModeOfPayment())) {
					bankAmount += paymentDetails.getAmount();
				}else if("Discount Allowed".equalsIgnoreCase(paymentDetails.getModeOfPayment()) || "Discount Received".equalsIgnoreCase(paymentDetails.getModeOfPayment())) {
					discountAmount += paymentDetails.getAmount();
				}else if("TDS Payable".equalsIgnoreCase(paymentDetails.getModeOfPayment()) || "TDS Receivable".equalsIgnoreCase(paymentDetails.getModeOfPayment())) {
					tdsItAmount += paymentDetails.getAmount();
				}else if("TDS-GST".equalsIgnoreCase(paymentDetails.getModeOfPayment())) {
					tdsGstAmount += paymentDetails.getAmount();
				}else{
					bankAmount += paymentDetails.getAmount();
				}
			}
		}
		payments.setPaidAmount(paidAmount);
		payments.setCashAmount(cashAmount);
		payments.setBankAmount(bankAmount);
		payments.setTdsItAmount(tdsItAmount);
		payments.setTdsGstAmount(tdsGstAmount);
		payments.setDiscountAmount(discountAmount);
		payments.setOthersAmount(othersAmount);
		String ledgerName = "";
		if(NullUtil.isNotEmpty(payments.getInvoiceid())) {
			InvoiceParent invoiceparent=	clientService.recordPaymentDetais(payments.getInvoiceid(), returntype);
			if(NullUtil.isNotEmpty(invoiceparent)) {
				
				if (NullUtil.isNotEmpty(invoiceparent.getBilledtoname())) {
					payments.setCustomerName(invoiceparent.getBilledtoname());
				}
				if (NullUtil.isNotEmpty(invoiceparent.getGstin())) {
					payments.setGstNumber(invoiceparent.getGstin());
				}
				if(NullUtil.isNotEmpty(invoiceparent.getLedgerName())) {
					ledgerName = invoiceparent.getLedgerName();
				}else if(NullUtil.isNotEmpty(invoiceparent.getBilledtoname())) {
					ledgerName = invoiceparent.getBilledtoname();
				}else {
					if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
						ledgerName = AccountConstants.OTHER_DEBTORS;
					}else {
						ledgerName = AccountConstants.OTHER_CREDITORS;
					}
				}
				
			}
		}
		boolean isIntraState = true;
		InvoiceParent ppmntinvoice = new InvoiceParent();
		ppmntinvoice = purchaseRepository.findOne(payments.getInvoiceid());
		
		if (isNotEmpty(ppmntinvoice) && isNotEmpty(ppmntinvoice.getStatename())) {
		String statename=	ppmntinvoice.getStatename();
			if (!statename.equals(client.getStatename())) {
				isIntraState = false;
			}
		}
		if(isNotEmpty(payments.getIsadvadjust())) {
			if(payments.getIsadvadjust()) {
				//InvoiceParent invoice = new  InvoiceParent();
				InvoiceParent pmntinvoice = new InvoiceParent();
				if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
					String paymentDate = payments.getPaymentDate();
					String[] pymntmonth = paymentDate.split("-");
					InvoiceParent invoiceparent = clientService.recordPaymentDetails(payments.getVoucherNumber(),clientid, pymntmonth[1]+pymntmonth[2], returntype);
					GSTR1 invoice = null;
					if(isNotEmpty(invoiceparent)) {
						invoice = (GSTR1) invoiceparent;
					}else {
						invoice = new  GSTR1();
					}
					
					pmntinvoice = gstr1repository.findOne(payments.getInvoiceid());
					invoice.setClientid(clientid);
					invoice.setUserid(id);
					
					List<Item> items = Lists.newArrayList();
					Item gstrItem = new Item();
					gstrItem.setAdvReceiptNo(payments.getAdvpmntrecno());
					gstrItem.setAdvReceiptDate(payments.getAdvpmntrecdate());
					gstrItem.setAdvStateName(payments.getAdvpmntpos());
					gstrItem.setAdvReceivedAmount(payments.getAdvpmntrecamt());
					gstrItem.setAdvAdjustableAmount(payments.getAdvpmntavailadjust());
					gstrItem.setAdvadjustedAmount(payments.getAdvpmntadjust());
					gstrItem.setRate(payments.getAdvpmnttaxrate());
					gstrItem.setIgstamount(payments.getAdvpmntigstamt());
					gstrItem.setCgstamount(payments.getAdvpmntcgstamt());
					gstrItem.setSgstamount(payments.getAdvpmntsgstamt());
					gstrItem.setCessrate(payments.getAdvpmntcessrate());
					gstrItem.setCessamount(payments.getAdvpmntcessamt());
					gstrItem.setTotal(payments.getAdvpmntremainamt());
					gstrItem.setElg("no");
					gstrItem.setElgpercent(0d);
					items.add(gstrItem);
					invoice.setItems(items);
					Double advigstamt=0d;Double advcgstamt=0d;Double advsgstamt=0d;Double advcessamt=0d;Double advtotal = 0d;
					for(Item advitems : pmntinvoice.getItems()) {
						if(isNotEmpty(advitems)) {
							if(isNotEmpty(pmntinvoice.getItems())) {
								if(isNotEmpty(advitems.getIgstamount())) {
									advigstamt = advigstamt + advitems.getIgstamount();
									advtotal += advitems.getIgstamount();
								}else {
									advigstamt = 0d;
								}
								if(isNotEmpty(advitems.getCgstamount())) {
									advcgstamt = advcgstamt + advitems.getCgstamount();
									advtotal += advitems.getCgstamount();
								}else {
									advcgstamt = 0d;
								}
								if(isNotEmpty(advitems.getSgstamount())) {
									advsgstamt = advsgstamt + advitems.getSgstamount();
									advtotal += advitems.getSgstamount();
								}else {
									advsgstamt = 0d;
								}
								if(isNotEmpty(advitems.getCessamount())) {
									advcessamt = advcessamt + advitems.getCessamount();
									advtotal += advitems.getCessamount();
								}else {
									advsgstamt = 0d;
								}
						}
					}
				}	
					invoice.setAdvPIgstamt(advigstamt);
					invoice.setAdvPCgstamt(advcgstamt);
					invoice.setAdvPSgstamt(advsgstamt);
					invoice.setTotaltax(advtotal);
					invoice.setTotalamount(payments.getAdvpmntremainamt());
					
					invoice.setInvoiceno(payments.getVoucherNumber());
					invoice.setInvtype("Advance Adjusted Detail");
					invoice.setRevchargetype("Regular");
					invoice.setBilledtoname(pmntinvoice.getBilledtoname());
					Date date1=new SimpleDateFormat("dd-MM-yyyy").parse(payments.getPaymentDate()); 
					invoice.setDateofinvoice(date1);
					invoice.setAdvOriginalInvoiceNumber(payments.getInvoiceNumber());
					invoice.setAdvPCustname(pmntinvoice.getBilledtoname());
					invoice.setAdvPInvamt(pmntinvoice.getTotaltaxableamount());	
						
					invoiceSaveUtils.saveInvoice(invoice, "GSTR1", usertype, month, year, model);
					
				}else if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
					String paymentDate = payments.getPaymentDate();
					String[] pymntmonth = paymentDate.split("-");
					InvoiceParent invoiceparent = clientService.recordPaymentDetails(payments.getVoucherNumber(),clientid, pymntmonth[1]+pymntmonth[2], returntype);
					PurchaseRegister invoice = null;
					if(isNotEmpty(invoiceparent)) {
						invoice = (PurchaseRegister) invoiceparent;
					}else {
						invoice = new  PurchaseRegister();
					}
					
					InvoiceParent pmntinvoice1 = new InvoiceParent();
					pmntinvoice1 = purchaseRepository.findOne(payments.getInvoiceid());
					invoice.setClientid(clientid);
					invoice.setUserid(id);
					
					List<Item> items = Lists.newArrayList();
					Item gstrItem = new Item();
					gstrItem.setAdvReceiptNo(payments.getAdvpmntrecno());
					gstrItem.setAdvReceiptDate(payments.getAdvpmntrecdate());
					gstrItem.setAdvStateName(payments.getAdvpmntpos());
					gstrItem.setAdvReceivedAmount(payments.getAdvpmntrecamt());
					gstrItem.setAdvAdjustableAmount(payments.getAdvpmntavailadjust());
					gstrItem.setAdvadjustedAmount(payments.getAdvpmntadjust());
					gstrItem.setRate(payments.getAdvpmnttaxrate());
					gstrItem.setIgstamount(payments.getAdvpmntigstamt());
					gstrItem.setCgstamount(payments.getAdvpmntcgstamt());
					gstrItem.setSgstamount(payments.getAdvpmntsgstamt());
					gstrItem.setCessrate(payments.getAdvpmntcessrate());
					gstrItem.setCessamount(payments.getAdvpmntcessamt());
					gstrItem.setTotal(payments.getAdvpmntremainamt());
					gstrItem.setElg("no");
					gstrItem.setElgpercent(0d);
					items.add(gstrItem);
					invoice.setItems(items);
					Double advigstamt=0d;Double advcgstamt=0d;Double advsgstamt=0d;Double advcessamt=0d;Double advtotal = 0d;
					for(Item advitems : pmntinvoice.getItems()) {
						if(isNotEmpty(advitems)) {
							if(isNotEmpty(pmntinvoice.getItems())) {
								if(isNotEmpty(advitems.getIgstamount())) {
									advigstamt = advigstamt + advitems.getIgstamount();
									advtotal += advitems.getIgstamount();
								}else {
									advigstamt = 0d;
								}
								if(isNotEmpty(advitems.getCgstamount())) {
									advcgstamt = advcgstamt + advitems.getCgstamount();
									advtotal += advitems.getCgstamount();
								}else {
									advcgstamt = 0d;
								}
								if(isNotEmpty(advitems.getSgstamount())) {
									advsgstamt = advsgstamt + advitems.getSgstamount();
									advtotal += advitems.getSgstamount();
								}else {
									advsgstamt = 0d;
								}
								if(isNotEmpty(advitems.getCessamount())) {
									advcessamt = advcessamt + advitems.getCessamount();
									advtotal += advitems.getCessamount();
								}else {
									advsgstamt = 0d;
								}
						}
					}
				}	
					invoice.setAdvPIgstamt(advigstamt);
					invoice.setAdvPCgstamt(advcgstamt);
					invoice.setAdvPSgstamt(advsgstamt);
					invoice.setTotaltax(advtotal);
					invoice.setTotalamount(payments.getAdvpmntremainamt());
					
					invoice.setInvoiceno(payments.getVoucherNumber());
					invoice.setInvtype("Advance Adjusted Detail");
					invoice.setRevchargetype("Regular");
					invoice.setBilledtoname(pmntinvoice1.getBilledtoname());
					Date date1=new SimpleDateFormat("dd-MM-yyyy").parse(payments.getPaymentDate()); 
					invoice.setDateofinvoice(date1);
					invoice.setAdvOriginalInvoiceNumber(payments.getInvoiceNumber());
					invoice.setAdvPCustname(pmntinvoice1.getBilledtoname());
					invoice.setAdvPInvamt(pmntinvoice1.getTotaltaxableamount());
					invoice.setBillDate(pmntinvoice1.getBillDate());
					
					clientService.savePurchaseRegister(invoice, isIntraState);
				}
					
			}	
		}
		
		if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
			InvoiceParent invparent= gstr1repository.findOne(payments.getInvoiceid());
			if(isNotEmpty(invparent)) {
				if(isNotEmpty(payments.getPendingBalance())) {
					invparent.setPendingAmount(payments.getPendingBalance());
				}
				if(isNotEmpty(payments.getReceivedAmount())) {
					invparent.setReceivedAmount(Double.parseDouble(payments.getReceivedAmount().replaceAll(",","")));
				}
			invparent.setPaymentStatus(paymentStatus);
			clientService.saveGSTRInvoice(invparent, MasterGSTConstants.GSTR1);
			}
			
		}else if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
			InvoiceParent invoice=purchaseRepository.findOne(payments.getInvoiceid());
			if(isNotEmpty(invoice)) {
				if(isNotEmpty(payments.getPendingBalance())) {
					invoice.setPendingAmount(payments.getPendingBalance());
				}
				if(isNotEmpty(payments.getReceivedAmount())) {
					invoice.setReceivedAmount(Double.parseDouble(payments.getReceivedAmount().replaceAll(",", "")));
				}
			invoice.setPaymentStatus(paymentStatus);	
			clientService.savePurchaseRegister(invoice, isIntraState);
		}
		}
		
		payments.setClientid(clientid);
		payments.setUserid(id);
		
		String[] paymentDate=payments.getPaymentDate().split("-");
		
		int monthCd=Integer.parseInt(paymentDate[1]);
		int yearCd=Integer.parseInt(paymentDate[2]);
		int mnth = Integer.parseInt(paymentDate[1])-1;
		int quarter = mnth/3;
		quarter = quarter == 0 ? 4 : quarter;
		String yearCode = quarter == 4 ? (yearCd-1)+"-"+yearCd : (yearCd)+"-"+(yearCd+1);
		
		payments.setMthCd(monthCd+"");
		payments.setQrtCd(quarter+"");
		payments.setYrCd(yearCode);
		
		Payments payment =  clientService.saveRecordPayments(payments);
		
		AccountingJournal journal = null; 
		AccountingJournal paymentJournal = accountingJournalRepository.findByInvoiceId(payment.getId().toString());
		if(isNotEmpty(paymentJournal)) {
			journal = paymentJournal;
		}else {
			journal = new AccountingJournal();
			List<AccountingJournal> journals = accountingJournalRepository.findByClientId(clientid);
			String journalnumber = "1";
			if(isNotEmpty(journals)) {
				journalnumber = journals.size()+1+"";
				journal.setJournalNumber(journalnumber);
			}
		}
		
		journal.setClientId(clientid);
		journal.setUserId(id);
		journal.setInvoiceNumber(payment.getVoucherNumber());
		journal.setVendorName(ledgerName);
		journal.setInvoiceId(payment.getId().toString());
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String ptDate[] = payment.getPaymentDate().split("-");
		String strmonth = ptDate[1]+ptDate[2];
		journal.setInvoiceMonth(strmonth);
		try {
			journal.setDateofinvoice(dateFormat.parse(payment.getPaymentDate()));
			Date dt = (Date)journal.getDateofinvoice();
			if(isNotEmpty(dt)) {
				int vcmonth = dt.getMonth();
				int vcyear = dt.getYear()+1900;
				int vcquarter = vcmonth/3;
				vcquarter = vcquarter == 0 ? 4 : vcquarter;
				String vcyearCode = vcquarter == 4 ? (vcyear-1)+"-"+vcyear : (vcyear)+"-"+(vcyear+1);
				vcmonth++;
				
				journal.setMthCd(""+vcmonth);
				journal.setYrCd(""+vcyearCode);
				journal.setQrtCd(""+vcquarter);
			}
		} catch (ParseException e) {
		}
		Double amountReceived = 0d;
		if(isNotEmpty(payment.getPreviousPendingBalance()) && isNotEmpty(payment.getPendingBalance())) {
				amountReceived = payment.getPreviousPendingBalance() - payment.getPendingBalance();
		}
		journal.setPaymentReceivedAmount(amountReceived);
		List<PaymentItems> paymentItems = payment.getPaymentitems();
		List<AccountingJournalPaymentItems> journalItems = Lists.newArrayList();
		Map<String, AccountingJournalPaymentItems> acpaymentjournal = Maps.newHashMap(); 
		if(isNotEmpty(paymentItems)) {
			for(PaymentItems payItem : paymentItems) {
				if(acpaymentjournal.size() == 0) {
					AccountingJournalPaymentItems acpaymentitem = new AccountingJournalPaymentItems();
					acpaymentitem.setLedgerName(payItem.getLedger());
					acpaymentitem.setAmount(payItem.getAmount());
					acpaymentjournal.put(payItem.getLedger(), acpaymentitem);
				}else {
					if(isNotEmpty(acpaymentjournal.get(payItem.getLedger()))) {
						AccountingJournalPaymentItems acpaymentitem = acpaymentjournal.get(payItem.getLedger());
						acpaymentitem.setAmount(acpaymentitem.getAmount() + payItem.getAmount());
						acpaymentjournal.put(payItem.getLedger(), acpaymentitem);
					}else {
						AccountingJournalPaymentItems acpaymentitem = new AccountingJournalPaymentItems();
						acpaymentitem.setLedgerName(payItem.getLedger());
						acpaymentitem.setAmount(payItem.getAmount());
						acpaymentjournal.put(payItem.getLedger(), acpaymentitem);
					}
				}
			}
		}
		
		List<JournalEntrie> drEntries = Lists.newArrayList();
		List<JournalEntrie> crEntries = Lists.newArrayList();
		 for (Map.Entry<String,AccountingJournalPaymentItems> entry : acpaymentjournal.entrySet()) {
			 journalItems.add(entry.getValue());
			 if(isNotEmpty(entry.getValue()) && isNotEmpty(entry.getValue().getLedgerName())) {
				 if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
					 drEntries.add(new JournalEntrie(entry.getValue().getLedgerName(), entry.getValue().getAmount() != null ? entry.getValue().getAmount() : 0));
				 }else if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
					 crEntries.add(new JournalEntrie(entry.getValue().getLedgerName(), entry.getValue().getAmount() != null ? entry.getValue().getAmount() : 0));
				 }
			 }
		 }
		 if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
			 crEntries.add(new JournalEntrie(ledgerName, amountReceived != null ? amountReceived : 0));
		 }else if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
			 drEntries.add(new JournalEntrie(ledgerName, amountReceived != null ? amountReceived : 0));
		 }
		 journal.setDrEntrie(drEntries);
		 journal.setCrEntrie(crEntries);
		 journal.setNoofpayments(journalItems.size());
		 journal.setPaymentitems(journalItems);
		 Double creditDebitTotal = 0d;
		 for(AccountingJournalPaymentItems items : journalItems) {
			 creditDebitTotal += items.getAmount() == null ? 0.0 : items.getAmount();
		 }
		 if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
			 journal.setReturnType("Payment Receipt");
			journal.setDebitTotal(creditDebitTotal);
			journal.setCreditTotal(amountReceived);
		 }else if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
			 journal.setReturnType("Payment");
			journal.setCreditTotal(creditDebitTotal);
			journal.setDebitTotal(amountReceived);
		 }
		 accountingJournalRepository.save(journal);
		 if("GSTR1".equals(type) || "SalesRegister".equals(type)) {
			 return "redirect:/payments_history/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + returntype + "/" + month + "/" + year + "?type=receive";
		 }else if("GSTR2".equals(type) || "PurchaseRegister".equals(type)) {
			 return "redirect:/payments_history/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + returntype + "/" + month + "/" + year + "?type=made";
		 }else if("journal".equals(type)){
			 return "redirect:/journaldetails/" + id + "/" + fullname + "/" + usertype + "/" + clientid +  "/" + month + "/" + year + "?type=Monthly";
		 }else if("ledgerreport".equals(type)){
			 return "redirect:/ledgerreports/" + id + "/" + fullname + "/" + usertype + "/" + clientid +  "/" + month + "/" + year;
		 }else {
			 return "redirect:/alliview/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + returntype + "/" + month + "/" + year + "?type=inv"; 
		 }
	}
	
	
	
	@RequestMapping(value = "/populate_recordvalues/{invoiceid}/{returntype}/{invoicetype}")
	public @ResponseBody  Map<String, String> invoicedetails(@PathVariable("invoiceid") String invoiceid,@PathVariable("returntype") String returntype,@PathVariable("invoicetype") String invoicetype, ModelMap model) throws Exception {
		Map<String, String> map = Maps.newHashMap();
		if(invoicetype.equalsIgnoreCase("Credit Note")) {
			if(returntype.equalsIgnoreCase(MasterGSTConstants.GSTR1)) {
				returntype = MasterGSTConstants.GSTR2;
			}else {
				returntype = MasterGSTConstants.GSTR1;
			}
		}
		InvoiceParent invoiceparent=clientService.recordPaymentDetais(invoiceid, returntype);
		List<Payments> recpayments=clientService.recordPaymentsHistory(invoiceparent.getClientid(), invoiceparent.getId().toString());
				 
		Double amt=0d;
		if(isNotEmpty(recpayments)) {
			for(Payments recordpayement:recpayments) {		
				if(isNotEmpty(recordpayement.getAmount())) {
					amt +=recordpayement.getAmount();
				}
				if(isNotEmpty(recordpayement.getPaymentitems())) {
					for(PaymentItems paymentitems : recordpayement.getPaymentitems()) {
						if(isNotEmpty(paymentitems.getAmount())) {
							amt +=paymentitems.getAmount();
						}
					}
				}
			}
		}
	    CompanyBankDetails bankDetails = invoiceparent.getBankDetails();
		//Client client=clientService.findById(invoiceid);
		  
		SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
		  
		map.put("invdate",sdf.format(invoiceparent.getDateofinvoice()));
		map.put("invoicenumber",invoiceparent.getInvoiceno());
		map.put("totalamount", invoiceparent.getTotalamount()+"");
		map.put("amount",amt+"");
		map.put("billedtoname", invoiceparent.getBilledtoname());
		map.put("gstin", invoiceparent.getB2b().get(0).getCtin());
		map.put("invoiceid",invoiceid);
		map.put("invtype",invoiceparent.getInvtype());
		if(isNotEmpty(bankDetails)) {
			map.put("bankname", bankDetails.getBankname());
			map.put("accountno", bankDetails.getAccountnumber());
			map.put("accountname", bankDetails.getAccountName());
			map.put("branchname", bankDetails.getBranchname());
			map.put("ifsccode", bankDetails.getIfsccode());
		}
		return map;	 
	}
	
	/**
	 * GSTR2-vs-GSTR3B-vs-GSTR2A Monthly comparison
	 */
	@RequestMapping(value = "/compare_gstr3b_vs_gstr2amonthly/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody GSTR3B_VS_GSTR2A comparision_GSTR3B_VS_GSTR2AMonthly(@PathVariable String clientid,
			@PathVariable int month, @PathVariable int year) throws Exception {

		
		return serviceUtils.comparision_GSTR3B_VS_GSTR2A(clientid, month, year);
	}
	
	/**
	 * GSTR2-vs-GSTR3B-vs-GSTR2A Yearly comparison
	 */
	@RequestMapping(value = "/multiMonthreports3BVS2Ayearly//{id}/{name}/{usertype}/{clientid}/{month}/{year}/{customyear}", method = RequestMethod.GET)
	public String comparision_GSTR3B_VS_GSTR2AYearly(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,@PathVariable("month") int month, 
			@PathVariable("year") int year, @PathVariable("customyear") int customyear, ModelMap model) throws Exception {

		final String method = "comparision_GSTR3B_VS_GSTR2AYearly::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);
		int presentYear = calendar.get(Calendar.YEAR);
		int presentMonth = calendar.get(Calendar.MONTH)+1;
		if(presentYear == customyear) {
			if(presentMonth < 4) {
				customyear--;
				year--;
			}
		}
		Client client = clientService.findById(clientid);
		model.addAttribute("client", client);
		model.addAttribute("user", user);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		model.addAttribute("data", serviceUtils.getYearlySummaryComparision_GSTR3B_VS_GSTR2A(clientid, id, month,customyear));
		model.addAttribute("gstr3bvsgstr2a", serviceUtils.getYearlyComparision_GSTR3B_VS_GSTR2A(clientid,customyear));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "reports/multi_month_summary3BVS2A_yearly";
	}	
	/*
	 * 
	 * GSTR3B Download Data Reports page
	 * 
	 */
	
	@RequestMapping(value = "/addsupinvoice_reports/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String addSuppliesInvoice_GSTR3B(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addSuppliesInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		
		String dwnldstatus=null;
		
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		model.addAttribute("returntype", GSTR3B);

		Client client = clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		ClientStatus clientStatus = clientService.getClientStatus(clientid, GSTR3B, retPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		GSTR3B gstr3b = clientService.getSuppliesInvoice(clientid, retPeriod);
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				model.addAttribute("error", errormsg);
				return errormsg;
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
				return "subscription_expired";
			}
		} else {
			if (isEmpty(clientStatus)) {
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), retPeriod, id, GSTR3B, true);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							client.setStatus(trackResponse.getStatus());
							CompletableFuture<TrackResponse> future = CompletableFuture.supplyAsync(() -> trackResponse);
							future.thenAcceptAsync(trackResp -> {
								ClientStatus clntStatus = new ClientStatus();
								clntStatus.setClientId(client.getId().toString());
								clntStatus.setReturnPeriod(trackResp.getRetPeriod());
								clntStatus.setReturnType(trackResp.getRtntype());
								clntStatus.setStatus(trackResp.getStatus());
								clntStatus.setArn(trackResp.getArn());
								if(isNotEmpty(trackResp.getDof())) {
								SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
								try {
										clntStatus.setDof(dateFormat.parse(trackResp.getDof()));
										clientService.saveClientStatus(clntStatus);
								} catch (ParseException e) {
								}
							}
							});
						}
					}
				}
			}
			ClientStatus clientStatuss = clientService.getClientStatus(clientid, GSTR3B, retPeriod);
			
			if(isNotEmpty(clientStatuss) && isNotEmpty(clientStatuss.getStatus()) && (clientStatuss.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_FILED) || clientStatuss.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED))) {
					gstr3b = new GSTR3B();
				try {
					Response response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, id, GSTR3B, true);
					if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
						if (isNotEmpty(response.getData().getSupDetails())) {
							gstr3b.setSupDetails(response.getData().getSupDetails());
						}
						if (isNotEmpty(response.getData().getInterSup())) {
							gstr3b.setInterSup(response.getData().getInterSup());
						}
						if (isNotEmpty(response.getData().getInwardSup())) {
							gstr3b.setInwardSup(response.getData().getInwardSup());
						}
						if (isNotEmpty(response.getData().getItcElg())) {
							gstr3b.setItcElg(response.getData().getItcElg());
						}
						if (isNotEmpty(response.getData().getIntrLtfee())
								&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
							gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
						}
						if (isNotEmpty(response.getData().getTaxPymt())) {
							gstr3b.setOffLiab(new GSTR3BOffsetLiability());
							if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
								gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
								gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
								gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
							}
						}
						String returnPeriod = strMonth + year;
						gstr3b.setRetPeriod(returnPeriod);
						gstr3b.setGstin(client.getGstnnumber());
						gstr3b.setCreatedDate(new Date());
						gstr3b.setClientid(clientid);
						gstr3b.setUserid(id);
						gstr3BRepository.deleteByClientidAndRetPeriod(clientid,returnPeriod);
						gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);
						dwnldstatus="DATA_FOUND";
					}else {
						dwnldstatus="NODATA_FOUND";
					}
				} catch (Exception e) {
					logger.error(CLASSNAME + method + " ERROR", e);
					downloadGSTRXStatus(MasterGSTConstants.GSTR3B, userid, clientid, retPeriod, year, "NODATA_FOUND", strMonth);
					model.addAttribute("error", e.getMessage());
				}
				downloadGSTRXStatus(MasterGSTConstants.GSTR3B, userid, clientid, retPeriod, year, dwnldstatus, strMonth);
				/*List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(id,clientid, retPeriod);
				gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
				
					GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
					status.setUserid(id);
					status.setClientid(clientid);
					status.setReturnperiod(retPeriod);
					status.setStatus("DOWNLOAD");
					status.setFinancialyear(year + "");
					status.setCurrrentmonth(strMonth);
					gstr3BDowloadService.savedownloadstatus(status);*/
				
				logger.debug(CLASSNAME + method + END);
			}else {
				if (isEmpty(gstr3b)) {
					gstr3b = new GSTR3B();
				}
					try {
						Response response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, id, GSTR3B, true);
						if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
							if (isNotEmpty(response.getData().getSupDetails())) {
								gstr3b.setSupDetails(response.getData().getSupDetails());
							}
							if (isNotEmpty(response.getData().getInterSup())) {
								gstr3b.setInterSup(response.getData().getInterSup());
							}
							if (isNotEmpty(response.getData().getInwardSup())) {
								gstr3b.setInwardSup(response.getData().getInwardSup());
							}
							if (isNotEmpty(response.getData().getItcElg())) {
								gstr3b.setItcElg(response.getData().getItcElg());
							}
							if (isNotEmpty(response.getData().getIntrLtfee())
									&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
								gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
							}
							if (isNotEmpty(response.getData().getTaxPymt())) {
								gstr3b.setOffLiab(new GSTR3BOffsetLiability());
								if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
									gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
								}
								if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
									gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
								}
								if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
									gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
								}
							}
							
							String returnPeriod = strMonth + year;
							gstr3b.setRetPeriod(returnPeriod);
							gstr3b.setGstin(client.getGstnnumber());
							gstr3b.setCreatedDate(new Date());
							gstr3b.setClientid(clientid);
							gstr3b.setUserid(id);
							gstr3BRepository.deleteByClientidAndRetPeriod(clientid,returnPeriod);
							gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);
							dwnldstatus="DATA_FOUND";
						}else {
							dwnldstatus="NODATA_FOUND";
						}
					} catch (Exception e) {
						downloadGSTRXStatus(MasterGSTConstants.GSTR3B, userid, clientid, retPeriod, year, "NODATA_FOUND", strMonth);
						logger.error(CLASSNAME + method + " ERROR", e);
						model.addAttribute("error", e.getMessage());
					}	
				logger.debug(CLASSNAME + method + END);
				downloadGSTRXStatus(MasterGSTConstants.GSTR3B, userid, clientid, retPeriod, year, dwnldstatus, strMonth);
				/*List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(userid,clientid, retPeriod);
				gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
				
					GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
					status.setUserid(userid);
					status.setClientid(clientid);
					status.setReturnperiod(retPeriod);
					status.setStatus("DOWNLOAD");
					status.setFinancialyear(year + "");
					status.setCurrrentmonth(strMonth);
					gstr3BDowloadService.savedownloadstatus(status);*/
					
			}
		}
		return dwnldstatus;
	}
	
	@RequestMapping(value = "/getitcinvsdwnld/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public void getdwnldItcUnclaimedinvoices(@PathVariable("id") String id,	@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("month") int month, @PathVariable("year") int year, @RequestParam String  itcinvtype,@RequestParam String  dwnldxlstype, HttpServletResponse response, HttpServletRequest request) {
		Pageable pageable = new PageRequest(0, Integer.MAX_VALUE);
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
		}
		Calendar cal = Calendar.getInstance();
		
		cal.set(year, month - 1, 0, 23, 59, 59);
		
		if(month == 0) {
			cal.set(year, 3, 0, 23, 59, 59);
		}
		Date stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		if(month == 0) {
			cal.set(year + 1, 3, 0, 23, 59, 59);
		}
		Date endDate = new java.util.Date(cal.getTimeInMillis());
		List<String> invtype = Arrays.asList(MasterGSTConstants.ADVANCES,MasterGSTConstants.ATPAID, MasterGSTConstants.NIL,MasterGSTConstants.ITC_REVERSAL);
		Page<? extends InvoiceParent> invoices = purchageRegisterDao.findByItcinvoices(clientid, invtype, itcinvtype, stDate, endDate);
		//List<InvoiceVO> invoiceVOList = getInvoice_Wise_List(invoices,MasterGSTConstants.PURCHASE_REGISTER);
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
			invoiceVOList = invoiceListItems(invoices,MasterGSTConstants.PURCHASE_REGISTER);
		}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
			invoiceVOList = getInvoice_Wise_List(invoices,MasterGSTConstants.PURCHASE_REGISTER);
		}
		List<String> headers = null;
			if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
				if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN", "CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period",
							"Invoice Type", "State","Item Name", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount","ITC Type","ITC Percentage", "ITC Available","In Eligible ITC","ITC Claimed Date","Total Tax","Total Invoice Value");				
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period",
							"Invoice Type", "State", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","ITC Claimed Date","Total Tax","Total Invoice Value");
				}
			}else {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period",
						"Invoice Type", "State", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value");
			}


		if(invoiceVOList.size() < 10000) {
			String filename = "";
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
				filename = "MGST_Claimed_Invoices_"+gstnumber+"_"+month+year+".xls";
				response.setHeader("Content-Disposition", "inline; filename='MGST_Claimed_Invoices_"+gstnumber+"_"+month+year+".xls");
			}else {
				filename = "MGST_Unclaimed_Invoices_"+gstnumber+"_"+month+year+".xls";
				response.setHeader("Content-Disposition", "inline; filename='MGST_Unclaimed_Invoices_"+gstnumber+"_"+month+year+".xls");
			}
			File file = new File(filename);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,
							"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state,itemname, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount,itcType,eligiblePercentage, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
					}else {
						exporter.gridExport(headers, invoiceVOList,
							"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
					}
				}else {
					exporter.gridExport(headers, invoiceVOList,
						"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue",fos);
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else{
			
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String filename = "MGST_Claimed_Invoices_"+gstnumber+"_"+month+year+".zip";
				if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
					filename = "MGST_Claimed_Invoices_"+gstnumber+"_"+month+year+".zip";
				}else {
					filename = "MGST_Unclaimed_Invoices_"+gstnumber+"_"+month+year+".zip";
				}
				response.setHeader("Content-Disposition", "attachment; filename="+filename);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					String xlsname = "";
					if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
						xlsname = "MGST_Claimed_Invoices_"+gstnumber+"_"+month+year+"_"+(c+1)+ ".xls";
					}else {
						xlsname = "MGST_Unclaimed_Invoices_"+gstnumber+"_"+month+year+"_"+(c+1)+ ".xls";
					}
					File file1 = new File(xlsname);
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,
								"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state,itemname, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount,itcType,eligiblePercentage, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
						}else {
							exporter.gridExport(headers, InvoicesList,
								"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
						}
					}else {
						exporter.gridExport(headers, InvoicesList,
							"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue",fos);
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		
		}
	}
	
	
	@RequestMapping(value = "/getitcCustominvsdwnld/{id}/{clientid}/{returntype}/{fromtime}/{totime}", method = RequestMethod.GET)
	public void getdwnldItcUnclaimedinvoicescustom(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("fromtime") String fromtime, @PathVariable("totime") String totime, @RequestParam String  itcinvtype, @RequestParam String dwnldxlstype, HttpServletResponse response, HttpServletRequest request) {
		Pageable pageable = new PageRequest(0, Integer.MAX_VALUE);
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
		}
		
		String[] fromtimes = fromtime.split("-");
		String[] totimes = totime.split("-");
		Date stDate = null;
		Date endDate = null;
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(fromtimes[2]), Integer.parseInt(fromtimes[1])-1, Integer.parseInt(fromtimes[0])-1, 23, 59, 59);
		stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(Integer.parseInt(totimes[2]), Integer.parseInt(totimes[1])-1, Integer.parseInt(totimes[0]), 23, 59, 59);
		endDate = new java.util.Date(cal.getTimeInMillis());
		List<String> invtype = Arrays.asList(MasterGSTConstants.ADVANCES,MasterGSTConstants.ATPAID, MasterGSTConstants.NIL,MasterGSTConstants.ITC_REVERSAL);
		List<InvoiceVO> invoiceVOList=null;
		Page<? extends InvoiceParent> invoices = purchageRegisterDao.findByItcinvoices(clientid, invtype, itcinvtype, stDate, endDate);
		if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
			invoiceVOList = invoiceListItems(invoices,MasterGSTConstants.PURCHASE_REGISTER);
		}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
			invoiceVOList = getInvoice_Wise_List(invoices,MasterGSTConstants.PURCHASE_REGISTER);
		}
		List<String> headers = null;
			if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
				if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN", "CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period",
							"Invoice Type", "State","Item Name", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount","ITC Type","ITC Percentage", "ITC Available","In Eligible ITC","ITC Claimed Date","Total Tax","Total Invoice Value");				
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period",
							"Invoice Type", "State", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","ITC Claimed Date","Total Tax","Total Invoice Value");
				}
			}else {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period",
						"Invoice Type", "State", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value");
			}


		if(invoiceVOList.size() < 10000) {
			String filename = "";
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
				filename = "MGST_Claimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".xls";
				response.setHeader("Content-Disposition", "inline; filename='MGST_Claimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".xls");
			}else {
				filename = "MGST_Unclaimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".xls";
				response.setHeader("Content-Disposition", "inline; filename='MGST_Unclaimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".xls");
			}
			File file = new File(filename);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,
							"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state,itemname, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount,itcType,eligiblePercentage, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
					}else {
						exporter.gridExport(headers, invoiceVOList,
							"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
					}
				}else {
					exporter.gridExport(headers, invoiceVOList,
						"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue",fos);
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else{
			
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String filename = "MGST_Claimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".zip";
				if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
					filename = "MGST_Claimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".zip";
				}else {
					filename = "MGST_Unclaimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+".zip";
				}
				response.setHeader("Content-Disposition", "attachment; filename="+filename);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					String xlsname = "";
					if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
						xlsname = "MGST_Claimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+"_"+(c+1)+ ".xls";
					}else {
						xlsname = "MGST_Unclaimed_Invoices_"+gstnumber+"_"+fromtime+"_"+totime+"_"+(c+1)+ ".xls";
					}
					File file1 = new File(xlsname);
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if("itc_claimed".equalsIgnoreCase(itcinvtype)) {
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,
								"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state,itemname, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount,itcType,eligiblePercentage, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
						}else {
							exporter.gridExport(headers, InvoicesList,
								"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc,dateOfItcClaimed, totaltax,totalValue",fos);
						}
					}else {
						exporter.gridExport(headers, InvoicesList,
							"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, type, state, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue",fos);
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		
		}
	}
		
	
	
	public String getGSTR3BData_download(String id,String fullname,String usertype, String clientid,int month,int year) throws Exception {
		final String method = "getGSTR3BData_download::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
			}
		}
		String dwnldstatus=null;
		Client client = clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		ClientStatus clientStatus = clientService.getClientStatus(clientid, GSTR3B, retPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		
		GSTR3B gstr3b = clientService.getSuppliesInvoice(clientid, retPeriod);
			if (isEmpty(clientStatus)) {
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), retPeriod, id, GSTR3B, true);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							client.setStatus(trackResponse.getStatus());
							CompletableFuture<TrackResponse> future = CompletableFuture.supplyAsync(() -> trackResponse);
							future.thenAcceptAsync(trackResp -> {
								ClientStatus clntStatus = new ClientStatus();
								clntStatus.setClientId(client.getId().toString());
								clntStatus.setReturnPeriod(trackResp.getRetPeriod());
								clntStatus.setReturnType(trackResp.getRtntype());
								clntStatus.setStatus(trackResp.getStatus());
								clntStatus.setArn(trackResp.getArn());
								if(isNotEmpty(trackResp.getDof())) {
								SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
								try {
										clntStatus.setDof(dateFormat.parse(trackResp.getDof()));
										clientService.saveClientStatus(clntStatus);
								} catch (ParseException e) {
								}
							}
							});
						}
					}
				}
			}
			ClientStatus clientStatuss = clientService.getClientStatus(clientid, GSTR3B, retPeriod);
			if(isNotEmpty(clientStatuss) && isNotEmpty(clientStatuss.getStatus()) && (clientStatuss.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_FILED) || clientStatuss.getStatus().equalsIgnoreCase(MasterGSTConstants.STATUS_SUBMITTED))) {
				if (isEmpty(gstr3b)) {
					gstr3b = new GSTR3B();
				}
				try {
					Response response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, id, GSTR3B, true);
					if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
						if (isNotEmpty(response.getData().getSupDetails())) {
							gstr3b.setSupDetails(response.getData().getSupDetails());
						}
						if (isNotEmpty(response.getData().getInterSup())) {
							gstr3b.setInterSup(response.getData().getInterSup());
						}
						if (isNotEmpty(response.getData().getInwardSup())) {
							gstr3b.setInwardSup(response.getData().getInwardSup());
						}
						if (isNotEmpty(response.getData().getItcElg())) {
							gstr3b.setItcElg(response.getData().getItcElg());
						}
						if (isNotEmpty(response.getData().getIntrLtfee())
								&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
							gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
						}
						if (isNotEmpty(response.getData().getTaxPymt())) {
							gstr3b.setOffLiab(new GSTR3BOffsetLiability());
							if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
								gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
								gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
							}
							if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
								gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
							}
						}
						String returnPeriod = strMonth + year;
						gstr3b.setRetPeriod(returnPeriod);
						gstr3b.setGstin(client.getGstnnumber());
						gstr3b.setCreatedDate(new Date());
						gstr3b.setClientid(clientid);
						gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);
						dwnldstatus="DATA_FOUND";
					}else {
						dwnldstatus="NODATA_FOUND";
					}
				} catch (Exception e) {
					logger.error(CLASSNAME + method + " ERROR", e);
				}
				logger.debug(CLASSNAME + method + END);
			}else {
				if (isEmpty(gstr3b)) {
					gstr3b = new GSTR3B();
					try {
						Response response = iHubConsumerService.returnSummary(client, client.getGstnnumber(), retPeriod, id, GSTR3B, true);
						if (isEmpty(response.getError()) && isNotEmpty(response.getData())) {
							if (isNotEmpty(response.getData().getSupDetails())) {
								gstr3b.setSupDetails(response.getData().getSupDetails());
							}
							if (isNotEmpty(response.getData().getInterSup())) {
								gstr3b.setInterSup(response.getData().getInterSup());
							}
							if (isNotEmpty(response.getData().getInwardSup())) {
								gstr3b.setInwardSup(response.getData().getInwardSup());
							}
							if (isNotEmpty(response.getData().getItcElg())) {
								gstr3b.setItcElg(response.getData().getItcElg());
							}
							if (isNotEmpty(response.getData().getIntrLtfee())
									&& isNotEmpty(response.getData().getIntrLtfee().getIntrDetails())) {
								gstr3b.setIntrLtfee(response.getData().getIntrLtfee());
							}
							if (isNotEmpty(response.getData().getTaxPymt())) {
								gstr3b.setOffLiab(new GSTR3BOffsetLiability());
								if (isNotEmpty(response.getData().getTaxPymt().getPdcash())) {
									gstr3b.getOffLiab().setPdcash(response.getData().getTaxPymt().getPdcash());
								}
								if (isNotEmpty(response.getData().getTaxPymt().getPditc())) {
									gstr3b.getOffLiab().setPditc(response.getData().getTaxPymt().getPditc());
								}
								if (isNotEmpty(response.getData().getTaxPymt().getTaxPayable())) {
									gstr3b.getOffLiab().setTaxPayable(response.getData().getTaxPymt().getTaxPayable());
								}
							}
							dwnldstatus="DATA_FOUND";
							String returnPeriod = strMonth + year;
							gstr3b.setRetPeriod(returnPeriod);
							gstr3b.setGstin(client.getGstnnumber());
							gstr3b.setCreatedDate(new Date());
							gstr3b.setClientid(clientid);
							gstr3b = clientService.saveSuppliesInvoice(gstr3b, GSTR3B);
						}else {
							dwnldstatus="NODATA_FOUND";
						}
					} catch (Exception e) {
						downloadGSTRXStatus(MasterGSTConstants.GSTR3B, id, clientid, retPeriod, year, "NODATA_FOUND", strMonth);
						logger.error(CLASSNAME + method + " ERROR", e);
					}	
				}
				logger.debug(CLASSNAME + method + END);
				downloadGSTRXStatus(MasterGSTConstants.GSTR3B, id, clientid, retPeriod, year, dwnldstatus, strMonth);
				//if(!"NODATA_FOUND".equalsIgnoreCase(dwnldstatus)) {}
			
				/*List<GSTR3BDownloadStatus> gstr3BDownloadStatus = gstr3BDowloadService.getGSTR3BDownloadStatus(id,clientid, retPeriod);
				gstr3BDowloadService.deleteGSTR3BDownloadStatus(gstr3BDownloadStatus);
				
					GSTR3BDownloadStatus status = new GSTR3BDownloadStatus();
					status.setUserid(id);
					status.setClientid(clientid);
					status.setReturnperiod(retPeriod);
					status.setStatus("DOWNLOAD");
					status.setFinancialyear(year + "");
					status.setCurrrentmonth(strMonth);
					gstr3BDowloadService.savedownloadstatus(status);*/
				
				
			}
			return dwnldstatus;
	}
	
	private String performDownloadGSTR2AData(Client client, String invType, String fp, String clientid, String userid, int month, int year) {
		final String method = "performDownloadGSTR2AData::";
		logger.debug(CLASSNAME + method + BEGIN);
		String dwnldstatus=null;
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + year;
		try {
			InvoiceParent gstr2a = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(), month, year,MasterGSTConstants.GSTR2A, invType, null, userid, true);
			logger.debug(CLASSNAME + "performDownloadGSTR2AData : gstr2a\t" + gstr2a);
			if (isNotEmpty(gstr2a)) {
				List<String> matchingIds = Lists.newArrayList();
				if(invType.equalsIgnoreCase(MasterGSTConstants.IMP_GOODS)) {
					List<GSTR2> gstr2ainvs = gstr2Dao.findByClientidAndInvoiceTypeAndMonthAndYearIMPG(clientid, retPeriod, invType);
					
					if(isNotEmpty(gstr2ainvs)) {
						gstr2ainvs.forEach(inv -> {
							matchingIds.add(inv.getId().toString());
						});
						delinkPurchaseRegisterMatchingIds(matchingIds);
					}
					gstr2Repository.delete(gstr2ainvs);
				}else if(invType.equalsIgnoreCase(MasterGSTConstants.IMPGSEZ)){
					List<GSTR2> gstr2ainvs = gstr2Dao.findByClientidAndInvoiceTypeAndMonthAndYearIMPG(clientid, retPeriod, invType);
					if(isNotEmpty(gstr2ainvs)) {
						gstr2ainvs.forEach(inv -> {
							matchingIds.add(inv.getId().toString());
						});
						delinkPurchaseRegisterMatchingIds(matchingIds);
					}
					gstr2Repository.delete(gstr2ainvs);
				}else {
					List<GSTR2> gstr2ainvs = gstr2Repository.findByClientidAndFpAndIsAmendmentAndInvtype(clientid,retPeriod,true,invType);
					
					if(isNotEmpty(gstr2ainvs)) {
						gstr2ainvs.forEach(inv -> {
							matchingIds.add(inv.getId().toString());
						});
						delinkPurchaseRegisterMatchingIds(matchingIds);
					}
					gstr2Repository.delete(gstr2ainvs);
				}
				
				gstr2a.setUserid(userid);
				gstr2a.setClientid(clientid);
				gstr2a.setAmendment(true);
				clientService.updateGSTR2AReturnData(gstr2a, invType, client.getGstnnumber(), clientid, fp, month, year);
				
				dwnldstatus="DATA_FOUND";
			}else {
				dwnldstatus="NODATA_FOUND";
			}			
			downloadGSTRXStatus(MasterGSTConstants.GSTR2A,userid,clientid, retPeriod,year,dwnldstatus, strMonth);
		} catch (MasterGSTException e) {
			downloadGSTRXStatus(MasterGSTConstants.GSTR2A,userid,clientid, retPeriod,year,"NODATA_FOUND", strMonth);
			logger.error(CLASSNAME + method + " ERROR", e);
		}
		return dwnldstatus;
	}
	
	@RequestMapping(value = "/downloadsyncgstr1data/{userid}/{clientid}/{month}/{financialyear}", method = RequestMethod.GET)
	public @ResponseBody GSTR1DownloadStatus downloadSyncGSTR1DataReport(@PathVariable("userid") String userid, 
			@PathVariable("clientid") String clientid,@PathVariable("month") int month, @PathVariable("financialyear") int financialyear, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "downloadSyncGSTR1Data::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + "syncInvoiceData : Begin");
		logger.debug(CLASSNAME + "syncInvoiceData : month {}", month);
		logger.debug(CLASSNAME + "syncInvoiceData : year {}", financialyear);
		String dwndstatus_gstr1="NODATA_FOUND";
		String status = null;
		Client client=clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + financialyear;
		User user=userService.findById(userid);
		if(NullUtil.isNotEmpty(client)) {
			ClientStatus clientStatus = clientService.getClientStatus(client.getId().toString(), MasterGSTConstants.GSTR1, retPeriod);
			if (isEmpty(clientStatus) || isNotEmpty(userid)) {
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), retPeriod, userid,MasterGSTConstants.GSTR1, false);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							status = trackResponse.getStatus();
							client.setStatus(status);
							if(isEmpty(clientStatus)) {
								clientStatus = new ClientStatus();
								clientStatus.setClientId(client.getId().toString());
								clientStatus.setReturnPeriod(trackResponse.getRetPeriod());
								clientStatus.setReturnType(trackResponse.getRtntype());
							}
							clientStatus.setStatus(trackResponse.getStatus());
							clientStatus.setArn(trackResponse.getArn());
							if(isNotEmpty(trackResponse.getDof())) {
								SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
								try {
									clientStatus.setDof(dateFormat.parse(trackResponse.getDof()));
									clientService.saveClientStatus(clientStatus);
								} catch (ParseException e) {
								}
							}
						}
					}
				}
			}
			//clientService.syncInvoiceData(client, returntype, userid, usertype, month, financialyear);
			if(isEmpty(userid)) {
				List<ClientUserMapping> mappings = clientUserMappingRepository.findByClientid(client.getId().toString());
				if(isNotEmpty(mappings)) {
					userid = mappings.get(0).getUserid();
				}
			}
			String[] invTypes = { B2B, B2C, B2CL, CREDIT_DEBIT_NOTES, EXPORTS, ADVANCES, ATPAID, CDNUR, NIL, B2BA, B2CSA,
					B2CLA, CDNA, CDNURA, ATA, EXPA, TXPA };
				//{MasterGSTConstants.B2B, MasterGSTConstants.B2C, MasterGSTConstants.B2CL, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.EXPORTS, MasterGSTConstants.ADVANCES, MasterGSTConstants.ATPAID, MasterGSTConstants.CDNUR, MasterGSTConstants.NIL};
			for(String invType : invTypes) {
				try {
					InvoiceParent invoice = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(), month, financialyear, MasterGSTConstants.GSTR1, invType, null, userid, true);
					
					if(isNotEmpty(invoice)) {
						clientService.processGSTRData(invoice, client, status, MasterGSTConstants.GSTR1, invType, userid, user.getType(), month, financialyear);
						dwndstatus_gstr1="DATA_FOUND";
					}
				} catch(MasterGSTException e) {
					logger.debug(CLASSNAME + "syncInvoiceData : ERROR", e);
				}
			}
			
			logger.debug(CLASSNAME + "syncInvoiceData : End");
		}else {
			dwndstatus_gstr1="NODATA_FOUND";
		}
		
		List<GSTR1DownloadStatus> gstr1DownloadStatus = gstr1DowloadService.getGSTR1DownloadStatus(userid, clientid, retPeriod);
		gstr1DowloadService.deleteGSTR1DownloadStatus(gstr1DownloadStatus);
		
			GSTR1DownloadStatus dwnldstatus = new GSTR1DownloadStatus();
			dwnldstatus.setUserid(userid);
			dwnldstatus.setClientid(clientid);
			dwnldstatus.setReturnperiod(retPeriod);
			dwnldstatus.setStatus("DOWNLOAD");
			dwnldstatus.setFinancialyear(financialyear + "");
			dwnldstatus.setCurrrentmonth(strMonth);
			if("DATA_FOUND".equals(dwndstatus_gstr1)) {
				dwnldstatus.setInvoicedata("invoices available");
			}else {
				dwnldstatus.setInvoicedata("invoices not available");
			}
			gstr1DowloadService.savedownloadstatus(dwnldstatus);			
			return dwnldstatus;
		
		
	}
	
	
	@RequestMapping(value = "/get2ayearlyinvs/{id}/{clientid}/{returntype}/{year}", method = RequestMethod.GET)
	public @ResponseBody String getGSTR2AYearlyInvoices(@PathVariable("id") String id,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid, @PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		String retType = returntype;
		//Page<? extends InvoiceParent> invoices = clientService.getInvoices(null, client, id, retType, year);
		
		Page<? extends InvoiceParent> invoices = clientService.getYearlyInvoices(null, clientid, returntype, year);
		
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		}
		
		int[] monthArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
		Map<String, Map<String, String>> summaryMap = Maps.newHashMap();
		for (int i : monthArray) {
			Map<String, String> reportMap = null;
			if (i < 4) {
				reportMap = getSummaryMap(null, client, i, year + 1);
				summaryMap.put(i + "", reportMap);
			} else {
				reportMap = getSummaryMap(null, client, i, year);
				summaryMap.put(i + "", reportMap);
			}
		}
		model.addAttribute("summaryMap", summaryMap);
		
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoices.getContent());
	}
	
	@RequestMapping(value = "/syncinfo/{userid}/{clientid}/{financialyear}", method = RequestMethod.GET)
	public @ResponseBody Map<String,String> getSyncDownloadInfo(@PathVariable String userid, @PathVariable String clientid, @PathVariable String financialyear){
		Map<String,String> returnMap=new HashMap<String,String>();
		
		List<GSTR3BDownloadStatus> gstr3b=gstr3BDowloadService.findAllData(userid, clientid, financialyear);
		List<GSTR2ADownloadStatus> gstr2a= gstr2ADowloadService.findAllData(userid, clientid, financialyear);
		List<GSTR1DownloadStatus> gstr1=gstr1DowloadService.findAllData(userid, clientid, financialyear);
		if(isNotEmpty(gstr3b)) {
			gstr3b.forEach(status->{
				returnMap.put("GSTR3B"+Integer.parseInt(status.getCurrrentmonth()),status.getReturnperiod());
			});
		}
		if(isNotEmpty(gstr2a)) {
			gstr2a.forEach(status->{
				returnMap.put("GSTR2A"+Integer.parseInt(status.getCurrrentmonth()),status.getReturnperiod());
			});
		}
		if(isNotEmpty(gstr1)) {
			gstr1.forEach(status->{
				returnMap.put("GSTR1"+Integer.parseInt(status.getCurrrentmonth()),status.getReturnperiod());
			});
		}
		//System.out.println(returnMap);
		return returnMap;
	}
	
	@RequestMapping(value = "/downloadsyncgstr1/{userid}/{clientid}/{month}/{financialyear}", method = RequestMethod.GET)
	public @ResponseBody String downloadSyncGSTR1Data(@PathVariable("userid") String userid, 
			@PathVariable("clientid") String clientid,@PathVariable("month") int month, @PathVariable("financialyear") int financialyear, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "downloadSyncGSTR1Data::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + "syncInvoiceData : Begin");
		logger.debug(CLASSNAME + "syncInvoiceData : month {}", month);
		logger.debug(CLASSNAME + "syncInvoiceData : year {}", financialyear);
		String dwndstatus_gstr1="NODATA_FOUND";
		String status = null;
		Client client=clientService.findById(clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth + financialyear;
		User user=userService.findById(userid);
		if(NullUtil.isNotEmpty(client)) {
			ClientStatus clientStatus = clientService.getClientStatus(client.getId().toString(), MasterGSTConstants.GSTR1, retPeriod);
			if (isEmpty(clientStatus) || isNotEmpty(userid)) {
				Response response = iHubConsumerService.trackStatus(client, client.getGstnnumber(), retPeriod, userid,MasterGSTConstants.GSTR1, false);
				if (isNotEmpty(response) && isNotEmpty(response.getStatuscd())
						&& response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					if (isNotEmpty(response.getData()) && isNotEmpty(response.getData().getStatusList())) {
						for (TrackResponse trackResponse : response.getData().getStatusList()) {
							status = trackResponse.getStatus();
							client.setStatus(status);
							if(isEmpty(clientStatus)) {
								clientStatus = new ClientStatus();
								clientStatus.setClientId(client.getId().toString());
								clientStatus.setReturnPeriod(trackResponse.getRetPeriod());
								clientStatus.setReturnType(trackResponse.getRtntype());
							}
							clientStatus.setStatus(trackResponse.getStatus());
							clientStatus.setArn(trackResponse.getArn());
							if(isNotEmpty(trackResponse.getDof())) {
								SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
								try {
									clientStatus.setDof(dateFormat.parse(trackResponse.getDof()));
									clientService.saveClientStatus(clientStatus);
								} catch (ParseException e) {
								}
							}
						}
					}
				}
			}
			//clientService.syncInvoiceData(client, returntype, userid, usertype, month, financialyear);
			if(isEmpty(userid)) {
				List<ClientUserMapping> mappings = clientUserMappingRepository.findByClientid(client.getId().toString());
				if(isNotEmpty(mappings)) {
					userid = mappings.get(0).getUserid();
				}
			}
			String[] invTypes = {MasterGSTConstants.B2B, MasterGSTConstants.B2C, MasterGSTConstants.B2CL, MasterGSTConstants.CREDIT_DEBIT_NOTES, MasterGSTConstants.EXPORTS, MasterGSTConstants.ADVANCES, MasterGSTConstants.ATPAID, MasterGSTConstants.CDNUR, MasterGSTConstants.NIL};
			for(String invType : invTypes) {
				try {
					InvoiceParent invoice = iHubConsumerService.getGSTRXInvoices(client, client.getGstnnumber(), month, financialyear, MasterGSTConstants.GSTR1, invType, null, userid, true);
					
					if(isNotEmpty(invoice)) {
						clientService.processGSTRData(invoice, client, status, MasterGSTConstants.GSTR1, invType, userid, user.getType(), month, financialyear);
						dwndstatus_gstr1="DATA_FOUND";
					}
				} catch(MasterGSTException e) {
					downloadGSTRXStatus(MasterGSTConstants.GSTR1, userid, clientid, retPeriod, financialyear, dwndstatus_gstr1, strMonth);
					logger.debug(CLASSNAME + "syncInvoiceData : ERROR", e);
				}
			}
			
			logger.debug(CLASSNAME + "syncInvoiceData : End");
		}else {
			dwndstatus_gstr1="NODATA_FOUND";
		}
		downloadGSTRXStatus(MasterGSTConstants.GSTR1, userid, clientid, retPeriod, financialyear, "NODATA_FOUND", strMonth);
	/*	List<GSTR1DownloadStatus> gstr1DownloadStatus = gstr1DowloadService.getGSTR1DownloadStatus(userid, clientid, retPeriod);
		gstr1DowloadService.deleteGSTR1DownloadStatus(gstr1DownloadStatus);
		
			GSTR1DownloadStatus dwnldstatus = new GSTR1DownloadStatus();
			dwnldstatus.setUserid(userid);
			dwnldstatus.setClientid(clientid);
			dwnldstatus.setReturnperiod(retPeriod);
			dwnldstatus.setStatus("DOWNLOAD");
			dwnldstatus.setFinancialyear(financialyear + "");
			dwnldstatus.setCurrrentmonth(strMonth);
			if("DATA_FOUND".equals(dwndstatus_gstr1)) {
				dwnldstatus.setInvoicedata("invoices available");
			}else {
				dwnldstatus.setInvoicedata("invoices not available");
			}
			gstr1DowloadService.savedownloadstatus(dwnldstatus);		*/	
		
		return dwndstatus_gstr1;
	}
	
	
	
	@RequestMapping(value = "/getgstr9data/{clientid}/{year}")
	  public @ResponseBody GSTR9GetResponse getGSTR9Data(@PathVariable String clientid, @PathVariable String year) {
		
		  Client client = clientService.findById(clientid);
		  String retPeriod="03"+year;
		  
		  GSTR9GetResponse response = null; 
		  try {
		  response = iHubConsumerService.getGSTR9Details(client, GSTR9, client.getGstnnumber(), retPeriod); 
		  return response; 
		  } catch (Exception e) {
			  
		  response = new GSTR9GetResponse();
		  response.setStatuscd("0");
		  response.setStatusdesc(e.getMessage()); 
		  return response; 
		  }
	}
	
	 
	
	@RequestMapping(value = "/delpayment/{paymentid}/{returntype}/{clientid}/{voucherNumber}/{invoiceNumber}", method = RequestMethod.GET)
	public @ResponseBody void deletePayment(@PathVariable("paymentid") String paymentid,
			@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid,
			@PathVariable("voucherNumber") String voucherNumber, @PathVariable("invoiceNumber") String invoiceNumber, ModelMap model) throws Exception {
		voucherNumber=voucherNumber.replace("invNumCheck", "/");
		invoiceNumber=invoiceNumber.replace("invNumCheck", "/");
		Payments payments = recordPaymentsRepository.findOne(paymentid);
		List<Payments> paymentsLst = recordPaymentsRepository.findByInvoiceid(payments.getInvoiceid());
		String status = "Not Paid";
		if(NullUtil.isNotEmpty(paymentsLst)) {
			boolean flag = false;
			for(Payments payment : paymentsLst) {
				if(!payment.getId().toString().equals(paymentid)) {
					flag = true;
				}
			}
			if(flag) {
				status = "Partially Paid";
			}
		}
		if(returntype.equals("GSTR1") || returntype.equals("SalesRegister")) {
			InvoiceParent invparent= gstr1repository.findOne(payments.getInvoiceid());
			if(NullUtil.isNotEmpty(invparent)) {
				invparent.setPaymentStatus(status);
				clientService.saveGSTRInvoice(invparent, MasterGSTConstants.GSTR1);			
			}
		}else if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("PurchaseRegister")) {
			Client client = clientService.findById(clientid);
			boolean isIntraState = true;
			InvoiceParent ppmntinvoice = new InvoiceParent();
			ppmntinvoice = purchaseRepository.findOne(payments.getInvoiceid());
			
			if (isNotEmpty(ppmntinvoice.getStatename())) {
			String statename=	ppmntinvoice.getStatename();
				if (!statename.equals(client.getStatename())) {
					isIntraState = false;
				}
			}
						
			InvoiceParent invoice=purchaseRepository.findOne(payments.getInvoiceid());	
			if(NullUtil.isNotEmpty(invoice)) {
				invoice.setPaymentStatus(status);
				clientService.savePurchaseRegister(invoice, isIntraState);
			}
		}
		clientService.deletePayment(paymentid,clientid,voucherNumber,invoiceNumber,returntype);
	}
	
	@RequestMapping(value = "/latestupdates/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String latestupdates(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model) throws Exception {
		final String method = "latestupdates::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		List<String> clientList = clientService.fetchClientIds(id);
		model.addAttribute("clientList", clientList);
		Map<String, GSTReturnSummary> returnsSummaryMap = Maps.newHashMap();
		List<GSTReturnSummary> returnsSummaryList = clientService.getGSTReturnsSummary();
		for (GSTReturnSummary summary : returnsSummaryList) {
			if (!returnsSummaryMap.containsKey(summary.getReturntype())) {
				if (NullUtil.isEmpty(summary.getStatusMap())) {
					Map<String, Integer> statusMap = Maps.newHashMap();
					statusMap.put(MasterGSTConstants.PENDING, 0);
					summary.setStatusMap(statusMap);
				}
				returnsSummaryMap.put(summary.getReturntype(), summary);
			}
		}
		
		List<LatestUpdates> updates = latestUpdatesService.getAllUpdates();
		
		model.addAttribute("allupdates",updates);
		
		model.addAttribute("returnsSummaryMap", returnsSummaryMap);
		logger.debug(CLASSNAME + method + END);
		return "dashboard/latestupdates";
	}
	
	@RequestMapping(value = "/latestnews/{id}/{name}/{usertype}/{month}/{year}", method = RequestMethod.GET)
	public String latestnews(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model) throws Exception {
		final String method = "latestnews::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		updateModel(model, id, fullname, usertype, month, year);
		List<String> clientList = clientService.fetchClientIds(id);
		model.addAttribute("clientList", clientList);
		Map<String, GSTReturnSummary> returnsSummaryMap = Maps.newHashMap();
		List<GSTReturnSummary> returnsSummaryList = clientService.getGSTReturnsSummary();
		for (GSTReturnSummary summary : returnsSummaryList) {
			if (!returnsSummaryMap.containsKey(summary.getReturntype())) {
				if (NullUtil.isEmpty(summary.getStatusMap())) {
					Map<String, Integer> statusMap = Maps.newHashMap();
					statusMap.put(MasterGSTConstants.PENDING, 0);
					summary.setStatusMap(statusMap);
				}
				returnsSummaryMap.put(summary.getReturntype(), summary);
			}
		}
		
		List<LatestNews> news = latestNewsService.getAllNews();
		
		model.addAttribute("allnews",news);
		
		model.addAttribute("returnsSummaryMap", returnsSummaryMap);
		logger.debug(CLASSNAME + method + END);
		return "dashboard/latestnews";
	}
	
	public String userid(String id,String clientid) {
		String userid = id;
		User user = userService.findById(userid);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(NullUtil.isNotEmpty(companyUser)) {
				List<String> clntids = companyUser.getCompany();
				if(isNotEmpty(clntids) && clntids.size() > 0){
					if(clntids.contains(clientid)){
						ClientUserMapping clntusermapping = clientUserMappingRepository.findByClientidAndCreatedByIsNotNull(clientid);
						if(isNotEmpty(clntusermapping) && isNotEmpty(clntusermapping.getCreatedBy())) {
							userid = clntusermapping.getCreatedBy();
						}else {
							userid = user.getParentid();
						}
					}
				}else {
					userid = user.getParentid();
				}
			}
		}
		return userid;
	}
	@RequestMapping(value = "/dwnldinvByEwaybillNo/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String downloadInvoicesByEwayBillNo(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "downloadInvoicesByEwayBillNo::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		Client client = clientService.findById(clientid);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		
		String ebillname = null;String epwd = null;
		EwayBillConfigurations ewaybillconfig = clientService.getEwayBillConfig(clientid);
		if(isNotEmpty(ewaybillconfig)) {
			ebillname = ewaybillconfig.getUserName();
			epwd = new String(Base64.getDecoder().decode(ewaybillconfig.getPassword()),MasterGSTConstants.PASSWORD_ENCODE_FORMAT);
		}
		Calendar cal = Calendar.getInstance();
	     Date date = new Date();
	     cal.set(Calendar.MONTH, month-1);
	     cal.set(Calendar.YEAR, year);
       cal.set(Calendar.DAY_OF_MONTH, 1);
       int maxDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
       SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Response authresponse = iHubConsumerService.authenticateEwayBillApi(client.getGstnnumber(), InetAddress.getLocalHost().toString(), ebillname, epwd);
		if(isNotEmpty(authresponse) && isNotEmpty(authresponse.getStatuscd()) && authresponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
			Map<String,StateConfig> statetin = getStatesTinMap();
			ewaybillconfig.setConnStaus("Active");
			model.addAttribute("dwldflag", "Active");
			 for (int i = 0; i < maxDay; i++) {
	             cal.set(Calendar.DAY_OF_MONTH, i + 1);
	             EwayBillDateResponse  dresponse = iHubConsumerService.getGSTINDetailsByDate(client.getGstnnumber(), df.format(cal.getTime()), InetAddress.getLocalHost().toString());
	             EwayBillDateResponse  othrresponse = iHubConsumerService.getEbillDetailsByOtherParties(client.getGstnnumber(), df.format(cal.getTime()), InetAddress.getLocalHost().toString());
	             if(isNotEmpty(dresponse) && isNotEmpty(dresponse.getStatuscd()) && dresponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					 for(EwayBillResponseData dateresp : dresponse.getData()) {
						 String ebillno = dateresp.getEwbillNo().toString();
						 EwayBillResponse response = iHubConsumerService.getGSTINDetailsByEwayBillno(client.getGstnnumber(),ebillno, InetAddress.getLocalHost().toString());
						 if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								List<EwayBillResponseData> data = response.getData(); 
								List<EWAYBILL> invoice =  clientService.populateEwayBillData(data,user,client,"EWAYBILL","own",statetin);
								
								ewayBillRepository.save(invoice);
						 }
					 }
				 }
	             if(isNotEmpty(othrresponse) && isNotEmpty(othrresponse.getStatuscd()) && othrresponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
					 for(EwayBillResponseData dateresp : othrresponse.getData()) {
						 String ebillno = dateresp.getEwbillNo().toString();
						 EwayBillResponse response = iHubConsumerService.getGSTINDetailsByEwayBillno(client.getGstnnumber(),ebillno, InetAddress.getLocalHost().toString());
						 if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
								List<EwayBillResponseData> data = response.getData(); 
								List<EWAYBILL> invoice =  clientService.populateEwayBillData(data,user,client,"EWAYBILL","otherParties",statetin);
								ewayBillRepository.save(invoice);
						 }
					 }
				 } 
             }
			 return "redirect:/alliview/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + returntype + "/" + month + "/" + year + "?type=inv";	 
				
		}else {
			if(isNotEmpty(ewaybillconfig)) {
				ewaybillconfig.setConnStaus("InActive");
			}
			model.addAttribute("dwldflag","InActive");
		}
		if(isNotEmpty(ewaybillconfig)) {
			clientService.saveEwayBillConfigurations(ewaybillconfig);
		}
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		return "client/all_invoice_view";
	}
		
	@RequestMapping(value = "/authconfigdetails/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody EwayBillConfigurations authEwaybillconfigdetails(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "authEwaybillconfigdetails::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		EwayBillConfigurations configdetails = ewayBillConfigurationRepository.findByClientid(clientid);
		if(isNotEmpty(configdetails)) {
			Response response = iHubConsumerService.authenticateEwayBillApi(client.getGstnnumber(), InetAddress.getLocalHost().getHostAddress(), configdetails.getUserName(), new String(Base64.getDecoder().decode(configdetails.getPassword()),MasterGSTConstants.PASSWORD_ENCODE_FORMAT));
			if(isNotEmpty(response) && isNotEmpty(response.getStatuscd()) && response.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
				configdetails.setConnStaus("Active");
				model.addAttribute("ebflag", "Active");
			}else {
				configdetails.setConnStaus("InActive");
				model.addAttribute("eflag", "InActive");
			}
			return clientService.saveEwayBillConfigurations(configdetails);
		}else {
			return null;
		}
		
	} 
	

 	@RequestMapping(value = "/addtogstr1fromebill/{invoiceid}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody boolean addtoGSTR1(@PathVariable("invoiceid") String invoiceid,@PathVariable("clientid") String clientid,@PathVariable("month") int month,
			@PathVariable("year") int year,ModelMap model) throws Exception {
		final String method = "addtoGSTR1::";
		boolean isIntraState = true;
		EWAYBILL ewaybillinv = ewayBillRepository.findById(invoiceid);
		Client client = clientService.findById(clientid);
 		if (isNotEmpty(ewaybillinv.getStatename())) {
			if (!ewaybillinv.getStatename().equals(client.getStatename())) {
				isIntraState = false;
			}
		}
		Calendar cal = Calendar.getInstance();
		cal.set(year, month-1, 0, 23, 59, 59);
		Date stDate = new java.util.Date(cal.getTimeInMillis());
		cal = Calendar.getInstance();
		cal.set(year, month, 0, 23, 59, 59);
		Date endDate = new java.util.Date(cal.getTimeInMillis());
		boolean isInvExist=false;
		List<GSTR1> invoice = gstr1repository.findByClientidAndInvoicenoAndDateofinvoiceBetween(ewaybillinv.getClientid(), ewaybillinv.getInvoiceno(), stDate, endDate);
		if(isNotEmpty(invoice) && invoice.size() >= 1){
			isInvExist=true;
		}else{
			isInvExist=false;
			
			GSTR1 gstrinv = new GSTR1();
			if(isNotEmpty(ewaybillinv)) {
				BeanUtils.copyProperties(gstrinv, ewaybillinv);
				gstrinv.setId(new ObjectId());
				gstr1repository.save(gstrinv); 
				saveJournalEntries(gstrinv,gstrinv.getClientid(),"GSTR1",isIntraState);
			}
		}
		
		return isInvExist;
		
	}
 	@RequestMapping(value = "/addfromebilltoGSTR1/{invoiceid}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String addfromEbillToGSTR1(@PathVariable("invoiceid") String invoiceid,@PathVariable("clientid") String clientid,@PathVariable("month") String month,
			@PathVariable("year") int year,@RequestParam("type") String type,ModelMap model) throws Exception {
 		boolean isIntraState = true;
 		Client client = clientService.findById(clientid);
 		EWAYBILL ewaybillinv = ewayBillRepository.findById(invoiceid);
 		if (isNotEmpty(ewaybillinv) && isNotEmpty(ewaybillinv.getStatename())) {
			if (!ewaybillinv.getStatename().equals(client.getStatename())) {
				isIntraState = false;
			}
		}
 		GSTR1 gstrinv = new GSTR1();
		if(isNotEmpty(ewaybillinv)) {
			BeanUtils.copyProperties(gstrinv, ewaybillinv);
			gstrinv.setId(new ObjectId(invoiceid));
			gstr1repository.save(gstrinv); 
			saveJournalEntries(gstrinv,gstrinv.getClientid(),"GSTR1",isIntraState);
		}
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		if(isNotEmpty(ewaybillinv) && isNotEmpty(ewaybillinv.getUserid())) {
			User user = userRepository.findOne(ewaybillinv.getUserid());
			if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
				CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
				if(isNotEmpty(companyUser)) {
					if(isNotEmpty(companyUser.getAddclient())) {
						model.addAttribute("addClient", companyUser.getAddclient());
					}else {
						model.addAttribute("addClient", "true");
					}
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}
		model.addAttribute("pconfig", pconfig);
		return "client/all_invoice_view";
		
	}
	@RequestMapping(value = "/ewaybill/{id}/{name}/{usertype}/{returntype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String ewayBillView(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype,@PathVariable("returntype") String returntype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "ewayBillView::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userRepository.findOne(id);
		String authCheck = "";
		Client client = clientService.findById(clientid);
		EwayBillConfigurations ewaybillconfig = clientService.getEwayBillConfig(clientid);
		if(isNotEmpty(ewaybillconfig) && isNotEmpty(ewaybillconfig.getUserName())) {
			authCheck = otpExpiryService.ewaybillAuthexpiry(ewaybillconfig.getUserName());
			ewaybillconfig.setConnStaus(authCheck);
			clientService.saveEwayBillConfigurations(ewaybillconfig);
		}
	
		if(isNotEmpty(ewaybillconfig) && isNotEmpty(authCheck)) {
			model.addAttribute("connSttaus", authCheck);
		}
		
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		model.addAttribute("eType",returntype);
		model.addAttribute("user", user);
		model.addAttribute("client", client);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/all_invoice_view";
	}
	
	public String primaryHolderMessage(Client client, User usr) {
		
		String message = "Primary Account Holder of <span style='color:blue;'>"+client.getBusinessname()+"</span> is Subscription is expired, please contact <span style='color:blue'>"+usr.getFullname()+","+usr.getEmail()+" & "+usr.getMobilenumber()+"</span> to renew";
		return message;
	}
	@RequestMapping(value = "/dwnldewaybillxls/{id}/{clientid}/{returntype}/{month}/{year}/{reporttype}", method = RequestMethod.GET, produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public @ResponseBody FileSystemResource downloadEwayBillExcelData(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("month") int month, @PathVariable("year") int year,@PathVariable("reporttype") String reporttype,
			 HttpServletResponse response, HttpServletRequest request) {
		response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
		}
		response.setHeader("Content-Disposition", "inline; filename='MGST_"+returntype+"_"+gstnumber+"_"+month+year+".xls");
		Page<? extends InvoiceParent> invoices;
		if("notreports".equalsIgnoreCase(reporttype)) {
			 invoices = clientService.getInvoices(null, client, id, returntype,"notreports", month, year);
		}else {
			 invoices = clientService.getInvoices(null, client, id, returntype,"reports", month, year);
		}
		
		
		List<InvoiceVO> invoiceVOList=null;
		
			invoiceVOList = invoiceListItems(invoices,returntype);
		
		File file = new File("MGST_"+returntype+"_"+gstnumber+"_"+month+year+".xls");
		try {
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			List<String> headers = null;
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period",
							"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
							"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Other Value","CessNonAdvolValue",							"Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
							"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value");	
					SimpleExporter exporter = new SimpleExporter();
					exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,otherValue,cessNonAdvolValue,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue",fos);
				
			return new FileSystemResource(file);
		} catch (IOException e) {
			logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
		}
		return new FileSystemResource(new File("MGST_"+returntype+"_"+gstnumber+"_"+month+year+".xls"));
	}
		
	@RequestMapping(value = "/canceeBilllinv/{userid}/{clientid}/{id}/{returntype}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String cancelEwayBillInvoice(@RequestBody CancelEwayBill ebillData ,@PathVariable("userid") String userid,@PathVariable("clientid") String clientid,@PathVariable("id") String id,
			@PathVariable("returntype") String returntype,@PathVariable("month") int month,@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "cancelEwayBillInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		EwayBillCancelResponse cresponse = iHubConsumerService.cancelEwayBill(client.getGstnnumber(), InetAddress.getLocalHost().getHostAddress(),ebillData);
		
		ErrorCodeConfig errors=null;String desc="";
		if(isNotEmpty(cresponse) && isNotEmpty(cresponse.getStatuscd()) && cresponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
			InvoiceParent invoice = clientService.getInvoice(id, MasterGSTConstants.EWAYBILL);
			if(isNotEmpty(invoice) && isNotEmpty(invoice.getInvoiceno())) {
				auditlogService.saveAuditLog(userid, clientid,invoice.getInvoiceno(),AuditLogConstants.CANCELEWAYBILL,MasterGSTConstants.EWAYBILL,null,null);
			}
			clientService.cancelInvoice(id, returntype,"");
		}else {
			 String jsonStr="";
			if(isNotEmpty(cresponse.getError().getMessage())) {
				String ecodes = cresponse.getError().getMessage();
		        jsonStr = cresponse.getError().getMessage();
			}
		
		JSONObject jsonObj = new JSONObject(jsonStr);
        String code = jsonObj.getString("errorCodes");
        String[] cd=code.split(",");
	        for(int i=0;i<cd.length;i++) {
	        	errors = errorCodesRepository.findByErrorCode(cd[i]);
	        	if(isNotEmpty(errors) && isNotEmpty(errors.getErrorDesc())) {
	        		desc=desc+", "+errors.getErrorDesc();
	        	}
	        }
		}
		return desc;
		
	}
	
	@RequestMapping(value = "/populate_vehicleDetails/{invoiceid}/{returntype}")
	public @ResponseBody  List<EBillVehicleListDetails> vehicledetails(@PathVariable("invoiceid") String invoiceid,
		@PathVariable("returntype") String returntype, ModelMap model) throws Exception {
		  
		  InvoiceParent invoiceparent=clientService.ewayBillvehicleDetails(invoiceid, returntype);
		 // List<EBillVehicleListDetails> vehicles=clientService.ewayBillVehicleHistory(invoiceparent.getClientid(), invoiceparent.getEwayBillNumber());
		  List<EBillVehicleListDetails> vehicles=null;
		  if(isNotEmpty(invoiceparent) && isNotEmpty(invoiceparent.getVehiclListDetails())) {
			  vehicles = invoiceparent.getVehiclListDetails();
		  }
		 // System.out.println(vehicles);
		  
		return vehicles;	 
	}
	
	
	@RequestMapping(value = "/vehicleupdt/{invoiceid}/{id}/{clientid}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String AllvehicleUpdate(@RequestBody List<EBillVehicleListDetails> records,@PathVariable("invoiceid") String invoiceid,@PathVariable("id") String id,
			@PathVariable("clientid") String clientid,@PathVariable("month") int month,@PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "AllvehicleUpdate::";
		Client client = clientService.findById(clientid);
		 InvoiceParent invoiceparent=clientService.ewayBillvehicleDetails(invoiceid, "EWAYBILL");
		 boolean isVehicleExist = false;String desc="";
		 for(EBillVehicleListDetails evlist : records) {
				String stateCode = client.getStatename();
				String[] sCode = stateCode.split("-");
				 Date dt1 = Calendar.getInstance().getTime();  
	             DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");  
	             String strDate = dateFormat.format(dt1);  
	            // evlist.setEnteredDate(strDate);
				 evlist.setFromPlace(sCode[1]);
				 evlist.setFromState(Integer.parseInt(sCode[0]));
			
			 EwayBillVehicleUpdateResponse vuresponse = null;ErrorCodeConfig errors=null;
			 
			 if(isNotEmpty(evlist.getReasonCode()) && isNotEmpty(evlist.getReasonRem())) {
				 vuresponse = iHubConsumerService.updateVehicle(client.getGstnnumber(), invoiceparent.getEwayBillNumber(), evlist.getVehicleType(), InetAddress.getLocalHost().getHostAddress(), evlist);
			
			 }
			 if(isNotEmpty(vuresponse) && isNotEmpty(vuresponse.getStatuscd()) && vuresponse.getStatuscd().equals(MasterGSTConstants.SUCCESS_CODE)) {
				 auditlogService.saveAuditLog(id, clientid,invoiceparent.getInvoiceno(),AuditLogConstants.UPDATEVEHICLE,MasterGSTConstants.EWAYBILL,null,null);
				 isVehicleExist =true;
			 }else {
				 isVehicleExist = false;
				 String jsonStr="";
					if(isNotEmpty(vuresponse) && isNotEmpty(vuresponse.getError()) && isNotEmpty(vuresponse.getError().getMessage())) {
						String ecodes = vuresponse.getError().getMessage();
				        jsonStr = vuresponse.getError().getMessage();
					}
				
				JSONObject jsonObj = new JSONObject(jsonStr);
		        String code = jsonObj.getString("errorCodes");
		        String[] cd=code.split(",");
			        for(int i=0;i<cd.length;i++) {
			        	errors = errorCodesRepository.findByErrorCode(cd[i]);
			        	if(isNotEmpty(errors) && isNotEmpty(errors.getErrorDesc())) {
			        		desc=desc+", "+errors.getErrorDesc();
			        	}
			        }
			 }
		 }	
		 if(isVehicleExist) {
			 invoiceparent.setVehiclListDetails(records);
			 ewayBillRepository.save((EWAYBILL)invoiceparent);
		 }
		return desc;
		
	}
	
	
	
	@RequestMapping(value = "/reconcileyearlyinv/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String reconcileYearlyInvoices(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "reconcileInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.info("start Date ----"+new Date());
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
		Client client = clientService.findById(clientid);
		Date reconciledDate = new Date();
		client.setReconcileDate(simpleDateFormat.format(reconciledDate));
		clientService.saveClient(client);
		String strMonth = month < 10 ? "0" + month : month + "";
		String retPeriod = strMonth+year;
		User user = userService.findById(id);
		String usrid = id;
		ReconcileTemp reconcileTemp = new ReconcileTemp();
		reconcileTemp.setClientid(clientid);
		reconcileTemp.setMonthlyoryearly("Yearly");
		if(isNotEmpty(user)) {
			reconcileTemp.setUserid(new ObjectId(id));
			reconcileTemp.setInitiateduserid(id);
			if(isNotEmpty(user.getFullname())) {
				reconcileTemp.setFullname(user.getFullname());
			}
		}
		reconcileTempRepository.save(reconcileTemp);
		Date presentDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(presentDate);
		int presentYear = calendar.get(Calendar.YEAR);
		List<String> rtarray = Lists.newArrayList();
		int yr = year;
			for (int i = yr; i <= presentYear; i++) {
				for (int j = 4; j <= 12; j++) {
					String strMonths = j < 10 ? "0" + j : j + "";
					rtarray.add(strMonths + (i));
				}
				for (int k = 1; k <= 3; k++) {
					String strMonths = k < 10 ? "0" + k : k + "";
					rtarray.add(strMonths + (i + 1));
				}
			}
		List<String> matchingstatus = Lists.newArrayList();
		matchingstatus.add("");
		matchingstatus.add(null);
		matchingstatus.add(MasterGSTConstants.GST_STATUS_NOTINGSTR2A);
		List<String> inv = Lists.newArrayList();
		inv.add(MasterGSTConstants.B2B);
		inv.add(MasterGSTConstants.CREDIT_DEBIT_NOTES);
		inv.add(MasterGSTConstants.IMP_GOODS);
		long gstr2aList = invoicesMappingDao.findByClientidAndFpInAndInvtypeAndIsAmendments(clientid, rtarray, inv,matchingstatus, true);
		ReconcileTemp recon = reconcileTempRepository.findByClientid(clientid);
		recon.setTotalinvoices((Long)gstr2aList);
		recon = reconcileTempRepository.save(recon);
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
			}
		}
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else {
			String[] invTypes = {MasterGSTConstants.B2B, MasterGSTConstants.CREDIT_DEBIT_NOTES,MasterGSTConstants.IMP_GOODS};
			for (String invType : invTypes) {
				clientService.updateMismatchStatus(clientid, invType, client.getGstnnumber(), retPeriod, month, year, "yearly",true);
			}
		}
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("type", "mmtchinv");
		ClientConfig clientConfig = clientService.getClientConfig(clientid);
		model.addAttribute("clientConfig", clientConfig);
		model.addAttribute("client", client);
		if(returntype.equals(GSTR2A)){
			returntype = GSTR2;
		}
		model.addAttribute("returntype", returntype);
		model.addAttribute("yearlyreconcile", "yearly");
		model.addAttribute("yearlyreconcilem", "yearly");
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);
		logger.info("end Date ----"+new Date());
		ReconcileTemp temp = reconcileTempRepository.findByClientid(clientid);
		if(isNotEmpty(temp)) {
			reconcileTempRepository.delete(temp);
			logger.info("reconcile temp deleted");
			
		}
		logger.debug(CLASSNAME + method + END);
		return "redirect:/reports/" + id + "/" + fullname + "/" + usertype + "/"+clientid+"/" + month + "/" + year+"?type=yearlyRecocileReport";
		//return "Sucess";
	}
	
	@RequestMapping(value = "/addAnnualcinvoice/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String addAnnualCInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addAnnaulInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		model.addAttribute("returntype", GSTR9C);

		Client client = clientService.findById(clientid);
		
		String retPeriod = "";
		if(month > 3) {
			retPeriod = "03"+(year+1);
		}else {
			retPeriod = "03"+(year);
		}
		
		ClientStatus clientStatus = clientService.getClientStatus(clientid, GSTR9C, retPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		GSTR9C gstr9c = clientService.getAnnual9CInvoice(clientid, retPeriod);
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				model.addAttribute("error", errormsg);
			} else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		}

		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr9c);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/add_gstr9c_invoice";
	}
	
	@RequestMapping(value = "/updateInvStatus/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public String updateInvStatus(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month, 
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "syncInvData::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		String rType = returntype;
		String clntstatus  = request.getParameter("cstatus");
		Client client = clientService.findById(clientid);
		ClientStatus clientStatus = clientService.getClientStatus(clientid, returntype, returnPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		if(returntype.endsWith("Amnd")) {
			returntype = returntype.replace("Amnd", "");
		}
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		User user = userService.findById(id);
		
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			User usr = userRepository.findById(userid);
			String errormsg = "";
			if(isNotEmpty(usr)) {
				errormsg = primaryHolderMessage(client,usr);
			}else {
				errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
			}
			  
			if(usrid.equals(user.getParentid())){
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else {
			if(isEmpty(clntstatus) || clntstatus.equalsIgnoreCase("Pending")) {
				String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
				if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
					clientService.updateInprogressInvoices(client, returntype, id, usertype, month, year);
				}
			}else {
				List<? extends InvoiceParent> invoices = clientService.getInvoiceBasedOnClientidAndFP(null, clientid, returntype, returnPeriod).getContent();
				for(InvoiceParent invoice : invoices) {
					invoice.setGstStatus(clntstatus);
					gstr1repository.save((GSTR1) invoice);
				}
			}
		}
		updateModel(model, id, fullname, usertype, month, year);
		if(rType.equals("GSTR1Amnd")){
			model.addAttribute("type", "dwnldgstr1a");
		}else{
			model.addAttribute("type", "dwnld");
		}
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);

		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		List<TemplateMapperDoc> mappers = importMapperService.getMapperDocs(clientid);
		model.addAttribute("mappers", mappers);

		if (returntype.equals(GSTR1)) {
			String submissionYear = year + "-" + (year + 1);
			if (month > 3) {
				submissionYear = (year + 1) + "-" + (year + 2);
			}
			CompanyInvoices invoiceSubmissionData = profileService.getUserInvoiceSubmissionDetails(client.getId().toString(), submissionYear, null);
			if (isNotEmpty(invoiceSubmissionData)) {
				model.addAttribute("invoiceSubmissionData", invoiceSubmissionData);
			}
			GSTR1DocumentIssue docIssue = clientService.getDocumentIssue(client.getId().toString(), returnPeriod);
			if (isNotEmpty(docIssue)) {
				model.addAttribute("docIssue", docIssue);
				model.addAttribute("docId", docIssue.getId().toString());
			} else {
				model.addAttribute("docIssue", new GSTR1DocumentIssue());
				model.addAttribute("docId", "New");
			}
		}
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/all_invoice_view";
	}
	
	@RequestMapping(value = "/hsnSummary/{id}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public  @ResponseBody List<HSNData> hsnSummary(@PathVariable("id") String id,  @PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype,
						@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "Report::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		String strMonth = month < 10 ? "0" + month : month + "";
		String hsncFp = strMonth + year;
		if(MasterGSTConstants.GSTR1.equalsIgnoreCase(returntype) || "Sales Register".equalsIgnoreCase(returntype) || "SalesRegister".equalsIgnoreCase(returntype)) {
			returntype = MasterGSTConstants.GSTR1;
		}
		List<HSNData> hsndata = Lists.newArrayList();
		HSNDetails hsndetails = hsnSummaryRepository.findByClientidAndReturnPeriodAndReturnType(clientid,hsncFp,returntype);
		if(isNotEmpty(hsndetails)) {
			hsndata =  hsndetails.getHsnData();
		}
		return hsndata;
	}
	
	
	@RequestMapping(value = "/savehsnSummary/{id}/{clientid}/{name}/{usertype}/{returntype}/{month}/{year}", method = RequestMethod.POST)
	public String addVoucherDetails(@ModelAttribute("hsnsummaryform") HSNDetails hsnsummary, @PathVariable("id") String id,@PathVariable("clientid") String clientid,
			@PathVariable("name") String fullname, @PathVariable("usertype") String usertype ,@PathVariable("returntype") String returntype ,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "RecordVouchers::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		String strMonth = month < 10 ? "0" + month : month + "";
		String hsncFp = strMonth + year;
		String rtType = returntype;
		if(MasterGSTConstants.GSTR1.equalsIgnoreCase(returntype) || "Sales Register".equalsIgnoreCase(returntype) || "SalesRegister".equalsIgnoreCase(returntype)) {
			returntype = MasterGSTConstants.GSTR1;
		}
		List<HSNData> hsndata = Lists.newArrayList();
		if(isNotEmpty(hsnsummary)) {
			for(int i=1;i<=hsnsummary.getHsnData().size();i++ ) {
				HSNData hsndat = hsnsummary.getHsnData().get(i-1);
				if(isEmpty(hsndat.getQty())) {
					hsndat.setQty(0d);
				}
				if(isEmpty(hsndat.getVal())) {
					hsndat.setVal(0d);
				}
				if(isEmpty(hsndat.getTxval())) {
					hsndat.setTxval(0d);
				}
				if(isEmpty(hsndat.getIamt())) {
					hsndat.setIamt(0d);
				}
				if(isEmpty(hsndat.getSamt())) {
					hsndat.setSamt(0d);
				}
				if(isEmpty(hsndat.getSamt())) {
					hsndat.setSamt(0d);
				}
				if(isEmpty(hsndat.getCsamt())) {
					hsndat.setCsamt(0d);
				}
				if(isNotEmpty(hsndat.getDesc())) {
					String description = hsndat.getDesc();
					if (description.length() > 30) {
						description = description.substring(0, 27) + "..";
					}
					hsndat.setDesc(description);
				}
				if(isNotEmpty(hsndat.getUqc())) {
					String uqc = hsndat.getUqc();
					if(uqc.contains("-")) {
						String uqcdetails[] = uqc.split("-");
						hsndat.setUqc(uqcdetails[0]);
					}else {
						hsndat.setUqc(uqc);
					}
				}
				hsndat.setNum(i);
				hsndata.add(hsndat);
			}
		}
		HSNDetails hsndetails = hsnSummaryRepository.findByClientidAndReturnPeriodAndReturnType(clientid,hsncFp,returntype);
		if(isNotEmpty(hsndetails)) {
			hsndetails.setHsnData(hsndata);
		}else {
			hsndetails = new HSNDetails();
			hsndetails.setClientid(clientid);
			hsndetails.setUserid(id);
			hsndetails.setReturnPeriod(hsncFp);
			hsndetails.setReturnType(returntype);
			hsndetails.setHsnData(hsndata);
		}
		hsnSummaryRepository.save(hsndetails);
		
			return "redirect:/alliview/" + id + "/" + fullname + "/" + usertype + "/" + clientid + "/" + rtType + "/" + month + "/" + year + "?type=inv";		
		
	}
	@RequestMapping(value = "/suppliercomments/{invoiceid}")
	public @ResponseBody  List<SupplierComments> SupplerComments(@PathVariable("invoiceid") String invoiceid,ModelMap model) throws Exception {
		  
		List<SupplierComments> comments = supplierCommentsRepository.findByInvoiceid(invoiceid);
		 
		Collections.sort(comments, Collections.reverseOrder());
		return comments;	 
	}
	@RequestMapping(value ="/saveSupplierComments/{invoiceid}/{id}/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody List<SupplierComments> saveSupplierComments(@RequestBody MultiValueMap<String, String> messageData,
			@PathVariable("invoiceid") String invoiceid, @PathVariable("id") String id,@PathVariable("clientid") String clientid) throws MasterGSTException {
		User user = userService.findById(id);
		SupplierComments comments = new SupplierComments();
		comments.setClientid(clientid);
		comments.setUserid(id);
		comments.setInvoiceid(invoiceid);
		if(isNotEmpty(user) && isNotEmpty(user.getFullname())) {
			comments.setAddedby(user.getFullname());
		}
		comments.setSupcomments(messageData.getFirst("comments"));
		comments.setCommentDate(new Date());
		supplierCommentsRepository.save(comments);
		 	List<SupplierComments> cmmntsLst = supplierCommentsRepository.findByInvoiceid(invoiceid);
		 
		Collections.sort(cmmntsLst, Collections.reverseOrder());
		
		return cmmntsLst;
	}
	
	
	@RequestMapping(value = "/getAddtionalCustomInvs/{id}/{clientid}/{returntype}/{fromtime}/{totime}", method = RequestMethod.GET)
	public @ResponseBody String getAdditionalCustomInvoices(@PathVariable("id") String id, @PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable("fromtime")String fromtime, @PathVariable("totime")String totime, @RequestParam("booksOrReturns")String booksOrReturns,
			ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getInvoices::";
		logger.debug(CLASSNAME + method + BEGIN);
		String st = request.getParameter("start");
		InvoiceFilter filter = clientService.invoiceFilter(request);

		int start = StringUtils.isEmpty(st) ? 0 : Integer.parseInt(st);
		String len = request.getParameter("length");
		int length = StringUtils.isEmpty(len) ? 10 :  Integer.parseInt(len);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		String sortParam = "dateofinvoice";
		String sortOrder = "asc";
		sortOrder = request.getParameter("order[0][dir]");
		Client client = clientService.findById(clientid);
		String retType = returntype;
		Pageable pageable = null;
		Map<String, Object> invoicesMap = clientService.getCustomInvoices(pageable, client, id, retType, "notreports", fromtime, totime, start, length, searchVal,sortParam, sortOrder,filter, true,booksOrReturns);
		Page<? extends InvoiceParent> invoices = (Page<? extends InvoiceParent>)invoicesMap.get("invoices");
		if(isNotEmpty(invoices)) {
			for(InvoiceParent invoiceParent : invoices) {
				invoiceParent.setUserid(invoiceParent.getId().toString());
			}
		} 
				
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(MapperFeature.USE_ANNOTATIONS);
		ObjectWriter writer=null;
		if(returntype.equals(GSTR1)) {
			FilterProvider filters = new SimpleFilterProvider().addFilter("gstr1Filter", SimpleBeanPropertyFilter.serializeAll());
			writer=mapper.writer(filters);
		} else {
			writer=mapper.writer();
		}
		return writer.writeValueAsString(invoicesMap);
	}
	
	@RequestMapping(value = "/reportsTotalSummary/{returntype}/{clientid}/{month}/{year}")
	public @ResponseBody Map<String,Map<String,String>> getConsolidateReportsTotalAmounts(@PathVariable String returntype, @PathVariable String clientid, @PathVariable int month, 
			@PathVariable int year,HttpServletRequest request){
		final String method = "getConsolidateReportsTotalAmounts::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client=clientService.findById(clientid);	
		InvoiceFilter filter = clientService.invoiceFilter(request);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		return clientService.getConsolidatedSummeryForYearReports(client, returntype, Utility.getYearCode(month, year),false, "invoice report", filter);
	}
	@RequestMapping(value = "/reportsCustomTotalSummary/{returntype}/{clientid}/{fromtime}/{totime}")
	public @ResponseBody Map<String,Map<String,String>> getConsolidateReportsTotalAmountsFromCustom(@PathVariable String returntype, @PathVariable String clientid, @PathVariable String fromtime, 
			@PathVariable String totime,HttpServletRequest request){
		final String method = "getConsolidateReportsTotalAmountsFromCustom::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client=clientService.findById(clientid);	
		InvoiceFilter filter = clientService.invoiceFilter(request);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		return clientService.getConsolidatedSummeryForCustomReports(client, returntype, fromtime, totime,filter);
	}
	@RequestMapping(value = "/getCustomAddtionalInvsSupport/{clientid}/{returntype}/{fromtime}/{totime}", method = RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Map<String, Object> getCustomAdditionalInvoicesSupport(@PathVariable("returntype") String returntype, 
			@PathVariable("clientid") String clientid, @PathVariable String fromtime, @PathVariable String totime,  ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "getCustomAdditionalInvoicesSupport::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		Map<String, Object> invoicesMap = clientService.getCustomInvoicesSupport(client, returntype, "notreports", fromtime, totime);
		return invoicesMap;
	}
	
	@RequestMapping(value = "/mutltimonthReportsTotalSummary/{clientid}/{returntype}/{month}/{year}")
	public @ResponseBody Map<String,Map<String,String>> getConsolidateMultimonthReportsTotalAmounts(@PathVariable String returntype, @PathVariable String clientid, @PathVariable int month, 
			@PathVariable int year,HttpServletRequest request){
		final String method = "getConsolidateMultimonthReportsTotalAmounts::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client=clientService.findById(clientid);
		InvoiceFilter filter =clientService.invoiceFilter(request);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		return clientService.getConsolidatedSummeryForYearReports(client, returntype, Utility.getYearCode(month, year),false, "Multimonth-Reports",filter);
	}
	
	@RequestMapping(value = "/checkgstno", method = RequestMethod.GET)
	public @ResponseBody boolean checkGstnoExists(@RequestParam String id, @RequestParam String gstno) {
		boolean flag = false;
		List<Client> clntLst = clientService.findByUserid(id);
		if(isNotEmpty(clntLst)) {
			for(Client client: clntLst) {
				if(client.getGstnnumber().equalsIgnoreCase(gstno)) {
					flag = true;
					break;
				}
			}
		}		
		return flag;
	}
	
	@RequestMapping(value = "/itcClaimedData/{returntype}/{invoiceid}", method = RequestMethod.GET)
	public @ResponseBody InvoiceItcClaimed getItcClaimedData(@PathVariable String returntype, @PathVariable String invoiceid) {
		final String method = "getItcClaimedData::";
		logger.debug(CLASSNAME + method + BEGIN);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		InvoiceParent invoice = clientService.getInvoice(invoiceid, PURCHASE_REGISTER);
		InvoiceItcClaimed itcClaimed = new InvoiceItcClaimed();
		if(isNotEmpty(invoice.getDateofitcClaimed())) {
			itcClaimed.setDateofitcClaimed(dateFormat.format(invoice.getDateofitcClaimed()));
		}else {
			itcClaimed.setDateofitcClaimed(dateFormat.format(new Date()));			
		}
		if(isNotEmpty(invoice.getDateofitcClaimed())) {
			itcClaimed.setDocId(invoice.getId().toString());
		}
		itcClaimed.setElgpercent(100d);
		if(isNotEmpty(invoice)) {
			for(Item item:invoice.getItems()) {
				if(isNotEmpty(item.getElg())) {
					itcClaimed.setElg(item.getElg());
				}
				if(isNotEmpty(item.getElgpercent())) {
					itcClaimed.setElgpercent(item.getElgpercent());
				}
				break;
			}
		}
		return itcClaimed;
	}
	
	private Map<String, StateConfig> getStatesTinMap(){
		Map<String, StateConfig> statesMap = new HashMap<String, StateConfig>();
		List<StateConfig> states = configService.getStates();
		for (StateConfig state : states) {
			String name = state.getName();
			String[] nm = name.split("-");
			statesMap.put(nm[0].replaceAll("\\s", "").toLowerCase(), state);
		}
		return statesMap;
	}
	
	@RequestMapping(value = "/addecominvoice/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String addEcommerceInvoice(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addEcommerceInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		String retPeriod = (month < 10 ? "0" + month : month + "") + year;
		User user = userService.findById(id);
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
						model.addAttribute("companyUser", companyUser);
					}
				}
				if(isNotEmpty(companyUser) && isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		model.addAttribute("returntype", MasterGSTConstants.GSTR8);

		Client client = clientService.findById(clientid);
		
		ClientStatus clientStatus = clientService.getClientStatus(clientid, MasterGSTConstants.GSTR8, retPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		GSTR8 gstr8 = newclientService.getGstr8(clientid, retPeriod);
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			if(usrid.equals(user.getParentid())){
				User usr = userRepository.findById(userid);
				String errormsg = "";
				if(isNotEmpty(usr)) {
					errormsg = primaryHolderMessage(client,usr);
				}else {
					errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
				}
				model.addAttribute("error", errormsg);
			} else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		}else {
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				model.addAttribute("error", "Unauthorized User!");
			}
		}

		model.addAttribute("client", client);
		model.addAttribute("gstr8Inv", gstr8);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/add_gstr8_invoice";
	}
	
	@RequestMapping(value = "/saveecominvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String addEcomInvoice(@ModelAttribute("invoice") GSTR8 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addEcomInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);

		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		invoice.setFp(returnPeriod);
		invoice = newclientService.saveEcomInvoice(invoice, returntype);
		
		logger.debug(CLASSNAME + method + END);
		return "redirect:/addecominvoice/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/" + invoice.getClientid() + "/" + month + "/" + year;
	}
	
	@RequestMapping(value = "/saveecomainvoice/{returntype}/{usertype}/{month}/{year}", method = RequestMethod.POST)
	public @ResponseBody String addEcomAInvoice(@ModelAttribute("invoice") GSTR8 invoice,
			@PathVariable("returntype") String returntype, @PathVariable("usertype") String usertype,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "addEcomAInvoice::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "invoice\t" + invoice);
		logger.debug(CLASSNAME + method + "id\t" + invoice.getUserid());
		logger.debug(CLASSNAME + method + "fullname\t" + invoice.getFullname());
		logger.debug(CLASSNAME + method + "clientid\t" + invoice.getClientid());
		updateModel(model, invoice.getUserid(), invoice.getFullname(), usertype, month, year);

		Client client = clientService.findById(invoice.getClientid());
		model.addAttribute("client", client);
		model.addAttribute("returntype", returntype);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		invoice.setFp(returnPeriod);
		invoice = newclientService.saveEcomAInvoice(invoice, returntype);
		
		logger.debug(CLASSNAME + method + END);
		return "redirect:/addecominvoice/" + invoice.getUserid() + "/" + invoice.getFullname() + "/" + usertype + "/" + invoice.getClientid() + "/" + month + "/" + year;
	}
	

	@RequestMapping(value = "/syncgstr8/{id}/{name}/{usertype}/{clientid}/{returntype}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody String syncGstr8Data(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("returntype") String returntype, @PathVariable("month") int month, 
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request) throws Exception {
		final String method = "syncGStr8Data::";
		logger.debug(CLASSNAME + method + BEGIN);
		String strMonth = month < 10 ? "0" + month : month + "";
		String returnPeriod = strMonth + year;
		String rType = returntype;
		Client client = clientService.findById(clientid);
		ClientStatus clientStatus = clientService.getClientStatus(clientid, returntype, returnPeriod);
		if (isNotEmpty(clientStatus)) {
			client.setStatus(clientStatus.getStatus());
		}
		//String tokenError = (String) request.getSession().getAttribute("tokenError");
		User user = userService.findById(id);
		
		String usrid = id;
		if(NullUtil.isNotEmpty(user) && NullUtil.isNotEmpty(user.getParentid())){
			CompanyUser companyUser = profileService.getCompanyUser(user.getEmail());
			if(isNotEmpty(companyUser)) {
				if(isNotEmpty(companyUser.getCompany())){
					if(companyUser.getCompany().contains(clientid)){
						usrid = user.getParentid();
					}
				}
				if(isNotEmpty(companyUser.getAddclient())) {
					model.addAttribute("addClient", companyUser.getAddclient());
				}else {
					model.addAttribute("addClient", "true");
				}
			}else {
				model.addAttribute("addClient", "true");
			}
		}else {
			model.addAttribute("addClient", "true");
		}
		String userid = userid(id,clientid);
		if (!subscriptionService.allowUploadInvoices(userid, 1l)) {
			User usr = userRepository.findById(userid);
			String errormsg = "";
			if(isNotEmpty(usr)) {
				errormsg = primaryHolderMessage(client,usr);
			}else {
				errormsg = "Your Admin user subscription has expired. Please Contact your Admin User to proceed further!";
			}
			  
			if(usrid.equals(user.getParentid())){
				model.addAttribute("error", errormsg);
			}else{
				model.addAttribute("error", "Your subscription has expired. Kindly subscribe to proceed further!");
			}
		} else { 
			String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
			if(otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
				newclientService.syncEcomInvoices(client, userid, returntype, month, year);
			}
		}
		updateModel(model, id, fullname, usertype, month, year);
		return "client/all_invoice_view";
	}
	@RequestMapping(value = "/saveInvConfiurations/{clientid}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public @ResponseBody void saveInvConfiurations(@RequestBody MultiValueMap<String, String> formData,
			@PathVariable("clientid") String clientid) {
		final String method = "saveInvConfiurations::";
		logger.debug(CLASSNAME + method + BEGIN);
		Client client = clientService.findById(clientid);
		 String d=formData.getFirst("allowDiscount"); 
		 String pd=formData.getFirst("allowPurDiscount"); 
		 String ed=formData.getFirst("allowEinvDiscount"); 
		 String sc=formData.getFirst("allowSalesCess"); 
		 String pc=formData.getFirst("allowPurCess"); 
		 String ec=formData.getFirst("allowEinvoiceCess"); 
		 String e=formData.getFirst("allowExempted");
		 String ledger=formData.getFirst("allowLedgerName");
		 String pledger=formData.getFirst("allowPurLedgerName");
		if("true".equals(d)) { 
			client.setAllowDiscount(true);
		  }else {
			 client.setAllowDiscount(false);
		  }
		if("true".equals(pd)) { 
			client.setAllowPurDiscount(true);
		  }else {
			 client.setAllowPurDiscount(false);
		  }
		if("true".equals(ed)) { 
			client.setAllowEinvDiscount(true);
		  }else {
			 client.setAllowEinvDiscount(false);
		  }
		  if("true".equals(sc)) { 
			client.setAllowSalesCess(true);
		  }else {
			 client.setAllowSalesCess(false);
		  }
		  if("true".equals(pc)) { 
			client.setAllowPurCess(true);
		  }else {
			 client.setAllowPurCess(false);
		  }
		  if("true".equals(ec)) { 
			client.setAllowEinvoiceCess(true);
		  }else {
			client.setAllowEinvoiceCess(false);
		  }
		  if("true".equals(e)) { 
			  client.setAllowExempted(true);
		  }else {
			  client.setAllowExempted(false);
		  }
		  if("true".equals(ledger)) { 
			  client.setAllowLedgerName(true);
		  }else {
			  client.setAllowLedgerName(false);
		  }
		  if("true".equals(pledger)) { 
			  client.setAllowPurLedgerName(true);
		  }else {
			  client.setAllowPurLedgerName(false);
		  }
		clientService.saveClient(client);
	}
	@RequestMapping(value="/checkHsnOrSac/{invoicetype}/{returntype}",method=RequestMethod.GET)
	public @ResponseBody String checkHsnOrSac(@PathVariable String invoicetype,@PathVariable String returntype,@RequestParam("hsnVal") String hsnVal) {
		if(returntype.equals(MasterGSTConstants.GSTR1) || returntype.equalsIgnoreCase("SalesRegister")) {
				if(isNotEmpty(hsnVal)) {
					boolean hsnExist = clientService.checkHsnOrSac(hsnVal);
					if(hsnExist) {
						return "success";
					}else {
						return "";
					}
				}
		}
		return "";
	}
	
	@RequestMapping(value = "/configureTerms/{clientid}", method = RequestMethod.POST)
	public @ResponseBody List<PaymentTerms> configureTerms(@RequestBody List<PaymentTerms> terms,@PathVariable("clientid") String clientid) throws Exception {
		final String method = "configureTerms::";
		Client client = clientService.findById(clientid);
		if(isNotEmpty(terms)) {
			client.setPaymentTerms(terms);
		}
		clientService.saveClient(client);
		return client.getPaymentTerms();
	}
	@RequestMapping(value = "/getTerms/{clientid}")
	public @ResponseBody List<PaymentTerms> getTerms(@PathVariable("clientid") String clientid) {
		
		Client client = clientService.findById(clientid);
		if(isNotEmpty(client.getPaymentTerms())) {
			return client.getPaymentTerms();
		}
		return Lists.newArrayList();
	}
	
	@RequestMapping(value = "/gstr1liabilityAutoCal/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public String populate3BAutoCalData(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("month") int month, @PathVariable("year") int year, ModelMap model) throws Exception {
		final String method = "populate3BAutoCalData::";
		logger.debug(CLASSNAME + method + BEGIN);
		logger.debug(CLASSNAME + method + "id\t" + id);
		logger.debug(CLASSNAME + method + "fullname\t" + fullname);
		logger.debug(CLASSNAME + method + "clientid\t" + clientid);
		updateModel(model, id, fullname, usertype, month, year);
		model.addAttribute("returntype", GSTR3B);
		Client client = clientService.findById(clientid);
		GSTR3B gstr3b = clientService.populateGSTR3BLiabilityAutoCalcDetails(client, month, year);
		gstr3b.setFullname(fullname);
		gstr3b.setUserid(id);
		gstr3b.setClientid(clientid);
		gstr3BRepository.save(gstr3b);
		model.addAttribute("client", client);
		model.addAttribute("invoice", gstr3b);
		model.addAttribute("lGSTReturnsSummury", clientService.getGSTReturnsSummary(client, month, year, false));
		String otpcheck = otpExpiryService.otpexpiry(client.getGstname());
		if(!otpcheck.equalsIgnoreCase("OTP_VERIFIED")) {
			model.addAttribute("error", "Unauthorized User!");
		}
		OtherConfigurations configdetails = otherConfigurationRepository.findByClientid(clientid);
		model.addAttribute("configdetails", configdetails);
		PrintConfiguration pconfig = profileService.getPrintConfig(clientid);
		model.addAttribute("pconfig", pconfig);
		logger.debug(CLASSNAME + method + END);
		return "client/add_supplies_invoice";
	}
	
	/**
	 * Supplier Compliance Report. 
	 */
	@RequestMapping(value = "/suppliercompliance_report/{id}/{name}/{usertype}/{clientid}/{month}/{year}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Object> getSupplierFiledStatus(@PathVariable("id") String id, @PathVariable("name") String fullname,
			@PathVariable("usertype") String usertype, @PathVariable("clientid") String clientid,
			@PathVariable("year") int year, ModelMap model, HttpServletRequest request){
		InvoiceFilter filter = new InvoiceFilter();
		filter.setVendor(request.getParameter("vendor"));
		String st = request.getParameter("start");
		int start = StringUtils.isEmpty(st) ? 0 : Integer.parseInt(st);
		String len = request.getParameter("length");
		int length = StringUtils.isEmpty(len) ? 10 :  Integer.parseInt(len);
		String searchVal = request.getParameter("search[value]");
		if(searchVal == null || "".equals(searchVal.trim())){
			searchVal = null;
		}
		Map<String, Object> supplierLst = clientService.getAllSupplierStatusBasedOnClientid(id,clientid, year, start, length, searchVal, filter);
		return supplierLst;
	}
	
	@RequestMapping(value = "/getAddtionalSuppliersSupport/{id}/{clientid}", method = RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Map<String, Object> getAddtionalSuppliersSupport(@PathVariable("id") String id, 
			@PathVariable("clientid") String clientid, HttpServletRequest request) throws Exception {
		final String method = "getAddtionalSuppliersSupport::";
		logger.debug(CLASSNAME + method + BEGIN);
		
		Map<String, Object> suppliersMap = clientService.getSuppliersBillToGstns(clientid);
		return suppliersMap;
	}
	
	
	@RequestMapping(value = "/dwnldxlsyearlyAdminGroupn/{returntype}/{year}/{dwnldtype}", method = RequestMethod.GET)
	public void downloadExcelDataAdminSalesByYearlyn(@PathVariable String returntype,
			 @PathVariable("year") int year, @PathVariable("dwnldtype") String dwnldtype, @RequestParam("clientids")List<String> clientids,HttpServletResponse response, HttpServletRequest request) {
		String booksorReturns = request.getParameter("booksOrReturns");
		List<InvoiceParent> inv = Lists.newArrayList();
		Pageable invPageable = new PageRequest(0, 10000);
		Page<? extends InvoiceParent> invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, 0, year, booksorReturns,clientService.invoiceFilter(request),invPageable);
		inv.addAll(invoices.getContent());
		while(isNotEmpty(invoices) && invoices.hasNext()) {
			invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, 0, year, booksorReturns,clientService.invoiceFilter(request),invoices.nextPageable());
			inv.addAll(invoices.getContent());
		}
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldtype)) {
			invoiceVOList = clientReportsUtil.invoiceListItemwise(inv,returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
			invoiceVOList = clientReportsUtil.getInvoice_Wise_List(inv,returntype);
		}else {
			invoiceVOList= clientReportsUtil.invoiceListItems(inv,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Document Type","Invoice Type","Return Period","Reverse Charge","Reverse Charge No","Transaction Date", "GSTIN","Supplier ID","Supplier Name","Supplier PAN","SupplierTAN","SupplierTANPAN", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Quantity","Rate","Discount","Other Charges","Assessable Amt", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Signed Qr Code","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply", "Branch","Assessable Amt","Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Discount","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Signed Qr Code","Document Date", "Document No","Document Type","Invoice Type","Return Period", "Reverse Charge","GSTIN", "Customer ID","Customer Name","Customer PAN","CustomerTAN","CustomerTANPAN", "Customer LedgerName","CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Qty",
						"Rate","Discount","Exempted", "Other Charges","Assessable value","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate",  "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Status","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN", "Customer ID","Customer Name","Customer PAN","CustomerTAN","CustomerTANPAN", "Customer LedgerName", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_" + returntype + "_" + year + ".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge,revChargeNo,transactionDate, customerGSTIN,customerID,customerName,customerPAN,customerTAN,customerTANPAN,companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,itemExmepted, othrCharges,assAmt,taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess,cessRate, cessAmount,cessnonAdvol, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_" + returntype + "_" + year + ".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+year+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge,revChargeNo,transactionDate, customerGSTIN,customerID,customerName,customerPAN,customerTAN,customerTANPAN,companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,itemExmepted, othrCharges,assAmt,taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess,cessRate, cessAmount,cessnonAdvol, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping(value = "/dwnldxlsGSTR1yearlyAdminGroupn/{returntype}/{year}/{dwnldtype}", method = RequestMethod.GET)
	public void downloadGSTR1ExcelDataAdminSalesByYearlyn(@PathVariable String returntype, @PathVariable("year") int year,	@PathVariable("dwnldtype") String dwnldtype,@RequestParam("clientids")List<String> clientids, HttpServletResponse response, HttpServletRequest request) {
		String booksorReturns = request.getParameter("booksOrReturns");
		List<InvoiceParent> inv = Lists.newArrayList();
		Pageable invPageable = new PageRequest(0, 10000);
		Page<? extends InvoiceParent> invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, 0, year, booksorReturns,clientService.invoiceFilter(request),invPageable);
		inv.addAll(invoices.getContent());
		while(isNotEmpty(invoices) && invoices.hasNext()) {
			invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, 0, year, booksorReturns,clientService.invoiceFilter(request),invoices.nextPageable());
			inv.addAll(invoices.getContent());
		}
		if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldtype)) {
			invoiceVOList = clientReportsUtil.invoiceListItemwise(inv, returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
			invoiceVOList = clientReportsUtil.getInvoice_Wise_List(inv,returntype);
		}else {
			invoiceVOList= clientReportsUtil.invoiceListItems(inv,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State", "Branch","Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Document Type","Invoice Type", "State", "Branch","Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Document Type","Invoice Type","Return Period", "Reverse Charge","GSTIN", "SupplierID","Supplier Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else if(returntype.equals(GSTR2)){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name","CompanyGSTIN","CompanySateName","Counter Party Filing Status","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name", "CompanyGSTIN","CompanySateName","Counter Party Filing Status", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Type","Return Period", "Reverse Charge","GSTIN", "Place Of Supply", "SupplierID","Supplier Name", "CompanyStateName","Counter Party Filing Status", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate",  "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply","Branch", "Taxable Value", "IGST Amount","CGST Amount", "SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Status","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN","CustomerID", "Customer Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_" + returntype + "_" + year + ".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(GSTR2)){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,type,returnPeriod,recharge, customerGSTIN,placeOfSupply,customerID,customerName, companyStatename,counterFilingStatus,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_" + returntype + "_" + year + ".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+year+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(GSTR2)){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,type,returnPeriod,recharge, customerGSTIN,placeOfSupply,customerID,customerName, companyStatename,counterFilingStatus,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping(value = "/dwnldxlsmonthlyAdminGroupn/{returntype}/{month}/{year}/{dwnldtype}", method = RequestMethod.GET)
	public void downloadExcelDataAdminSalesMonthlyn(@PathVariable String returntype,
			@PathVariable("month") int month, @PathVariable("dwnldtype") String dwnldtype,@PathVariable("year") int year, @RequestParam("clientids")List<String> clientids, HttpServletResponse response, HttpServletRequest request) {
		if(returntype.equalsIgnoreCase("GSTR2")) {
			returntype = MasterGSTConstants.PURCHASE_REGISTER;
		}
		String booksorReturns = request.getParameter("booksOrReturns");
		List<InvoiceParent> inv = Lists.newArrayList();
		Pageable invPageable = new PageRequest(0, 10000);
		Page<? extends InvoiceParent> invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, month, year, booksorReturns,clientService.invoiceFilter(request),invPageable);
		inv.addAll(invoices.getContent());
		while(isNotEmpty(invoices) && invoices.hasNext()) {
			invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, 0, year, booksorReturns,clientService.invoiceFilter(request),invoices.nextPageable());
			inv.addAll(invoices.getContent());
		}
		if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldtype)) {
			invoiceVOList = clientReportsUtil.invoiceListItemwise(inv, returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
			invoiceVOList = clientReportsUtil.getInvoice_Wise_List(inv,returntype);
		}else {
			invoiceVOList= clientReportsUtil.invoiceListItems(inv,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Document Type","Invoice Type","Return Period", "Reverse Charge","GSTIN","SupplierID", "Supplier Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else if(returntype.equals(GSTR2)){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name","CompanyGSTIN","CompanySateName","Counter Party Filing Status","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name", "CompanyGSTIN","CompanySateName","Counter Party Filing Status", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Type","Return Period", "Reverse Charge","GSTIN", "Place Of Supply","SupplierID", "Supplier Name", "CompanyStateName","Counter Party Filing Status", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate",  "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply","Branch", "Taxable Value", "IGST Amount","CGST Amount", "SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Status","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN","CustomerId", "Customer Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_" + returntype + "_" + month+year + ".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totalinItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(GSTR2)){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,type,returnPeriod,recharge, customerGSTIN,placeOfSupply,customerID,customerName, companyStatename,counterFilingStatus,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_" + returntype + "_" + month+year + ".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+month+year+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totalinItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(GSTR2)){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,type,returnPeriod,recharge, customerGSTIN,placeOfSupply,customerID,customerName, companyStatename,counterFilingStatus,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	
	@RequestMapping(value = "/dwnldxlsgstr1monthlyAdminGroupn/{returntype}/{month}/{year}/{dwnldtype}", method = RequestMethod.GET)
	public void downloadGSTR1ExcelDataAdminSalesMonthlyn(@PathVariable String returntype,
			@PathVariable("month") int month,@PathVariable("dwnldtype") String dwnldtype,@PathVariable("year") int year,@RequestParam("clientids")List<String> clientids, HttpServletResponse response, HttpServletRequest request) {
		
		String booksorReturns = request.getParameter("booksOrReturns");
		List<InvoiceParent> inv = Lists.newArrayList();
		Pageable invPageable = new PageRequest(0, 10000);
		Page<? extends InvoiceParent> invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, month, year, booksorReturns,clientService.invoiceFilter(request),invPageable);
		inv.addAll(invoices.getContent());
		while(isNotEmpty(invoices) && invoices.hasNext()) {
			invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, 0, year, booksorReturns,clientService.invoiceFilter(request),invoices.nextPageable());
			inv.addAll(invoices.getContent());
		}
		if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldtype)) {
			invoiceVOList = clientReportsUtil.invoiceListItemwise(inv, returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
			invoiceVOList = clientReportsUtil.getInvoice_Wise_List(inv,returntype);
		}else {
			invoiceVOList= clientReportsUtil.invoiceListItems(inv,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",	"SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN","SupplierID", "Supplier Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else if(returntype.equals(GSTR2)){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name", "CompanyGSTIN","CompanyStateName","Counter Party Filing Status", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name","CompanyGSTIN","CompanyStateName","Counter Party Filing Status", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Type","Return Period","Reverse Charge", "GSTIN", "Place Of Supply","SupplierID", "Supplier Name", "CompanyStateName","Counter Party Filing Status", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "Invoice Status","GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "Invoice Status", "GSTIN", "Customer Name", "CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply","Branch", "Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No", "Invoice Status","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN","CustomerID", "Customer Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}
		
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_" + returntype + "_" + month+year + ".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(GSTR2)){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN, companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,type,returnPeriod,recharge, customerGSTIN,placeOfSupply,customerID,customerName, companyStatename,counterFilingStatus,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, gstStatus,customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, gstStatus,customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_" + returntype + "_" + month+year + ".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+month+year+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(GSTR2)){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN, companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,type,returnPeriod,recharge, customerGSTIN,placeOfSupply,customerID,customerName, companyStatename,counterFilingStatus,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, gstStatus,customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, gstStatus,customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	
	@RequestMapping(value = "/dwnldxlscustomAdminGroupn/{returntype}/{fromtime}/{totime}/{dwnldtype}", method = RequestMethod.GET)
	public void downloadExcelDataAdminSalesByCustomn(@PathVariable String returntype,
		    @PathVariable("fromtime") String fromtime, @PathVariable("dwnldtype") String dwnldtype, @PathVariable("totime") String totime,@RequestParam("clientids")List<String> clientids, HttpServletResponse response, HttpServletRequest request) {
		String booksorReturns = request.getParameter("booksOrReturns");
		List<InvoiceParent> inv = Lists.newArrayList();
		Pageable invPageable = new PageRequest(0, 10000);
		Page<? extends InvoiceParent> invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, fromtime, totime, booksorReturns,clientService.invoiceFilter(request),invPageable);
		inv.addAll(invoices.getContent());
		while(isNotEmpty(invoices) && invoices.hasNext()) {
			invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, fromtime, totime, booksorReturns,clientService.invoiceFilter(request),invoices.nextPageable());
			inv.addAll(invoices.getContent());
		}
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldtype)) {
			invoiceVOList = clientReportsUtil.invoiceListItemwise(inv, returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
			invoiceVOList = clientReportsUtil.getInvoice_Wise_List(inv,returntype);
		}else {
			invoiceVOList= clientReportsUtil.invoiceListItems(inv,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount", "ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Document Type","Invoice Type","Return Period","Reverse Charge","Reverse Charge No","Transaction Date", "GSTIN", "Supplier ID","Supplier Name","Supplier PAN","SupplierTAN","SupplierTANPAN","CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Quantity","Rate","Discount","Other Charges","Assessable Amt", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Signer Qr Code","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Branch", "Assessable Amt","Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Discount","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Signer Qr Code","Document Date", "Document No","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN", "Customer ID","Customer Name","Customer PAN","CustomerTAN","CustomerTANPAN","Customer LedgerName", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Qty",
						"Rate","Discount","Exempted", "Other Charges","Assessable value","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "Invoice Status","GSTIN", "Customer Name", "CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name", "CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply","Branch", "Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Status","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN", "Customer ID","Customer Name","Customer PAN","CustomerTAN","CustomerTANPAN","Customer LedgerName", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}
		
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_" + returntype + "_" + fromtime+"_"+totime+".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge,revChargeNo,transactionDate, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,itemExmepted, othrCharges,assAmt,taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess,cessRate, cessAmount,cessnonAdvol, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_" + returntype + "_" + fromtime+"_"+totime+".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+fromtime+"_"+totime+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge,revChargeNo,transactionDate, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN, customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,itemExmepted, othrCharges,assAmt,taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess,cessRate, cessAmount,cessnonAdvol, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID,customerName,customerPAN,customerTAN,customerTANPAN,customerLedgerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping(value = "/dwnldxlsgstr1customAdminGroupn/{returntype}/{fromtime}/{totime}/{dwnldtype}", method = RequestMethod.GET)
	public void downloadGSTR1ExcelDataAdminSalesByCustomn(@PathVariable String returntype,
			@PathVariable("fromtime") String fromtime,@PathVariable("dwnldtype") String dwnldtype, @PathVariable("totime") String totime,@RequestParam("clientids")List<String> clientids, HttpServletResponse response, HttpServletRequest request) {
		String booksorReturns = request.getParameter("booksOrReturns");
		List<InvoiceParent> inv = Lists.newArrayList();
		Pageable invPageable = new PageRequest(0, 10000);
		Page<? extends InvoiceParent> invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, fromtime, totime, booksorReturns,clientService.invoiceFilter(request),invPageable);
		inv.addAll(invoices.getContent());
		while(isNotEmpty(invoices) && invoices.hasNext()) {
			invoices = clientService.getGlobalReportDaoInvoices(clientids, returntype, fromtime, totime, booksorReturns,clientService.invoiceFilter(request),invoices.nextPageable());
			inv.addAll(invoices.getContent());
		}
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldtype)) {
			invoiceVOList = clientReportsUtil.invoiceListItemwise(inv, returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
			invoiceVOList = clientReportsUtil.getInvoice_Wise_List(inv,returntype);
		}else {
			invoiceVOList= clientReportsUtil.invoiceListItems(inv,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount", "ITC Type", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");				
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",	"SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",	"SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
				}
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN","SupplierID", "Supplier Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Original Invoice Number","Original Invoice Date","Eway Bill Number", "Ledger", "State","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value","TDS Amount","Net Receivable(Total Invoice Value - TDS Amount)","customField1","customField2","customField3","customField4");
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldtype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "Invoice Status","GSTIN", "Customer Name", "CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");
			}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
				headers = Arrays.asList("Invoice Date", "Invoice No","Invoice Status", "GSTIN", "Customer Name", "CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value","customField1","customField2","customField3","customField4");										
			}else {
				headers=Arrays.asList("Invoice Date", "Invoice No","Invoice Status","Document Type","Invoice Type","Return Period","Reverse Charge", "GSTIN","CustomerID", "Customer Name", "CompanyStateName", "Ecommerce GSTIN", "Billing Address","Shipment Address",
						"Eway Bill Number", "Ledger", "Place Of Supply","Reverse Charge","Reference", "Branch", "Vertical", "Differential Percentage(0.65)","Add TCS","Section",	"TCS Percentage","Port Code","Shipping Bill No","Shipping Bill Date","Additional Currency Code","Exchange Rate",
						"Bank Name","Account Number","Account Name","Branch Name","IFSC Code","Customer Notes","Terms & Conditions","Item/Product/Service", "ITEM NOTES", "HSN / SAC Code","Unique Quantity Code","Quantity",
						"Rate","Discount","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount","SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value","TCS Amount","Net Receivable(Total Invoice Value + TCS Amount)","Total Currency Value","customField1","customField2","customField3","customField4");
			}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_" + returntype + "_" + fromtime+"_"+totime+".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldtype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",	fos);										
					}else {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_" + returntype + "_" + fromtime+"_"+totime+".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+fromtime+"_"+totime+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}															
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,originalInvoiceNo,originalInvoiceDate,ewayBillNumber,ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,itcType, totalItc,totaltax,totalValue,tcsAmount,tcsNetAmount,customField1,customField2,customField3,customField4",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldtype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldtype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",	fos);										
						}else {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus,docType,type,returnPeriod,recharge, customerGSTIN,customerID, customerName, companyStatename,ecommerceGSTIN,billingAddress,shipingAddress,ewayBillNumber, ledgerName,state,reverseCharge,reference,branch,vertical ,differentialPercentage,addTCS,tcsSection,tcsPercentage,portCode,shipBillNo,shipBillDate,additionalCurrencyCode,exchangeRate,bankName,accountNumber,accountName,branchName,ifsccode,customerNotes,termsAndConditions,itemno,itemNotescomments,hsnCode,uqc,quantity,rateperitem,itemDiscount,itemExmepted, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, totaltax,totalValue,tcsAmount,tcsNetAmount,currencyTotal,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	
	@RequestMapping(value = "/multimonthdwnldxlsyearly/{id}/{clientid}/{returntype}/{year}/{dwnldxlsyearlytype}", method = RequestMethod.GET)
	public void multiMonthDownloadExcelDataByYearly(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, 
			@PathVariable("year") int year,@PathVariable("dwnldxlsyearlytype") String dwnldxlsyearlytype, HttpServletResponse response, HttpServletRequest request) {
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		String customField1 = "CustomField1";
		String customField2 = "CustomField2";
		String customField3 = "CustomField3";
		String customField4 = "CustomField4";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
			
			CustomFields customFields = customFieldsRepository.findByClientid(client.getId().toString());
			if(isNotEmpty(customFields)) {
				if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
					if(isNotEmpty(customFields.getSales())) {
						int i=1;
						for(CustomData customdata : customFields.getSales()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(GSTR2.equals(returntype) || GSTR2A.equals(returntype) || PURCHASE_REGISTER.equals(returntype) || "Unclaimed".equals(returntype)){
					if(isNotEmpty(customFields.getPurchase())) {
						int i=1;
						for(CustomData customdata : customFields.getPurchase()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)){
					if(isNotEmpty(customFields.getEinvoice())) {
						int i=1;
						for(CustomData customdata : customFields.getEinvoice()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if(isNotEmpty(customFields.getEwaybill())) {
						int i=1;
						for(CustomData customdata : customFields.getEwaybill()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}
			}
			
		}
		Page<? extends InvoiceParent> invoices = clientService.getDaoInvoices(client, returntype, 4, year, "Multimonth-Reports", clientService.invoiceFilter(request));
		if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList =null;
		if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
			invoiceVOList = invoiceListItems(invoices,returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
			invoiceVOList = getInvoice_Wise_List(invoices,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);				
			}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge",
						"Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",
						"SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);	
			}
		}else if(returntype.equals(GSTR2)) {
			if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name","CompanyGSTIN","CompanySateName","Counter Party Filing Status", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge",
						"Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value");				
			}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply","Supplier Name","CompanyGSTIN","CompanySateName","Counter Party Filing Status", "OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge",
						"Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",
						"SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value");	
			}
		}else{
				if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
							"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);						
				}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Invoice Type", "State","Branch", "Taxable Value", "IGST Amount","CGST Amount",
							"SGST Amount", "CESS Amount", "Total Tax","Exempted","Total Invoice Value",customField1,customField2,customField3,customField4);
				}
			}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+year+".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);	
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(GSTR2)){
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue",fos);	
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue",fos);
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);					
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo, originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+year+".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+gstnumber+"_"+year+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);	
						}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(GSTR2)){
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue",fos);	
						}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue",fos);
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);					
						}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo, originalInvoiceDate,returnPeriod,recharge, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping(value = "/dwnldxlsyearly/{id}/{clientid}/{returntype}/{year}/{dwnldxlsyearlytype}", method = RequestMethod.GET)
	public void downloadExcelDataByYearly(@PathVariable("id") String id,
			@PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, @PathVariable("year") int year,@PathVariable("dwnldxlsyearlytype") String dwnldxlsyearlytype, HttpServletResponse response, HttpServletRequest request) {
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		String customField1 = "CustomField1";
		String customField2 = "CustomField2";
		String customField3 = "CustomField3";
		String customField4 = "CustomField4";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
			
			CustomFields customFields = customFieldsRepository.findByClientid(client.getId().toString());
			if(isNotEmpty(customFields)) {
				if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
					if(isNotEmpty(customFields.getSales())) {
						int i=1;
						for(CustomData customdata : customFields.getSales()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(GSTR2.equals(returntype) || GSTR2A.equals(returntype) || PURCHASE_REGISTER.equals(returntype) || "Unclaimed".equals(returntype)){
					if(isNotEmpty(customFields.getPurchase())) {
						int i=1;
						for(CustomData customdata : customFields.getPurchase()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)){
					if(isNotEmpty(customFields.getEinvoice())) {
						int i=1;
						for(CustomData customdata : customFields.getEinvoice()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if(isNotEmpty(customFields.getEwaybill())) {
						int i=1;
						for(CustomData customdata : customFields.getEwaybill()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}
			}
			
		}
		InvoiceFilter filter = clientService.invoiceFilter(request);
		Page<? extends InvoiceParent> invoices = clientService.getDaoInvoices(client, returntype, 0, year, "invoice-report", filter);
		if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList =null;
		if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
			invoiceVOList = invoiceListItems(invoices,returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
			invoiceVOList = getInvoice_Wise_List(invoices,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);				
			}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",
						"SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate","Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",
							"SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
				}
			}
		}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
			if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "Return Period",
						"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
						"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);	
			}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "Return Period",
						"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
						"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Invoice Type", "State", "Taxable Value", "IGST Amount","CGST Amount",
						"SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
			}
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Quantity","Rate","Discount","Other Charges","Assessable Amt", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
			}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Branch", "Assessable Amt","Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Discount","Total Invoice Value",customField1,customField2,customField3,customField4);										
			}
		}else{
				if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
							"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);						
				}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Customer Name","CompanyGSTIN","CompanySateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
							"Document Type","Invoice Type", "Place Of Supply","Branch", "Taxable Value", "IGST Amount","CGST Amount",
							"SGST Amount", "CESS Amount", "Total Tax","Exempted","Total Invoice Value",customField1,customField2,customField3,customField4);
				}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+year+".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);	
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",	fos);										
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",	fos);					
					}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo, originalInvoiceDate,returnPeriod,recharge,docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+year+".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+gstnumber+"_"+year+"_"+(c+1)+ ".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);	
						}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}
						}
					}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",	fos);										
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldxlsyearlytype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",	fos);					
						}else if("invoicewise".equalsIgnoreCase(dwnldxlsyearlytype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo, originalInvoiceDate,returnPeriod,recharge,docType,type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping(value = "/dwnldxlscustom/{id}/{clientid}/{returntype}/{fromtime}/{totime}/{dwnldxlscustom}", method = RequestMethod.GET)
	public void downloadExcelDataByCustom(@PathVariable("id") String id, @PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype,@PathVariable("fromtime") String fromtime, @PathVariable("totime") String totime,
			@PathVariable("dwnldxlscustom") String dwnldxlscustom,HttpServletResponse response, HttpServletRequest request) {
		Client client = clientService.findById(clientid);
		String gstnumber = "";
		String customField1 = "CustomField1";
		String customField2 = "CustomField2";
		String customField3 = "CustomField3";
		String customField4 = "CustomField4";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
			CustomFields customFields = customFieldsRepository.findByClientid(client.getId().toString());
			if(isNotEmpty(customFields)) {
				if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
					if(isNotEmpty(customFields.getSales())) {
						int i=1;
						for(CustomData customdata : customFields.getSales()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(GSTR2.equals(returntype) || GSTR2A.equals(returntype) || PURCHASE_REGISTER.equals(returntype) || "Unclaimed".equals(returntype)){
					if(isNotEmpty(customFields.getPurchase())) {
						int i=1;
						for(CustomData customdata : customFields.getPurchase()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)){
					if(isNotEmpty(customFields.getEinvoice())) {
						int i=1;
						for(CustomData customdata : customFields.getEinvoice()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if(isNotEmpty(customFields.getEwaybill())) {
						int i=1;
						for(CustomData customdata : customFields.getEwaybill()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}
			}
			
		}
		Page<? extends InvoiceParent> invoices = clientService.getDaoInvoices(client, returntype, fromtime, totime, clientService.invoiceFilter(request));
		 if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList =null;
		if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
			invoiceVOList = invoiceListItems(invoices,returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
			invoiceVOList = getInvoice_Wise_List(invoices,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);					
			}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName","OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",
						"SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName","OriginalInvNo", "OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
							"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount",
							"SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
				}
			}
		}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
			if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "Return Period",
						"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
						"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);	
			}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "Return Period",
						"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
						"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Invoice Type", "State", "Taxable Value", "IGST Amount","CGST Amount",
						"SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
			}
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Quantity","Rate","Discount","Other Charges","Assessable Amt", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
			}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Branch", "Assessable Amt","Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Discount","Total Invoice Value",customField1,customField2,customField3,customField4);										
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);					
			}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply", "Branch","Taxable Value", "IGST Amount","CGST Amount",
						"SGST Amount", "CESS Amount", "Total Tax","Exempted","Total Invoice Value",customField1,customField2,customField3,customField4);
			}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+fromtime+"_"+totime+".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);	
					}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
						if(returntype.equals(PURCHASE_REGISTER)) {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
					if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",	fos);										
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",	fos);					
					}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo, originalInvoiceDate,returnPeriod,recharge,docType, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+fromtime+"_"+totime+".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+gstnumber+"_"+fromtime+"_"+totime+"_"+(c+1)+".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(GSTR2) || returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);	
						}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
							if(returntype.equals(PURCHASE_REGISTER)) {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, revChargeNo,transactionDate, docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}
						}
					}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
						if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
						if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",	fos);										
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldxlscustom)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",	fos);					
						}else if("invoicewise".equalsIgnoreCase(dwnldxlscustom)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo, originalInvoiceDate,returnPeriod,recharge,docType, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping(value = "/dwnldxls/{id}/{clientid}/{returntype}/{month}/{year}/{dwnldxlstype}", method = RequestMethod.GET)
	public void downloadExcelData(@PathVariable("id") String id, @PathVariable("clientid") String clientid, @PathVariable("returntype") String returntype, @PathVariable("month") int month, @PathVariable("year") int year,
			@PathVariable("dwnldxlstype") String dwnldxlstype, HttpServletResponse response, HttpServletRequest request) {
		Client client = clientService.findById(clientid);
		String invoiceView="Monthly";
		if(isNotEmpty(client) && isNotEmpty(client.getInvoiceViewOption())) {
			if(client.getInvoiceViewOption().equalsIgnoreCase("Yearly")) {
				invoiceView="Yearly";
			}
		}
		String gstnumber = "";
		String customField1 = "CustomField1";
		String customField2 = "CustomField2";
		String customField3 = "CustomField3";
		String customField4 = "CustomField4";
		if(NullUtil.isNotEmpty(client)){
			gstnumber = client.getGstnnumber();
			CustomFields customFields = customFieldsRepository.findByClientid(client.getId().toString());
			if(isNotEmpty(customFields)) {
				if("GSTR1".equals(returntype) || "SalesRegister".equals(returntype)) {
					if(isNotEmpty(customFields.getSales())) {
						int i=1;
						for(CustomData customdata : customFields.getSales()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(GSTR2.equals(returntype) || GSTR2A.equals(returntype) || PURCHASE_REGISTER.equals(returntype) || "Unclaimed".equals(returntype)){
					if(isNotEmpty(customFields.getPurchase())) {
						int i=1;
						for(CustomData customdata : customFields.getPurchase()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)){
					if(isNotEmpty(customFields.getEinvoice())) {
						int i=1;
						for(CustomData customdata : customFields.getEinvoice()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if(isNotEmpty(customFields.getEwaybill())) {
						int i=1;
						for(CustomData customdata : customFields.getEwaybill()){
							if(isNotEmpty(customdata.getCustomFieldName())) {
								if(i == 1) {
									customField1 = customdata.getCustomFieldName();
								}else if(i==2) {
									customField2 = customdata.getCustomFieldName();
								}else if(i==3) {
									customField3 = customdata.getCustomFieldName();
								}else if(i==4) {
									customField4 = customdata.getCustomFieldName();
								}
								i++;
							}
						}
					}
				}
			}
		}
		String reportType = "notreports";
		String booksOrReturn = request.getParameter("booksorReturns");
		InvoiceFilter filter = clientService.invoiceFilter(request);
		if("SalesRegister".equals(booksOrReturn) || "PurchaseRegister".equals(booksOrReturn)) {
			filter.setBooksOrReturns("books");
		}
		boolean flag=false;
		if(isNotEmpty(booksOrReturn)) {
			if(booksOrReturn.equals(MasterGSTConstants.PROFORMAINVOICES) || booksOrReturn.equals(MasterGSTConstants.DELIVERYCHALLANS) || booksOrReturn.equals(MasterGSTConstants.ESTIMATES) || booksOrReturn.equals("SalesRegister") || booksOrReturn.equals(MasterGSTConstants.PURCHASEORDER) || booksOrReturn.equals("PurchaseRegister")){
				if(booksOrReturn.equals(MasterGSTConstants.PROFORMAINVOICES) || booksOrReturn.equals(MasterGSTConstants.DELIVERYCHALLANS) || booksOrReturn.equals(MasterGSTConstants.ESTIMATES) || booksOrReturn.equals("SalesRegister") || booksOrReturn.equals(MasterGSTConstants.PURCHASEORDER) || booksOrReturn.equals("PurchaseRegister")){
					reportType = "reports";
				}
				if(invoiceView.equalsIgnoreCase("Yearly")) {
					month = 0;
					flag= true;
				}
			}
		}
		Page<? extends InvoiceParent> invoices = null;
		if(flag) {
			Map<String, Object> invoicesMap = clientService.getInvoices(null, client, id, returntype, reportType, month, year, 0, 0, null, filter, true, null);
			
			invoices =(Page<? extends InvoiceParent>) invoicesMap.get("invoices");
		}else {
			String rptype = "invoice-report";
			if(isNotEmpty(booksOrReturn) && booksOrReturn.equals("abcd") && returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER)) {
				rptype = "invoice-report";
			}else {
				if((isNotEmpty(booksOrReturn) && booksOrReturn.equals("PurchaseRegister")) || returntype.equalsIgnoreCase(MasterGSTConstants.PURCHASE_REGISTER) || returntype.equalsIgnoreCase("Unclaimed")) {
					OtherConfigurations otherconfig = otherConfigurationRepository.findByClientid(client.getId().toString());
					Boolean billdate = false;
					if(isNotEmpty(otherconfig)){
						billdate = otherconfig.isEnableTransDate();
					}
					if(isEmpty(otherconfig) || !billdate) {
						rptype = "invoice-report";
					} else {
						rptype = "bRreports";
					}
				}
			}
			invoices = clientService.getDaoInvoices(client, returntype, month, year, rptype, filter);
		}
		 if(GSTR2A.equals(returntype)) { returntype = GSTR2; }
		List<InvoiceVO> invoiceVOList=null;
		if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
			invoiceVOList = invoiceListItems(invoices,returntype);
		}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
			invoiceVOList = getInvoice_Wise_List(invoices,returntype);
		}
		List<String> headers = null;
		if(returntype.equals(GSTR2)){
			if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name", "CompanyGSTIN", "CompanyStateName","Counter Party Filing Status", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);				
			}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Place Of Supply", "Supplier Name","CompanyGSTIN","CompanyStateName","Counter Party Filing Status", "OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Branch", "Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);										
			}
		}else if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
			if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name", "CompanyGSTIN", "CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","ITC Type", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);				
			}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
				if(returntype.equals(PURCHASE_REGISTER)) {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
						"Document Type","Invoice Type", "State", "Branch","Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","In Eligible ITC","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
				}else {
					headers = Arrays.asList("Invoice Date", "Invoice No", "GSTIN", "Supplier Name","CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge","Reverse Charge No","Transaction Date",
							"Document Type","Invoice Type", "State", "Branch","Taxable Value", "IGST Amount", "CGST Amount","SGST Amount", "CESS Amount", "ITC Available","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
				}
			}
		}else  if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
			if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "Return Period",
						"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
						"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Invoice Type", "State","Item Name","Item Notes","HSN / SAC Code","Unique Quantity Code","Quantity","Rate", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);	
			}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
				headers = Arrays.asList("Document Date", "Document No", "Eway Bill No","Eway Bill Date","GSTIN", " Name", "CompanyGSTIN", "CompanyStateName", "Return Period",
						"Supply Type","SubSupply Type","Doc Type","From GSTIN","From Trade Name","From Addr1","From Addr2","From Place","From Pincode","From StateCode","To GSTIN","To Trade Name","To Addr1","ToAddr2",
						"To Place","To Pincode","To StateCode","Transporter Id","Transporter Name","Status","Actual Dist","No ValidDays","Valid Upto","Extended Times","rejectStatus","Vehicle Type","Transaction Type","Invoice Type", "State","Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);	
			}
		}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
			if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Bar Code","Quantity","Free Quantity","Rate","Discount","Other Charges","Assessable Amt", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "State Cess","CESS Rate", "CESS Amount","Cess NonAdvol","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
			}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
				headers = Arrays.asList("IRN No","IRN Status","Acknowledge No","Acknowledge Date","IRN Generated Date","Einv Status","Signed Qr Code","Document Date", "Document No","Document Type", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","Return Period","Reverse Charge",
						"Invoice Type", "Place Of Supply","Branch", "Assessable Amt","Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Discount","Total Invoice Value",customField1,customField2,customField3,customField4);										
			}
		}else{
			if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
				headers = Arrays.asList("Invoice Date", "Invoice No", "Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply","Item Name","Item Notes", "HSN / SAC Code","Unique Quantity Code","Quantity","Rate","Exempted", "Taxable Value", "IGST Rate", "IGST Amount", "CGST Rate", "CGST Amount",
						"SGST Rate", "SGST Amount", "CESS Rate", "CESS Amount","Total Tax","Total Invoice Value",customField1,customField2,customField3,customField4);
			}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
				headers = Arrays.asList("Invoice Date", "Invoice No", "Invoice Status", "GSTIN", "Customer Name","CompanyGSTIN","CompanyStateName","OriginalInvNo","OriginalInvDate", "Return Period","Reverse Charge",
						"Document Type","Invoice Type", "Place Of Supply","Branch", "Taxable Value", "IGST Amount","CGST Amount","SGST Amount", "CESS Amount", "Total Tax","Exempted","Total Invoice Value",customField1,customField2,customField3,customField4);										
			}
		}
		if(invoiceVOList.size() < 10000) {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+month+year+".xls";
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);
			File file = new File(fileName);
			FileInputStream in = null;
			OutputStream out = null;
			try {
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				SimpleExporter exporter = new SimpleExporter();
				if(returntype.equals(GSTR2)){
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate, returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
					}
				}else if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate, returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
						if(returntype.equals(PURCHASE_REGISTER)){
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else {
							exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}
				}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,taxableValue,igstAmount,cgstAmount,sgstAmount,cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}
				}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
						exporter.gridExport(headers, invoiceVOList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",fos);										
					}
				}else{
					if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus ,customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
					}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
						exporter.gridExport(headers, invoiceVOList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);										
					}
				}
				in = new FileInputStream(file);
				out = response.getOutputStream();
				byte[] buffer= new byte[8192]; // use bigger if you want
				int length = 0;
				while ((length = in.read(buffer)) > 0){
				     out.write(buffer, 0, length);
				}
				if(isNotEmpty(in)) {
					in.close();
				}
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadExcelData : ERROR", e);
			}finally {
				try {
					file.delete();	
					if (isNotEmpty(out)) {
						out.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else {
			OutputStream nout = null;
			ZipOutputStream zipOutputStream = null;
			try {
				nout = response.getOutputStream();
				String fileName = "MGST_"+returntype+"_"+gstnumber+"_"+month+year+".zip";
				response.setHeader("Content-Disposition", "attachment; filename="+fileName);	
				response.setContentType("application/octet-stream; charset=utf-8");
				zipOutputStream = new ZipOutputStream(nout);
				byte[] buf = new byte[1024];
				int c=0;
				int len = 0;
				double i = ((double)invoiceVOList.size())/60000;
				int j = (int)i;
				if(i-(int)i > 0) {
					j = (int)i+1;
				}
				List<List<InvoiceVO>> lt = Lists.newArrayList();
				int a=0;
				int b = 60000;
				if(invoiceVOList.size() < 60000) {
					b= invoiceVOList.size();
				}
				for(int k = 1; k <= j;k++) {
					lt.add(invoiceVOList.subList(a, b));
					a = b;
					if(k == j-1) {
						b = invoiceVOList.size();
					}else {
						b = b+60000;
					}
				}
				
				for(List<InvoiceVO> InvoicesList: lt) {
					File file1 = new File("MGST_"+returntype+"_"+gstnumber+"_"+month+year+"_"+(c+1)+".xls");
					file1.createNewFile();
					FileOutputStream fos = new FileOutputStream(file1);
					SimpleExporter exporter = new SimpleExporter();
					if(returntype.equals(GSTR2)){
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate, returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN,placeOfSupply,customerName,companyGSTIN,companyStatename,counterFilingStatus,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);															
						}
					}else if(returntype.equals(PURCHASE_REGISTER) || returntype.equals("Unclaimed")){
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate, returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount, itcType, totalItc,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
							if(returntype.equals(PURCHASE_REGISTER)){
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc,totalinItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}else {
								exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, customerGSTIN, customerName,companyGSTIN, companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod, recharge,revChargeNo,transactionDate,docType,type, state,branch, taxableValue, igstAmount, cgstAmount,  sgstAmount,  cessAmount, totalItc, totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
							}
						}
					}else if(returntype.equals(MasterGSTConstants.EWAYBILL)) {
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo, ewayBillNo,ewayBillDate,customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,supplyType,subSupplyType,docType,fromGstin,fromTrdName,fromAddr1,fromAddr2,fromPlace,fromPincode,fromStateCode,toGstin,toTrdName,toAddr1,toAddr2,toPlace,toPincode,toStateCode,transporterId,transporterName,status,actualDist,noValidDays,validUpto,extendedTimes,rejectStatus,vehicleType, transactionType,type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}
					}else if(returntype.equals(MasterGSTConstants.EINVOICE)) {
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,invoiceDate, invoiceNo,docType ,customerGSTIN, customerName, companyGSTIN,companyStatename,returnPeriod,recharge, type, state,itemname,itemNotesComments,hsnCode,uqc,barCode,quantity,freeQty,rateperitem,itemDiscount,othrCharges,assAmt, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, stateCess, cessRate, cessAmount,cessnonAdvol,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
							exporter.gridExport(headers, InvoicesList,"irnNo,irnStatus,ackno,ackdt,irndt,einvstatus,qrcode,invoiceDate, invoiceNo,docType, customerGSTIN, customerName,companyGSTIN,companyStatename, returnPeriod,recharge, type, state,branch,assAmt, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,itemDiscount,totalValue,customField1,customField2,customField3,customField4",fos);										
						}
					}else{
						if("itemwise".equalsIgnoreCase(dwnldxlstype)) {
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus ,customerGSTIN, customerName, companyGSTIN,companyStatename,originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType, type, state,itemname,itemNotesComments,hsnCode,uqc,quantity,rateperitem,exemptedVal, taxableValue, igstRate, igstAmount, cgstRate, cgstAmount, sgstRate, sgstAmount, cessRate, cessAmount,totaltax,totalValue,customField1,customField2,customField3,customField4",fos);
						}else if("invoicewise".equalsIgnoreCase(dwnldxlstype)){
							exporter.gridExport(headers, InvoicesList,"invoiceDate, invoiceNo,gstStatus, customerGSTIN, customerName,companyGSTIN,companyStatename, originalInvoiceNo,originalInvoiceDate,returnPeriod,recharge, docType, type, state,branch, taxableValue,  igstAmount,  cgstAmount,  sgstAmount,  cessAmount,totaltax,exemptedVal,totalValue,customField1,customField2,customField3,customField4",fos);										
						}
					}
					String fname = file1.getName();
					FileInputStream fileInputStream = new FileInputStream(file1);
					zipOutputStream.putNextEntry(new ZipEntry(fname));
					while((len=fileInputStream.read(buf)) >0){
						zipOutputStream.write(buf, 0, len);
					}
					 				//shut down; 
					zipOutputStream.closeEntry();
					if(isNotEmpty(fileInputStream)){
						fileInputStream.close();
					}
					file1.delete();
					c++;
			    }
				
			} catch (IOException e) {
				logger.error(CLASSNAME + "downloadSupplierExcelData : ERROR", e);
			}finally {
				try {
					if (isNotEmpty(zipOutputStream)) {
						zipOutputStream.close();
					}	
					if (isNotEmpty(nout)) {
						nout.close();
					}				
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
